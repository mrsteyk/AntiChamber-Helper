// Antichamber (1.0.7977.0) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x4)
#endif

#include "../SDK.hpp"

namespace SDK
{
//---------------------------------------------------------------------------
//Functions
//---------------------------------------------------------------------------

// Function Engine.Actor.ShouldBeHiddenBySHOW_NavigationNodes
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::ShouldBeHiddenBySHOW_NavigationNodes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ShouldBeHiddenBySHOW_NavigationNodes");

	AActor_ShouldBeHiddenBySHOW_NavigationNodes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.WillOverlap
// ()
// Parameters:
// struct FVector                 PosA                           (Parm)
// struct FVector                 VelA                           (Parm)
// struct FVector                 PosB                           (Parm)
// struct FVector                 VelB                           (Parm)
// float                          StepSize                       (Parm)
// float                          Radius                         (Parm)
// float                          Time                           (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::WillOverlap(const struct FVector& PosA, const struct FVector& VelA, const struct FVector& PosB, const struct FVector& VelB, float StepSize, float Radius, float* Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.WillOverlap");

	AActor_WillOverlap_Params params;
	params.PosA = PosA;
	params.VelA = VelA;
	params.PosB = PosB;
	params.VelB = VelB;
	params.StepSize = StepSize;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Time != nullptr)
		*Time = params.Time;

	return params.ReturnValue;
}


// Function Engine.Actor.GetAvoidanceVector
// ()
// Parameters:
// TArray<class AActor*>          Obstacles                      (Const, Parm, OutParm, NeedCtorLink)
// struct FVector                 GoalLocation                   (Parm)
// float                          CollisionRadius                (Parm)
// float                          MaxSpeed                       (Parm)
// int                            NumSamples                     (OptionalParm, Parm)
// float                          VelocityStepRate               (OptionalParm, Parm)
// float                          MaxTimeTilOverlap              (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AActor::GetAvoidanceVector(const struct FVector& GoalLocation, float CollisionRadius, float MaxSpeed, int NumSamples, float VelocityStepRate, float MaxTimeTilOverlap, TArray<class AActor*>* Obstacles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAvoidanceVector");

	AActor_GetAvoidanceVector_Params params;
	params.GoalLocation = GoalLocation;
	params.CollisionRadius = CollisionRadius;
	params.MaxSpeed = MaxSpeed;
	params.NumSamples = NumSamples;
	params.VelocityStepRate = VelocityStepRate;
	params.MaxTimeTilOverlap = MaxTimeTilOverlap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Obstacles != nullptr)
		*Obstacles = params.Obstacles;

	return params.ReturnValue;
}


// Function Engine.Actor.ReplicationEnded
// ()

void AActor::ReplicationEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReplicationEnded");

	AActor_ReplicationEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PostDemoRewind
// ()

void AActor::PostDemoRewind()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostDemoRewind");

	AActor_PostDemoRewind_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.AnimTreeUpdated
// ()
// Parameters:
// class USkeletalMeshComponent*  SkelMesh                       (Parm, EditInline)

void AActor::AnimTreeUpdated(class USkeletalMeshComponent* SkelMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AnimTreeUpdated");

	AActor_AnimTreeUpdated_Params params;
	params.SkelMesh = SkelMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SupportsKismetModification
// ()
// Parameters:
// class USequenceOp*             AskingOp                       (Parm)
// struct FString                 Reason                         (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::SupportsKismetModification(class USequenceOp* AskingOp, struct FString* Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SupportsKismetModification");

	AActor_SupportsKismetModification_Params params;
	params.AskingOp = AskingOp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Reason != nullptr)
		*Reason = params.Reason;

	return params.ReturnValue;
}


// Function Engine.Actor.TrailsNotifyEnd
// ()
// Parameters:
// class UAnimNotify_Trails*      AnimNotifyData                 (Const, Parm)

void AActor::TrailsNotifyEnd(class UAnimNotify_Trails* AnimNotifyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TrailsNotifyEnd");

	AActor_TrailsNotifyEnd_Params params;
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TrailsNotifyTick
// ()
// Parameters:
// class UAnimNotify_Trails*      AnimNotifyData                 (Const, Parm)

void AActor::TrailsNotifyTick(class UAnimNotify_Trails* AnimNotifyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TrailsNotifyTick");

	AActor_TrailsNotifyTick_Params params;
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TrailsNotify
// ()
// Parameters:
// class UAnimNotify_Trails*      AnimNotifyData                 (Const, Parm)

void AActor::TrailsNotify(class UAnimNotify_Trails* AnimNotifyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TrailsNotify");

	AActor_TrailsNotify_Params params;
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.CreateForceField
// ()
// Parameters:
// class UAnimNotify_ForceField*  AnimNotifyData                 (Const, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::CreateForceField(class UAnimNotify_ForceField* AnimNotifyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CreateForceField");

	AActor_CreateForceField_Params params;
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PlayParticleEffect
// ()
// Parameters:
// class UAnimNotify_PlayParticleEffect* AnimNotifyData                 (Const, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::PlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayParticleEffect");

	AActor_PlayParticleEffect_Params params;
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetAimAdhesionExtent
// ()
// Parameters:
// float                          Width                          (Parm, OutParm)
// float                          Height                         (Parm, OutParm)
// struct FVector                 Center                         (Parm, OutParm)

void AActor::GetAimAdhesionExtent(float* Width, float* Height, struct FVector* Center)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAimAdhesionExtent");

	AActor_GetAimAdhesionExtent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Width != nullptr)
		*Width = params.Width;
	if (Height != nullptr)
		*Height = params.Height;
	if (Center != nullptr)
		*Center = params.Center;
}


// Function Engine.Actor.GetAimFrictionExtent
// ()
// Parameters:
// float                          Width                          (Parm, OutParm)
// float                          Height                         (Parm, OutParm)
// struct FVector                 Center                         (Parm, OutParm)

void AActor::GetAimFrictionExtent(float* Width, float* Height, struct FVector* Center)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAimFrictionExtent");

	AActor_GetAimFrictionExtent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Width != nullptr)
		*Width = params.Width;
	if (Height != nullptr)
		*Height = params.Height;
	if (Center != nullptr)
		*Center = params.Center;
}


// Function Engine.Actor.IsInPersistentLevel
// ()
// Parameters:
// bool                           bIncludeLevelStreamingPersistent (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsInPersistentLevel(bool bIncludeLevelStreamingPersistent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsInPersistentLevel");

	AActor_IsInPersistentLevel_Params params;
	params.bIncludeLevelStreamingPersistent = bIncludeLevelStreamingPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.OnRigidBodySpringOverextension
// ()
// Parameters:
// class URB_BodyInstance*        BodyInstance                   (Parm)

void AActor::OnRigidBodySpringOverextension(class URB_BodyInstance* BodyInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRigidBodySpringOverextension");

	AActor_OnRigidBodySpringOverextension_Params params;
	params.BodyInstance = BodyInstance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetPackageGuid
// ()
// Parameters:
// struct FName                   PackageName                    (Parm)
// struct FGuid                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FGuid AActor::GetPackageGuid(const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetPackageGuid");

	AActor_GetPackageGuid_Params params;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PostInitAnimTree
// ()
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (Parm, EditInline)

void AActor::PostInitAnimTree(class USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostInitAnimTree");

	AActor_PostInitAnimTree_Params params;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.RootMotionExtracted
// ()
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (Parm, EditInline)
// struct FBoneAtom               ExtractedRootMotionDelta       (Parm, OutParm)

void AActor::RootMotionExtracted(class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RootMotionExtracted");

	AActor_RootMotionExtracted_Params params;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ExtractedRootMotionDelta != nullptr)
		*ExtractedRootMotionDelta = params.ExtractedRootMotionDelta;
}


// Function Engine.Actor.RootMotionProcessed
// ()
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (Parm, EditInline)

void AActor::RootMotionProcessed(class USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RootMotionProcessed");

	AActor_RootMotionProcessed_Params params;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.RootMotionModeChanged
// ()
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (Parm, EditInline)

void AActor::RootMotionModeChanged(class USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RootMotionModeChanged");

	AActor_RootMotionModeChanged_Params params;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PostRenderFor
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)
// class UCanvas*                 Canvas                         (Parm)
// struct FVector                 CameraPosition                 (Parm)
// struct FVector                 CameraDir                      (Parm)

void AActor::PostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostRenderFor");

	AActor_PostRenderFor_Params params;
	params.PC = PC;
	params.Canvas = Canvas;
	params.CameraPosition = CameraPosition;
	params.CameraDir = CameraDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.NativePostRenderFor
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)
// class UCanvas*                 Canvas                         (Parm)
// struct FVector                 CameraPosition                 (Parm)
// struct FVector                 CameraDir                      (Parm)

void AActor::NativePostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.NativePostRenderFor");

	AActor_NativePostRenderFor_Params params;
	params.PC = PC;
	params.Canvas = Canvas;
	params.CameraPosition = CameraPosition;
	params.CameraDir = CameraDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetHUDLocation
// ()
// Parameters:
// struct FVector                 NewHUDLocation                 (Parm)

void AActor::SetHUDLocation(const struct FVector& NewHUDLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetHUDLocation");

	AActor_SetHUDLocation_Params params;
	params.NewHUDLocation = NewHUDLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnRanOver
// ()
// Parameters:
// class ASVehicle*               Vehicle                        (Parm)
// class UPrimitiveComponent*     RunOverComponent               (Parm, EditInline)
// int                            WheelIndex                     (Parm)

void AActor::OnRanOver(class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRanOver");

	AActor_OnRanOver_Params params;
	params.Vehicle = Vehicle;
	params.RunOverComponent = RunOverComponent;
	params.WheelIndex = WheelIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.RigidBodyCollision
// ()
// Parameters:
// class UPrimitiveComponent*     HitComponent                   (Parm, EditInline)
// class UPrimitiveComponent*     OtherComponent                 (Parm, EditInline)
// struct FCollisionImpactData    RigidCollisionData             (Const, Parm, OutParm, NeedCtorLink)
// int                            ContactIndex                   (Parm)

void AActor::RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RigidBodyCollision");

	AActor_RigidBodyCollision_Params params;
	params.HitComponent = HitComponent;
	params.OtherComponent = OtherComponent;
	params.ContactIndex = ContactIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RigidCollisionData != nullptr)
		*RigidCollisionData = params.RigidCollisionData;
}


// Function Engine.Actor.InterpolationChanged
// ()
// Parameters:
// class USeqAct_Interp*          InterpAction                   (Parm)

void AActor::InterpolationChanged(class USeqAct_Interp* InterpAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.InterpolationChanged");

	AActor_InterpolationChanged_Params params;
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.InterpolationFinished
// ()
// Parameters:
// class USeqAct_Interp*          InterpAction                   (Parm)

void AActor::InterpolationFinished(class USeqAct_Interp* InterpAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.InterpolationFinished");

	AActor_InterpolationFinished_Params params;
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.InterpolationStarted
// ()
// Parameters:
// class USeqAct_Interp*          InterpAction                   (Parm)
// class UInterpGroupInst*        GroupInst                      (Parm)

void AActor::InterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.InterpolationStarted");

	AActor_InterpolationStarted_Params params;
	params.InterpAction = InterpAction;
	params.GroupInst = GroupInst;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SpawnedByKismet
// ()

void AActor::SpawnedByKismet()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SpawnedByKismet");

	AActor_SpawnedByKismet_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetTargetLocation
// ()
// Parameters:
// class AActor*                  RequestedBy                    (OptionalParm, Parm)
// bool                           bRequestAlternateLoc           (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AActor::GetTargetLocation(class AActor* RequestedBy, bool bRequestAlternateLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTargetLocation");

	AActor_GetTargetLocation_Params params;
	params.RequestedBy = RequestedBy;
	params.bRequestAlternateLoc = bRequestAlternateLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.FindGoodEndView
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)
// struct FRotator                GoodRotation                   (Parm, OutParm)

void AActor::FindGoodEndView(class APlayerController* PC, struct FRotator* GoodRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FindGoodEndView");

	AActor_FindGoodEndView_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (GoodRotation != nullptr)
		*GoodRotation = params.GoodRotation;
}


// Function Engine.Actor.NotifyLocalPlayerTeamReceived
// ()

void AActor::NotifyLocalPlayerTeamReceived()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.NotifyLocalPlayerTeamReceived");

	AActor_NotifyLocalPlayerTeamReceived_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ScriptGetTeamNum
// ()
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char AActor::ScriptGetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ScriptGetTeamNum");

	AActor_ScriptGetTeamNum_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetTeamNum
// ()
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char AActor::GetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTeamNum");

	AActor_GetTeamNum_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PawnBaseDied
// ()

void AActor::PawnBaseDied()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PawnBaseDied");

	AActor_PawnBaseDied_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.IsPlayerOwned
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsPlayerOwned()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsPlayerOwned");

	AActor_IsPlayerOwned_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorEyesViewPoint
// ()
// Parameters:
// struct FVector                 out_Location                   (Parm, OutParm)
// struct FRotator                out_Rotation                   (Parm, OutParm)

void AActor::GetActorEyesViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorEyesViewPoint");

	AActor_GetActorEyesViewPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;
}


// Function Engine.Actor.IsStationary
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsStationary()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsStationary");

	AActor_IsStationary_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorFaceFXAsset
// ()
// Parameters:
// class UFaceFXAsset*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UFaceFXAsset* AActor::GetActorFaceFXAsset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorFaceFXAsset");

	AActor_GetActorFaceFXAsset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.CanActorPlayFaceFXAnim
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::CanActorPlayFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CanActorPlayFaceFXAnim");

	AActor_CanActorPlayFaceFXAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsActorPlayingFaceFXAnim
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsActorPlayingFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsActorPlayingFaceFXAnim");

	AActor_IsActorPlayingFaceFXAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetSkelControlScale
// ()
// Parameters:
// struct FName                   SkelControlName                (Parm)
// float                          Scale                          (Parm)

void AActor::SetSkelControlScale(const struct FName& SkelControlName, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetSkelControlScale");

	AActor_SetSkelControlScale_Params params;
	params.SkelControlName = SkelControlName;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetMorphWeight
// ()
// Parameters:
// struct FName                   MorphNodeName                  (Parm)
// float                          MorphWeight                    (Parm)

void AActor::SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetMorphWeight");

	AActor_SetMorphWeight_Params params;
	params.MorphNodeName = MorphNodeName;
	params.MorphWeight = MorphWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.StopActorFaceFXAnim
// ()

void AActor::StopActorFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.StopActorFaceFXAnim");

	AActor_StopActorFaceFXAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PlayActorFaceFXAnim
// ()
// Parameters:
// class UFaceFXAnimSet*          AnimSet                        (Parm)
// struct FString                 GroupName                      (Parm, NeedCtorLink)
// struct FString                 SeqName                        (Parm, NeedCtorLink)
// class USoundCue*               SoundCueToPlay                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName, class USoundCue* SoundCueToPlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayActorFaceFXAnim");

	AActor_PlayActorFaceFXAnim_Params params;
	params.AnimSet = AnimSet;
	params.GroupName = GroupName;
	params.SeqName = SeqName;
	params.SoundCueToPlay = SoundCueToPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.FinishAnimControl
// ()
// Parameters:
// class UInterpGroup*            InInterpGroup                  (Parm)

void AActor::FinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FinishAnimControl");

	AActor_FinishAnimControl_Params params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetAnimPosition
// ()
// Parameters:
// struct FName                   SlotName                       (Parm)
// int                            ChannelIndex                   (Parm)
// struct FName                   InAnimSeqName                  (Parm)
// float                          InPosition                     (Parm)
// bool                           bFireNotifies                  (Parm)
// bool                           bLooping                       (Parm)
// bool                           bEnableRootMotion              (Parm)

void AActor::SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetAnimPosition");

	AActor_SetAnimPosition_Params params;
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BeginAnimControl
// ()
// Parameters:
// class UInterpGroup*            InInterpGroup                  (Parm)

void AActor::BeginAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BeginAnimControl");

	AActor_BeginAnimControl_Params params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnAnimPlay
// ()
// Parameters:
// class UAnimNodeSequence*       SeqNode                        (Parm)

void AActor::OnAnimPlay(class UAnimNodeSequence* SeqNode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnAnimPlay");

	AActor_OnAnimPlay_Params params;
	params.SeqNode = SeqNode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnAnimEnd
// ()
// Parameters:
// class UAnimNodeSequence*       SeqNode                        (Parm)
// float                          PlayedTime                     (Parm)
// float                          ExcessTime                     (Parm)

void AActor::OnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnAnimEnd");

	AActor_OnAnimEnd_Params params;
	params.SeqNode = SeqNode;
	params.PlayedTime = PlayedTime;
	params.ExcessTime = ExcessTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DoKismetAttachment
// ()
// Parameters:
// class AActor*                  Attachment                     (Parm)
// class USeqAct_AttachToActor*   Action                         (Parm)

void AActor::DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DoKismetAttachment");

	AActor_DoKismetAttachment_Params params;
	params.Attachment = Attachment;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnAttachToActor
// ()
// Parameters:
// class USeqAct_AttachToActor*   Action                         (Parm)

void AActor::OnAttachToActor(class USeqAct_AttachToActor* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnAttachToActor");

	AActor_OnAttachToActor_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnToggleHidden
// ()
// Parameters:
// class USeqAct_ToggleHidden*    Action                         (Parm)

void AActor::OnToggleHidden(class USeqAct_ToggleHidden* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnToggleHidden");

	AActor_OnToggleHidden_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnChangeCollision
// ()
// Parameters:
// class USeqAct_ChangeCollision* Action                         (Parm)

void AActor::OnChangeCollision(class USeqAct_ChangeCollision* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnChangeCollision");

	AActor_OnChangeCollision_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnSetPhysics
// ()
// Parameters:
// class USeqAct_SetPhysics*      Action                         (Parm)

void AActor::OnSetPhysics(class USeqAct_SetPhysics* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnSetPhysics");

	AActor_OnSetPhysics_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnSetBlockRigidBody
// ()
// Parameters:
// class USeqAct_SetBlockRigidBody* Action                         (Parm)

void AActor::OnSetBlockRigidBody(class USeqAct_SetBlockRigidBody* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnSetBlockRigidBody");

	AActor_OnSetBlockRigidBody_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnSetVelocity
// ()
// Parameters:
// class USeqAct_SetVelocity*     Action                         (Parm)

void AActor::OnSetVelocity(class USeqAct_SetVelocity* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnSetVelocity");

	AActor_OnSetVelocity_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnTeleport
// ()
// Parameters:
// class USeqAct_Teleport*        Action                         (Parm)

void AActor::OnTeleport(class USeqAct_Teleport* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnTeleport");

	AActor_OnTeleport_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnModifyHealth
// ()
// Parameters:
// class USeqAct_ModifyHealth*    Action                         (Parm)

void AActor::OnModifyHealth(class USeqAct_ModifyHealth* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnModifyHealth");

	AActor_OnModifyHealth_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PrestreamTextures
// ()
// Parameters:
// float                          Seconds                        (Parm)
// bool                           bEnableStreaming               (Parm)
// int                            CinematicTextureGroups         (OptionalParm, Parm)

void AActor::PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PrestreamTextures");

	AActor_PrestreamTextures_Params params;
	params.Seconds = Seconds;
	params.bEnableStreaming = bEnableStreaming;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ShutDown
// ()

void AActor::ShutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ShutDown");

	AActor_ShutDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetNetUpdateTime
// ()
// Parameters:
// float                          NewUpdateTime                  (Parm)

void AActor::SetNetUpdateTime(float NewUpdateTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetNetUpdateTime");

	AActor_SetNetUpdateTime_Params params;
	params.NewUpdateTime = NewUpdateTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ForceNetRelevant
// ()

void AActor::ForceNetRelevant()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ForceNetRelevant");

	AActor_ForceNetRelevant_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnDestroy
// ()
// Parameters:
// class USeqAct_Destroy*         Action                         (Parm)

void AActor::OnDestroy(class USeqAct_Destroy* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnDestroy");

	AActor_OnDestroy_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ClearLatentAction
// ()
// Parameters:
// class UClass*                  actionClass                    (Parm)
// bool                           bAborted                       (OptionalParm, Parm)
// class USeqAct_Latent*          exceptionAction                (OptionalParm, Parm)

void AActor::ClearLatentAction(class UClass* actionClass, bool bAborted, class USeqAct_Latent* exceptionAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ClearLatentAction");

	AActor_ClearLatentAction_Params params;
	params.actionClass = actionClass;
	params.bAborted = bAborted;
	params.exceptionAction = exceptionAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FindEventsOfClass
// ()
// Parameters:
// class UClass*                  EventClass                     (Parm)
// TArray<class USequenceEvent*>  out_EventList                  (OptionalParm, Parm, OutParm, NeedCtorLink)
// bool                           bIncludeDisabled               (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::FindEventsOfClass(class UClass* EventClass, bool bIncludeDisabled, TArray<class USequenceEvent*>* out_EventList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FindEventsOfClass");

	AActor_FindEventsOfClass_Params params;
	params.EventClass = EventClass;
	params.bIncludeDisabled = bIncludeDisabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_EventList != nullptr)
		*out_EventList = params.out_EventList;

	return params.ReturnValue;
}


// Function Engine.Actor.ActivateEventClass
// ()
// Parameters:
// class UClass*                  InClass                        (Parm)
// class AActor*                  InInstigator                   (Parm)
// TArray<class USequenceEvent*>  EventList                      (Const, Parm, OutParm, NeedCtorLink)
// TArray<int>                    ActivateIndices                (Const, OptionalParm, Parm, OutParm, NeedCtorLink)
// bool                           bTest                          (OptionalParm, Parm)
// TArray<class USequenceEvent*>  ActivatedEvents                (OptionalParm, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::ActivateEventClass(class UClass* InClass, class AActor* InInstigator, bool bTest, TArray<class USequenceEvent*>* EventList, TArray<int>* ActivateIndices, TArray<class USequenceEvent*>* ActivatedEvents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActivateEventClass");

	AActor_ActivateEventClass_Params params;
	params.InClass = InClass;
	params.InInstigator = InInstigator;
	params.bTest = bTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (EventList != nullptr)
		*EventList = params.EventList;
	if (ActivateIndices != nullptr)
		*ActivateIndices = params.ActivateIndices;
	if (ActivatedEvents != nullptr)
		*ActivatedEvents = params.ActivatedEvents;

	return params.ReturnValue;
}


// Function Engine.Actor.TriggerGlobalEventClass
// ()
// Parameters:
// class UClass*                  InEventClass                   (Parm)
// class AActor*                  InInstigator                   (Parm)
// int                            ActivateIndex                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::TriggerGlobalEventClass(class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TriggerGlobalEventClass");

	AActor_TriggerGlobalEventClass_Params params;
	params.InEventClass = InEventClass;
	params.InInstigator = InInstigator;
	params.ActivateIndex = ActivateIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ReceivedNewEvent
// ()
// Parameters:
// class USequenceEvent*          Evt                            (Parm)

void AActor::ReceivedNewEvent(class USequenceEvent* Evt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceivedNewEvent");

	AActor_ReceivedNewEvent_Params params;
	params.Evt = Evt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TriggerEventClass
// ()
// Parameters:
// class UClass*                  InEventClass                   (Parm)
// class AActor*                  InInstigator                   (Parm)
// int                            ActivateIndex                  (OptionalParm, Parm)
// bool                           bTest                          (OptionalParm, Parm)
// TArray<class USequenceEvent*>  ActivatedEvents                (OptionalParm, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::TriggerEventClass(class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex, bool bTest, TArray<class USequenceEvent*>* ActivatedEvents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TriggerEventClass");

	AActor_TriggerEventClass_Params params;
	params.InEventClass = InEventClass;
	params.InInstigator = InInstigator;
	params.ActivateIndex = ActivateIndex;
	params.bTest = bTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ActivatedEvents != nullptr)
		*ActivatedEvents = params.ActivatedEvents;

	return params.ReturnValue;
}


// Function Engine.Actor.DebugMessagePlayer
// ()
// Parameters:
// struct FString                 msg                            (Parm, CoerceParm, NeedCtorLink)

void AActor::DebugMessagePlayer(const struct FString& msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DebugMessagePlayer");

	AActor_DebugMessagePlayer_Params params;
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.EffectIsRelevant
// ()
// Parameters:
// struct FVector                 SpawnLocation                  (Parm)
// bool                           bForceDedicated                (Parm)
// float                          VisibleCullDistance            (OptionalParm, Parm)
// float                          HiddenCullDistance             (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::EffectIsRelevant(const struct FVector& SpawnLocation, bool bForceDedicated, float VisibleCullDistance, float HiddenCullDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EffectIsRelevant");

	AActor_EffectIsRelevant_Params params;
	params.SpawnLocation = SpawnLocation;
	params.bForceDedicated = bForceDedicated;
	params.VisibleCullDistance = VisibleCullDistance;
	params.HiddenCullDistance = HiddenCullDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ApplyFluidSurfaceImpact
// ()
// Parameters:
// class AFluidSurfaceActor*      Fluid                          (Parm)
// struct FVector                 HitLocation                    (Parm)

void AActor::ApplyFluidSurfaceImpact(class AFluidSurfaceActor* Fluid, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ApplyFluidSurfaceImpact");

	AActor_ApplyFluidSurfaceImpact_Params params;
	params.Fluid = Fluid;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.CanSplash
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::CanSplash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CanSplash");

	AActor_CanSplash_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PlayTeleportEffect
// ()
// Parameters:
// bool                           bOut                           (Parm)
// bool                           bSound                         (Parm)

void AActor::PlayTeleportEffect(bool bOut, bool bSound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayTeleportEffect");

	AActor_PlayTeleportEffect_Params params;
	params.bOut = bOut;
	params.bSound = bSound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.IsInPain
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsInPain()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsInPain");

	AActor_IsInPain_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.Reset
// ()

void AActor::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Reset");

	AActor_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetFaceFXAudioComponent
// ()
// Parameters:
// class UAudioComponent*         ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UAudioComponent* AActor::GetFaceFXAudioComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetFaceFXAudioComponent");

	AActor_GetFaceFXAudioComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ModifyHearSoundComponent
// ()
// Parameters:
// class UAudioComponent*         AC                             (Parm, EditInline)

void AActor::ModifyHearSoundComponent(class UAudioComponent* AC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ModifyHearSoundComponent");

	AActor_ModifyHearSoundComponent_Params params;
	params.AC = AC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetPhysicsName
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::GetPhysicsName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetPhysicsName");

	AActor_GetPhysicsName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.DisplayDebug
// ()
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void AActor::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DisplayDebug");

	AActor_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.Actor.GetDebugName
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::GetDebugName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetDebugName");

	AActor_GetDebugName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.MatchStarting
// ()

void AActor::MatchStarting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MatchStarting");

	AActor_MatchStarting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetLocalString
// ()
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::GetLocalString(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetLocalString");

	AActor_GetLocalString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ReplaceText
// ()
// Parameters:
// struct FString                 Text                           (Parm, OutParm, NeedCtorLink)
// struct FString                 Replace                        (Parm, NeedCtorLink)
// struct FString                 With                           (Parm, NeedCtorLink)

void AActor::ReplaceText(const struct FString& Replace, const struct FString& With, struct FString* Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReplaceText");

	AActor_ReplaceText_Params params;
	params.Replace = Replace;
	params.With = With;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Text != nullptr)
		*Text = params.Text;
}


// Function Engine.Actor.GetHumanReadableName
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetHumanReadableName");

	AActor_GetHumanReadableName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetItemName
// ()
// Parameters:
// struct FString                 FullName                       (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::GetItemName(const struct FString& FullName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetItemName");

	AActor_GetItemName_Params params;
	params.FullName = FullName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.CalcCamera
// ()
// Parameters:
// float                          fDeltaTime                     (Parm)
// struct FVector                 out_CamLoc                     (Parm, OutParm)
// struct FRotator                out_CamRot                     (Parm, OutParm)
// float                          out_FOV                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CalcCamera");

	AActor_CalcCamera_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_CamLoc != nullptr)
		*out_CamLoc = params.out_CamLoc;
	if (out_CamRot != nullptr)
		*out_CamRot = params.out_CamRot;
	if (out_FOV != nullptr)
		*out_FOV = params.out_FOV;

	return params.ReturnValue;
}


// Function Engine.Actor.EndViewTarget
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)

void AActor::EndViewTarget(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EndViewTarget");

	AActor_EndViewTarget_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BecomeViewTarget
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)

void AActor::BecomeViewTarget(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BecomeViewTarget");

	AActor_BecomeViewTarget_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.CheckForErrors
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::CheckForErrors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CheckForErrors");

	AActor_CheckForErrors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.DebugFreezeGame
// ()
// Parameters:
// class AActor*                  ActorToLookAt                  (OptionalParm, Parm)

void AActor::DebugFreezeGame(class AActor* ActorToLookAt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DebugFreezeGame");

	AActor_DebugFreezeGame_Params params;
	params.ActorToLookAt = ActorToLookAt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetGravityZ
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AActor::GetGravityZ()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetGravityZ");

	AActor_GetGravityZ_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.CheckHitInfo
// ()
// Parameters:
// struct FTraceHitInfo           HitInfo                        (Parm, OutParm)
// class UPrimitiveComponent*     FallBackComponent              (Parm, EditInline)
// struct FVector                 Dir                            (Parm)
// struct FVector                 out_HitLocation                (Parm, OutParm)

void AActor::CheckHitInfo(class UPrimitiveComponent* FallBackComponent, const struct FVector& Dir, struct FTraceHitInfo* HitInfo, struct FVector* out_HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CheckHitInfo");

	AActor_CheckHitInfo_Params params;
	params.FallBackComponent = FallBackComponent;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;
	if (out_HitLocation != nullptr)
		*out_HitLocation = params.out_HitLocation;
}


// Function Engine.Actor.TakeRadiusDamage
// ()
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// float                          BaseDamage                     (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HurtOrigin                     (Parm)
// bool                           bFullDamage                    (Parm)
// class AActor*                  DamageCauser                   (Parm)
// float                          DamageFalloffExponent          (OptionalParm, Parm)

void AActor::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TakeRadiusDamage");

	AActor_TakeRadiusDamage_Params params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.HealDamage
// ()
// Parameters:
// int                            Amount                         (Parm)
// class AController*             Healer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::HealDamage(int Amount, class AController* Healer, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.HealDamage");

	AActor_HealDamage_Params params;
	params.Amount = Amount;
	params.Healer = Healer;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.TakeDamage
// ()
// Parameters:
// int                            DamageAmount                   (Parm)
// class AController*             EventInstigator                (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)

void AActor::TakeDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TakeDamage");

	AActor_TakeDamage_Params params;
	params.DamageAmount = DamageAmount;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KilledBy
// ()
// Parameters:
// class APawn*                   EventInstigator                (Parm)

void AActor::KilledBy(class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KilledBy");

	AActor_KilledBy_Params params;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.HurtRadius
// ()
// Parameters:
// float                          BaseDamage                     (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HurtOrigin                     (Parm)
// class AActor*                  IgnoredActor                   (OptionalParm, Parm)
// class AController*             InstigatedByController         (OptionalParm, Parm)
// bool                           bDoFullDamage                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::HurtRadius(float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, bool bDoFullDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.HurtRadius");

	AActor_HurtRadius_Params params;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.IgnoredActor = IgnoredActor;
	params.InstigatedByController = InstigatedByController;
	params.bDoFullDamage = bDoFullDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.StopsProjectile
// ()
// Parameters:
// class AProjectile*             P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::StopsProjectile(class AProjectile* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.StopsProjectile");

	AActor_StopsProjectile_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.NotifySkelControlBeyondLimit
// ()
// Parameters:
// class USkelControlLookAt*      LookAt                         (Parm)

void AActor::NotifySkelControlBeyondLimit(class USkelControlLookAt* LookAt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.NotifySkelControlBeyondLimit");

	AActor_NotifySkelControlBeyondLimit_Params params;
	params.LookAt = LookAt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ConstraintBrokenNotify
// ()
// Parameters:
// class AActor*                  ConOwner                       (Parm)
// class URB_ConstraintSetup*     ConSetup                       (Parm)
// class URB_ConstraintInstance*  ConInstance                    (Parm)

void AActor::ConstraintBrokenNotify(class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ConstraintBrokenNotify");

	AActor_ConstraintBrokenNotify_Params params;
	params.ConOwner = ConOwner;
	params.ConSetup = ConSetup;
	params.ConInstance = ConInstance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetInitialState
// ()

void AActor::SetInitialState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetInitialState");

	AActor_SetInitialState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PostBeginPlay
// ()

void AActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostBeginPlay");

	AActor_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BroadcastLocalizedTeamMessage
// ()
// Parameters:
// int                            TeamIndex                      (Parm)
// class UClass*                  InMessageClass                 (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AActor::BroadcastLocalizedTeamMessage(int TeamIndex, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BroadcastLocalizedTeamMessage");

	AActor_BroadcastLocalizedTeamMessage_Params params;
	params.TeamIndex = TeamIndex;
	params.InMessageClass = InMessageClass;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BroadcastLocalizedMessage
// ()
// Parameters:
// class UClass*                  InMessageClass                 (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AActor::BroadcastLocalizedMessage(class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BroadcastLocalizedMessage");

	AActor_BroadcastLocalizedMessage_Params params;
	params.InMessageClass = InMessageClass;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PreBeginPlay
// ()

void AActor::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PreBeginPlay");

	AActor_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetALocalPlayerController
// ()
// Parameters:
// class APlayerController*       ReturnValue                    (Parm, OutParm, ReturnParm)

class APlayerController* AActor::GetALocalPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetALocalPlayerController");

	AActor_GetALocalPlayerController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.LocalPlayerControllers
// ()
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class APlayerController*       PC                             (Parm, OutParm)

void AActor::LocalPlayerControllers(class UClass* BaseClass, class APlayerController** PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.LocalPlayerControllers");

	AActor_LocalPlayerControllers_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PC != nullptr)
		*PC = params.PC;
}


// Function Engine.Actor.AllOwnedComponents
// ()
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class UActorComponent*         OutComponent                   (Parm, OutParm, EditInline)

void AActor::AllOwnedComponents(class UClass* BaseClass, class UActorComponent** OutComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AllOwnedComponents");

	AActor_AllOwnedComponents_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutComponent != nullptr)
		*OutComponent = params.OutComponent;
}


// Function Engine.Actor.ComponentList
// ()
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class UActorComponent*         out_Component                  (Parm, OutParm, EditInline)

void AActor::ComponentList(class UClass* BaseClass, class UActorComponent** out_Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ComponentList");

	AActor_ComponentList_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Component != nullptr)
		*out_Component = params.out_Component;
}


// Function Engine.Actor.OverlappingActors
// ()
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AActor*                  out_Actor                      (Parm, OutParm)
// float                          Radius                         (Parm)
// struct FVector                 Loc                            (OptionalParm, Parm)
// bool                           bIgnoreHidden                  (OptionalParm, Parm)

void AActor::OverlappingActors(class UClass* BaseClass, float Radius, const struct FVector& Loc, bool bIgnoreHidden, class AActor** out_Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OverlappingActors");

	AActor_OverlappingActors_Params params;
	params.BaseClass = BaseClass;
	params.Radius = Radius;
	params.Loc = Loc;
	params.bIgnoreHidden = bIgnoreHidden;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Actor != nullptr)
		*out_Actor = params.out_Actor;
}


// Function Engine.Actor.CollidingActors
// ()
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)
// float                          Radius                         (Parm)
// struct FVector                 Loc                            (OptionalParm, Parm)
// bool                           bUseOverlapCheck               (OptionalParm, Parm)
// class UClass*                  InterfaceClass                 (OptionalParm, Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm, OutParm)

void AActor::CollidingActors(class UClass* BaseClass, float Radius, const struct FVector& Loc, bool bUseOverlapCheck, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CollidingActors");

	AActor_CollidingActors_Params params;
	params.BaseClass = BaseClass;
	params.Radius = Radius;
	params.Loc = Loc;
	params.bUseOverlapCheck = bUseOverlapCheck;
	params.InterfaceClass = InterfaceClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;
}


// Function Engine.Actor.VisibleCollidingActors
// ()
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)
// float                          Radius                         (Parm)
// struct FVector                 Loc                            (OptionalParm, Parm)
// bool                           bIgnoreHidden                  (OptionalParm, Parm)
// struct FVector                 Extent                         (OptionalParm, Parm)
// bool                           bTraceActors                   (OptionalParm, Parm)
// class UClass*                  InterfaceClass                 (OptionalParm, Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm, OutParm)

void AActor::VisibleCollidingActors(class UClass* BaseClass, float Radius, const struct FVector& Loc, bool bIgnoreHidden, const struct FVector& Extent, bool bTraceActors, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.VisibleCollidingActors");

	AActor_VisibleCollidingActors_Params params;
	params.BaseClass = BaseClass;
	params.Radius = Radius;
	params.Loc = Loc;
	params.bIgnoreHidden = bIgnoreHidden;
	params.Extent = Extent;
	params.bTraceActors = bTraceActors;
	params.InterfaceClass = InterfaceClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;
}


// Function Engine.Actor.VisibleActors
// ()
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)
// float                          Radius                         (OptionalParm, Parm)
// struct FVector                 Loc                            (OptionalParm, Parm)

void AActor::VisibleActors(class UClass* BaseClass, float Radius, const struct FVector& Loc, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.VisibleActors");

	AActor_VisibleActors_Params params;
	params.BaseClass = BaseClass;
	params.Radius = Radius;
	params.Loc = Loc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.TraceActors
// ()
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)
// struct FVector                 HitLoc                         (Parm, OutParm)
// struct FVector                 HitNorm                        (Parm, OutParm)
// struct FVector                 End                            (Parm)
// struct FVector                 Start                          (OptionalParm, Parm)
// struct FVector                 Extent                         (OptionalParm, Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm, OutParm)
// int                            ExtraTraceFlags                (OptionalParm, Parm)

void AActor::TraceActors(class UClass* BaseClass, const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, int ExtraTraceFlags, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm, struct FTraceHitInfo* HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TraceActors");

	AActor_TraceActors_Params params;
	params.BaseClass = BaseClass;
	params.End = End;
	params.Start = Start;
	params.Extent = Extent;
	params.ExtraTraceFlags = ExtraTraceFlags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
	if (HitLoc != nullptr)
		*HitLoc = params.HitLoc;
	if (HitNorm != nullptr)
		*HitNorm = params.HitNorm;
	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;
}


// Function Engine.Actor.TouchingActors
// ()
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)

void AActor::TouchingActors(class UClass* BaseClass, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TouchingActors");

	AActor_TouchingActors_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.BasedActors
// ()
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)

void AActor::BasedActors(class UClass* BaseClass, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BasedActors");

	AActor_BasedActors_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.ChildActors
// ()
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)

void AActor::ChildActors(class UClass* BaseClass, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ChildActors");

	AActor_ChildActors_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.DynamicActors
// ()
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)
// class UClass*                  InterfaceClass                 (OptionalParm, Parm)

void AActor::DynamicActors(class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DynamicActors");

	AActor_DynamicActors_Params params;
	params.BaseClass = BaseClass;
	params.InterfaceClass = InterfaceClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.AllActors
// ()
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)
// class UClass*                  InterfaceClass                 (OptionalParm, Parm)

void AActor::AllActors(class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AllActors");

	AActor_AllActors_Params params;
	params.BaseClass = BaseClass;
	params.InterfaceClass = InterfaceClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.GetURLMap
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::GetURLMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetURLMap");

	AActor_GetURLMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PostTeleport
// ()
// Parameters:
// class ATeleporter*             OutTeleporter                  (Parm)

void AActor::PostTeleport(class ATeleporter* OutTeleporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostTeleport");

	AActor_PostTeleport_Params params;
	params.OutTeleporter = OutTeleporter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PreTeleport
// ()
// Parameters:
// class ATeleporter*             InTeleporter                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::PreTeleport(class ATeleporter* InTeleporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PreTeleport");

	AActor_PreTeleport_Params params;
	params.InTeleporter = InTeleporter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetDestination
// ()
// Parameters:
// class AController*             C                              (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AActor::GetDestination(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetDestination");

	AActor_GetDestination_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.CalculateMinSpeedTrajectory
// ()
// Parameters:
// struct FVector                 out_Velocity                   (Parm, OutParm)
// struct FVector                 End                            (Parm)
// struct FVector                 Start                          (Parm)
// float                          MaxTossSpeed                   (Parm)
// float                          MinTossSpeed                   (Parm)
// struct FVector                 CollisionSize                  (OptionalParm, Parm)
// float                          TerminalVelocity               (OptionalParm, Parm)
// float                          GravityZ                       (OptionalParm, Parm)
// bool                           bOnlyTraceUp                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::CalculateMinSpeedTrajectory(const struct FVector& End, const struct FVector& Start, float MaxTossSpeed, float MinTossSpeed, const struct FVector& CollisionSize, float TerminalVelocity, float GravityZ, bool bOnlyTraceUp, struct FVector* out_Velocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CalculateMinSpeedTrajectory");

	AActor_CalculateMinSpeedTrajectory_Params params;
	params.End = End;
	params.Start = Start;
	params.MaxTossSpeed = MaxTossSpeed;
	params.MinTossSpeed = MinTossSpeed;
	params.CollisionSize = CollisionSize;
	params.TerminalVelocity = TerminalVelocity;
	params.GravityZ = GravityZ;
	params.bOnlyTraceUp = bOnlyTraceUp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Velocity != nullptr)
		*out_Velocity = params.out_Velocity;

	return params.ReturnValue;
}


// Function Engine.Actor.SuggestTossVelocity
// ()
// Parameters:
// struct FVector                 TossVelocity                   (Parm, OutParm)
// struct FVector                 Destination                    (Parm)
// struct FVector                 Start                          (Parm)
// float                          TossSpeed                      (Parm)
// float                          BaseTossZ                      (OptionalParm, Parm)
// float                          DesiredZPct                    (OptionalParm, Parm)
// struct FVector                 CollisionSize                  (OptionalParm, Parm)
// float                          TerminalVelocity               (OptionalParm, Parm)
// float                          OverrideGravityZ               (OptionalParm, Parm)
// bool                           bOnlyTraceUp                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::SuggestTossVelocity(const struct FVector& Destination, const struct FVector& Start, float TossSpeed, float BaseTossZ, float DesiredZPct, const struct FVector& CollisionSize, float TerminalVelocity, float OverrideGravityZ, bool bOnlyTraceUp, struct FVector* TossVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SuggestTossVelocity");

	AActor_SuggestTossVelocity_Params params;
	params.Destination = Destination;
	params.Start = Start;
	params.TossSpeed = TossSpeed;
	params.BaseTossZ = BaseTossZ;
	params.DesiredZPct = DesiredZPct;
	params.CollisionSize = CollisionSize;
	params.TerminalVelocity = TerminalVelocity;
	params.OverrideGravityZ = OverrideGravityZ;
	params.bOnlyTraceUp = bOnlyTraceUp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TossVelocity != nullptr)
		*TossVelocity = params.TossVelocity;

	return params.ReturnValue;
}


// Function Engine.Actor.PlayerCanSeeMe
// ()
// Parameters:
// bool                           bForceLOSCheck                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::PlayerCanSeeMe(bool bForceLOSCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayerCanSeeMe");

	AActor_PlayerCanSeeMe_Params params;
	params.bForceLOSCheck = bForceLOSCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.MakeNoise
// ()
// Parameters:
// float                          Loudness                       (Parm)
// struct FName                   NoiseType                      (OptionalParm, Parm)

void AActor::MakeNoise(float Loudness, const struct FName& NoiseType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MakeNoise");

	AActor_MakeNoise_Params params;
	params.Loudness = Loudness;
	params.NoiseType = NoiseType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PlaySound
// ()
// Parameters:
// class USoundCue*               InSoundCue                     (Parm)
// bool                           bNotReplicated                 (OptionalParm, Parm)
// bool                           bNoRepToOwner                  (OptionalParm, Parm)
// bool                           bStopWhenOwnerDestroyed        (OptionalParm, Parm)
// struct FVector                 SoundLocation                  (OptionalParm, Parm)
// bool                           bNoRepToRelevant               (OptionalParm, Parm)

void AActor::PlaySound(class USoundCue* InSoundCue, bool bNotReplicated, bool bNoRepToOwner, bool bStopWhenOwnerDestroyed, const struct FVector& SoundLocation, bool bNoRepToRelevant)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlaySound");

	AActor_PlaySound_Params params;
	params.InSoundCue = InSoundCue;
	params.bNotReplicated = bNotReplicated;
	params.bNoRepToOwner = bNoRepToOwner;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.SoundLocation = SoundLocation;
	params.bNoRepToRelevant = bNoRepToRelevant;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.CreateAudioComponent
// ()
// Parameters:
// class USoundCue*               InSoundCue                     (Parm)
// bool                           bPlay                          (OptionalParm, Parm)
// bool                           bStopWhenOwnerDestroyed        (OptionalParm, Parm)
// bool                           bUseLocation                   (OptionalParm, Parm)
// struct FVector                 SourceLocation                 (OptionalParm, Parm)
// bool                           bAttachToSelf                  (OptionalParm, Parm)
// class UAudioComponent*         ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UAudioComponent* AActor::CreateAudioComponent(class USoundCue* InSoundCue, bool bPlay, bool bStopWhenOwnerDestroyed, bool bUseLocation, const struct FVector& SourceLocation, bool bAttachToSelf)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CreateAudioComponent");

	AActor_CreateAudioComponent_Params params;
	params.InSoundCue = InSoundCue;
	params.bPlay = bPlay;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.bUseLocation = bUseLocation;
	params.SourceLocation = SourceLocation;
	params.bAttachToSelf = bAttachToSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ResetTimerTimeDilation
// ()
// Parameters:
// struct FName                   TimerName                      (Const, Parm)
// class UObject*                 inObj                          (OptionalParm, Parm)

void AActor::ResetTimerTimeDilation(const struct FName& TimerName, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ResetTimerTimeDilation");

	AActor_ResetTimerTimeDilation_Params params;
	params.TimerName = TimerName;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ModifyTimerTimeDilation
// ()
// Parameters:
// struct FName                   TimerName                      (Const, Parm)
// float                          InTimerTimeDilation            (Const, Parm)
// class UObject*                 inObj                          (OptionalParm, Parm)

void AActor::ModifyTimerTimeDilation(const struct FName& TimerName, float InTimerTimeDilation, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ModifyTimerTimeDilation");

	AActor_ModifyTimerTimeDilation_Params params;
	params.TimerName = TimerName;
	params.InTimerTimeDilation = InTimerTimeDilation;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetRemainingTimeForTimer
// ()
// Parameters:
// struct FName                   TimerFuncName                  (OptionalParm, Parm)
// class UObject*                 inObj                          (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AActor::GetRemainingTimeForTimer(const struct FName& TimerFuncName, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetRemainingTimeForTimer");

	AActor_GetRemainingTimeForTimer_Params params;
	params.TimerFuncName = TimerFuncName;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetTimerRate
// ()
// Parameters:
// struct FName                   TimerFuncName                  (OptionalParm, Parm)
// class UObject*                 inObj                          (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AActor::GetTimerRate(const struct FName& TimerFuncName, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTimerRate");

	AActor_GetTimerRate_Params params;
	params.TimerFuncName = TimerFuncName;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetTimerCount
// ()
// Parameters:
// struct FName                   inTimerFunc                    (OptionalParm, Parm)
// class UObject*                 inObj                          (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AActor::GetTimerCount(const struct FName& inTimerFunc, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTimerCount");

	AActor_GetTimerCount_Params params;
	params.inTimerFunc = inTimerFunc;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsTimerActive
// ()
// Parameters:
// struct FName                   inTimerFunc                    (OptionalParm, Parm)
// class UObject*                 inObj                          (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsTimerActive(const struct FName& inTimerFunc, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsTimerActive");

	AActor_IsTimerActive_Params params;
	params.inTimerFunc = inTimerFunc;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PauseTimer
// ()
// Parameters:
// bool                           bPause                         (Parm)
// struct FName                   inTimerFunc                    (OptionalParm, Parm)
// class UObject*                 inObj                          (OptionalParm, Parm)

void AActor::PauseTimer(bool bPause, const struct FName& inTimerFunc, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PauseTimer");

	AActor_PauseTimer_Params params;
	params.bPause = bPause;
	params.inTimerFunc = inTimerFunc;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ClearAllTimers
// ()
// Parameters:
// class UObject*                 inObj                          (OptionalParm, Parm)

void AActor::ClearAllTimers(class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ClearAllTimers");

	AActor_ClearAllTimers_Params params;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ClearTimer
// ()
// Parameters:
// struct FName                   inTimerFunc                    (OptionalParm, Parm)
// class UObject*                 inObj                          (OptionalParm, Parm)

void AActor::ClearTimer(const struct FName& inTimerFunc, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ClearTimer");

	AActor_ClearTimer_Params params;
	params.inTimerFunc = inTimerFunc;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetTimer
// ()
// Parameters:
// float                          InRate                         (Parm)
// bool                           inbLoop                        (OptionalParm, Parm)
// struct FName                   inTimerFunc                    (OptionalParm, Parm)
// class UObject*                 inObj                          (OptionalParm, Parm)

void AActor::SetTimer(float InRate, bool inbLoop, const struct FName& inTimerFunc, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetTimer");

	AActor_SetTimer_Params params;
	params.InRate = InRate;
	params.inbLoop = inbLoop;
	params.inTimerFunc = inTimerFunc;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TornOff
// ()

void AActor::TornOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TornOff");

	AActor_TornOff_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Destroy
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::Destroy()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Destroy");

	AActor_Destroy_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.Spawn
// ()
// Parameters:
// class UClass*                  SpawnClass                     (Parm)
// class AActor*                  SpawnOwner                     (OptionalParm, Parm)
// struct FName                   SpawnTag                       (OptionalParm, Parm)
// struct FVector                 SpawnLocation                  (OptionalParm, Parm)
// struct FRotator                SpawnRotation                  (OptionalParm, Parm)
// class AActor*                  ActorTemplate                  (OptionalParm, Parm)
// bool                           bNoCollisionFail               (OptionalParm, Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm, CoerceParm)

class AActor* AActor::Spawn(class UClass* SpawnClass, class AActor* SpawnOwner, const struct FName& SpawnTag, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class AActor* ActorTemplate, bool bNoCollisionFail)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Spawn");

	AActor_Spawn_Params params;
	params.SpawnClass = SpawnClass;
	params.SpawnOwner = SpawnOwner;
	params.SpawnTag = SpawnTag;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;
	params.ActorTemplate = ActorTemplate;
	params.bNoCollisionFail = bNoCollisionFail;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsBlockedBy
// ()
// Parameters:
// class AActor*                  Other                          (Const, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsBlockedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsBlockedBy");

	AActor_IsBlockedBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetBoundingCylinder
// ()
// Parameters:
// float                          CollisionRadius                (Parm, OutParm)
// float                          CollisionHeight                (Parm, OutParm)

void AActor::GetBoundingCylinder(float* CollisionRadius, float* CollisionHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetBoundingCylinder");

	AActor_GetBoundingCylinder_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CollisionRadius != nullptr)
		*CollisionRadius = params.CollisionRadius;
	if (CollisionHeight != nullptr)
		*CollisionHeight = params.CollisionHeight;
}


// Function Engine.Actor.GetComponentsBoundingBox
// ()
// Parameters:
// struct FBox                    ActorBox                       (Parm, OutParm)

void AActor::GetComponentsBoundingBox(struct FBox* ActorBox)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetComponentsBoundingBox");

	AActor_GetComponentsBoundingBox_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ActorBox != nullptr)
		*ActorBox = params.ActorBox;
}


// Function Engine.Actor.IsOverlapping
// ()
// Parameters:
// class AActor*                  A                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsOverlapping(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsOverlapping");

	AActor_IsOverlapping_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ContainsPoint
// ()
// Parameters:
// struct FVector                 Spot                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::ContainsPoint(const struct FVector& Spot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ContainsPoint");

	AActor_ContainsPoint_Params params;
	params.Spot = Spot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.FindSpot
// ()
// Parameters:
// struct FVector                 BoxExtent                      (Parm)
// struct FVector                 SpotLocation                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::FindSpot(const struct FVector& BoxExtent, struct FVector* SpotLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FindSpot");

	AActor_FindSpot_Params params;
	params.BoxExtent = BoxExtent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SpotLocation != nullptr)
		*SpotLocation = params.SpotLocation;

	return params.ReturnValue;
}


// Function Engine.Actor.TraceAllPhysicsAssetInteractions
// ()
// Parameters:
// class USkeletalMeshComponent*  SkelMeshComp                   (Parm, EditInline)
// struct FVector                 EndTrace                       (Parm)
// struct FVector                 StartTrace                     (Parm)
// TArray<struct FImpactInfo>     out_Hits                       (Parm, OutParm, NeedCtorLink)
// struct FVector                 Extent                         (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::TraceAllPhysicsAssetInteractions(class USkeletalMeshComponent* SkelMeshComp, const struct FVector& EndTrace, const struct FVector& StartTrace, const struct FVector& Extent, TArray<struct FImpactInfo>* out_Hits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TraceAllPhysicsAssetInteractions");

	AActor_TraceAllPhysicsAssetInteractions_Params params;
	params.SkelMeshComp = SkelMeshComp;
	params.EndTrace = EndTrace;
	params.StartTrace = StartTrace;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Hits != nullptr)
		*out_Hits = params.out_Hits;

	return params.ReturnValue;
}


// Function Engine.Actor.FastTrace
// ()
// Parameters:
// struct FVector                 TraceEnd                       (Parm)
// struct FVector                 TraceStart                     (OptionalParm, Parm)
// struct FVector                 BoxExtent                      (OptionalParm, Parm)
// bool                           bTraceBullet                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::FastTrace(const struct FVector& TraceEnd, const struct FVector& TraceStart, const struct FVector& BoxExtent, bool bTraceBullet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FastTrace");

	AActor_FastTrace_Params params;
	params.TraceEnd = TraceEnd;
	params.TraceStart = TraceStart;
	params.BoxExtent = BoxExtent;
	params.bTraceBullet = bTraceBullet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PointCheckComponent
// ()
// Parameters:
// class UPrimitiveComponent*     InComponent                    (Parm, EditInline)
// struct FVector                 PointLocation                  (Parm)
// struct FVector                 PointExtent                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::PointCheckComponent(class UPrimitiveComponent* InComponent, const struct FVector& PointLocation, const struct FVector& PointExtent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PointCheckComponent");

	AActor_PointCheckComponent_Params params;
	params.InComponent = InComponent;
	params.PointLocation = PointLocation;
	params.PointExtent = PointExtent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.TraceComponent
// ()
// Parameters:
// struct FVector                 HitLocation                    (Parm, OutParm)
// struct FVector                 HitNormal                      (Parm, OutParm)
// class UPrimitiveComponent*     InComponent                    (Parm, EditInline)
// struct FVector                 TraceEnd                       (Parm)
// struct FVector                 TraceStart                     (OptionalParm, Parm)
// struct FVector                 Extent                         (OptionalParm, Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm, OutParm)
// bool                           bComplexCollision              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::TraceComponent(class UPrimitiveComponent* InComponent, const struct FVector& TraceEnd, const struct FVector& TraceStart, const struct FVector& Extent, bool bComplexCollision, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TraceComponent");

	AActor_TraceComponent_Params params;
	params.InComponent = InComponent;
	params.TraceEnd = TraceEnd;
	params.TraceStart = TraceStart;
	params.Extent = Extent;
	params.bComplexCollision = bComplexCollision;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;
	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;

	return params.ReturnValue;
}


// Function Engine.Actor.Trace
// ()
// Parameters:
// struct FVector                 HitLocation                    (Parm, OutParm)
// struct FVector                 HitNormal                      (Parm, OutParm)
// struct FVector                 TraceEnd                       (Parm)
// struct FVector                 TraceStart                     (OptionalParm, Parm)
// bool                           bTraceActors                   (OptionalParm, Parm)
// struct FVector                 Extent                         (OptionalParm, Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm, OutParm)
// int                            ExtraTraceFlags                (OptionalParm, Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AActor::Trace(const struct FVector& TraceEnd, const struct FVector& TraceStart, bool bTraceActors, const struct FVector& Extent, int ExtraTraceFlags, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Trace");

	AActor_Trace_Params params;
	params.TraceEnd = TraceEnd;
	params.TraceStart = TraceStart;
	params.bTraceActors = bTraceActors;
	params.Extent = Extent;
	params.ExtraTraceFlags = ExtraTraceFlags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;
	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;

	return params.ReturnValue;
}


// Function Engine.Actor.VolumeBasedDestroy
// ()
// Parameters:
// class APhysicsVolume*          PV                             (Parm)

void AActor::VolumeBasedDestroy(class APhysicsVolume* PV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.VolumeBasedDestroy");

	AActor_VolumeBasedDestroy_Params params;
	params.PV = PV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OutsideWorldBounds
// ()

void AActor::OutsideWorldBounds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OutsideWorldBounds");

	AActor_OutsideWorldBounds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FellOutOfWorld
// ()
// Parameters:
// class UClass*                  dmgType                        (Parm)

void AActor::FellOutOfWorld(class UClass* dmgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FellOutOfWorld");

	AActor_FellOutOfWorld_Params params;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.UsedBy
// ()
// Parameters:
// class APawn*                   User                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::UsedBy(class APawn* User)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UsedBy");

	AActor_UsedBy_Params params;
	params.User = User;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.OverRotated
// ()
// Parameters:
// struct FRotator                out_Desired                    (Parm, OutParm)
// struct FRotator                out_Actual                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::OverRotated(struct FRotator* out_Desired, struct FRotator* out_Actual)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OverRotated");

	AActor_OverRotated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Desired != nullptr)
		*out_Desired = params.out_Desired;
	if (out_Actual != nullptr)
		*out_Actual = params.out_Actual;

	return params.ReturnValue;
}


// Function Engine.Actor.ClampRotation
// ()
// Parameters:
// struct FRotator                out_Rot                        (Parm, OutParm)
// struct FRotator                rBase                          (Parm)
// struct FRotator                rUpperLimits                   (Parm)
// struct FRotator                rLowerLimits                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::ClampRotation(const struct FRotator& rBase, const struct FRotator& rUpperLimits, const struct FRotator& rLowerLimits, struct FRotator* out_Rot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ClampRotation");

	AActor_ClampRotation_Params params;
	params.rBase = rBase;
	params.rUpperLimits = rUpperLimits;
	params.rLowerLimits = rLowerLimits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Rot != nullptr)
		*out_Rot = params.out_Rot;

	return params.ReturnValue;
}


// Function Engine.Actor.OnSleepRBPhysics
// ()

void AActor::OnSleepRBPhysics()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnSleepRBPhysics");

	AActor_OnSleepRBPhysics_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnWakeRBPhysics
// ()

void AActor::OnWakeRBPhysics()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnWakeRBPhysics");

	AActor_OnWakeRBPhysics_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.RanInto
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::RanInto(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RanInto");

	AActor_RanInto_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.EncroachedBy
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::EncroachedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EncroachedBy");

	AActor_EncroachedBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.EncroachingOn
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::EncroachingOn(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EncroachingOn");

	AActor_EncroachingOn_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.CollisionChanged
// ()

void AActor::CollisionChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CollisionChanged");

	AActor_CollisionChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SpecialHandling
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AActor::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SpecialHandling");

	AActor_SpecialHandling_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.Detach
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::Detach(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Detach");

	AActor_Detach_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Attach
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::Attach(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Attach");

	AActor_Attach_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BaseChange
// ()

void AActor::BaseChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BaseChange");

	AActor_BaseChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Bump
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitNormal                      (Parm)

void AActor::Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Bump");

	AActor_Bump_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.UnTouch
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UnTouch");

	AActor_UnTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PostTouch
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::PostTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostTouch");

	AActor_PostTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Touch
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void AActor::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Touch");

	AActor_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PhysicsVolumeChange
// ()
// Parameters:
// class APhysicsVolume*          NewVolume                      (Parm)

void AActor::PhysicsVolumeChange(class APhysicsVolume* NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PhysicsVolumeChange");

	AActor_PhysicsVolumeChange_Params params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Landed
// ()
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  FloorActor                     (Parm)

void AActor::Landed(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Landed");

	AActor_Landed_Params params;
	params.HitNormal = HitNormal;
	params.FloorActor = FloorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Falling
// ()

void AActor::Falling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Falling");

	AActor_Falling_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.HitWall
// ()
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  Wall                           (Parm)
// class UPrimitiveComponent*     WallComp                       (Parm, EditInline)

void AActor::HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.HitWall");

	AActor_HitWall_Params params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;
	params.WallComp = WallComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Timer
// ()

void AActor::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Timer");

	AActor_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Tick
// ()
// Parameters:
// float                          DeltaTime                      (Parm)

void AActor::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Tick");

	AActor_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.LostChild
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::LostChild(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.LostChild");

	AActor_LostChild_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GainedChild
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::GainedChild(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GainedChild");

	AActor_GainedChild_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Destroyed
// ()

void AActor::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Destroyed");

	AActor_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetTickIsDisabled
// ()
// Parameters:
// bool                           bInDisabled                    (Parm)

void AActor::SetTickIsDisabled(bool bInDisabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetTickIsDisabled");

	AActor_SetTickIsDisabled_Params params;
	params.bInDisabled = bInDisabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetTickGroup
// ()
// Parameters:
// TEnumAsByte<ETickingGroup>     NewTickGroup                   (Parm)

void AActor::SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetTickGroup");

	AActor_SetTickGroup_Params params;
	params.NewTickGroup = NewTickGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReattachComponent
// ()
// Parameters:
// class UActorComponent*         ComponentToReattach            (Parm, EditInline)

void AActor::ReattachComponent(class UActorComponent* ComponentToReattach)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReattachComponent");

	AActor_ReattachComponent_Params params;
	params.ComponentToReattach = ComponentToReattach;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DetachComponent
// ()
// Parameters:
// class UActorComponent*         ExComponent                    (Parm, EditInline)

void AActor::DetachComponent(class UActorComponent* ExComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DetachComponent");

	AActor_DetachComponent_Params params;
	params.ExComponent = ExComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.AttachComponent
// ()
// Parameters:
// class UActorComponent*         NewComponent                   (Parm, EditInline)

void AActor::AttachComponent(class UActorComponent* NewComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AttachComponent");

	AActor_AttachComponent_Params params;
	params.NewComponent = NewComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.UnClock
// ()
// Parameters:
// float                          Time                           (Parm, OutParm)

void AActor::UnClock(float* Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UnClock");

	AActor_UnClock_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Time != nullptr)
		*Time = params.Time;
}


// Function Engine.Actor.Clock
// ()
// Parameters:
// float                          Time                           (Parm, OutParm)

void AActor::Clock(float* Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Clock");

	AActor_Clock_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Time != nullptr)
		*Time = params.Time;
}


// Function Engine.Actor.SetPhysics
// ()
// Parameters:
// TEnumAsByte<EPhysics>          newPhysics                     (Parm)

void AActor::SetPhysics(TEnumAsByte<EPhysics> newPhysics)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetPhysics");

	AActor_SetPhysics_Params params;
	params.newPhysics = newPhysics;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetOnlyOwnerSee
// ()
// Parameters:
// bool                           bNewOnlyOwnerSee               (Parm)

void AActor::SetOnlyOwnerSee(bool bNewOnlyOwnerSee)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetOnlyOwnerSee");

	AActor_SetOnlyOwnerSee_Params params;
	params.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetHidden
// ()
// Parameters:
// bool                           bNewHidden                     (Parm)

void AActor::SetHidden(bool bNewHidden)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetHidden");

	AActor_SetHidden_Params params;
	params.bNewHidden = bNewHidden;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ChartData
// ()
// Parameters:
// struct FString                 DataName                       (Parm, NeedCtorLink)
// float                          DataValue                      (Parm)

void AActor::ChartData(const struct FString& DataName, float DataValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ChartData");

	AActor_ChartData_Params params;
	params.DataName = DataName;
	params.DataValue = DataValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FlushDebugStrings
// ()

void AActor::FlushDebugStrings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FlushDebugStrings");

	AActor_FlushDebugStrings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugFrustrum
// ()
// Parameters:
// struct FMatrix                 FrustumToWorld                 (Const, Parm, OutParm)
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)
// bool                           bPersistentLines               (OptionalParm, Parm)

void AActor::DrawDebugFrustrum(unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines, struct FMatrix* FrustumToWorld)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugFrustrum");

	AActor_DrawDebugFrustrum_Params params;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FrustumToWorld != nullptr)
		*FrustumToWorld = params.FrustumToWorld;
}


// Function Engine.Actor.DrawDebugString
// ()
// Parameters:
// struct FVector                 TextLocation                   (Parm)
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)
// class AActor*                  TestBaseActor                  (OptionalParm, Parm)
// struct FColor                  TextColor                      (OptionalParm, Parm)
// float                          Duration                       (OptionalParm, Parm)

void AActor::DrawDebugString(const struct FVector& TextLocation, const struct FString& Text, class AActor* TestBaseActor, const struct FColor& TextColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugString");

	AActor_DrawDebugString_Params params;
	params.TextLocation = TextLocation;
	params.Text = Text;
	params.TestBaseActor = TestBaseActor;
	params.TextColor = TextColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugCone
// ()
// Parameters:
// struct FVector                 Origin                         (Parm)
// struct FVector                 Direction                      (Parm)
// float                          Length                         (Parm)
// float                          AngleWidth                     (Parm)
// float                          AngleHeight                    (Parm)
// int                            NumSides                       (Parm)
// struct FColor                  DrawColor                      (Parm)
// bool                           bPersistentLines               (OptionalParm, Parm)

void AActor::DrawDebugCone(const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FColor& DrawColor, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugCone");

	AActor_DrawDebugCone_Params params;
	params.Origin = Origin;
	params.Direction = Direction;
	params.Length = Length;
	params.AngleWidth = AngleWidth;
	params.AngleHeight = AngleHeight;
	params.NumSides = NumSides;
	params.DrawColor = DrawColor;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugCylinder
// ()
// Parameters:
// struct FVector                 Start                          (Parm)
// struct FVector                 End                            (Parm)
// float                          Radius                         (Parm)
// int                            Segments                       (Parm)
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)
// bool                           bPersistentLines               (OptionalParm, Parm)

void AActor::DrawDebugCylinder(const struct FVector& Start, const struct FVector& End, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugCylinder");

	AActor_DrawDebugCylinder_Params params;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.Segments = Segments;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugSphere
// ()
// Parameters:
// struct FVector                 Center                         (Parm)
// float                          Radius                         (Parm)
// int                            Segments                       (Parm)
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)
// bool                           bPersistentLines               (OptionalParm, Parm)

void AActor::DrawDebugSphere(const struct FVector& Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugSphere");

	AActor_DrawDebugSphere_Params params;
	params.Center = Center;
	params.Radius = Radius;
	params.Segments = Segments;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugCoordinateSystem
// ()
// Parameters:
// struct FVector                 AxisLoc                        (Parm)
// struct FRotator                AxisRot                        (Parm)
// float                          Scale                          (Parm)
// bool                           bPersistentLines               (OptionalParm, Parm)

void AActor::DrawDebugCoordinateSystem(const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugCoordinateSystem");

	AActor_DrawDebugCoordinateSystem_Params params;
	params.AxisLoc = AxisLoc;
	params.AxisRot = AxisRot;
	params.Scale = Scale;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugStar
// ()
// Parameters:
// struct FVector                 Position                       (Parm)
// float                          Size                           (Parm)
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)
// bool                           bPersistentLines               (OptionalParm, Parm)

void AActor::DrawDebugStar(const struct FVector& Position, float Size, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugStar");

	AActor_DrawDebugStar_Params params;
	params.Position = Position;
	params.Size = Size;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugBox
// ()
// Parameters:
// struct FVector                 Center                         (Parm)
// struct FVector                 Extent                         (Parm)
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)
// bool                           bPersistentLines               (OptionalParm, Parm)

void AActor::DrawDebugBox(const struct FVector& Center, const struct FVector& Extent, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugBox");

	AActor_DrawDebugBox_Params params;
	params.Center = Center;
	params.Extent = Extent;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugPoint
// ()
// Parameters:
// struct FVector                 Position                       (Parm)
// float                          Size                           (Parm)
// struct FLinearColor            PointColor                     (Parm)
// bool                           bPersistentLines               (OptionalParm, Parm)

void AActor::DrawDebugPoint(const struct FVector& Position, float Size, const struct FLinearColor& PointColor, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugPoint");

	AActor_DrawDebugPoint_Params params;
	params.Position = Position;
	params.Size = Size;
	params.PointColor = PointColor;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugLine
// ()
// Parameters:
// struct FVector                 LineStart                      (Parm)
// struct FVector                 LineEnd                        (Parm)
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)
// bool                           bPersistentLines               (OptionalParm, Parm)

void AActor::DrawDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugLine");

	AActor_DrawDebugLine_Params params;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FlushPersistentDebugLines
// ()

void AActor::FlushPersistentDebugLines()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FlushPersistentDebugLines");

	AActor_FlushPersistentDebugLines_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetBasedPosition
// ()
// Parameters:
// struct FBasedPosition          BP                             (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AActor::GetBasedPosition(const struct FBasedPosition& BP)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetBasedPosition");

	AActor_GetBasedPosition_Params params;
	params.BP = BP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetBasedPosition
// ()
// Parameters:
// struct FBasedPosition          BP                             (Parm, OutParm)
// struct FVector                 pos                            (Parm)
// class AActor*                  ForcedBase                     (OptionalParm, Parm)

void AActor::SetBasedPosition(const struct FVector& pos, class AActor* ForcedBase, struct FBasedPosition* BP)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetBasedPosition");

	AActor_SetBasedPosition_Params params;
	params.pos = pos;
	params.ForcedBase = ForcedBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (BP != nullptr)
		*BP = params.BP;
}


// Function Engine.Actor.BP2Vect
// ()
// Parameters:
// struct FBasedPosition          BP                             (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AActor::BP2Vect(const struct FBasedPosition& BP)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BP2Vect");

	AActor_BP2Vect_Params params;
	params.BP = BP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.Vect2BP
// ()
// Parameters:
// struct FBasedPosition          BP                             (Parm, OutParm)
// struct FVector                 pos                            (Parm)
// class AActor*                  ForcedBase                     (OptionalParm, Parm)

void AActor::Vect2BP(const struct FVector& pos, class AActor* ForcedBase, struct FBasedPosition* BP)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Vect2BP");

	AActor_Vect2BP_Params params;
	params.pos = pos;
	params.ForcedBase = ForcedBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (BP != nullptr)
		*BP = params.BP;
}


// Function Engine.Actor.SetForcedInitialReplicatedProperty
// ()
// Parameters:
// class UProperty*               PropToReplicate                (Parm)
// bool                           bAdd                           (Parm)

void AActor::SetForcedInitialReplicatedProperty(class UProperty* PropToReplicate, bool bAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetForcedInitialReplicatedProperty");

	AActor_SetForcedInitialReplicatedProperty_Params params;
	params.PropToReplicate = PropToReplicate;
	params.bAdd = bAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void AActor::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReplicatedEvent");

	AActor_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetAggregateBaseVelocity
// ()
// Parameters:
// class AActor*                  TestBase                       (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AActor::GetAggregateBaseVelocity(class AActor* TestBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAggregateBaseVelocity");

	AActor_GetAggregateBaseVelocity_Params params;
	params.TestBase = TestBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsOwnedBy
// ()
// Parameters:
// class AActor*                  TestActor                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsOwnedBy(class AActor* TestActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsOwnedBy");

	AActor_IsOwnedBy_Params params;
	params.TestActor = TestActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetBaseMost
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AActor::GetBaseMost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetBaseMost");

	AActor_GetBaseMost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsBasedOn
// ()
// Parameters:
// class AActor*                  TestActor                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsBasedOn(class AActor* TestActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsBasedOn");

	AActor_IsBasedOn_Params params;
	params.TestActor = TestActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.FindBase
// ()

void AActor::FindBase()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FindBase");

	AActor_FindBase_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetOwner
// ()
// Parameters:
// class AActor*                  NewOwner                       (Parm)

void AActor::SetOwner(class AActor* NewOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetOwner");

	AActor_SetOwner_Params params;
	params.NewOwner = NewOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetBase
// ()
// Parameters:
// class AActor*                  NewBase                        (Parm)
// struct FVector                 NewFloor                       (OptionalParm, Parm)
// class USkeletalMeshComponent*  SkelComp                       (OptionalParm, Parm, EditInline)
// struct FName                   AttachName                     (OptionalParm, Parm)

void AActor::SetBase(class AActor* NewBase, const struct FVector& NewFloor, class USkeletalMeshComponent* SkelComp, const struct FName& AttachName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetBase");

	AActor_SetBase_Params params;
	params.NewBase = NewBase;
	params.NewFloor = NewFloor;
	params.SkelComp = SkelComp;
	params.AttachName = AttachName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetTerminalVelocity
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AActor::GetTerminalVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTerminalVelocity");

	AActor_GetTerminalVelocity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.AutonomousPhysics
// ()
// Parameters:
// float                          DeltaSeconds                   (Parm)

void AActor::AutonomousPhysics(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AutonomousPhysics");

	AActor_AutonomousPhysics_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MoveSmooth
// ()
// Parameters:
// struct FVector                 Delta                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::MoveSmooth(const struct FVector& Delta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MoveSmooth");

	AActor_MoveSmooth_Params params;
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.fixedTurn
// ()
// Parameters:
// int                            Current                        (Parm)
// int                            Desired                        (Parm)
// int                            DeltaRate                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AActor::fixedTurn(int Current, int Desired, int DeltaRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.fixedTurn");

	AActor_fixedTurn_Params params;
	params.Current = Current;
	params.Desired = Desired;
	params.DeltaRate = DeltaRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetHardAttach
// ()
// Parameters:
// bool                           bNewHardAttach                 (OptionalParm, Parm)

void AActor::SetHardAttach(bool bNewHardAttach)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetHardAttach");

	AActor_SetHardAttach_Params params;
	params.bNewHardAttach = bNewHardAttach;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetRelativeLocation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::SetRelativeLocation(const struct FVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetRelativeLocation");

	AActor_SetRelativeLocation_Params params;
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetRelativeRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::SetRelativeRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetRelativeRotation");

	AActor_SetRelativeRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetZone
// ()
// Parameters:
// bool                           bForceRefresh                  (Parm)

void AActor::SetZone(bool bForceRefresh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetZone");

	AActor_SetZone_Params params;
	params.bForceRefresh = bForceRefresh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MovingWhichWay
// ()
// Parameters:
// float                          Amount                         (Parm, OutParm)
// TEnumAsByte<EMoveDir>          ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EMoveDir> AActor::MovingWhichWay(float* Amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MovingWhichWay");

	AActor_MovingWhichWay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Amount != nullptr)
		*Amount = params.Amount;

	return params.ReturnValue;
}


// Function Engine.Actor.SetRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::SetRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetRotation");

	AActor_SetRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetLocation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::SetLocation(const struct FVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetLocation");

	AActor_SetLocation_Params params;
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.Move
// ()
// Parameters:
// struct FVector                 Delta                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::Move(const struct FVector& Delta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Move");

	AActor_Move_Params params;
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetDrawScale3D
// ()
// Parameters:
// struct FVector                 NewScale3D                     (Parm)

void AActor::SetDrawScale3D(const struct FVector& NewScale3D)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetDrawScale3D");

	AActor_SetDrawScale3D_Params params;
	params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetDrawScale
// ()
// Parameters:
// float                          NewScale                       (Parm)

void AActor::SetDrawScale(float NewScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetDrawScale");

	AActor_SetDrawScale_Params params;
	params.NewScale = NewScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetCollisionType
// ()
// Parameters:
// TEnumAsByte<ECollisionType>    NewCollisionType               (Parm)

void AActor::SetCollisionType(TEnumAsByte<ECollisionType> NewCollisionType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetCollisionType");

	AActor_SetCollisionType_Params params;
	params.NewCollisionType = NewCollisionType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetCollisionSize
// ()
// Parameters:
// float                          NewRadius                      (Parm)
// float                          NewHeight                      (Parm)

void AActor::SetCollisionSize(float NewRadius, float NewHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetCollisionSize");

	AActor_SetCollisionSize_Params params;
	params.NewRadius = NewRadius;
	params.NewHeight = NewHeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetCollision
// ()
// Parameters:
// bool                           bNewColActors                  (OptionalParm, Parm)
// bool                           bNewBlockActors                (OptionalParm, Parm)
// bool                           bNewIgnoreEncroachers          (OptionalParm, Parm)

void AActor::SetCollision(bool bNewColActors, bool bNewBlockActors, bool bNewIgnoreEncroachers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetCollision");

	AActor_SetCollision_Params params;
	params.bNewColActors = bNewColActors;
	params.bNewBlockActors = bNewBlockActors;
	params.bNewIgnoreEncroachers = bNewIgnoreEncroachers;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FinishAnim
// ()
// Parameters:
// class UAnimNodeSequence*       SeqNode                        (Parm)

void AActor::FinishAnim(class UAnimNodeSequence* SeqNode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FinishAnim");

	AActor_FinishAnim_Params params;
	params.SeqNode = SeqNode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Sleep
// ()
// Parameters:
// float                          Seconds                        (Parm)

void AActor::Sleep(float Seconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Sleep");

	AActor_Sleep_Params params;
	params.Seconds = Seconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ConsoleCommand
// ()
// Parameters:
// struct FString                 Command                        (Parm, NeedCtorLink)
// bool                           bWriteToLog                    (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::ConsoleCommand(const struct FString& Command, bool bWriteToLog)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ConsoleCommand");

	AActor_ConsoleCommand_Params params;
	params.Command = Command;
	params.bWriteToLog = bWriteToLog;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ForceUpdateComponents
// ()
// Parameters:
// bool                           bCollisionUpdate               (OptionalParm, Parm)
// bool                           bTransformOnly                 (OptionalParm, Parm)

void AActor::ForceUpdateComponents(bool bCollisionUpdate, bool bTransformOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ForceUpdateComponents");

	AActor_ForceUpdateComponents_Params params;
	params.bCollisionUpdate = bCollisionUpdate;
	params.bTransformOnly = bTransformOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Volume.ProcessActorSetVolume
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void AVolume::ProcessActorSetVolume(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.ProcessActorSetVolume");

	AVolume_ProcessActorSetVolume_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Volume.CollisionChanged
// ()

void AVolume::CollisionChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.CollisionChanged");

	AVolume_CollisionChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Volume.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void AVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.OnToggle");

	AVolume_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Volume.DisplayDebug
// ()
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void AVolume::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.DisplayDebug");

	AVolume_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.Volume.PostBeginPlay
// ()

void AVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.PostBeginPlay");

	AVolume_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Volume.EncompassesPoint
// ()
// Parameters:
// struct FVector                 Loc                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVolume::EncompassesPoint(const struct FVector& Loc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.EncompassesPoint");

	AVolume_EncompassesPoint_Params params;
	params.Loc = Loc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Volume.Encompasses
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVolume::Encompasses(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.Encompasses");

	AVolume_Encompasses_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PostProcessVolume.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void APostProcessVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PostProcessVolume.OnToggle");

	APostProcessVolume_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.ClearObjectPools
// ()

void AWorldInfo::ClearObjectPools()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ClearObjectPools");

	AWorldInfo_ClearObjectPools_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.ToggleHostMigration
// ()
// Parameters:
// bool                           bEnabled                       (Parm)

void AWorldInfo::ToggleHostMigration(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ToggleHostMigration");

	AWorldInfo_ToggleHostMigration_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.NotifyHostMigrationStateChanged
// ()
// Parameters:
// TEnumAsByte<EHostMigrationProgress> NewState                       (Parm)
// TEnumAsByte<EHostMigrationProgress> OldState                       (Parm)

void AWorldInfo::NotifyHostMigrationStateChanged(TEnumAsByte<EHostMigrationProgress> NewState, TEnumAsByte<EHostMigrationProgress> OldState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.NotifyHostMigrationStateChanged");

	AWorldInfo_NotifyHostMigrationStateChanged_Params params;
	params.NewState = NewState;
	params.OldState = OldState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.BeginHostMigration
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::BeginHostMigration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.BeginHostMigration");

	AWorldInfo_BeginHostMigration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.CanBeginHostMigration
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::CanBeginHostMigration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.CanBeginHostMigration");

	AWorldInfo_CanBeginHostMigration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.FindEnvironmentVolume
// ()
// Parameters:
// struct FVector                 TestLocation                   (Parm)
// class AEnvironmentVolume*      ReturnValue                    (Parm, OutParm, ReturnParm)

class AEnvironmentVolume* AWorldInfo::FindEnvironmentVolume(const struct FVector& TestLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.FindEnvironmentVolume");

	AWorldInfo_FindEnvironmentVolume_Params params;
	params.TestLocation = TestLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetWorldInfo
// ()
// Parameters:
// class AWorldInfo*              ReturnValue                    (Parm, OutParm, ReturnParm)

class AWorldInfo* AWorldInfo::GetWorldInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetWorldInfo");

	AWorldInfo_GetWorldInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetWorldFractureSettings
// ()
// Parameters:
// struct FWorldFractureSettings  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FWorldFractureSettings AWorldInfo::GetWorldFractureSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetWorldFractureSettings");

	AWorldInfo_GetWorldFractureSettings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.DoMemoryTracking
// ()

void AWorldInfo::DoMemoryTracking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.DoMemoryTracking");

	AWorldInfo_DoMemoryTracking_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.GetDemoRewindPoints
// ()
// Parameters:
// TArray<int>                    OutRewindPoints                (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::GetDemoRewindPoints(TArray<int>* OutRewindPoints)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetDemoRewindPoints");

	AWorldInfo_GetDemoRewindPoints_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutRewindPoints != nullptr)
		*OutRewindPoints = params.OutRewindPoints;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetDemoFrameInfo
// ()
// Parameters:
// int                            CurrentFrame                   (OptionalParm, Parm, OutParm)
// int                            TotalFrames                    (OptionalParm, Parm, OutParm)

void AWorldInfo::GetDemoFrameInfo(int* CurrentFrame, int* TotalFrames)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetDemoFrameInfo");

	AWorldInfo_GetDemoFrameInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CurrentFrame != nullptr)
		*CurrentFrame = params.CurrentFrame;
	if (TotalFrames != nullptr)
		*TotalFrames = params.TotalFrames;
}


// Function Engine.WorldInfo.IsPlayingDemo
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::IsPlayingDemo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsPlayingDemo");

	AWorldInfo_IsPlayingDemo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.IsRecordingDemo
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::IsRecordingDemo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsRecordingDemo");

	AWorldInfo_IsRecordingDemo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetDetailMode
// ()
// Parameters:
// TEnumAsByte<EDetailMode>       ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EDetailMode> AWorldInfo::GetDetailMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetDetailMode");

	AWorldInfo_GetDetailMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetMapName
// ()
// Parameters:
// bool                           bIncludePrefix                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AWorldInfo::GetMapName(bool bIncludePrefix)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetMapName");

	AWorldInfo_GetMapName_Params params;
	params.bIncludePrefix = bIncludePrefix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.SetMapInfo
// ()
// Parameters:
// class UMapInfo*                NewMapInfo                     (Parm)

void AWorldInfo::SetMapInfo(class UMapInfo* NewMapInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SetMapInfo");

	AWorldInfo_SetMapInfo_Params params;
	params.NewMapInfo = NewMapInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.GetMapInfo
// ()
// Parameters:
// class UMapInfo*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UMapInfo* AWorldInfo::GetMapInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetMapInfo");

	AWorldInfo_GetMapInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.SetSeamlessTravelMidpointPause
// ()
// Parameters:
// bool                           bNowPaused                     (Parm)

void AWorldInfo::SetSeamlessTravelMidpointPause(bool bNowPaused)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SetSeamlessTravelMidpointPause");

	AWorldInfo_SetSeamlessTravelMidpointPause_Params params;
	params.bNowPaused = bNowPaused;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.IsInSeamlessTravel
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::IsInSeamlessTravel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsInSeamlessTravel");

	AWorldInfo_IsInSeamlessTravel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.SeamlessTravel
// ()
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)
// bool                           bAbsolute                      (OptionalParm, Parm)
// struct FGuid                   MapPackageGuid                 (OptionalParm, Parm, AlwaysInit)

void AWorldInfo::SeamlessTravel(const struct FString& URL, bool bAbsolute, const struct FGuid& MapPackageGuid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SeamlessTravel");

	AWorldInfo_SeamlessTravel_Params params;
	params.URL = URL;
	params.bAbsolute = bAbsolute;
	params.MapPackageGuid = MapPackageGuid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.CommitMapChange
// ()

void AWorldInfo::CommitMapChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.CommitMapChange");

	AWorldInfo_CommitMapChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.CancelPendingMapChange
// ()

void AWorldInfo::CancelPendingMapChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.CancelPendingMapChange");

	AWorldInfo_CancelPendingMapChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.IsMapChangeReady
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::IsMapChangeReady()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsMapChangeReady");

	AWorldInfo_IsMapChangeReady_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.IsPreparingMapChange
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::IsPreparingMapChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsPreparingMapChange");

	AWorldInfo_IsPreparingMapChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.PrepareMapChange
// ()
// Parameters:
// TArray<struct FName>           LevelNames                     (Const, Parm, OutParm, NeedCtorLink)

void AWorldInfo::PrepareMapChange(TArray<struct FName>* LevelNames)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.PrepareMapChange");

	AWorldInfo_PrepareMapChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LevelNames != nullptr)
		*LevelNames = params.LevelNames;
}


// Function Engine.WorldInfo.NotifyMatchStarted
// ()
// Parameters:
// bool                           bShouldActivateLevelStartupEvents (OptionalParm, Parm)
// bool                           bShouldActivateLevelBeginningEvents (OptionalParm, Parm)
// bool                           bShouldActivateLevelLoadedEvents (OptionalParm, Parm)

void AWorldInfo::NotifyMatchStarted(bool bShouldActivateLevelStartupEvents, bool bShouldActivateLevelBeginningEvents, bool bShouldActivateLevelLoadedEvents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.NotifyMatchStarted");

	AWorldInfo_NotifyMatchStarted_Params params;
	params.bShouldActivateLevelStartupEvents = bShouldActivateLevelStartupEvents;
	params.bShouldActivateLevelBeginningEvents = bShouldActivateLevelBeginningEvents;
	params.bShouldActivateLevelLoadedEvents = bShouldActivateLevelLoadedEvents;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.AllPawns
// ()
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class APawn*                   P                              (Parm, OutParm)
// struct FVector                 TestLocation                   (OptionalParm, Parm)
// float                          TestRadius                     (OptionalParm, Parm)

void AWorldInfo::AllPawns(class UClass* BaseClass, const struct FVector& TestLocation, float TestRadius, class APawn** P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.AllPawns");

	AWorldInfo_AllPawns_Params params;
	params.BaseClass = BaseClass;
	params.TestLocation = TestLocation;
	params.TestRadius = TestRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (P != nullptr)
		*P = params.P;
}


// Function Engine.WorldInfo.AllControllers
// ()
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AController*             C                              (Parm, OutParm)

void AWorldInfo::AllControllers(class UClass* BaseClass, class AController** C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.AllControllers");

	AWorldInfo_AllControllers_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (C != nullptr)
		*C = params.C;
}


// Function Engine.WorldInfo.NavigationPointCheck
// ()
// Parameters:
// struct FVector                 Point                          (Parm)
// struct FVector                 Extent                         (Parm)
// TArray<class ANavigationPoint*> Navs                           (OptionalParm, Parm, OutParm, NeedCtorLink)
// TArray<class UReachSpec*>      Specs                          (OptionalParm, Parm, OutParm, NeedCtorLink)

void AWorldInfo::NavigationPointCheck(const struct FVector& Point, const struct FVector& Extent, TArray<class ANavigationPoint*>* Navs, TArray<class UReachSpec*>* Specs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.NavigationPointCheck");

	AWorldInfo_NavigationPointCheck_Params params;
	params.Point = Point;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Navs != nullptr)
		*Navs = params.Navs;
	if (Specs != nullptr)
		*Specs = params.Specs;
}


// Function Engine.WorldInfo.RadiusNavigationPoints
// ()
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class ANavigationPoint*        N                              (Parm, OutParm)
// struct FVector                 Point                          (Parm)
// float                          Radius                         (Parm)

void AWorldInfo::RadiusNavigationPoints(class UClass* BaseClass, const struct FVector& Point, float Radius, class ANavigationPoint** N)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.RadiusNavigationPoints");

	AWorldInfo_RadiusNavigationPoints_Params params;
	params.BaseClass = BaseClass;
	params.Point = Point;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (N != nullptr)
		*N = params.N;
}


// Function Engine.WorldInfo.AllNavigationPoints
// ()
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class ANavigationPoint*        N                              (Parm, OutParm)

void AWorldInfo::AllNavigationPoints(class UClass* BaseClass, class ANavigationPoint** N)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.AllNavigationPoints");

	AWorldInfo_AllNavigationPoints_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (N != nullptr)
		*N = params.N;
}


// Function Engine.WorldInfo.Reset
// ()

void AWorldInfo::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.Reset");

	AWorldInfo_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.PostBeginPlay
// ()

void AWorldInfo::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.PostBeginPlay");

	AWorldInfo_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.PreBeginPlay
// ()

void AWorldInfo::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.PreBeginPlay");

	AWorldInfo_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.ThisIsNeverExecuted
// ()
// Parameters:
// class ADefaultPhysicsVolume*   P                              (Parm)

void AWorldInfo::ThisIsNeverExecuted(class ADefaultPhysicsVolume* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ThisIsNeverExecuted");

	AWorldInfo_ThisIsNeverExecuted_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.ServerTravel
// ()
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)
// bool                           bAbsolute                      (OptionalParm, Parm)
// bool                           bShouldSkipGameNotify          (OptionalParm, Parm)

void AWorldInfo::ServerTravel(const struct FString& URL, bool bAbsolute, bool bShouldSkipGameNotify)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ServerTravel");

	AWorldInfo_ServerTravel_Params params;
	params.URL = URL;
	params.bAbsolute = bAbsolute;
	params.bShouldSkipGameNotify = bShouldSkipGameNotify;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.GetGameClass
// ()
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* AWorldInfo::GetGameClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetGameClass");

	AWorldInfo_GetGameClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetAddressURL
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AWorldInfo::GetAddressURL()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetAddressURL");

	AWorldInfo_GetAddressURL_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.VerifyNavList
// ()

void AWorldInfo::VerifyNavList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.VerifyNavList");

	AWorldInfo_VerifyNavList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.ForceGarbageCollection
// ()
// Parameters:
// bool                           bFullPurge                     (OptionalParm, Parm)

void AWorldInfo::ForceGarbageCollection(bool bFullPurge)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ForceGarbageCollection");

	AWorldInfo_ForceGarbageCollection_Params params;
	params.bFullPurge = bFullPurge;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.IsPlayInPreview
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::IsPlayInPreview()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsPlayInPreview");

	AWorldInfo_IsPlayInPreview_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.IsPlayInEditor
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::IsPlayInEditor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsPlayInEditor");

	AWorldInfo_IsPlayInEditor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.IsConsoleBuild
// ()
// Parameters:
// TEnumAsByte<EConsoleType>      ConsoleType                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::IsConsoleBuild(TEnumAsByte<EConsoleType> ConsoleType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsConsoleBuild");

	AWorldInfo_IsConsoleBuild_Params params;
	params.ConsoleType = ConsoleType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.IsDemoBuild
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::IsDemoBuild()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsDemoBuild");

	AWorldInfo_IsDemoBuild_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetLocalURL
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AWorldInfo::GetLocalURL()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetLocalURL");

	AWorldInfo_GetLocalURL_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.SetLevelRBGravity
// ()
// Parameters:
// struct FVector                 NewGrav                        (Parm)

void AWorldInfo::SetLevelRBGravity(const struct FVector& NewGrav)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SetLevelRBGravity");

	AWorldInfo_SetLevelRBGravity_Params params;
	params.NewGrav = NewGrav;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.GetAllRootSequences
// ()
// Parameters:
// TArray<class USequence*>       ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class USequence*> AWorldInfo::GetAllRootSequences()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetAllRootSequences");

	AWorldInfo_GetAllRootSequences_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetGameSequence
// ()
// Parameters:
// class USequence*               ReturnValue                    (Parm, OutParm, ReturnParm)

class USequence* AWorldInfo::GetGameSequence()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetGameSequence");

	AWorldInfo_GetGameSequence_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetGravityZ
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AWorldInfo::GetGravityZ()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetGravityZ");

	AWorldInfo_GetGravityZ_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.UpdateMusicTrack
// ()
// Parameters:
// struct FMusicTrackStruct       NewMusicTrack                  (Parm, NeedCtorLink)

void AWorldInfo::UpdateMusicTrack(const struct FMusicTrackStruct& NewMusicTrack)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.UpdateMusicTrack");

	AWorldInfo_UpdateMusicTrack_Params params;
	params.NewMusicTrack = NewMusicTrack;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.IsMenuLevel
// ()
// Parameters:
// struct FString                 MapName                        (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::IsMenuLevel(const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsMenuLevel");

	AWorldInfo_IsMenuLevel_Params params;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.AddOnScreenDebugMessage
// ()
// Parameters:
// int                            Key                            (Parm)
// float                          TimeToDisplay                  (Parm)
// struct FColor                  DisplayColor                   (Parm)
// struct FString                 DebugMessage                   (Parm, NeedCtorLink)

void AWorldInfo::AddOnScreenDebugMessage(int Key, float TimeToDisplay, const struct FColor& DisplayColor, const struct FString& DebugMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.AddOnScreenDebugMessage");

	AWorldInfo_AddOnScreenDebugMessage_Params params;
	params.Key = Key;
	params.TimeToDisplay = TimeToDisplay;
	params.DisplayColor = DisplayColor;
	params.DebugMessage = DebugMessage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void AWorldInfo::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ReplicatedEvent");

	AWorldInfo_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.GetNavMeshPathGoalEvaluatorFromCache
// ()
// Parameters:
// class UClass*                  GoalEvalClass                  (Parm)
// class UNavigationHandle*       Requestor                      (Parm)
// class UNavMeshPathGoalEvaluator* ReturnValue                    (Parm, OutParm, ReturnParm)

class UNavMeshPathGoalEvaluator* AWorldInfo::GetNavMeshPathGoalEvaluatorFromCache(class UClass* GoalEvalClass, class UNavigationHandle* Requestor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetNavMeshPathGoalEvaluatorFromCache");

	AWorldInfo_GetNavMeshPathGoalEvaluatorFromCache_Params params;
	params.GoalEvalClass = GoalEvalClass;
	params.Requestor = Requestor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetNavMeshPathConstraintFromCache
// ()
// Parameters:
// class UClass*                  ConstraintClass                (Parm)
// class UNavigationHandle*       Requestor                      (Parm)
// class UNavMeshPathConstraint*  ReturnValue                    (Parm, OutParm, ReturnParm)

class UNavMeshPathConstraint* AWorldInfo::GetNavMeshPathConstraintFromCache(class UClass* ConstraintClass, class UNavigationHandle* Requestor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetNavMeshPathConstraintFromCache");

	AWorldInfo_GetNavMeshPathConstraintFromCache_Params params;
	params.ConstraintClass = ConstraintClass;
	params.Requestor = Requestor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.ReleaseCachedConstraintsAndEvaluators
// ()

void AWorldInfo::ReleaseCachedConstraintsAndEvaluators()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ReleaseCachedConstraintsAndEvaluators");

	AWorldInfo_ReleaseCachedConstraintsAndEvaluators_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.SetDebugSpewLevel
// ()
// Parameters:
// int                            DebugSpewLevel                 (Parm)

void UOnlineSubsystem::SetDebugSpewLevel(int DebugSpewLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetDebugSpewLevel");

	UOnlineSubsystem_SetDebugSpewLevel_Params params;
	params.DebugSpewLevel = DebugSpewLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.DumpVoiceRegistration
// ()

void UOnlineSubsystem::DumpVoiceRegistration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.DumpVoiceRegistration");

	UOnlineSubsystem_DumpVoiceRegistration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.DumpNetIds
// ()
// Parameters:
// TArray<struct FUniqueNetId>    Players                        (Const, Parm, OutParm, NeedCtorLink)
// struct FString                 DebugLabel                     (Parm, NeedCtorLink)

void UOnlineSubsystem::DumpNetIds(const struct FString& DebugLabel, TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.DumpNetIds");

	UOnlineSubsystem_DumpNetIds_Params params;
	params.DebugLabel = DebugLabel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;
}


// Function Engine.OnlineSubsystem.DumpSessionState
// ()

void UOnlineSubsystem::DumpSessionState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.DumpSessionState");

	UOnlineSubsystem_DumpSessionState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.DumpGameSettings
// ()
// Parameters:
// class UOnlineGameSettings*     GameSettings                   (Const, Parm)

void UOnlineSubsystem::DumpGameSettings(class UOnlineGameSettings* GameSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.DumpGameSettings");

	UOnlineSubsystem_DumpGameSettings_Params params;
	params.GameSettings = GameSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.GetNumSupportedLogins
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UOnlineSubsystem::GetNumSupportedLogins()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.GetNumSupportedLogins");

	UOnlineSubsystem_GetNumSupportedLogins_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.GetBuildUniqueId
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UOnlineSubsystem::GetBuildUniqueId()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.GetBuildUniqueId");

	UOnlineSubsystem_GetBuildUniqueId_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.StringToUniqueNetId
// ()
// Parameters:
// struct FString                 UniqueNetIdString              (Parm, NeedCtorLink)
// struct FUniqueNetId            out_UniqueId                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::StringToUniqueNetId(const struct FString& UniqueNetIdString, struct FUniqueNetId* out_UniqueId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.StringToUniqueNetId");

	UOnlineSubsystem_StringToUniqueNetId_Params params;
	params.UniqueNetIdString = UniqueNetIdString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_UniqueId != nullptr)
		*out_UniqueId = params.out_UniqueId;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.UniqueNetIdToString
// ()
// Parameters:
// struct FUniqueNetId            IdToConvert                    (Const, Parm, OutParm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UOnlineSubsystem::UniqueNetIdToString(struct FUniqueNetId* IdToConvert)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.UniqueNetIdToString");

	UOnlineSubsystem_UniqueNetIdToString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (IdToConvert != nullptr)
		*IdToConvert = params.IdToConvert;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.GetNamedInterface
// ()
// Parameters:
// struct FName                   InterfaceName                  (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UOnlineSubsystem::GetNamedInterface(const struct FName& InterfaceName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.GetNamedInterface");

	UOnlineSubsystem_GetNamedInterface_Params params;
	params.InterfaceName = InterfaceName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetNamedInterface
// ()
// Parameters:
// struct FName                   InterfaceName                  (Parm)
// class UObject*                 NewInterface                   (Parm)

void UOnlineSubsystem::SetNamedInterface(const struct FName& InterfaceName, class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetNamedInterface");

	UOnlineSubsystem_SetNamedInterface_Params params;
	params.InterfaceName = InterfaceName;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.SetTitleFileInterface
// ()
// Parameters:
// class UObject*                 NewInterface                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::SetTitleFileInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetTitleFileInterface");

	UOnlineSubsystem_SetTitleFileInterface_Params params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetPartyChatInterface
// ()
// Parameters:
// class UObject*                 NewInterface                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::SetPartyChatInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetPartyChatInterface");

	UOnlineSubsystem_SetPartyChatInterface_Params params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetNewsInterface
// ()
// Parameters:
// class UObject*                 NewInterface                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::SetNewsInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetNewsInterface");

	UOnlineSubsystem_SetNewsInterface_Params params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetStatsInterface
// ()
// Parameters:
// class UObject*                 NewInterface                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::SetStatsInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetStatsInterface");

	UOnlineSubsystem_SetStatsInterface_Params params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetVoiceInterface
// ()
// Parameters:
// class UObject*                 NewInterface                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::SetVoiceInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetVoiceInterface");

	UOnlineSubsystem_SetVoiceInterface_Params params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetContentInterface
// ()
// Parameters:
// class UObject*                 NewInterface                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::SetContentInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetContentInterface");

	UOnlineSubsystem_SetContentInterface_Params params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetGameInterface
// ()
// Parameters:
// class UObject*                 NewInterface                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::SetGameInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetGameInterface");

	UOnlineSubsystem_SetGameInterface_Params params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetSystemInterface
// ()
// Parameters:
// class UObject*                 NewInterface                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::SetSystemInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetSystemInterface");

	UOnlineSubsystem_SetSystemInterface_Params params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetPlayerInterfaceEx
// ()
// Parameters:
// class UObject*                 NewInterface                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::SetPlayerInterfaceEx(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetPlayerInterfaceEx");

	UOnlineSubsystem_SetPlayerInterfaceEx_Params params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetPlayerInterface
// ()
// Parameters:
// class UObject*                 NewInterface                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::SetPlayerInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetPlayerInterface");

	UOnlineSubsystem_SetPlayerInterface_Params params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetAccountInterface
// ()
// Parameters:
// class UObject*                 NewInterface                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::SetAccountInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetAccountInterface");

	UOnlineSubsystem_SetAccountInterface_Params params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.Exit
// ()

void UOnlineSubsystem::Exit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.Exit");

	UOnlineSubsystem_Exit_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.PostInit
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::PostInit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.PostInit");

	UOnlineSubsystem_PostInit_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.Init
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.Init");

	UOnlineSubsystem_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DownloadableContentEnumerator.TriggerFindDLCDelegates
// ()

void UDownloadableContentEnumerator::TriggerFindDLCDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.TriggerFindDLCDelegates");

	UDownloadableContentEnumerator_TriggerFindDLCDelegates_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentEnumerator.InstallDLC
// ()
// Parameters:
// struct FString                 DLCName                        (Parm, NeedCtorLink)

void UDownloadableContentEnumerator::InstallDLC(const struct FString& DLCName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.InstallDLC");

	UDownloadableContentEnumerator_InstallDLC_Params params;
	params.DLCName = DLCName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentEnumerator.InstallAllDLC
// ()

void UDownloadableContentEnumerator::InstallAllDLC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.InstallAllDLC");

	UDownloadableContentEnumerator_InstallAllDLC_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentEnumerator.DeleteDLC
// ()
// Parameters:
// struct FString                 DLCName                        (Parm, NeedCtorLink)

void UDownloadableContentEnumerator::DeleteDLC(const struct FString& DLCName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.DeleteDLC");

	UDownloadableContentEnumerator_DeleteDLC_Params params;
	params.DLCName = DLCName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentEnumerator.ClearFindDLCDelegate
// ()
// Parameters:
// struct FScriptDelegate         InDelegate                     (Parm, NeedCtorLink)

void UDownloadableContentEnumerator::ClearFindDLCDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.ClearFindDLCDelegate");

	UDownloadableContentEnumerator_ClearFindDLCDelegate_Params params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentEnumerator.AddFindDLCDelegate
// ()
// Parameters:
// struct FScriptDelegate         InDelegate                     (Parm, NeedCtorLink)

void UDownloadableContentEnumerator::AddFindDLCDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.AddFindDLCDelegate");

	UDownloadableContentEnumerator_AddFindDLCDelegate_Params params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentEnumerator.OnFindDLCComplete
// ()

void UDownloadableContentEnumerator::OnFindDLCComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.OnFindDLCComplete");

	UDownloadableContentEnumerator_OnFindDLCComplete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentEnumerator.FindDLC
// ()

void UDownloadableContentEnumerator::FindDLC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.FindDLC");

	UDownloadableContentEnumerator_FindDLC_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.AddPackagesToFullyLoad
// ()
// Parameters:
// struct FString                 Filename                       (Parm, NeedCtorLink)

void UDownloadableContentManager::AddPackagesToFullyLoad(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.AddPackagesToFullyLoad");

	UDownloadableContentManager_AddPackagesToFullyLoad_Params params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.RefreshDLCEnumComplete
// ()

void UDownloadableContentManager::RefreshDLCEnumComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.RefreshDLCEnumComplete");

	UDownloadableContentManager_RefreshDLCEnumComplete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.RefreshDLC
// ()

void UDownloadableContentManager::RefreshDLC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.RefreshDLC");

	UDownloadableContentManager_RefreshDLC_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.OnContentChange
// ()

void UDownloadableContentManager::OnContentChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.OnContentChange");

	UDownloadableContentManager_OnContentChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.OnStorageDeviceChange
// ()

void UDownloadableContentManager::OnStorageDeviceChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.OnStorageDeviceChange");

	UDownloadableContentManager_OnStorageDeviceChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.OnLoginChange
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)

void UDownloadableContentManager::OnLoginChange(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.OnLoginChange");

	UDownloadableContentManager_OnLoginChange_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.Init
// ()

void UDownloadableContentManager::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.Init");

	UDownloadableContentManager_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.InstallNonPackageFiles
// ()
// Parameters:
// struct FOnlineContent          DLCBundle                      (Const, Parm, OutParm, NeedCtorLink)

void UDownloadableContentManager::InstallNonPackageFiles(struct FOnlineContent* DLCBundle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.InstallNonPackageFiles");

	UDownloadableContentManager_InstallNonPackageFiles_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DLCBundle != nullptr)
		*DLCBundle = params.DLCBundle;
}


// Function Engine.DownloadableContentManager.InstallPackages
// ()
// Parameters:
// struct FOnlineContent          DLCBundle                      (Const, Parm, OutParm, NeedCtorLink)

void UDownloadableContentManager::InstallPackages(struct FOnlineContent* DLCBundle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.InstallPackages");

	UDownloadableContentManager_InstallPackages_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DLCBundle != nullptr)
		*DLCBundle = params.DLCBundle;
}


// Function Engine.DownloadableContentManager.UpdateObjectLists
// ()

void UDownloadableContentManager::UpdateObjectLists()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.UpdateObjectLists");

	UDownloadableContentManager_UpdateObjectLists_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.MarkPerObjectConfigPendingKill
// ()
// Parameters:
// struct FString                 Section                        (Parm, NeedCtorLink)

void UDownloadableContentManager::MarkPerObjectConfigPendingKill(const struct FString& Section)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.MarkPerObjectConfigPendingKill");

	UDownloadableContentManager_MarkPerObjectConfigPendingKill_Params params;
	params.Section = Section;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.AddSectionToObjectList
// ()
// Parameters:
// struct FString                 Section                        (Parm, NeedCtorLink)

void UDownloadableContentManager::AddSectionToObjectList(const struct FString& Section)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.AddSectionToObjectList");

	UDownloadableContentManager_AddSectionToObjectList_Params params;
	params.Section = Section;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.GetDLCTextureCachePath
// ()
// Parameters:
// struct FName                   TextureCacheName               (Parm)
// struct FString                 Path                           (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UDownloadableContentManager::GetDLCTextureCachePath(const struct FName& TextureCacheName, struct FString* Path)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.GetDLCTextureCachePath");

	UDownloadableContentManager_GetDLCTextureCachePath_Params params;
	params.TextureCacheName = TextureCacheName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Path != nullptr)
		*Path = params.Path;

	return params.ReturnValue;
}


// Function Engine.DownloadableContentManager.ClearDLC
// ()

void UDownloadableContentManager::ClearDLC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.ClearDLC");

	UDownloadableContentManager_ClearDLC_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.InstallDLCs
// ()
// Parameters:
// TArray<struct FOnlineContent>  DLCBundles                     (Const, Parm, OutParm, NeedCtorLink)

void UDownloadableContentManager::InstallDLCs(TArray<struct FOnlineContent>* DLCBundles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.InstallDLCs");

	UDownloadableContentManager_InstallDLCs_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DLCBundles != nullptr)
		*DLCBundles = params.DLCBundles;
}


// Function Engine.DownloadableContentManager.InstallDLC
// ()
// Parameters:
// struct FOnlineContent          DLCBundle                      (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UDownloadableContentManager::InstallDLC(struct FOnlineContent* DLCBundle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.InstallDLC");

	UDownloadableContentManager_InstallDLC_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DLCBundle != nullptr)
		*DLCBundle = params.DLCBundle;

	return params.ReturnValue;
}


// Function Engine.Engine.GetFacebookIntegration
// ()
// Parameters:
// class UFacebookIntegration*    ReturnValue                    (Parm, OutParm, ReturnParm)

class UFacebookIntegration* UEngine::GetFacebookIntegration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetFacebookIntegration");

	UEngine_GetFacebookIntegration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.BasicLoadObject
// ()
// Parameters:
// class UObject*                 Obj                            (Parm)
// struct FString                 PathName                       (Parm, NeedCtorLink)
// bool                           bIsSaveGame                    (Parm)
// int                            Version                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UEngine::BasicLoadObject(class UObject* Obj, const struct FString& PathName, bool bIsSaveGame, int Version)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.BasicLoadObject");

	UEngine_BasicLoadObject_Params params;
	params.Obj = Obj;
	params.PathName = PathName;
	params.bIsSaveGame = bIsSaveGame;
	params.Version = Version;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.BasicSaveObject
// ()
// Parameters:
// class UObject*                 Obj                            (Parm)
// struct FString                 PathName                       (Parm, NeedCtorLink)
// bool                           bIsSaveGame                    (Parm)
// int                            Version                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UEngine::BasicSaveObject(class UObject* Obj, const struct FString& PathName, bool bIsSaveGame, int Version)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.BasicSaveObject");

	UEngine_BasicSaveObject_Params params;
	params.Obj = Obj;
	params.PathName = PathName;
	params.bIsSaveGame = bIsSaveGame;
	params.Version = Version;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.AddTextureStreamingSlaveLoc
// ()
// Parameters:
// struct FVector                 InLoc                          (Parm)

void UEngine::AddTextureStreamingSlaveLoc(const struct FVector& InLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.AddTextureStreamingSlaveLoc");

	UEngine_AddTextureStreamingSlaveLoc_Params params;
	params.InLoc = InLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Engine.GetWorldPostProcessChain
// ()
// Parameters:
// class UPostProcessChain*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UPostProcessChain* UEngine::GetWorldPostProcessChain()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetWorldPostProcessChain");

	UEngine_GetWorldPostProcessChain_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetEngine
// ()
// Parameters:
// class UEngine*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UEngine* UEngine::GetEngine()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetEngine");

	UEngine_GetEngine_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.AddOverlayWrapped
// ()
// Parameters:
// class UFont*                   Font                           (Parm)
// struct FString                 Text                           (Parm, NeedCtorLink)
// float                          X                              (Parm)
// float                          Y                              (Parm)
// float                          ScaleX                         (Parm)
// float                          ScaleY                         (Parm)
// float                          WrapWidth                      (Parm)

void UEngine::AddOverlayWrapped(class UFont* Font, const struct FString& Text, float X, float Y, float ScaleX, float ScaleY, float WrapWidth)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.AddOverlayWrapped");

	UEngine_AddOverlayWrapped_Params params;
	params.Font = Font;
	params.Text = Text;
	params.X = X;
	params.Y = Y;
	params.ScaleX = ScaleX;
	params.ScaleY = ScaleY;
	params.WrapWidth = WrapWidth;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Engine.AddOverlay
// ()
// Parameters:
// class UFont*                   Font                           (Parm)
// struct FString                 Text                           (Parm, NeedCtorLink)
// float                          X                              (Parm)
// float                          Y                              (Parm)
// float                          ScaleX                         (Parm)
// float                          ScaleY                         (Parm)
// bool                           bIsCentered                    (Parm)

void UEngine::AddOverlay(class UFont* Font, const struct FString& Text, float X, float Y, float ScaleX, float ScaleY, bool bIsCentered)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.AddOverlay");

	UEngine_AddOverlay_Params params;
	params.Font = Font;
	params.Text = Text;
	params.X = X;
	params.Y = Y;
	params.ScaleX = ScaleX;
	params.ScaleY = ScaleY;
	params.bIsCentered = bIsCentered;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Engine.RemoveAllOverlays
// ()

void UEngine::RemoveAllOverlays()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.RemoveAllOverlays");

	UEngine_RemoveAllOverlays_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Engine.StopMovie
// ()
// Parameters:
// bool                           bDelayStopUntilGameHasRendered (Parm)

void UEngine::StopMovie(bool bDelayStopUntilGameHasRendered)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.StopMovie");

	UEngine_StopMovie_Params params;
	params.bDelayStopUntilGameHasRendered = bDelayStopUntilGameHasRendered;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Engine.PlayLoadMapMovie
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UEngine::PlayLoadMapMovie()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.PlayLoadMapMovie");

	UEngine_PlayLoadMapMovie_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetLastMovieName
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UEngine::GetLastMovieName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetLastMovieName");

	UEngine_GetLastMovieName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetAudioDevice
// ()
// Parameters:
// class UAudioDevice*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UAudioDevice* UEngine::GetAudioDevice()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetAudioDevice");

	UEngine_GetAudioDevice_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.IsSplitScreen
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UEngine::IsSplitScreen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.IsSplitScreen");

	UEngine_IsSplitScreen_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetAdditionalFont
// ()
// Parameters:
// int                            AdditionalFontIndex            (Parm)
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* UEngine::GetAdditionalFont(int AdditionalFontIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetAdditionalFont");

	UEngine_GetAdditionalFont_Params params;
	params.AdditionalFontIndex = AdditionalFontIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetSubtitleFont
// ()
// Parameters:
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* UEngine::GetSubtitleFont()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetSubtitleFont");

	UEngine_GetSubtitleFont_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetLargeFont
// ()
// Parameters:
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* UEngine::GetLargeFont()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetLargeFont");

	UEngine_GetLargeFont_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetMediumFont
// ()
// Parameters:
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* UEngine::GetMediumFont()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetMediumFont");

	UEngine_GetMediumFont_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetSmallFont
// ()
// Parameters:
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* UEngine::GetSmallFont()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetSmallFont");

	UEngine_GetSmallFont_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetTinyFont
// ()
// Parameters:
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* UEngine::GetTinyFont()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetTinyFont");

	UEngine_GetTinyFont_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetBuildDate
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UEngine::GetBuildDate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetBuildDate");

	UEngine_GetBuildDate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetCurrentWorldInfo
// ()
// Parameters:
// class AWorldInfo*              ReturnValue                    (Parm, OutParm, ReturnParm)

class AWorldInfo* UEngine::GetCurrentWorldInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetCurrentWorldInfo");

	UEngine_GetCurrentWorldInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.IsGame
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UEngine::IsGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.IsGame");

	UEngine_IsGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.IsEditor
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UEngine::IsEditor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.IsEditor");

	UEngine_IsEditor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameEngine.GetAdManager
// ()
// Parameters:
// class UInGameAdManager*        ReturnValue                    (Parm, OutParm, ReturnParm)

class UInGameAdManager* UGameEngine::GetAdManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameEngine.GetAdManager");

	UGameEngine_GetAdManager_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameEngine.GetDLCManager
// ()
// Parameters:
// class UDownloadableContentManager* ReturnValue                    (Parm, OutParm, ReturnParm)

class UDownloadableContentManager* UGameEngine::GetDLCManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameEngine.GetDLCManager");

	UGameEngine_GetDLCManager_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameEngine.GetDLCEnumerator
// ()
// Parameters:
// class UDownloadableContentEnumerator* ReturnValue                    (Parm, OutParm, ReturnParm)

class UDownloadableContentEnumerator* UGameEngine::GetDLCEnumerator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameEngine.GetDLCEnumerator");

	UGameEngine_GetDLCEnumerator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameEngine.GetOnlineSubsystem
// ()
// Parameters:
// class UOnlineSubsystem*        ReturnValue                    (Parm, OutParm, ReturnParm)

class UOnlineSubsystem* UGameEngine::GetOnlineSubsystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameEngine.GetOnlineSubsystem");

	UGameEngine_GetOnlineSubsystem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameEngine.DestroyNamedNetDriver
// ()
// Parameters:
// struct FName                   NetDriverName                  (Parm)

void UGameEngine::DestroyNamedNetDriver(const struct FName& NetDriverName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameEngine.DestroyNamedNetDriver");

	UGameEngine_DestroyNamedNetDriver_Params params;
	params.NetDriverName = NetDriverName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameEngine.CreateNamedNetDriver
// ()
// Parameters:
// struct FName                   NetDriverName                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameEngine::CreateNamedNetDriver(const struct FName& NetDriverName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameEngine.CreateNamedNetDriver");

	UGameEngine_CreateNamedNetDriver_Params params;
	params.NetDriverName = NetDriverName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InGameAdManager.ClearClosedAdDelegate
// ()
// Parameters:
// struct FScriptDelegate         InDelegate                     (Parm, NeedCtorLink)

void UInGameAdManager::ClearClosedAdDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.ClearClosedAdDelegate");

	UInGameAdManager_ClearClosedAdDelegate_Params params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InGameAdManager.AddClosedAdDelegate
// ()
// Parameters:
// struct FScriptDelegate         InDelegate                     (Parm, NeedCtorLink)

void UInGameAdManager::AddClosedAdDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.AddClosedAdDelegate");

	UInGameAdManager_AddClosedAdDelegate_Params params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InGameAdManager.OnUserClosedAdvertisement
// ()

void UInGameAdManager::OnUserClosedAdvertisement()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.OnUserClosedAdvertisement");

	UInGameAdManager_OnUserClosedAdvertisement_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InGameAdManager.ClearClickedBannerDelegate
// ()
// Parameters:
// struct FScriptDelegate         InDelegate                     (Parm, NeedCtorLink)

void UInGameAdManager::ClearClickedBannerDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.ClearClickedBannerDelegate");

	UInGameAdManager_ClearClickedBannerDelegate_Params params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InGameAdManager.AddClickedBannerDelegate
// ()
// Parameters:
// struct FScriptDelegate         InDelegate                     (Parm, NeedCtorLink)

void UInGameAdManager::AddClickedBannerDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.AddClickedBannerDelegate");

	UInGameAdManager_AddClickedBannerDelegate_Params params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InGameAdManager.OnUserClickedBanner
// ()

void UInGameAdManager::OnUserClickedBanner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.OnUserClickedBanner");

	UInGameAdManager_OnUserClickedBanner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InGameAdManager.SetPauseWhileAdOpen
// ()
// Parameters:
// bool                           bShouldPause                   (Parm)

void UInGameAdManager::SetPauseWhileAdOpen(bool bShouldPause)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.SetPauseWhileAdOpen");

	UInGameAdManager_SetPauseWhileAdOpen_Params params;
	params.bShouldPause = bShouldPause;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InGameAdManager.ForceCloseAd
// ()

void UInGameAdManager::ForceCloseAd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.ForceCloseAd");

	UInGameAdManager_ForceCloseAd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InGameAdManager.HideBanner
// ()

void UInGameAdManager::HideBanner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.HideBanner");

	UInGameAdManager_HideBanner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InGameAdManager.ShowBanner
// ()
// Parameters:
// bool                           bShowBottomOfScreen            (Parm)

void UInGameAdManager::ShowBanner(bool bShowBottomOfScreen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.ShowBanner");

	UInGameAdManager_ShowBanner_Params params;
	params.bShowBottomOfScreen = bShowBottomOfScreen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InGameAdManager.Init
// ()

void UInGameAdManager::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.Init");

	UInGameAdManager_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BlockingVolume.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void ABlockingVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BlockingVolume.OnToggle");

	ABlockingVolume_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicBlockingVolume.ApplyCheckpointRecord
// ()
// Parameters:
// struct ADynamicBlockingVolume_FCheckpointRecord Record                         (Const, Parm, OutParm)

void ADynamicBlockingVolume::ApplyCheckpointRecord(struct ADynamicBlockingVolume_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicBlockingVolume.ApplyCheckpointRecord");

	ADynamicBlockingVolume_ApplyCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.DynamicBlockingVolume.CreateCheckpointRecord
// ()
// Parameters:
// struct ADynamicBlockingVolume_FCheckpointRecord Record                         (Parm, OutParm)

void ADynamicBlockingVolume::CreateCheckpointRecord(struct ADynamicBlockingVolume_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicBlockingVolume.CreateCheckpointRecord");

	ADynamicBlockingVolume_CreateCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.DynamicBlockingVolume.PostBeginPlay
// ()

void ADynamicBlockingVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicBlockingVolume.PostBeginPlay");

	ADynamicBlockingVolume_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelStreamingVolume.ApplyCheckpointRecord
// ()
// Parameters:
// struct ALevelStreamingVolume_FCheckpointRecord Record                         (Const, Parm, OutParm)

void ALevelStreamingVolume::ApplyCheckpointRecord(struct ALevelStreamingVolume_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreamingVolume.ApplyCheckpointRecord");

	ALevelStreamingVolume_ApplyCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.LevelStreamingVolume.CreateCheckpointRecord
// ()
// Parameters:
// struct ALevelStreamingVolume_FCheckpointRecord Record                         (Parm, OutParm)

void ALevelStreamingVolume::CreateCheckpointRecord(struct ALevelStreamingVolume_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreamingVolume.CreateCheckpointRecord");

	ALevelStreamingVolume_CreateCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.LevelStreamingVolume.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void ALevelStreamingVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreamingVolume.OnToggle");

	ALevelStreamingVolume_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.ApplyCheckpointRecord
// ()
// Parameters:
// struct APhysicsVolume_FCheckpointRecord Record                         (Const, Parm, OutParm)

void APhysicsVolume::ApplyCheckpointRecord(struct APhysicsVolume_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.ApplyCheckpointRecord");

	APhysicsVolume_ApplyCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.PhysicsVolume.CreateCheckpointRecord
// ()
// Parameters:
// struct APhysicsVolume_FCheckpointRecord Record                         (Parm, OutParm)

void APhysicsVolume::CreateCheckpointRecord(struct APhysicsVolume_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.CreateCheckpointRecord");

	APhysicsVolume_CreateCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.PhysicsVolume.ShouldSaveForCheckpoint
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APhysicsVolume::ShouldSaveForCheckpoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.ShouldSaveForCheckpoint");

	APhysicsVolume_ShouldSaveForCheckpoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicsVolume.OnSetDamageInstigator
// ()
// Parameters:
// class USeqAct_SetDamageInstigator* Action                         (Parm)

void APhysicsVolume::OnSetDamageInstigator(class USeqAct_SetDamageInstigator* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.OnSetDamageInstigator");

	APhysicsVolume_OnSetDamageInstigator_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.NotifyPawnBecameViewTarget
// ()
// Parameters:
// class APawn*                   P                              (Parm)
// class APlayerController*       PC                             (Parm)

void APhysicsVolume::NotifyPawnBecameViewTarget(class APawn* P, class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.NotifyPawnBecameViewTarget");

	APhysicsVolume_NotifyPawnBecameViewTarget_Params params;
	params.P = P;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.ModifyPlayer
// ()
// Parameters:
// class APawn*                   PlayerPawn                     (Parm)

void APhysicsVolume::ModifyPlayer(class APawn* PlayerPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.ModifyPlayer");

	APhysicsVolume_ModifyPlayer_Params params;
	params.PlayerPawn = PlayerPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.CausePainTo
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void APhysicsVolume::CausePainTo(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.CausePainTo");

	APhysicsVolume_CausePainTo_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.Touch
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void APhysicsVolume::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.Touch");

	APhysicsVolume_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.TimerPop
// ()
// Parameters:
// class AVolumeTimer*            T                              (Parm)

void APhysicsVolume::TimerPop(class AVolumeTimer* T)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.TimerPop");

	APhysicsVolume_TimerPop_Params params;
	params.T = T;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.CollisionChanged
// ()

void APhysicsVolume::CollisionChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.CollisionChanged");

	APhysicsVolume_CollisionChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          inAction                       (Parm)

void APhysicsVolume::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.OnToggle");

	APhysicsVolume_OnToggle_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.PawnLeavingVolume
// ()
// Parameters:
// class APawn*                   Other                          (Parm)

void APhysicsVolume::PawnLeavingVolume(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PawnLeavingVolume");

	APhysicsVolume_PawnLeavingVolume_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.PawnEnteredVolume
// ()
// Parameters:
// class APawn*                   Other                          (Parm)

void APhysicsVolume::PawnEnteredVolume(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PawnEnteredVolume");

	APhysicsVolume_PawnEnteredVolume_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.ActorLeavingVolume
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void APhysicsVolume::ActorLeavingVolume(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.ActorLeavingVolume");

	APhysicsVolume_ActorLeavingVolume_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.ActorEnteredVolume
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void APhysicsVolume::ActorEnteredVolume(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.ActorEnteredVolume");

	APhysicsVolume_ActorEnteredVolume_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.PhysicsChangedFor
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void APhysicsVolume::PhysicsChangedFor(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PhysicsChangedFor");

	APhysicsVolume_PhysicsChangedFor_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.Reset
// ()

void APhysicsVolume::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.Reset");

	APhysicsVolume_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.PostBeginPlay
// ()

void APhysicsVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PostBeginPlay");

	APhysicsVolume_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.GetZoneVelocityForActor
// ()
// Parameters:
// class AActor*                  TheActor                       (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector APhysicsVolume::GetZoneVelocityForActor(class AActor* TheActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.GetZoneVelocityForActor");

	APhysicsVolume_GetZoneVelocityForActor_Params params;
	params.TheActor = TheActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicsVolume.GetGravityZ
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APhysicsVolume::GetGravityZ()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.GetGravityZ");

	APhysicsVolume_GetGravityZ_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DefaultPhysicsVolume.Destroyed
// ()

void ADefaultPhysicsVolume::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPhysicsVolume.Destroyed");

	ADefaultPhysicsVolume_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LadderVolume.PhysicsChangedFor
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void ALadderVolume::PhysicsChangedFor(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.PhysicsChangedFor");

	ALadderVolume_PhysicsChangedFor_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LadderVolume.PawnLeavingVolume
// ()
// Parameters:
// class APawn*                   P                              (Parm)

void ALadderVolume::PawnLeavingVolume(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.PawnLeavingVolume");

	ALadderVolume_PawnLeavingVolume_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LadderVolume.PawnEnteredVolume
// ()
// Parameters:
// class APawn*                   P                              (Parm)

void ALadderVolume::PawnEnteredVolume(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.PawnEnteredVolume");

	ALadderVolume_PawnEnteredVolume_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LadderVolume.InUse
// ()
// Parameters:
// class APawn*                   Ignored                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALadderVolume::InUse(class APawn* Ignored)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.InUse");

	ALadderVolume_InUse_Params params;
	params.Ignored = Ignored;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LadderVolume.PostBeginPlay
// ()

void ALadderVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.PostBeginPlay");

	ALadderVolume_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TriggerVolume.StopsProjectile
// ()
// Parameters:
// class AProjectile*             P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ATriggerVolume::StopsProjectile(class AProjectile* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TriggerVolume.StopsProjectile");

	ATriggerVolume_StopsProjectile_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TriggerVolume.PostBeginPlay
// ()

void ATriggerVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TriggerVolume.PostBeginPlay");

	ATriggerVolume_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.RecheckValidTouch
// ()

void ADroppedPickup::RecheckValidTouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.RecheckValidTouch");

	ADroppedPickup_RecheckValidTouch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.PickedUpBy
// ()
// Parameters:
// class APawn*                   P                              (Parm)

void ADroppedPickup::PickedUpBy(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.PickedUpBy");

	ADroppedPickup_PickedUpBy_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.GiveTo
// ()
// Parameters:
// class APawn*                   P                              (Parm)

void ADroppedPickup::GiveTo(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.GiveTo");

	ADroppedPickup_GiveTo_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.Landed
// ()
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  FloorActor                     (Parm)

void ADroppedPickup::Landed(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.Landed");

	ADroppedPickup_Landed_Params params;
	params.HitNormal = HitNormal;
	params.FloorActor = FloorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.DetourWeight
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// float                          PathWeight                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ADroppedPickup::DetourWeight(class APawn* Other, float PathWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.DetourWeight");

	ADroppedPickup_DetourWeight_Params params;
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DroppedPickup.EncroachedBy
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void ADroppedPickup::EncroachedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.EncroachedBy");

	ADroppedPickup_EncroachedBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.SetPickupParticles
// ()
// Parameters:
// class UParticleSystemComponent* PickupParticles                (Parm, EditInline)

void ADroppedPickup::SetPickupParticles(class UParticleSystemComponent* PickupParticles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.SetPickupParticles");

	ADroppedPickup_SetPickupParticles_Params params;
	params.PickupParticles = PickupParticles;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.SetPickupMesh
// ()
// Parameters:
// class UPrimitiveComponent*     PickupMesh                     (Parm, EditInline)

void ADroppedPickup::SetPickupMesh(class UPrimitiveComponent* PickupMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.SetPickupMesh");

	ADroppedPickup_SetPickupMesh_Params params;
	params.PickupMesh = PickupMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.Reset
// ()

void ADroppedPickup::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.Reset");

	ADroppedPickup_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void ADroppedPickup::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.ReplicatedEvent");

	ADroppedPickup_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.Destroyed
// ()

void ADroppedPickup::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.Destroyed");

	ADroppedPickup_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.RemoveFromNavigation
// ()

void ADroppedPickup::RemoveFromNavigation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.RemoveFromNavigation");

	ADroppedPickup_RemoveFromNavigation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.AddToNavigation
// ()

void ADroppedPickup::AddToNavigation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.AddToNavigation");

	ADroppedPickup_AddToNavigation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.SetLightEnvironmentToNotBeDynamic
// ()

void ADynamicSMActor::SetLightEnvironmentToNotBeDynamic()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.SetLightEnvironmentToNotBeDynamic");

	ADynamicSMActor_SetLightEnvironmentToNotBeDynamic_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.Detach
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void ADynamicSMActor::Detach(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.Detach");

	ADynamicSMActor_Detach_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.Attach
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void ADynamicSMActor::Attach(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.Attach");

	ADynamicSMActor_Attach_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.CanBasePawn
// ()
// Parameters:
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ADynamicSMActor::CanBasePawn(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.CanBasePawn");

	ADynamicSMActor_CanBasePawn_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DynamicSMActor.SetStaticMesh
// ()
// Parameters:
// class UStaticMesh*             NewMesh                        (Parm)
// struct FVector                 NewTranslation                 (OptionalParm, Parm)
// struct FRotator                NewRotation                    (OptionalParm, Parm)
// struct FVector                 NewScale3D                     (OptionalParm, Parm)

void ADynamicSMActor::SetStaticMesh(class UStaticMesh* NewMesh, const struct FVector& NewTranslation, const struct FRotator& NewRotation, const struct FVector& NewScale3D)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.SetStaticMesh");

	ADynamicSMActor_SetStaticMesh_Params params;
	params.NewMesh = NewMesh;
	params.NewTranslation = NewTranslation;
	params.NewRotation = NewRotation;
	params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.OnSetMaterial
// ()
// Parameters:
// class USeqAct_SetMaterial*     Action                         (Parm)

void ADynamicSMActor::OnSetMaterial(class USeqAct_SetMaterial* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.OnSetMaterial");

	ADynamicSMActor_OnSetMaterial_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.OnSetMesh
// ()
// Parameters:
// class USeqAct_SetMesh*         Action                         (Parm)

void ADynamicSMActor::OnSetMesh(class USeqAct_SetMesh* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.OnSetMesh");

	ADynamicSMActor_OnSetMesh_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void ADynamicSMActor::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.ReplicatedEvent");

	ADynamicSMActor_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.PostBeginPlay
// ()

void ADynamicSMActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.PostBeginPlay");

	ADynamicSMActor_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.ApplyCheckpointRecord
// ()
// Parameters:
// struct AInterpActor_FCheckpointRecord Record                         (Const, Parm, OutParm)

void AInterpActor::ApplyCheckpointRecord(struct AInterpActor_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.ApplyCheckpointRecord");

	AInterpActor_ApplyCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.InterpActor.CreateCheckpointRecord
// ()
// Parameters:
// struct AInterpActor_FCheckpointRecord Record                         (Parm, OutParm)

void AInterpActor::CreateCheckpointRecord(struct AInterpActor_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.CreateCheckpointRecord");

	AInterpActor_CreateCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.InterpActor.ShouldSaveForCheckpoint
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AInterpActor::ShouldSaveForCheckpoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.ShouldSaveForCheckpoint");

	AInterpActor_ShouldSaveForCheckpoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InterpActor.ShutDown
// ()

void AInterpActor::ShutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.ShutDown");

	AInterpActor_ShutDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.InterpolationChanged
// ()
// Parameters:
// class USeqAct_Interp*          InterpAction                   (Parm)

void AInterpActor::InterpolationChanged(class USeqAct_Interp* InterpAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.InterpolationChanged");

	AInterpActor_InterpolationChanged_Params params;
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.InterpolationFinished
// ()
// Parameters:
// class USeqAct_Interp*          InterpAction                   (Parm)

void AInterpActor::InterpolationFinished(class USeqAct_Interp* InterpAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.InterpolationFinished");

	AInterpActor_InterpolationFinished_Params params;
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.InterpolationStarted
// ()
// Parameters:
// class USeqAct_Interp*          InterpAction                   (Parm)
// class UInterpGroupInst*        GroupInst                      (Parm)

void AInterpActor::InterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.InterpolationStarted");

	AInterpActor_InterpolationStarted_Params params;
	params.InterpAction = InterpAction;
	params.GroupInst = GroupInst;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.PlayMovingSound
// ()
// Parameters:
// bool                           bClosing                       (Parm)

void AInterpActor::PlayMovingSound(bool bClosing)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.PlayMovingSound");

	AInterpActor_PlayMovingSound_Params params;
	params.bClosing = bClosing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.FinishedOpen
// ()

void AInterpActor::FinishedOpen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.FinishedOpen");

	AInterpActor_FinishedOpen_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.Restart
// ()

void AInterpActor::Restart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.Restart");

	AInterpActor_Restart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.Detach
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void AInterpActor::Detach(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.Detach");

	AInterpActor_Detach_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.Attach
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void AInterpActor::Attach(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.Attach");

	AInterpActor_Attach_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.RanInto
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void AInterpActor::RanInto(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.RanInto");

	AInterpActor_RanInto_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.EncroachingOn
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AInterpActor::EncroachingOn(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.EncroachingOn");

	AInterpActor_EncroachingOn_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InterpActor.SetShadowParentOnAllAttachedComponents
// ()

void AInterpActor::SetShadowParentOnAllAttachedComponents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.SetShadowParentOnAllAttachedComponents");

	AInterpActor_SetShadowParentOnAllAttachedComponents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.PostBeginPlay
// ()

void AInterpActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.PostBeginPlay");

	AInterpActor_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.HideSelf
// ()

void AEmitter::HideSelf()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.HideSelf");

	AEmitter_HideSelf_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.ApplyCheckpointRecord
// ()
// Parameters:
// struct AEmitter_FCheckpointRecord Record                         (Const, Parm, OutParm)

void AEmitter::ApplyCheckpointRecord(struct AEmitter_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.ApplyCheckpointRecord");

	AEmitter_ApplyCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.Emitter.CreateCheckpointRecord
// ()
// Parameters:
// struct AEmitter_FCheckpointRecord Record                         (Parm, OutParm)

void AEmitter::CreateCheckpointRecord(struct AEmitter_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.CreateCheckpointRecord");

	AEmitter_CreateCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.Emitter.ShouldSaveForCheckpoint
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AEmitter::ShouldSaveForCheckpoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.ShouldSaveForCheckpoint");

	AEmitter_ShouldSaveForCheckpoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Emitter.OnSetParticleSysParam
// ()
// Parameters:
// class USeqAct_SetParticleSysParam* Action                         (Parm)

void AEmitter::OnSetParticleSysParam(class USeqAct_SetParticleSysParam* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnSetParticleSysParam");

	AEmitter_OnSetParticleSysParam_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetActorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class AActor*                  Param                          (Parm)

void AEmitter::SetActorParameter(const struct FName& ParameterName, class AActor* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetActorParameter");

	AEmitter_SetActorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetExtColorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// unsigned char                  Red                            (Parm)
// unsigned char                  Green                          (Parm)
// unsigned char                  Blue                           (Parm)
// unsigned char                  Alpha                          (Parm)

void AEmitter::SetExtColorParameter(const struct FName& ParameterName, unsigned char Red, unsigned char Green, unsigned char Blue, unsigned char Alpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetExtColorParameter");

	AEmitter_SetExtColorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Red = Red;
	params.Green = Green;
	params.Blue = Blue;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetColorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FColor                  Param                          (Parm)

void AEmitter::SetColorParameter(const struct FName& ParameterName, const struct FColor& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetColorParameter");

	AEmitter_SetColorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetVectorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FVector                 Param                          (Parm)

void AEmitter::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetVectorParameter");

	AEmitter_SetVectorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetFloatParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          Param                          (Parm)

void AEmitter::SetFloatParameter(const struct FName& ParameterName, float Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetFloatParameter");

	AEmitter_SetFloatParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.ShutDown
// ()

void AEmitter::ShutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.ShutDown");

	AEmitter_ShutDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.OnParticleEventGenerator
// ()
// Parameters:
// class USeqAct_ParticleEventGenerator* Action                         (Parm)

void AEmitter::OnParticleEventGenerator(class USeqAct_ParticleEventGenerator* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnParticleEventGenerator");

	AEmitter_OnParticleEventGenerator_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void AEmitter::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnToggle");

	AEmitter_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.OnParticleSystemFinished
// ()
// Parameters:
// class UParticleSystemComponent* FinishedComponent              (Parm, EditInline)

void AEmitter::OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnParticleSystemFinished");

	AEmitter_OnParticleSystemFinished_Params params;
	params.FinishedComponent = FinishedComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void AEmitter::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.ReplicatedEvent");

	AEmitter_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.PostBeginPlay
// ()

void AEmitter::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.PostBeginPlay");

	AEmitter_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetTemplate
// ()
// Parameters:
// class UParticleSystem*         NewTemplate                    (Parm)
// bool                           bDestroyOnFinish               (OptionalParm, Parm)

void AEmitter::SetTemplate(class UParticleSystem* NewTemplate, bool bDestroyOnFinish)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetTemplate");

	AEmitter_SetTemplate_Params params;
	params.NewTemplate = NewTemplate;
	params.bDestroyOnFinish = bDestroyOnFinish;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterPool.SpawnEmitterCustomLifetime
// ()
// Parameters:
// class UParticleSystem*         EmitterTemplate                (Parm)
// bool                           bSkipAutoActivate              (OptionalParm, Parm)
// class UParticleSystemComponent* ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UParticleSystemComponent* AEmitterPool::SpawnEmitterCustomLifetime(class UParticleSystem* EmitterTemplate, bool bSkipAutoActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.SpawnEmitterCustomLifetime");

	AEmitterPool_SpawnEmitterCustomLifetime_Params params;
	params.EmitterTemplate = EmitterTemplate;
	params.bSkipAutoActivate = bSkipAutoActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.EmitterPool.SpawnEmitterMeshAttachment
// ()
// Parameters:
// class UParticleSystem*         EmitterTemplate                (Parm)
// class USkeletalMeshComponent*  Mesh                           (Parm, EditInline)
// struct FName                   AttachPointName                (Parm)
// bool                           bAttachToSocket                (OptionalParm, Parm)
// struct FVector                 RelativeLoc                    (OptionalParm, Parm)
// struct FRotator                RelativeRot                    (OptionalParm, Parm)
// class UParticleSystemComponent* ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UParticleSystemComponent* AEmitterPool::SpawnEmitterMeshAttachment(class UParticleSystem* EmitterTemplate, class USkeletalMeshComponent* Mesh, const struct FName& AttachPointName, bool bAttachToSocket, const struct FVector& RelativeLoc, const struct FRotator& RelativeRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.SpawnEmitterMeshAttachment");

	AEmitterPool_SpawnEmitterMeshAttachment_Params params;
	params.EmitterTemplate = EmitterTemplate;
	params.Mesh = Mesh;
	params.AttachPointName = AttachPointName;
	params.bAttachToSocket = bAttachToSocket;
	params.RelativeLoc = RelativeLoc;
	params.RelativeRot = RelativeRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.EmitterPool.SpawnEmitter
// ()
// Parameters:
// class UParticleSystem*         EmitterTemplate                (Parm)
// struct FVector                 SpawnLocation                  (Parm)
// struct FRotator                SpawnRotation                  (OptionalParm, Parm)
// class AActor*                  AttachToActor                  (OptionalParm, Parm)
// bool                           bInheritScaleFromBase          (OptionalParm, Parm)
// class UParticleSystemComponent* ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UParticleSystemComponent* AEmitterPool::SpawnEmitter(class UParticleSystem* EmitterTemplate, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class AActor* AttachToActor, bool bInheritScaleFromBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.SpawnEmitter");

	AEmitterPool_SpawnEmitter_Params params;
	params.EmitterTemplate = EmitterTemplate;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;
	params.AttachToActor = AttachToActor;
	params.bInheritScaleFromBase = bInheritScaleFromBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.EmitterPool.GetPooledComponent
// ()
// Parameters:
// class UParticleSystem*         EmitterTemplate                (Parm)
// bool                           bAutoActivate                  (Parm)
// class UParticleSystemComponent* ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UParticleSystemComponent* AEmitterPool::GetPooledComponent(class UParticleSystem* EmitterTemplate, bool bAutoActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.GetPooledComponent");

	AEmitterPool_GetPooledComponent_Params params;
	params.EmitterTemplate = EmitterTemplate;
	params.bAutoActivate = bAutoActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.EmitterPool.GetFreeMatInstConsts
// ()
// Parameters:
// bool                           bCreateNewObject               (OptionalParm, Parm)
// class UMaterialInstanceConstant* ReturnValue                    (Parm, OutParm, ReturnParm)

class UMaterialInstanceConstant* AEmitterPool::GetFreeMatInstConsts(bool bCreateNewObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.GetFreeMatInstConsts");

	AEmitterPool_GetFreeMatInstConsts_Params params;
	params.bCreateNewObject = bCreateNewObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.EmitterPool.FreeMaterialInstanceConstants
// ()
// Parameters:
// class UStaticMeshComponent*    SMC                            (Parm, EditInline)

void AEmitterPool::FreeMaterialInstanceConstants(class UStaticMeshComponent* SMC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.FreeMaterialInstanceConstants");

	AEmitterPool_FreeMaterialInstanceConstants_Params params;
	params.SMC = SMC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterPool.GetFreeStaticMeshComponent
// ()
// Parameters:
// bool                           bCreateNewObject               (OptionalParm, Parm)
// class UStaticMeshComponent*    ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UStaticMeshComponent* AEmitterPool::GetFreeStaticMeshComponent(bool bCreateNewObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.GetFreeStaticMeshComponent");

	AEmitterPool_GetFreeStaticMeshComponent_Params params;
	params.bCreateNewObject = bCreateNewObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.EmitterPool.FreeStaticMeshComponents
// ()
// Parameters:
// class UParticleSystemComponent* PSC                            (Parm, EditInline)

void AEmitterPool::FreeStaticMeshComponents(class UParticleSystemComponent* PSC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.FreeStaticMeshComponents");

	AEmitterPool_FreeStaticMeshComponents_Params params;
	params.PSC = PSC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterPool.ReturnToPool
// ()
// Parameters:
// class UParticleSystemComponent* PSC                            (Parm, EditInline)

void AEmitterPool::ReturnToPool(class UParticleSystemComponent* PSC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.ReturnToPool");

	AEmitterPool_ReturnToPool_Params params;
	params.PSC = PSC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterPool.ClearPoolComponents
// ()
// Parameters:
// bool                           bClearActive                   (OptionalParm, Parm)

void AEmitterPool::ClearPoolComponents(bool bClearActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.ClearPoolComponents");

	AEmitterPool_ClearPoolComponents_Params params;
	params.bClearActive = bClearActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterPool.OnParticleSystemFinished
// ()
// Parameters:
// class UParticleSystemComponent* PSC                            (Parm, EditInline)

void AEmitterPool::OnParticleSystemFinished(class UParticleSystemComponent* PSC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.OnParticleSystemFinished");

	AEmitterPool_OnParticleSystemFinished_Params params;
	params.PSC = PSC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawDebugGraph
// ()
// Parameters:
// struct FString                 Title                          (Parm, CoerceParm, NeedCtorLink)
// float                          ValueX                         (Parm)
// float                          ValueY                         (Parm)
// float                          UL_X                           (Parm)
// float                          UL_Y                           (Parm)
// float                          W                              (Parm)
// float                          H                              (Parm)
// struct FVector2D               RangeX                         (Parm)
// struct FVector2D               RangeY                         (Parm)

void UCanvas::DrawDebugGraph(const struct FString& Title, float ValueX, float ValueY, float UL_X, float UL_Y, float W, float H, const struct FVector2D& RangeX, const struct FVector2D& RangeY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawDebugGraph");

	UCanvas_DrawDebugGraph_Params params;
	params.Title = Title;
	params.ValueX = ValueX;
	params.ValueY = ValueY;
	params.UL_X = UL_X;
	params.UL_Y = UL_Y;
	params.W = W;
	params.H = H;
	params.RangeX = RangeX;
	params.RangeY = RangeY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTextureDoubleLine
// ()
// Parameters:
// struct FVector                 StartPoint                     (Parm)
// struct FVector                 EndPoint                       (Parm)
// float                          Perc                           (Parm)
// float                          Spacing                        (Parm)
// float                          Width                          (Parm)
// struct FColor                  LineColor                      (Parm)
// struct FColor                  AltLineColor                   (Parm)
// class UTexture*                Tex                            (Parm)
// float                          U                              (Parm)
// float                          V                              (Parm)
// float                          UL                             (Parm)
// float                          VL                             (Parm)

void UCanvas::DrawTextureDoubleLine(const struct FVector& StartPoint, const struct FVector& EndPoint, float Perc, float Spacing, float Width, const struct FColor& LineColor, const struct FColor& AltLineColor, class UTexture* Tex, float U, float V, float UL, float VL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTextureDoubleLine");

	UCanvas_DrawTextureDoubleLine_Params params;
	params.StartPoint = StartPoint;
	params.EndPoint = EndPoint;
	params.Perc = Perc;
	params.Spacing = Spacing;
	params.Width = Width;
	params.LineColor = LineColor;
	params.AltLineColor = AltLineColor;
	params.Tex = Tex;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTextureLine
// ()
// Parameters:
// struct FVector                 StartPoint                     (Parm)
// struct FVector                 EndPoint                       (Parm)
// float                          Perc                           (Parm)
// float                          Width                          (Parm)
// struct FColor                  LineColor                      (Parm)
// class UTexture*                LineTexture                    (Parm)
// float                          U                              (Parm)
// float                          V                              (Parm)
// float                          UL                             (Parm)
// float                          VL                             (Parm)

void UCanvas::DrawTextureLine(const struct FVector& StartPoint, const struct FVector& EndPoint, float Perc, float Width, const struct FColor& LineColor, class UTexture* LineTexture, float U, float V, float UL, float VL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTextureLine");

	UCanvas_DrawTextureLine_Params params;
	params.StartPoint = StartPoint;
	params.EndPoint = EndPoint;
	params.Perc = Perc;
	params.Width = Width;
	params.LineColor = LineColor;
	params.LineTexture = LineTexture;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.Draw2DLine
// ()
// Parameters:
// float                          X1                             (Parm)
// float                          Y1                             (Parm)
// float                          X2                             (Parm)
// float                          Y2                             (Parm)
// struct FColor                  LineColor                      (Parm)

void UCanvas::Draw2DLine(float X1, float Y1, float X2, float Y2, const struct FColor& LineColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.Draw2DLine");

	UCanvas_Draw2DLine_Params params;
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.LineColor = LineColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetDrawColorStruct
// ()
// Parameters:
// struct FColor                  C                              (Parm)

void UCanvas::SetDrawColorStruct(const struct FColor& C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetDrawColorStruct");

	UCanvas_SetDrawColorStruct_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetDrawColor
// ()
// Parameters:
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)
// unsigned char                  A                              (OptionalParm, Parm)

void UCanvas::SetDrawColor(unsigned char R, unsigned char G, unsigned char B, unsigned char A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetDrawColor");

	UCanvas_SetDrawColor_Params params;
	params.R = R;
	params.G = G;
	params.B = B;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawBox
// ()
// Parameters:
// float                          Width                          (Parm)
// float                          Height                         (Parm)

void UCanvas::DrawBox(float Width, float Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawBox");

	UCanvas_DrawBox_Params params;
	params.Width = Width;
	params.Height = Height;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawRect
// ()
// Parameters:
// float                          RectX                          (Parm)
// float                          RectY                          (Parm)
// class UTexture*                Tex                            (OptionalParm, Parm)

void UCanvas::DrawRect(float RectX, float RectY, class UTexture* Tex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawRect");

	UCanvas_DrawRect_Params params;
	params.RectX = RectX;
	params.RectY = RectY;
	params.Tex = Tex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawIcon
// ()
// Parameters:
// struct FCanvasIcon             Icon                           (Parm)
// float                          X                              (Parm)
// float                          Y                              (Parm)
// float                          Scale                          (OptionalParm, Parm)

void UCanvas::DrawIcon(const struct FCanvasIcon& Icon, float X, float Y, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawIcon");

	UCanvas_DrawIcon_Params params;
	params.Icon = Icon;
	params.X = X;
	params.Y = Y;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.MakeIcon
// ()
// Parameters:
// class UTexture*                Texture                        (Parm)
// float                          U                              (OptionalParm, Parm)
// float                          V                              (OptionalParm, Parm)
// float                          UL                             (OptionalParm, Parm)
// float                          VL                             (OptionalParm, Parm)
// struct FCanvasIcon             ReturnValue                    (Parm, OutParm, ReturnParm)

struct FCanvasIcon UCanvas::MakeIcon(class UTexture* Texture, float U, float V, float UL, float VL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.MakeIcon");

	UCanvas_MakeIcon_Params params;
	params.Texture = Texture;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Canvas.DrawTextureBlended
// ()
// Parameters:
// class UTexture*                Tex                            (Parm)
// float                          Scale                          (Parm)
// TEnumAsByte<EBlendMode>        Blend                          (Parm)

void UCanvas::DrawTextureBlended(class UTexture* Tex, float Scale, TEnumAsByte<EBlendMode> Blend)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTextureBlended");

	UCanvas_DrawTextureBlended_Params params;
	params.Tex = Tex;
	params.Scale = Scale;
	params.Blend = Blend;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTexture
// ()
// Parameters:
// class UTexture*                Tex                            (Parm)
// float                          Scale                          (Parm)

void UCanvas::DrawTexture(class UTexture* Tex, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTexture");

	UCanvas_DrawTexture_Params params;
	params.Tex = Tex;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetClip
// ()
// Parameters:
// float                          X                              (Parm)
// float                          Y                              (Parm)

void UCanvas::SetClip(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetClip");

	UCanvas_SetClip_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetOrigin
// ()
// Parameters:
// float                          X                              (Parm)
// float                          Y                              (Parm)

void UCanvas::SetOrigin(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetOrigin");

	UCanvas_SetOrigin_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetPos
// ()
// Parameters:
// float                          PosX                           (Parm)
// float                          PosY                           (Parm)
// float                          PosZ                           (OptionalParm, Parm)

void UCanvas::SetPos(float PosX, float PosY, float PosZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetPos");

	UCanvas_SetPos_Params params;
	params.PosX = PosX;
	params.PosY = PosY;
	params.PosZ = PosZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.Reset
// ()
// Parameters:
// bool                           bKeepOrigin                    (OptionalParm, Parm)

void UCanvas::Reset(bool bKeepOrigin)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.Reset");

	UCanvas_Reset_Params params;
	params.bKeepOrigin = bKeepOrigin;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.PopTransform
// ()

void UCanvas::PopTransform()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.PopTransform");

	UCanvas_PopTransform_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.PushTranslationMatrix
// ()
// Parameters:
// struct FVector                 TranslationVector              (Parm)

void UCanvas::PushTranslationMatrix(const struct FVector& TranslationVector)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.PushTranslationMatrix");

	UCanvas_PushTranslationMatrix_Params params;
	params.TranslationVector = TranslationVector;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DeProject
// ()
// Parameters:
// struct FVector2D               ScreenPos                      (Parm)
// struct FVector                 WorldOrigin                    (Parm, OutParm)
// struct FVector                 WorldDirection                 (Parm, OutParm)

void UCanvas::DeProject(const struct FVector2D& ScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DeProject");

	UCanvas_DeProject_Params params;
	params.ScreenPos = ScreenPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WorldOrigin != nullptr)
		*WorldOrigin = params.WorldOrigin;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;
}


// Function Engine.Canvas.Project
// ()
// Parameters:
// struct FVector                 Location                       (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UCanvas::Project(const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.Project");

	UCanvas_Project_Params params;
	params.Location = Location;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Canvas.DrawText
// ()
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)
// bool                           CR                             (OptionalParm, Parm)
// float                          XScale                         (OptionalParm, Parm)
// float                          YScale                         (OptionalParm, Parm)
// struct FFontRenderInfo         RenderInfo                     (Const, OptionalParm, Parm, OutParm)

void UCanvas::DrawText(const struct FString& Text, bool CR, float XScale, float YScale, struct FFontRenderInfo* RenderInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawText");

	UCanvas_DrawText_Params params;
	params.Text = Text;
	params.CR = CR;
	params.XScale = XScale;
	params.YScale = YScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RenderInfo != nullptr)
		*RenderInfo = params.RenderInfo;
}


// Function Engine.Canvas.TextSize
// ()
// Parameters:
// struct FString                 String                         (Parm, CoerceParm, NeedCtorLink)
// float                          XL                             (Parm, OutParm)
// float                          YL                             (Parm, OutParm)

void UCanvas::TextSize(const struct FString& String, float* XL, float* YL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.TextSize");

	UCanvas_TextSize_Params params;
	params.String = String;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (XL != nullptr)
		*XL = params.XL;
	if (YL != nullptr)
		*YL = params.YL;
}


// Function Engine.Canvas.StrLen
// ()
// Parameters:
// struct FString                 String                         (Parm, CoerceParm, NeedCtorLink)
// float                          XL                             (Parm, OutParm)
// float                          YL                             (Parm, OutParm)

void UCanvas::StrLen(const struct FString& String, float* XL, float* YL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.StrLen");

	UCanvas_StrLen_Params params;
	params.String = String;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (XL != nullptr)
		*XL = params.XL;
	if (YL != nullptr)
		*YL = params.YL;
}


// Function Engine.Canvas.CreateFontRenderInfo
// ()
// Parameters:
// bool                           bClipText                      (OptionalParm, Parm)
// bool                           bEnableShadow                  (OptionalParm, Parm)
// struct FLinearColor            GlowColor                      (OptionalParm, Parm)
// struct FVector2D               GlowOuterRadius                (OptionalParm, Parm)
// struct FVector2D               GlowInnerRadius                (OptionalParm, Parm)
// struct FFontRenderInfo         ReturnValue                    (Parm, OutParm, ReturnParm)

struct FFontRenderInfo UCanvas::CreateFontRenderInfo(bool bClipText, bool bEnableShadow, const struct FLinearColor& GlowColor, const struct FVector2D& GlowOuterRadius, const struct FVector2D& GlowInnerRadius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.CreateFontRenderInfo");

	UCanvas_CreateFontRenderInfo_Params params;
	params.bClipText = bClipText;
	params.bEnableShadow = bEnableShadow;
	params.GlowColor = GlowColor;
	params.GlowOuterRadius = GlowOuterRadius;
	params.GlowInnerRadius = GlowInnerRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Canvas.DrawTris
// ()
// Parameters:
// class UTexture*                Tex                            (Parm)
// TArray<struct FCanvasUVTri>    Triangles                      (Parm, NeedCtorLink)

void UCanvas::DrawTris(class UTexture* Tex, TArray<struct FCanvasUVTri> Triangles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTris");

	UCanvas_DrawTris_Params params;
	params.Tex = Tex;
	params.Triangles = Triangles;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTileStretched
// ()
// Parameters:
// class UTexture*                Tex                            (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)
// float                          U                              (Parm)
// float                          V                              (Parm)
// float                          UL                             (Parm)
// float                          VL                             (Parm)
// struct FLinearColor            LColor                         (OptionalParm, Parm)
// bool                           bStretchHorizontally           (OptionalParm, Parm)
// bool                           bStretchVertically             (OptionalParm, Parm)
// float                          ScalingFactor                  (OptionalParm, Parm)

void UCanvas::DrawTileStretched(class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, const struct FLinearColor& LColor, bool bStretchHorizontally, bool bStretchVertically, float ScalingFactor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTileStretched");

	UCanvas_DrawTileStretched_Params params;
	params.Tex = Tex;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.LColor = LColor;
	params.bStretchHorizontally = bStretchHorizontally;
	params.bStretchVertically = bStretchVertically;
	params.ScalingFactor = ScalingFactor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawRotatedMaterialTile
// ()
// Parameters:
// class UMaterialInterface*      Mat                            (Parm)
// struct FRotator                Rotation                       (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)
// float                          U                              (OptionalParm, Parm)
// float                          V                              (OptionalParm, Parm)
// float                          UL                             (OptionalParm, Parm)
// float                          VL                             (OptionalParm, Parm)
// float                          AnchorX                        (OptionalParm, Parm)
// float                          AnchorY                        (OptionalParm, Parm)

void UCanvas::DrawRotatedMaterialTile(class UMaterialInterface* Mat, const struct FRotator& Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawRotatedMaterialTile");

	UCanvas_DrawRotatedMaterialTile_Params params;
	params.Mat = Mat;
	params.Rotation = Rotation;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.AnchorX = AnchorX;
	params.AnchorY = AnchorY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawRotatedTile
// ()
// Parameters:
// class UTexture*                Tex                            (Parm)
// struct FRotator                Rotation                       (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)
// float                          U                              (Parm)
// float                          V                              (Parm)
// float                          UL                             (Parm)
// float                          VL                             (Parm)
// float                          AnchorX                        (OptionalParm, Parm)
// float                          AnchorY                        (OptionalParm, Parm)

void UCanvas::DrawRotatedTile(class UTexture* Tex, const struct FRotator& Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawRotatedTile");

	UCanvas_DrawRotatedTile_Params params;
	params.Tex = Tex;
	params.Rotation = Rotation;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.AnchorX = AnchorX;
	params.AnchorY = AnchorY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawMaterialTile
// ()
// Parameters:
// class UMaterialInterface*      Mat                            (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)
// float                          U                              (OptionalParm, Parm)
// float                          V                              (OptionalParm, Parm)
// float                          UL                             (OptionalParm, Parm)
// float                          VL                             (OptionalParm, Parm)
// bool                           bClipTile                      (OptionalParm, Parm)

void UCanvas::DrawMaterialTile(class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL, bool bClipTile)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawMaterialTile");

	UCanvas_DrawMaterialTile_Params params;
	params.Mat = Mat;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.bClipTile = bClipTile;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.PreOptimizeDrawTiles
// ()
// Parameters:
// int                            Num                            (Parm)
// class UTexture*                Tex                            (Parm)
// TEnumAsByte<EBlendMode>        Blend                          (OptionalParm, Parm)

void UCanvas::PreOptimizeDrawTiles(int Num, class UTexture* Tex, TEnumAsByte<EBlendMode> Blend)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.PreOptimizeDrawTiles");

	UCanvas_PreOptimizeDrawTiles_Params params;
	params.Num = Num;
	params.Tex = Tex;
	params.Blend = Blend;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTile
// ()
// Parameters:
// class UTexture*                Tex                            (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)
// float                          U                              (Parm)
// float                          V                              (Parm)
// float                          UL                             (Parm)
// float                          VL                             (Parm)
// struct FLinearColor            LColor                         (OptionalParm, Parm)
// bool                           ClipTile                       (OptionalParm, Parm)
// TEnumAsByte<EBlendMode>        Blend                          (OptionalParm, Parm)

void UCanvas::DrawTile(class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, const struct FLinearColor& LColor, bool ClipTile, TEnumAsByte<EBlendMode> Blend)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTile");

	UCanvas_DrawTile_Params params;
	params.Tex = Tex;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.LColor = LColor;
	params.ClipTile = ClipTile;
	params.Blend = Blend;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.OnLostFocusPause
// ()
// Parameters:
// bool                           bEnable                        (Parm)

void AHUD::OnLostFocusPause(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.OnLostFocusPause");

	AHUD_OnLostFocusPause_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.PlayerOwnerDied
// ()

void AHUD::PlayerOwnerDied()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.PlayerOwnerDied");

	AHUD_PlayerOwnerDied_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.GetFontSizeIndex
// ()
// Parameters:
// int                            FontSize                       (Parm)
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* AHUD::GetFontSizeIndex(int FontSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetFontSizeIndex");

	AHUD_GetFontSizeIndex_Params params;
	params.FontSize = FontSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.DrawText
// ()
// Parameters:
// struct FString                 Text                           (Parm, NeedCtorLink)
// struct FVector2D               Position                       (Parm)
// class UFont*                   TextFont                       (Parm)
// struct FVector2D               FontScale                      (Parm)
// struct FColor                  TextColor                      (Parm)

void AHUD::DrawText(const struct FString& Text, const struct FVector2D& Position, class UFont* TextFont, const struct FVector2D& FontScale, const struct FColor& TextColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawText");

	AHUD_DrawText_Params params;
	params.Text = Text;
	params.Position = Position;
	params.TextFont = TextFont;
	params.FontScale = FontScale;
	params.TextColor = TextColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DisplayKismetMessages
// ()

void AHUD::DisplayKismetMessages()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayKismetMessages");

	AHUD_DisplayKismetMessages_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DisplayLocalMessages
// ()

void AHUD::DisplayLocalMessages()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayLocalMessages");

	AHUD_DisplayLocalMessages_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawMessageText
// ()
// Parameters:
// struct FHudLocalizedMessage    LocalMessage                   (Parm, NeedCtorLink)
// float                          ScreenX                        (Parm)
// float                          ScreenY                        (Parm)

void AHUD::DrawMessageText(const struct FHudLocalizedMessage& LocalMessage, float ScreenX, float ScreenY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawMessageText");

	AHUD_DrawMessageText_Params params;
	params.LocalMessage = LocalMessage;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawMessage
// ()
// Parameters:
// int                            I                              (Parm)
// float                          PosY                           (Parm)
// float                          DX                             (Parm, OutParm)
// float                          DY                             (Parm, OutParm)

void AHUD::DrawMessage(int I, float PosY, float* DX, float* DY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawMessage");

	AHUD_DrawMessage_Params params;
	params.I = I;
	params.PosY = PosY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DX != nullptr)
		*DX = params.DX;
	if (DY != nullptr)
		*DY = params.DY;
}


// Function Engine.HUD.GetScreenCoords
// ()
// Parameters:
// float                          PosY                           (Parm)
// float                          ScreenX                        (Parm, OutParm)
// float                          ScreenY                        (Parm, OutParm)
// struct FHudLocalizedMessage    InMessage                      (Parm, OutParm, NeedCtorLink)

void AHUD::GetScreenCoords(float PosY, float* ScreenX, float* ScreenY, struct FHudLocalizedMessage* InMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetScreenCoords");

	AHUD_GetScreenCoords_Params params;
	params.PosY = PosY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ScreenX != nullptr)
		*ScreenX = params.ScreenX;
	if (ScreenY != nullptr)
		*ScreenY = params.ScreenY;
	if (InMessage != nullptr)
		*InMessage = params.InMessage;
}


// Function Engine.HUD.AddLocalizedMessage
// ()
// Parameters:
// int                            Index                          (Parm)
// class UClass*                  InMessageClass                 (Parm)
// struct FString                 CriticalString                 (Parm, NeedCtorLink)
// int                            Switch                         (Parm)
// float                          Position                       (Parm)
// float                          Lifetime                       (Parm)
// int                            FontSize                       (Parm)
// struct FColor                  DrawColor                      (Parm)
// int                            MessageCount                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AHUD::AddLocalizedMessage(int Index, class UClass* InMessageClass, const struct FString& CriticalString, int Switch, float Position, float Lifetime, int FontSize, const struct FColor& DrawColor, int MessageCount, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AddLocalizedMessage");

	AHUD_AddLocalizedMessage_Params params;
	params.Index = Index;
	params.InMessageClass = InMessageClass;
	params.CriticalString = CriticalString;
	params.Switch = Switch;
	params.Position = Position;
	params.Lifetime = Lifetime;
	params.FontSize = FontSize;
	params.DrawColor = DrawColor;
	params.MessageCount = MessageCount;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.LocalizedMessage
// ()
// Parameters:
// class UClass*                  InMessageClass                 (Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (Parm)
// struct FString                 CriticalString                 (Parm, NeedCtorLink)
// int                            Switch                         (Parm)
// float                          Position                       (Parm)
// float                          Lifetime                       (Parm)
// int                            FontSize                       (Parm)
// struct FColor                  DrawColor                      (Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AHUD::LocalizedMessage(class UClass* InMessageClass, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, const struct FString& CriticalString, int Switch, float Position, float Lifetime, int FontSize, const struct FColor& DrawColor, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.LocalizedMessage");

	AHUD_LocalizedMessage_Params params;
	params.InMessageClass = InMessageClass;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.CriticalString = CriticalString;
	params.Switch = Switch;
	params.Position = Position;
	params.Lifetime = Lifetime;
	params.FontSize = FontSize;
	params.DrawColor = DrawColor;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.AddConsoleMessage
// ()
// Parameters:
// struct FString                 M                              (Parm, NeedCtorLink)
// class UClass*                  InMessageClass                 (Parm)
// class APlayerReplicationInfo*  PRI                            (Parm)
// float                          Lifetime                       (OptionalParm, Parm)

void AHUD::AddConsoleMessage(const struct FString& M, class UClass* InMessageClass, class APlayerReplicationInfo* PRI, float Lifetime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AddConsoleMessage");

	AHUD_AddConsoleMessage_Params params;
	params.M = M;
	params.InMessageClass = InMessageClass;
	params.PRI = PRI;
	params.Lifetime = Lifetime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DisplayConsoleMessages
// ()

void AHUD::DisplayConsoleMessages()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayConsoleMessages");

	AHUD_DisplayConsoleMessages_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.Message
// ()
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// struct FString                 msg                            (Parm, CoerceParm, NeedCtorLink)
// struct FName                   MsgType                        (Parm)
// float                          Lifetime                       (OptionalParm, Parm)

void AHUD::Message(class APlayerReplicationInfo* PRI, const struct FString& msg, const struct FName& MsgType, float Lifetime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Message");

	AHUD_Message_Params params;
	params.PRI = PRI;
	params.msg = msg;
	params.MsgType = MsgType;
	params.Lifetime = Lifetime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ClearMessage
// ()
// Parameters:
// struct FHudLocalizedMessage    M                              (Parm, OutParm, NeedCtorLink)

void AHUD::ClearMessage(struct FHudLocalizedMessage* M)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ClearMessage");

	AHUD_ClearMessage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (M != nullptr)
		*M = params.M;
}


// Function Engine.HUD.DisplayBadConnectionAlert
// ()

void AHUD::DisplayBadConnectionAlert()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayBadConnectionAlert");

	AHUD_DisplayBadConnectionAlert_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawHUD
// ()

void AHUD::DrawHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawHUD");

	AHUD_DrawHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.PostRender
// ()

void AHUD::PostRender()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.PostRender");

	AHUD_PostRender_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.PreCalcValues
// ()

void AHUD::PreCalcValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.PreCalcValues");

	AHUD_PreCalcValues_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawRoute
// ()
// Parameters:
// class APawn*                   Target                         (Parm)

void AHUD::DrawRoute(class APawn* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawRoute");

	AHUD_DrawRoute_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShowDebugInfo
// ()
// Parameters:
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void AHUD::ShowDebugInfo(float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebugInfo");

	AHUD_ShowDebugInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.HUD.ShouldDisplayDebug
// ()
// Parameters:
// struct FName                   DebugType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AHUD::ShouldDisplayDebug(const struct FName& DebugType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShouldDisplayDebug");

	AHUD_ShouldDisplayDebug_Params params;
	params.DebugType = DebugType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.ShowDebug
// ()
// Parameters:
// struct FName                   DebugType                      (OptionalParm, Parm)

void AHUD::ShowDebug(const struct FName& DebugType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebug");

	AHUD_ShowDebug_Params params;
	params.DebugType = DebugType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.SetShowScores
// ()
// Parameters:
// bool                           bNewValue                      (Parm)

void AHUD::SetShowScores(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.SetShowScores");

	AHUD_SetShowScores_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShowScores
// ()

void AHUD::ShowScores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowScores");

	AHUD_ShowScores_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShowHUD
// ()

void AHUD::ShowHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowHUD");

	AHUD_ShowHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ToggleHUD
// ()

void AHUD::ToggleHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ToggleHUD");

	AHUD_ToggleHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.AddPostRenderedActor
// ()
// Parameters:
// class AActor*                  A                              (Parm)

void AHUD::AddPostRenderedActor(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AddPostRenderedActor");

	AHUD_AddPostRenderedActor_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.RemovePostRenderedActor
// ()
// Parameters:
// class AActor*                  A                              (Parm)

void AHUD::RemovePostRenderedActor(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.RemovePostRenderedActor");

	AHUD_RemovePostRenderedActor_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawActorOverlays
// ()
// Parameters:
// struct FVector                 ViewPoint                      (Parm)
// struct FRotator                ViewRotation                   (Parm)

void AHUD::DrawActorOverlays(const struct FVector& ViewPoint, const struct FRotator& ViewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawActorOverlays");

	AHUD_DrawActorOverlays_Params params;
	params.ViewPoint = ViewPoint;
	params.ViewRotation = ViewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.PostBeginPlay
// ()

void AHUD::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.PostBeginPlay");

	AHUD_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.Draw2DLine
// ()
// Parameters:
// int                            X1                             (Parm)
// int                            Y1                             (Parm)
// int                            X2                             (Parm)
// int                            Y2                             (Parm)
// struct FColor                  LineColor                      (Parm)

void AHUD::Draw2DLine(int X1, int Y1, int X2, int Y2, const struct FColor& LineColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Draw2DLine");

	AHUD_Draw2DLine_Params params;
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.LineColor = LineColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.Draw3DLine
// ()
// Parameters:
// struct FVector                 Start                          (Parm)
// struct FVector                 End                            (Parm)
// struct FColor                  LineColor                      (Parm)

void AHUD::Draw3DLine(const struct FVector& Start, const struct FVector& End, const struct FColor& LineColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Draw3DLine");

	AHUD_Draw3DLine_Params params;
	params.Start = Start;
	params.End = End;
	params.LineColor = LineColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.CheckForSentinelRun
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAutoTestManager::CheckForSentinelRun()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.CheckForSentinelRun");

	AAutoTestManager_CheckForSentinelRun_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AutoTestManager.StartMatch
// ()

void AAutoTestManager::StartMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.StartMatch");

	AAutoTestManager_StartMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.GetNextAutomatedTestingMap
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AAutoTestManager::GetNextAutomatedTestingMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.GetNextAutomatedTestingMap");

	AAutoTestManager_GetNextAutomatedTestingMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AutoTestManager.IncrementNumberOfMatchesPlayed
// ()

void AAutoTestManager::IncrementNumberOfMatchesPlayed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.IncrementNumberOfMatchesPlayed");

	AAutoTestManager_IncrementNumberOfMatchesPlayed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.IncrementAutomatedTestingMapIndex
// ()

void AAutoTestManager::IncrementAutomatedTestingMapIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.IncrementAutomatedTestingMapIndex");

	AAutoTestManager_IncrementAutomatedTestingMapIndex_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.CloseAutomatedMapTestTimer
// ()

void AAutoTestManager::CloseAutomatedMapTestTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.CloseAutomatedMapTestTimer");

	AAutoTestManager_CloseAutomatedMapTestTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.StartAutomatedMapTestTimerWorker
// ()

void AAutoTestManager::StartAutomatedMapTestTimerWorker()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.StartAutomatedMapTestTimerWorker");

	AAutoTestManager_StartAutomatedMapTestTimerWorker_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.StartAutomatedMapTestTimer
// ()

void AAutoTestManager::StartAutomatedMapTestTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.StartAutomatedMapTestTimer");

	AAutoTestManager_StartAutomatedMapTestTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.DoMemoryTracking
// ()

void AAutoTestManager::DoMemoryTracking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.DoMemoryTracking");

	AAutoTestManager_DoMemoryTracking_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.DoTimeBasedSentinelStatGathering
// ()

void AAutoTestManager::DoTimeBasedSentinelStatGathering()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.DoTimeBasedSentinelStatGathering");

	AAutoTestManager_DoTimeBasedSentinelStatGathering_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.DoSentinel_ViewDependentMemoryAtSpecificLocation
// ()
// Parameters:
// struct FVector                 InLocation                     (Const, Parm, OutParm)
// struct FRotator                InRotation                     (Const, Parm, OutParm)

void AAutoTestManager::DoSentinel_ViewDependentMemoryAtSpecificLocation(struct FVector* InLocation, struct FRotator* InRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.DoSentinel_ViewDependentMemoryAtSpecificLocation");

	AAutoTestManager_DoSentinel_ViewDependentMemoryAtSpecificLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InLocation != nullptr)
		*InLocation = params.InLocation;
	if (InRotation != nullptr)
		*InRotation = params.InRotation;
}


// Function Engine.AutoTestManager.DoSentinel_PerfAtSpecificLocation
// ()
// Parameters:
// struct FVector                 InLocation                     (Const, Parm, OutParm)
// struct FRotator                InRotation                     (Const, Parm, OutParm)

void AAutoTestManager::DoSentinel_PerfAtSpecificLocation(struct FVector* InLocation, struct FRotator* InRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.DoSentinel_PerfAtSpecificLocation");

	AAutoTestManager_DoSentinel_PerfAtSpecificLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InLocation != nullptr)
		*InLocation = params.InLocation;
	if (InRotation != nullptr)
		*InRotation = params.InRotation;
}


// Function Engine.AutoTestManager.DoSentinel_MemoryAtSpecificLocation
// ()
// Parameters:
// struct FVector                 InLocation                     (Const, Parm)
// struct FRotator                InRotation                     (Const, Parm)

void AAutoTestManager::DoSentinel_MemoryAtSpecificLocation(const struct FVector& InLocation, const struct FRotator& InRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.DoSentinel_MemoryAtSpecificLocation");

	AAutoTestManager_DoSentinel_MemoryAtSpecificLocation_Params params;
	params.InLocation = InLocation;
	params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.GetTravelLocations
// ()
// Parameters:
// struct FName                   LevelName                      (Parm)
// class APlayerController*       PC                             (Parm)
// TArray<struct FVector>         TravelPoints                   (Parm, OutParm, NeedCtorLink)

void AAutoTestManager::GetTravelLocations(const struct FName& LevelName, class APlayerController* PC, TArray<struct FVector>* TravelPoints)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.GetTravelLocations");

	AAutoTestManager_GetTravelLocations_Params params;
	params.LevelName = LevelName;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TravelPoints != nullptr)
		*TravelPoints = params.TravelPoints;
}


// Function Engine.AutoTestManager.HandlePerLoadedMapAudioStats
// ()

void AAutoTestManager::HandlePerLoadedMapAudioStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.HandlePerLoadedMapAudioStats");

	AAutoTestManager_HandlePerLoadedMapAudioStats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.DoSentinelActionPerLoadedMap
// ()

void AAutoTestManager::DoSentinelActionPerLoadedMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.DoSentinelActionPerLoadedMap");

	AAutoTestManager_DoSentinelActionPerLoadedMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.DoTravelTheWorld
// ()

void AAutoTestManager::DoTravelTheWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.DoTravelTheWorld");

	AAutoTestManager_DoTravelTheWorld_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.EndSentinelRun
// ()
// Parameters:
// TEnumAsByte<EAutomatedRunResult> RunResult                      (Parm)

void AAutoTestManager::EndSentinelRun(TEnumAsByte<EAutomatedRunResult> RunResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.EndSentinelRun");

	AAutoTestManager_EndSentinelRun_Params params;
	params.RunResult = RunResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.AddSentinelPerTimePeriodStats
// ()
// Parameters:
// struct FVector                 InLocation                     (Const, Parm)
// struct FRotator                InRotation                     (Const, Parm)

void AAutoTestManager::AddSentinelPerTimePeriodStats(const struct FVector& InLocation, const struct FRotator& InRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.AddSentinelPerTimePeriodStats");

	AAutoTestManager_AddSentinelPerTimePeriodStats_Params params;
	params.InLocation = InLocation;
	params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.BeginSentinelRun
// ()
// Parameters:
// struct FString                 TaskDescription                (Const, Parm, NeedCtorLink)
// struct FString                 TaskParameter                  (Const, Parm, NeedCtorLink)
// struct FString                 TagDesc                        (Const, Parm, NeedCtorLink)

void AAutoTestManager::BeginSentinelRun(const struct FString& TaskDescription, const struct FString& TaskParameter, const struct FString& TagDesc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.BeginSentinelRun");

	AAutoTestManager_BeginSentinelRun_Params params;
	params.TaskDescription = TaskDescription;
	params.TaskParameter = TaskParameter;
	params.TagDesc = TagDesc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.InitializeOptions
// ()
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)

void AAutoTestManager::InitializeOptions(const struct FString& Options)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.InitializeOptions");

	AAutoTestManager_InitializeOptions_Params params;
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.Timer
// ()

void AAutoTestManager::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.Timer");

	AAutoTestManager_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.PostBeginPlay
// ()

void AAutoTestManager::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.PostBeginPlay");

	AAutoTestManager_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverGroup.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void ACoverGroup::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverGroup.OnToggle");

	ACoverGroup_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverGroup.ToggleGroup
// ()

void ACoverGroup::ToggleGroup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverGroup.ToggleGroup");

	ACoverGroup_ToggleGroup_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverGroup.DisableGroup
// ()

void ACoverGroup::DisableGroup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverGroup.DisableGroup");

	ACoverGroup_DisableGroup_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverGroup.EnableGroup
// ()

void ACoverGroup::EnableGroup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverGroup.EnableGroup");

	ACoverGroup_EnableGroup_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FileWriter.Destroyed
// ()

void AFileWriter::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FileWriter.Destroyed");

	AFileWriter_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FileWriter.Logf
// ()
// Parameters:
// struct FString                 logString                      (Parm, CoerceParm, NeedCtorLink)

void AFileWriter::Logf(const struct FString& logString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FileWriter.Logf");

	AFileWriter_Logf_Params params;
	params.logString = logString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FileWriter.CloseFile
// ()

void AFileWriter::CloseFile()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FileWriter.CloseFile");

	AFileWriter_CloseFile_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FileWriter.OpenFile
// ()
// Parameters:
// struct FString                 InFilename                     (Parm, CoerceParm, NeedCtorLink)
// TEnumAsByte<EFWFileType>       InFileType                     (OptionalParm, Parm)
// struct FString                 InExtension                    (OptionalParm, Parm, NeedCtorLink)
// bool                           bUnique                        (OptionalParm, Parm)
// bool                           bIncludeTimeStamp              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AFileWriter::OpenFile(const struct FString& InFilename, TEnumAsByte<EFWFileType> InFileType, const struct FString& InExtension, bool bUnique, bool bIncludeTimeStamp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FileWriter.OpenFile");

	AFileWriter_OpenFile_Params params;
	params.InFilename = InFilename;
	params.InFileType = InFileType;
	params.InExtension = InExtension;
	params.bUnique = bUnique;
	params.bIncludeTimeStamp = bIncludeTimeStamp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FileLog.CloseLog
// ()

void AFileLog::CloseLog()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FileLog.CloseLog");

	AFileLog_CloseLog_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FileLog.OpenLog
// ()
// Parameters:
// struct FString                 LogFilename                    (Parm, CoerceParm, NeedCtorLink)
// struct FString                 extension                      (OptionalParm, Parm, NeedCtorLink)
// bool                           bUnique                        (OptionalParm, Parm)

void AFileLog::OpenLog(const struct FString& LogFilename, const struct FString& extension, bool bUnique)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FileLog.OpenLog");

	AFileLog_OpenLog_Params params;
	params.LogFilename = LogFilename;
	params.extension = extension;
	params.bUnique = bUnique;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.OnEngineHasLoaded
// ()

void AGameInfo::OnEngineHasLoaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnEngineHasLoaded");

	AGameInfo_OnEngineHasLoaded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.OnDestroyOnlineGameComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void AGameInfo::OnDestroyOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnDestroyOnlineGameComplete");

	AGameInfo_OnDestroyOnlineGameComplete_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StandbyCheatDetected
// ()
// Parameters:
// TEnumAsByte<EStandbyType>      StandbyType                    (Parm)

void AGameInfo::StandbyCheatDetected(TEnumAsByte<EStandbyType> StandbyType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StandbyCheatDetected");

	AGameInfo_StandbyCheatDetected_Params params;
	params.StandbyType = StandbyType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.EnableStandbyCheatDetection
// ()
// Parameters:
// bool                           bIsEnabled                     (Parm)

void AGameInfo::EnableStandbyCheatDetection(bool bIsEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.EnableStandbyCheatDetection");

	AGameInfo_EnableStandbyCheatDetection_Params params;
	params.bIsEnabled = bIsEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.BeginBVT
// ()
// Parameters:
// struct FString                 TagDesc                        (OptionalParm, Parm, CoerceParm, NeedCtorLink)

void AGameInfo::BeginBVT(const struct FString& TagDesc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BeginBVT");

	AGameInfo_BeginBVT_Params params;
	params.TagDesc = TagDesc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.CheckForSentinelRun
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CheckForSentinelRun()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckForSentinelRun");

	AGameInfo_CheckForSentinelRun_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ShouldAutoContinueToNextRound
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::ShouldAutoContinueToNextRound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ShouldAutoContinueToNextRound");

	AGameInfo_ShouldAutoContinueToNextRound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsDoingASentinelRun
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::IsDoingASentinelRun()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsDoingASentinelRun");

	AGameInfo_IsDoingASentinelRun_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsCheckingForMemLeaks
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::IsCheckingForMemLeaks()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsCheckingForMemLeaks");

	AGameInfo_IsCheckingForMemLeaks_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsCheckingForFragmentation
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::IsCheckingForFragmentation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsCheckingForFragmentation");

	AGameInfo_IsCheckingForFragmentation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsAutomatedPerfTesting
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::IsAutomatedPerfTesting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsAutomatedPerfTesting");

	AGameInfo_IsAutomatedPerfTesting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.DoTravelTheWorld
// ()

void AGameInfo::DoTravelTheWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DoTravelTheWorld");

	AGameInfo_DoTravelTheWorld_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.TellClientsToTravelToSession
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// class UClass*                  SearchClass                    (Parm)
// unsigned char                  PlatformSpecificInfo           (Parm)

void AGameInfo::TellClientsToTravelToSession(const struct FName& SessionName, class UClass* SearchClass, unsigned char PlatformSpecificInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.TellClientsToTravelToSession");

	AGameInfo_TellClientsToTravelToSession_Params params;
	params.SessionName = SessionName;
	params.SearchClass = SearchClass;
	params.PlatformSpecificInfo = PlatformSpecificInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.TellClientsPartyHostIsLeaving
// ()
// Parameters:
// struct FUniqueNetId            PartyHostPlayerId              (Parm)

void AGameInfo::TellClientsPartyHostIsLeaving(const struct FUniqueNetId& PartyHostPlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.TellClientsPartyHostIsLeaving");

	AGameInfo_TellClientsPartyHostIsLeaving_Params params;
	params.PartyHostPlayerId = PartyHostPlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.TellClientsToReturnToPartyHost
// ()

void AGameInfo::TellClientsToReturnToPartyHost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.TellClientsToReturnToPartyHost");

	AGameInfo_TellClientsToReturnToPartyHost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.OnServerCreateComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void AGameInfo::OnServerCreateComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnServerCreateComplete");

	AGameInfo_OnServerCreateComplete_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.RegisterServer
// ()

void AGameInfo::RegisterServer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RegisterServer");

	AGameInfo_RegisterServer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.OnLoginChange
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)

void AGameInfo::OnLoginChange(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnLoginChange");

	AGameInfo_OnLoginChange_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.OnLoginFailed
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EOnlineServerConnectionStatus> ErrorCode                      (Parm)

void AGameInfo::OnLoginFailed(unsigned char LocalUserNum, TEnumAsByte<EOnlineServerConnectionStatus> ErrorCode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnLoginFailed");

	AGameInfo_OnLoginFailed_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ErrorCode = ErrorCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ClearAutoLoginDelegates
// ()

void AGameInfo::ClearAutoLoginDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ClearAutoLoginDelegates");

	AGameInfo_ClearAutoLoginDelegates_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ProcessServerLogin
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::ProcessServerLogin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ProcessServerLogin");

	AGameInfo_ProcessServerLogin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.MatineeCancelled
// ()

void AGameInfo::MatineeCancelled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.MatineeCancelled");

	AGameInfo_MatineeCancelled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.RecalculateSkillRating
// ()

void AGameInfo::RecalculateSkillRating()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RecalculateSkillRating");

	AGameInfo_RecalculateSkillRating_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.UpdateGameplayMuteList
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)

void AGameInfo::UpdateGameplayMuteList(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdateGameplayMuteList");

	AGameInfo_UpdateGameplayMuteList_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.NotifyArbitratedMatchEnd
// ()

void AGameInfo::NotifyArbitratedMatchEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NotifyArbitratedMatchEnd");

	AGameInfo_NotifyArbitratedMatchEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.MatchIsInProgress
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::MatchIsInProgress()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.MatchIsInProgress");

	AGameInfo_MatchIsInProgress_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ArbitrationRegistrationComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void AGameInfo::ArbitrationRegistrationComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ArbitrationRegistrationComplete");

	AGameInfo_ArbitrationRegistrationComplete_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.RegisterServerForArbitration
// ()

void AGameInfo::RegisterServerForArbitration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RegisterServerForArbitration");

	AGameInfo_RegisterServerForArbitration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StartArbitratedMatch
// ()

void AGameInfo::StartArbitratedMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartArbitratedMatch");

	AGameInfo_StartArbitratedMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StartArbitrationRegistration
// ()

void AGameInfo::StartArbitrationRegistration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartArbitrationRegistration");

	AGameInfo_StartArbitrationRegistration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ProcessClientRegistrationCompletion
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)
// bool                           bWasSuccessful                 (Parm)

void AGameInfo::ProcessClientRegistrationCompletion(class APlayerController* PC, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ProcessClientRegistrationCompletion");

	AGameInfo_ProcessClientRegistrationCompletion_Params params;
	params.PC = PC;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.UpdateGameSettingsCounts
// ()

void AGameInfo::UpdateGameSettingsCounts()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdateGameSettingsCounts");

	AGameInfo_UpdateGameSettingsCounts_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SetSeamlessTravelViewTarget
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)

void AGameInfo::SetSeamlessTravelViewTarget(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetSeamlessTravelViewTarget");

	AGameInfo_SetSeamlessTravelViewTarget_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.HandleSeamlessTravelPlayer
// ()
// Parameters:
// class AController*             C                              (Parm, OutParm)

void AGameInfo::HandleSeamlessTravelPlayer(class AController** C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.HandleSeamlessTravelPlayer");

	AGameInfo_HandleSeamlessTravelPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (C != nullptr)
		*C = params.C;
}


// Function Engine.GameInfo.UpdateGameSettings
// ()

void AGameInfo::UpdateGameSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdateGameSettings");

	AGameInfo_UpdateGameSettings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PostSeamlessTravel
// ()

void AGameInfo::PostSeamlessTravel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PostSeamlessTravel");

	AGameInfo_PostSeamlessTravel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SwapPlayerControllers
// ()
// Parameters:
// class APlayerController*       OldPC                          (Parm)
// class APlayerController*       NewPC                          (Parm)

void AGameInfo::SwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SwapPlayerControllers");

	AGameInfo_SwapPlayerControllers_Params params;
	params.OldPC = OldPC;
	params.NewPC = NewPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetSeamlessTravelActorList
// ()
// Parameters:
// bool                           bToEntry                       (Parm)
// TArray<class AActor*>          ActorList                      (Parm, OutParm, NeedCtorLink)

void AGameInfo::GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetSeamlessTravelActorList");

	AGameInfo_GetSeamlessTravelActorList_Params params;
	params.bToEntry = bToEntry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ActorList != nullptr)
		*ActorList = params.ActorList;
}


// Function Engine.GameInfo.OverridePRI
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)
// class APlayerReplicationInfo*  OldPRI                         (Parm)

void AGameInfo::OverridePRI(class APlayerController* PC, class APlayerReplicationInfo* OldPRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OverridePRI");

	AGameInfo_OverridePRI_Params params;
	params.PC = PC;
	params.OldPRI = OldPRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.FindInactivePRI
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::FindInactivePRI(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.FindInactivePRI");

	AGameInfo_FindInactivePRI_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.AddInactivePRI
// ()
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// class APlayerController*       PC                             (Parm)

void AGameInfo::AddInactivePRI(class APlayerReplicationInfo* PRI, class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddInactivePRI");

	AGameInfo_AddInactivePRI_Params params;
	params.PRI = PRI;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PostCommitMapChange
// ()

void AGameInfo::PostCommitMapChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PostCommitMapChange");

	AGameInfo_PostCommitMapChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PreCommitMapChange
// ()
// Parameters:
// struct FString                 PreviousMapName                (Parm, NeedCtorLink)
// struct FString                 NextMapName                    (Parm, NeedCtorLink)

void AGameInfo::PreCommitMapChange(const struct FString& PreviousMapName, const struct FString& NextMapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreCommitMapChange");

	AGameInfo_PreCommitMapChange_Params params;
	params.PreviousMapName = PreviousMapName;
	params.NextMapName = NextMapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AllowPausing
// ()
// Parameters:
// class APlayerController*       PC                             (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::AllowPausing(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AllowPausing");

	AGameInfo_AllowPausing_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.AllowCheats
// ()
// Parameters:
// class APlayerController*       P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::AllowCheats(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AllowCheats");

	AGameInfo_AllowCheats_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.AllowMutator
// ()
// Parameters:
// struct FString                 MutatorClassName               (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::AllowMutator(const struct FString& MutatorClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AllowMutator");

	AGameInfo_AllowMutator_Params params;
	params.MutatorClassName = MutatorClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.PlayerCanRestart
// ()
// Parameters:
// class APlayerController*       aPlayer                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::PlayerCanRestart(class APlayerController* aPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PlayerCanRestart");

	AGameInfo_PlayerCanRestart_Params params;
	params.aPlayer = aPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.PlayerCanRestartGame
// ()
// Parameters:
// class APlayerController*       aPlayer                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::PlayerCanRestartGame(class APlayerController* aPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PlayerCanRestartGame");

	AGameInfo_PlayerCanRestartGame_Params params;
	params.aPlayer = aPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.DriverLeftVehicle
// ()
// Parameters:
// class AVehicle*                V                              (Parm)
// class APawn*                   P                              (Parm)

void AGameInfo::DriverLeftVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DriverLeftVehicle");

	AGameInfo_DriverLeftVehicle_Params params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.CanLeaveVehicle
// ()
// Parameters:
// class AVehicle*                V                              (Parm)
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CanLeaveVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CanLeaveVehicle");

	AGameInfo_CanLeaveVehicle_Params params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.DriverEnteredVehicle
// ()
// Parameters:
// class AVehicle*                V                              (Parm)
// class APawn*                   P                              (Parm)

void AGameInfo::DriverEnteredVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DriverEnteredVehicle");

	AGameInfo_DriverEnteredVehicle_Params params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ModifyScoreKill
// ()
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Other                          (Parm)

void AGameInfo::ModifyScoreKill(class AController* Killer, class AController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ModifyScoreKill");

	AGameInfo_ModifyScoreKill_Params params;
	params.Killer = Killer;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ScoreKill
// ()
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Other                          (Parm)

void AGameInfo::ScoreKill(class AController* Killer, class AController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ScoreKill");

	AGameInfo_ScoreKill_Params params;
	params.Killer = Killer;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.CheckScore
// ()
// Parameters:
// class APlayerReplicationInfo*  Scorer                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CheckScore(class APlayerReplicationInfo* Scorer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckScore");

	AGameInfo_CheckScore_Params params;
	params.Scorer = Scorer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ScoreObjective
// ()
// Parameters:
// class APlayerReplicationInfo*  Scorer                         (Parm)
// int                            Score                          (Parm)

void AGameInfo::ScoreObjective(class APlayerReplicationInfo* Scorer, int Score)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ScoreObjective");

	AGameInfo_ScoreObjective_Params params;
	params.Scorer = Scorer;
	params.Score = Score;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AddObjectiveScore
// ()
// Parameters:
// class APlayerReplicationInfo*  Scorer                         (Parm)
// int                            Score                          (Parm)

void AGameInfo::AddObjectiveScore(class APlayerReplicationInfo* Scorer, int Score)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddObjectiveScore");

	AGameInfo_AddObjectiveScore_Params params;
	params.Scorer = Scorer;
	params.Score = Score;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.RatePlayerStart
// ()
// Parameters:
// class APlayerStart*            P                              (Parm)
// unsigned char                  Team                           (Parm)
// class AController*             Player                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AGameInfo::RatePlayerStart(class APlayerStart* P, unsigned char Team, class AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RatePlayerStart");

	AGameInfo_RatePlayerStart_Params params;
	params.P = P;
	params.Team = Team;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ChoosePlayerStart
// ()
// Parameters:
// class AController*             Player                         (Parm)
// unsigned char                  InTeam                         (OptionalParm, Parm)
// class APlayerStart*            ReturnValue                    (Parm, OutParm, ReturnParm)

class APlayerStart* AGameInfo::ChoosePlayerStart(class AController* Player, unsigned char InTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ChoosePlayerStart");

	AGameInfo_ChoosePlayerStart_Params params;
	params.Player = Player;
	params.InTeam = InTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.FindPlayerStart
// ()
// Parameters:
// class AController*             Player                         (Parm)
// unsigned char                  InTeam                         (OptionalParm, Parm)
// struct FString                 IncomingName                   (OptionalParm, Parm, NeedCtorLink)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* AGameInfo::FindPlayerStart(class AController* Player, unsigned char InTeam, const struct FString& IncomingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.FindPlayerStart");

	AGameInfo_FindPlayerStart_Params params;
	params.Player = Player;
	params.InTeam = InTeam;
	params.IncomingName = IncomingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ShouldSpawnAtStartSpot
// ()
// Parameters:
// class AController*             Player                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::ShouldSpawnAtStartSpot(class AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ShouldSpawnAtStartSpot");

	AGameInfo_ShouldSpawnAtStartSpot_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.EndLogging
// ()
// Parameters:
// struct FString                 Reason                         (Parm, NeedCtorLink)

void AGameInfo::EndLogging(const struct FString& Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.EndLogging");

	AGameInfo_EndLogging_Params params;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GameEventsPoll
// ()

void AGameInfo::GameEventsPoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GameEventsPoll");

	AGameInfo_GameEventsPoll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.EndOnlineGame
// ()

void AGameInfo::EndOnlineGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.EndOnlineGame");

	AGameInfo_EndOnlineGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PerformEndGameHandling
// ()

void AGameInfo::PerformEndGameHandling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PerformEndGameHandling");

	AGameInfo_PerformEndGameHandling_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.EndGame
// ()
// Parameters:
// class APlayerReplicationInfo*  Winner                         (Parm)
// struct FString                 Reason                         (Parm, NeedCtorLink)

void AGameInfo::EndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.EndGame");

	AGameInfo_EndGame_Params params;
	params.Winner = Winner;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.WriteOnlinePlayerScores
// ()

void AGameInfo::WriteOnlinePlayerScores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.WriteOnlinePlayerScores");

	AGameInfo_WriteOnlinePlayerScores_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.WriteOnlineStats
// ()

void AGameInfo::WriteOnlineStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.WriteOnlineStats");

	AGameInfo_WriteOnlineStats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.CheckEndGame
// ()
// Parameters:
// class APlayerReplicationInfo*  Winner                         (Parm)
// struct FString                 Reason                         (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckEndGame");

	AGameInfo_CheckEndGame_Params params;
	params.Winner = Winner;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.CheckModifiedEndGame
// ()
// Parameters:
// class APlayerReplicationInfo*  Winner                         (Parm)
// struct FString                 Reason                         (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CheckModifiedEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckModifiedEndGame");

	AGameInfo_CheckModifiedEndGame_Params params;
	params.Winner = Winner;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.BroadcastLocalizedTeam
// ()
// Parameters:
// int                            TeamIndex                      (Parm)
// class AActor*                  Sender                         (Parm)
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AGameInfo::BroadcastLocalizedTeam(int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BroadcastLocalizedTeam");

	AGameInfo_BroadcastLocalizedTeam_Params params;
	params.TeamIndex = TeamIndex;
	params.Sender = Sender;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.BroadcastLocalized
// ()
// Parameters:
// class AActor*                  Sender                         (Parm)
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AGameInfo::BroadcastLocalized(class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BroadcastLocalized");

	AGameInfo_BroadcastLocalized_Params params;
	params.Sender = Sender;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.BroadcastTeam
// ()
// Parameters:
// class AController*             Sender                         (Parm)
// struct FString                 msg                            (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)

void AGameInfo::BroadcastTeam(class AController* Sender, const struct FString& msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BroadcastTeam");

	AGameInfo_BroadcastTeam_Params params;
	params.Sender = Sender;
	params.msg = msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Broadcast
// ()
// Parameters:
// class AActor*                  Sender                         (Parm)
// struct FString                 msg                            (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)

void AGameInfo::Broadcast(class AActor* Sender, const struct FString& msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Broadcast");

	AGameInfo_Broadcast_Params params;
	params.Sender = Sender;
	params.msg = msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.RestartGame
// ()

void AGameInfo::RestartGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RestartGame");

	AGameInfo_RestartGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetTravelType
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::GetTravelType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetTravelType");

	AGameInfo_GetTravelType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetNextMap
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::GetNextMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetNextMap");

	AGameInfo_GetNextMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SendPlayer
// ()
// Parameters:
// class APlayerController*       aPlayer                        (Parm)
// struct FString                 URL                            (Parm, NeedCtorLink)

void AGameInfo::SendPlayer(class APlayerController* aPlayer, const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SendPlayer");

	AGameInfo_SendPlayer_Params params;
	params.aPlayer = aPlayer;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PickTeam
// ()
// Parameters:
// unsigned char                  Current                        (Parm)
// class AController*             C                              (Parm)
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char AGameInfo::PickTeam(unsigned char Current, class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PickTeam");

	AGameInfo_PickTeam_Params params;
	params.Current = Current;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ChangeTeam
// ()
// Parameters:
// class AController*             Other                          (Parm)
// int                            N                              (Parm)
// bool                           bNewTeam                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::ChangeTeam(class AController* Other, int N, bool bNewTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ChangeTeam");

	AGameInfo_ChangeTeam_Params params;
	params.Other = Other;
	params.N = N;
	params.bNewTeam = bNewTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ChangeName
// ()
// Parameters:
// class AController*             Other                          (Parm)
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)
// bool                           bNameChange                    (Parm)

void AGameInfo::ChangeName(class AController* Other, const struct FString& S, bool bNameChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ChangeName");

	AGameInfo_ChangeName_Params params;
	params.Other = Other;
	params.S = S;
	params.bNameChange = bNameChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.DiscardInventory
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// class AController*             Killer                         (OptionalParm, Parm)

void AGameInfo::DiscardInventory(class APawn* Other, class AController* Killer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DiscardInventory");

	AGameInfo_DiscardInventory_Params params;
	params.Other = Other;
	params.Killer = Killer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PickupQuery
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// class UClass*                  ItemClass                      (Parm)
// class AActor*                  Pickup                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::PickupQuery(class APawn* Other, class UClass* ItemClass, class AActor* Pickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PickupQuery");

	AGameInfo_PickupQuery_Params params;
	params.Other = Other;
	params.ItemClass = ItemClass;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ShouldRespawn
// ()
// Parameters:
// class APickupFactory*          Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::ShouldRespawn(class APickupFactory* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ShouldRespawn");

	AGameInfo_ShouldRespawn_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.CheckRelevance
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CheckRelevance(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckRelevance");

	AGameInfo_CheckRelevance_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ReduceDamage
// ()
// Parameters:
// int                            Damage                         (Parm, OutParm)
// class APawn*                   injured                        (Parm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm, OutParm)
// class UClass*                  DamageType                     (Parm)
// class AActor*                  DamageCauser                   (Parm)

void AGameInfo::ReduceDamage(class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ReduceDamage");

	AGameInfo_ReduceDamage_Params params;
	params.injured = injured;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Damage != nullptr)
		*Damage = params.Damage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;
}


// Function Engine.GameInfo.CanSpectate
// ()
// Parameters:
// class APlayerController*       Viewer                         (Parm)
// class APlayerReplicationInfo*  ViewTarget                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CanSpectate(class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CanSpectate");

	AGameInfo_CanSpectate_Params params;
	params.Viewer = Viewer;
	params.ViewTarget = ViewTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.KickBan
// ()
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void AGameInfo::KickBan(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.KickBan");

	AGameInfo_KickBan_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Kick
// ()
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void AGameInfo::Kick(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Kick");

	AGameInfo_Kick_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.BroadcastDeathMessage
// ()
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Other                          (Parm)
// class UClass*                  DamageType                     (Parm)

void AGameInfo::BroadcastDeathMessage(class AController* Killer, class AController* Other, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BroadcastDeathMessage");

	AGameInfo_BroadcastDeathMessage_Params params;
	params.Killer = Killer;
	params.Other = Other;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PreventDeath
// ()
// Parameters:
// class APawn*                   KilledPawn                     (Parm)
// class AController*             Killer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::PreventDeath(class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreventDeath");

	AGameInfo_PreventDeath_Params params;
	params.KilledPawn = KilledPawn;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.Killed
// ()
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             KilledPlayer                   (Parm)
// class APawn*                   KilledPawn                     (Parm)
// class UClass*                  DamageType                     (Parm)

void AGameInfo::Killed(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Killed");

	AGameInfo_Killed_Params params;
	params.Killer = Killer;
	params.KilledPlayer = KilledPlayer;
	params.KilledPawn = KilledPawn;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.NotifyKilled
// ()
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Killed                         (Parm)
// class APawn*                   KilledPawn                     (Parm)
// class UClass*                  DamageType                     (Parm)

void AGameInfo::NotifyKilled(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NotifyKilled");

	AGameInfo_NotifyKilled_Params params;
	params.Killer = Killer;
	params.Killed = Killed;
	params.KilledPawn = KilledPawn;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SetPlayerDefaults
// ()
// Parameters:
// class APawn*                   PlayerPawn                     (Parm)

void AGameInfo::SetPlayerDefaults(class APawn* PlayerPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetPlayerDefaults");

	AGameInfo_SetPlayerDefaults_Params params;
	params.PlayerPawn = PlayerPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Mutate
// ()
// Parameters:
// struct FString                 MutateString                   (Parm, NeedCtorLink)
// class APlayerController*       Sender                         (Parm)

void AGameInfo::Mutate(const struct FString& MutateString, class APlayerController* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Mutate");

	AGameInfo_Mutate_Params params;
	params.MutateString = MutateString;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AddDefaultInventory
// ()
// Parameters:
// class APawn*                   P                              (Parm)

void AGameInfo::AddDefaultInventory(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddDefaultInventory");

	AGameInfo_AddDefaultInventory_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AcceptInventory
// ()
// Parameters:
// class APawn*                   PlayerPawn                     (Parm)

void AGameInfo::AcceptInventory(class APawn* PlayerPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AcceptInventory");

	AGameInfo_AcceptInventory_Params params;
	params.PlayerPawn = PlayerPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.UnregisterPlayer
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)

void AGameInfo::UnregisterPlayer(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UnregisterPlayer");

	AGameInfo_UnregisterPlayer_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Logout
// ()
// Parameters:
// class AController*             Exiting                        (Parm)

void AGameInfo::Logout(class AController* Exiting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Logout");

	AGameInfo_Logout_Params params;
	params.Exiting = Exiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PreExit
// ()

void AGameInfo::PreExit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreExit");

	AGameInfo_PreExit_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.CalculatedNetSpeed
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::CalculatedNetSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CalculatedNetSpeed");

	AGameInfo_CalculatedNetSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.UpdateNetSpeeds
// ()

void AGameInfo::UpdateNetSpeeds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdateNetSpeeds");

	AGameInfo_UpdateNetSpeeds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PostLogin
// ()
// Parameters:
// class APlayerController*       NewPlayer                      (Parm)

void AGameInfo::PostLogin(class APlayerController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PostLogin");

	AGameInfo_PostLogin_Params params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.UpdateBestNextHosts
// ()

void AGameInfo::UpdateBestNextHosts()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdateBestNextHosts");

	AGameInfo_UpdateBestNextHosts_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.BestNextHostSort
// ()
// Parameters:
// class APlayerController*       A                              (Parm)
// class APlayerController*       B                              (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::BestNextHostSort(class APlayerController* A, class APlayerController* B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BestNextHostSort");

	AGameInfo_BestNextHostSort_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GenericPlayerInitialization
// ()
// Parameters:
// class AController*             C                              (Parm)

void AGameInfo::GenericPlayerInitialization(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GenericPlayerInitialization");

	AGameInfo_GenericPlayerInitialization_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ReplicateStreamingStatus
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)

void AGameInfo::ReplicateStreamingStatus(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ReplicateStreamingStatus");

	AGameInfo_ReplicateStreamingStatus_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetDefaultPlayerClass
// ()
// Parameters:
// class AController*             C                              (Parm)
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* AGameInfo::GetDefaultPlayerClass(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetDefaultPlayerClass");

	AGameInfo_GetDefaultPlayerClass_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SpawnDefaultPawnFor
// ()
// Parameters:
// class AController*             NewPlayer                      (Parm)
// class ANavigationPoint*        StartSpot                      (Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* AGameInfo::SpawnDefaultPawnFor(class AController* NewPlayer, class ANavigationPoint* StartSpot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SpawnDefaultPawnFor");

	AGameInfo_SpawnDefaultPawnFor_Params params;
	params.NewPlayer = NewPlayer;
	params.StartSpot = StartSpot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.RestartPlayer
// ()
// Parameters:
// class AController*             NewPlayer                      (Parm)

void AGameInfo::RestartPlayer(class AController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RestartPlayer");

	AGameInfo_RestartPlayer_Params params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StartBots
// ()

void AGameInfo::StartBots()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartBots");

	AGameInfo_StartBots_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StartHumans
// ()

void AGameInfo::StartHumans()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartHumans");

	AGameInfo_StartHumans_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.OnStartOnlineGameComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void AGameInfo::OnStartOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnStartOnlineGameComplete");

	AGameInfo_OnStartOnlineGameComplete_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StartOnlineGame
// ()

void AGameInfo::StartOnlineGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartOnlineGame");

	AGameInfo_StartOnlineGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StartMatch
// ()

void AGameInfo::StartMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartMatch");

	AGameInfo_StartMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Login
// ()
// Parameters:
// struct FString                 Portal                         (Parm, NeedCtorLink)
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FUniqueNetId            UniqueId                       (Const, Parm)
// struct FString                 ErrorMessage                   (Parm, OutParm, NeedCtorLink)
// class APlayerController*       ReturnValue                    (Parm, OutParm, ReturnParm)

class APlayerController* AGameInfo::Login(const struct FString& Portal, const struct FString& Options, const struct FUniqueNetId& UniqueId, struct FString* ErrorMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Login");

	AGameInfo_Login_Params params;
	params.Portal = Portal;
	params.Options = Options;
	params.UniqueId = UniqueId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ErrorMessage != nullptr)
		*ErrorMessage = params.ErrorMessage;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SpawnPlayerController
// ()
// Parameters:
// struct FVector                 SpawnLocation                  (Parm)
// struct FRotator                SpawnRotation                  (Parm)
// class APlayerController*       ReturnValue                    (Parm, OutParm, ReturnParm)

class APlayerController* AGameInfo::SpawnPlayerController(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SpawnPlayerController");

	AGameInfo_SpawnPlayerController_Params params;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetNextPlayerID
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::GetNextPlayerID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetNextPlayerID");

	AGameInfo_GetNextPlayerID_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.AtCapacity
// ()
// Parameters:
// bool                           bSpectator                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::AtCapacity(bool bSpectator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AtCapacity");

	AGameInfo_AtCapacity_Params params;
	params.bSpectator = bSpectator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.PreLogin
// ()
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 Address                        (Parm, NeedCtorLink)
// struct FString                 ErrorMessage                   (Parm, OutParm, NeedCtorLink)

void AGameInfo::PreLogin(const struct FString& Options, const struct FString& Address, struct FString* ErrorMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreLogin");

	AGameInfo_PreLogin_Params params;
	params.Options = Options;
	params.Address = Address;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ErrorMessage != nullptr)
		*ErrorMessage = params.ErrorMessage;
}


// Function Engine.GameInfo.RequiresPassword
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::RequiresPassword()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RequiresPassword");

	AGameInfo_RequiresPassword_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ProcessClientTravel
// ()
// Parameters:
// struct FString                 URL                            (Parm, OutParm, NeedCtorLink)
// struct FGuid                   NextMapGuid                    (Parm)
// bool                           bSeamless                      (Parm)
// bool                           bAbsolute                      (Parm)
// class APlayerController*       ReturnValue                    (Parm, OutParm, ReturnParm)

class APlayerController* AGameInfo::ProcessClientTravel(const struct FGuid& NextMapGuid, bool bSeamless, bool bAbsolute, struct FString* URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ProcessClientTravel");

	AGameInfo_ProcessClientTravel_Params params;
	params.NextMapGuid = NextMapGuid;
	params.bSeamless = bSeamless;
	params.bAbsolute = bAbsolute;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ProcessServerTravel
// ()
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)
// bool                           bAbsolute                      (OptionalParm, Parm)

void AGameInfo::ProcessServerTravel(const struct FString& URL, bool bAbsolute)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ProcessServerTravel");

	AGameInfo_ProcessServerTravel_Params params;
	params.URL = URL;
	params.bAbsolute = bAbsolute;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.RemoveMutator
// ()
// Parameters:
// class AMutator*                MutatorToRemove                (Parm)

void AGameInfo::RemoveMutator(class AMutator* MutatorToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RemoveMutator");

	AGameInfo_RemoveMutator_Params params;
	params.MutatorToRemove = MutatorToRemove;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AddMutator
// ()
// Parameters:
// struct FString                 mutname                        (Parm, NeedCtorLink)
// bool                           bUserAdded                     (OptionalParm, Parm)

void AGameInfo::AddMutator(const struct FString& mutname, bool bUserAdded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddMutator");

	AGameInfo_AddMutator_Params params;
	params.mutname = mutname;
	params.bUserAdded = bUserAdded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.NotifyPendingConnectionLost
// ()

void AGameInfo::NotifyPendingConnectionLost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NotifyPendingConnectionLost");

	AGameInfo_NotifyPendingConnectionLost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.InitGame
// ()
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 ErrorMessage                   (Parm, OutParm, NeedCtorLink)

void AGameInfo::InitGame(const struct FString& Options, struct FString* ErrorMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.InitGame");

	AGameInfo_InitGame_Params params;
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ErrorMessage != nullptr)
		*ErrorMessage = params.ErrorMessage;
}


// Function Engine.GameInfo.SetGameType
// ()
// Parameters:
// struct FString                 MapName                        (Parm, NeedCtorLink)
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 Portal                         (Parm, NeedCtorLink)
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* AGameInfo::SetGameType(const struct FString& MapName, const struct FString& Options, const struct FString& Portal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetGameType");

	AGameInfo_SetGameType_Params params;
	params.MapName = MapName;
	params.Options = Options;
	params.Portal = Portal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetDefaultGameClassPath
// ()
// Parameters:
// struct FString                 MapName                        (Parm, NeedCtorLink)
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 Portal                         (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::GetDefaultGameClassPath(const struct FString& MapName, const struct FString& Options, const struct FString& Portal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetDefaultGameClassPath");

	AGameInfo_GetDefaultGameClassPath_Params params;
	params.MapName = MapName;
	params.Options = Options;
	params.Portal = Portal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetIntOption
// ()
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 ParseString                    (Parm, NeedCtorLink)
// int                            CurrentValue                   (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::GetIntOption(const struct FString& Options, const struct FString& ParseString, int CurrentValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetIntOption");

	AGameInfo_GetIntOption_Params params;
	params.Options = Options;
	params.ParseString = ParseString;
	params.CurrentValue = CurrentValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.HasOption
// ()
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 InKey                          (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::HasOption(const struct FString& Options, const struct FString& InKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.HasOption");

	AGameInfo_HasOption_Params params;
	params.Options = Options;
	params.InKey = InKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ParseOption
// ()
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 InKey                          (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::ParseOption(const struct FString& Options, const struct FString& InKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ParseOption");

	AGameInfo_ParseOption_Params params;
	params.Options = Options;
	params.InKey = InKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetKeyValue
// ()
// Parameters:
// struct FString                 Pair                           (Parm, NeedCtorLink)
// struct FString                 Key                            (Parm, OutParm, NeedCtorLink)
// struct FString                 Value                          (Parm, OutParm, NeedCtorLink)

void AGameInfo::GetKeyValue(const struct FString& Pair, struct FString* Key, struct FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetKeyValue");

	AGameInfo_GetKeyValue_Params params;
	params.Pair = Pair;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Key != nullptr)
		*Key = params.Key;
	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.GameInfo.GrabOption
// ()
// Parameters:
// struct FString                 Options                        (Parm, OutParm, NeedCtorLink)
// struct FString                 Result                         (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::GrabOption(struct FString* Options, struct FString* Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GrabOption");

	AGameInfo_GrabOption_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Options != nullptr)
		*Options = params.Options;
	if (Result != nullptr)
		*Result = params.Result;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SetGameSpeed
// ()
// Parameters:
// float                          T                              (Parm)

void AGameInfo::SetGameSpeed(float T)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetGameSpeed");

	AGameInfo_SetGameSpeed_Params params;
	params.T = T;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.DebugPause
// ()

void AGameInfo::DebugPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DebugPause");

	AGameInfo_DebugPause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ForceClearUnpauseDelegates
// ()
// Parameters:
// class AActor*                  PauseActor                     (Parm)

void AGameInfo::ForceClearUnpauseDelegates(class AActor* PauseActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ForceClearUnpauseDelegates");

	AGameInfo_ForceClearUnpauseDelegates_Params params;
	params.PauseActor = PauseActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ClearPause
// ()

void AGameInfo::ClearPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ClearPause");

	AGameInfo_ClearPause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SetPause
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)
// struct FScriptDelegate         CanUnpauseDelegate             (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::SetPause(class APlayerController* PC, const struct FScriptDelegate& CanUnpauseDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetPause");

	AGameInfo_SetPause_Params params;
	params.PC = PC;
	params.CanUnpauseDelegate = CanUnpauseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.CanUnpause
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CanUnpause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CanUnpause");

	AGameInfo_CanUnpause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetNumPlayers
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::GetNumPlayers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetNumPlayers");

	AGameInfo_GetNumPlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetNetworkNumber
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::GetNetworkNumber()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetNetworkNumber");

	AGameInfo_GetNetworkNumber_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.InitGameReplicationInfo
// ()

void AGameInfo::InitGameReplicationInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.InitGameReplicationInfo");

	AGameInfo_InitGameReplicationInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ForceKickPlayer
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)
// struct FString                 KickReason                     (Parm, NeedCtorLink)

void AGameInfo::ForceKickPlayer(class APlayerController* PC, const struct FString& KickReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ForceKickPlayer");

	AGameInfo_ForceKickPlayer_Params params;
	params.PC = PC;
	params.KickReason = KickReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.KickIdler
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)

void AGameInfo::KickIdler(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.KickIdler");

	AGameInfo_KickIdler_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GameEnding
// ()

void AGameInfo::GameEnding()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GameEnding");

	AGameInfo_GameEnding_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.NotifyNavigationChanged
// ()
// Parameters:
// class ANavigationPoint*        N                              (Parm)

void AGameInfo::NotifyNavigationChanged(class ANavigationPoint* N)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NotifyNavigationChanged");

	AGameInfo_NotifyNavigationChanged_Params params;
	params.N = N;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.DoNavFearCostFallOff
// ()

void AGameInfo::DoNavFearCostFallOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DoNavFearCostFallOff");

	AGameInfo_DoNavFearCostFallOff_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Timer
// ()

void AGameInfo::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Timer");

	AGameInfo_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ResetLevel
// ()

void AGameInfo::ResetLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ResetLevel");

	AGameInfo_ResetLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ShouldReset
// ()
// Parameters:
// class AActor*                  ActorToReset                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::ShouldReset(class AActor* ActorToReset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ShouldReset");

	AGameInfo_ShouldReset_Params params;
	params.ActorToReset = ActorToReset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.Reset
// ()

void AGameInfo::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Reset");

	AGameInfo_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.DisplayDebug
// ()
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void AGameInfo::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DisplayDebug");

	AGameInfo_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.GameInfo.PostBeginPlay
// ()

void AGameInfo::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PostBeginPlay");

	AGameInfo_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetCoverReplicator
// ()
// Parameters:
// class ACoverReplicator*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ACoverReplicator* AGameInfo::GetCoverReplicator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetCoverReplicator");

	AGameInfo_GetCoverReplicator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.PreBeginPlay
// ()

void AGameInfo::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreBeginPlay");

	AGameInfo_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetMapCommonPackageName
// ()
// Parameters:
// struct FString                 InFilename                     (Const, Parm, OutParm, NeedCtorLink)
// struct FString                 OutCommonPackageName           (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::GetMapCommonPackageName(struct FString* InFilename, struct FString* OutCommonPackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetMapCommonPackageName");

	AGameInfo_GetMapCommonPackageName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InFilename != nullptr)
		*InFilename = params.InFilename;
	if (OutCommonPackageName != nullptr)
		*OutCommonPackageName = params.OutCommonPackageName;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetSupportedGameTypes
// ()
// Parameters:
// struct FString                 InFilename                     (Const, Parm, OutParm, NeedCtorLink)
// struct FGameTypePrefix         OutGameType                    (Parm, OutParm, NeedCtorLink)
// bool                           bCheckExt                      (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::GetSupportedGameTypes(bool bCheckExt, struct FString* InFilename, struct FGameTypePrefix* OutGameType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetSupportedGameTypes");

	AGameInfo_GetSupportedGameTypes_Params params;
	params.bCheckExt = bCheckExt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InFilename != nullptr)
		*InFilename = params.InFilename;
	if (OutGameType != nullptr)
		*OutGameType = params.OutGameType;

	return params.ReturnValue;
}


// Function Engine.Mutator.NetDamage
// ()
// Parameters:
// int                            OriginalDamage                 (Parm)
// int                            Damage                         (Parm, OutParm)
// class APawn*                   injured                        (Parm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm, OutParm)
// class UClass*                  DamageType                     (Parm)
// class AActor*                  DamageCauser                   (Parm)

void AMutator::NetDamage(int OriginalDamage, class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.NetDamage");

	AMutator_NetDamage_Params params;
	params.OriginalDamage = OriginalDamage;
	params.injured = injured;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Damage != nullptr)
		*Damage = params.Damage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;
}


// Function Engine.Mutator.ScoreKill
// ()
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Killed                         (Parm)

void AMutator::ScoreKill(class AController* Killer, class AController* Killed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.ScoreKill");

	AMutator_ScoreKill_Params params;
	params.Killer = Killer;
	params.Killed = Killed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.ScoreObjective
// ()
// Parameters:
// class APlayerReplicationInfo*  Scorer                         (Parm)
// int                            Score                          (Parm)

void AMutator::ScoreObjective(class APlayerReplicationInfo* Scorer, int Score)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.ScoreObjective");

	AMutator_ScoreObjective_Params params;
	params.Scorer = Scorer;
	params.Score = Score;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.PreventDeath
// ()
// Parameters:
// class APawn*                   Killed                         (Parm)
// class AController*             Killer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::PreventDeath(class APawn* Killed, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.PreventDeath");

	AMutator_PreventDeath_Params params;
	params.Killed = Killed;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.OverridePickupQuery
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// class UClass*                  ItemClass                      (Parm)
// class AActor*                  Pickup                         (Parm)
// unsigned char                  bAllowPickup                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::OverridePickupQuery(class APawn* Other, class UClass* ItemClass, class AActor* Pickup, unsigned char* bAllowPickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.OverridePickupQuery");

	AMutator_OverridePickupQuery_Params params;
	params.Other = Other;
	params.ItemClass = ItemClass;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bAllowPickup != nullptr)
		*bAllowPickup = params.bAllowPickup;

	return params.ReturnValue;
}


// Function Engine.Mutator.CheckEndGame
// ()
// Parameters:
// class APlayerReplicationInfo*  Winner                         (Parm)
// struct FString                 Reason                         (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.CheckEndGame");

	AMutator_CheckEndGame_Params params;
	params.Winner = Winner;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.HandleRestartGame
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::HandleRestartGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.HandleRestartGame");

	AMutator_HandleRestartGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.FindPlayerStart
// ()
// Parameters:
// class AController*             Player                         (Parm)
// unsigned char                  InTeam                         (OptionalParm, Parm)
// struct FString                 IncomingName                   (OptionalParm, Parm, NeedCtorLink)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* AMutator::FindPlayerStart(class AController* Player, unsigned char InTeam, const struct FString& IncomingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.FindPlayerStart");

	AMutator_FindPlayerStart_Params params;
	params.Player = Player;
	params.InTeam = InTeam;
	params.IncomingName = IncomingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.GetSeamlessTravelActorList
// ()
// Parameters:
// bool                           bToEntry                       (Parm)
// TArray<class AActor*>          ActorList                      (Parm, OutParm, NeedCtorLink)

void AMutator::GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.GetSeamlessTravelActorList");

	AMutator_GetSeamlessTravelActorList_Params params;
	params.bToEntry = bToEntry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ActorList != nullptr)
		*ActorList = params.ActorList;
}


// Function Engine.Mutator.InitMutator
// ()
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 ErrorMessage                   (Parm, OutParm, NeedCtorLink)

void AMutator::InitMutator(const struct FString& Options, struct FString* ErrorMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.InitMutator");

	AMutator_InitMutator_Params params;
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ErrorMessage != nullptr)
		*ErrorMessage = params.ErrorMessage;
}


// Function Engine.Mutator.DriverLeftVehicle
// ()
// Parameters:
// class AVehicle*                V                              (Parm)
// class APawn*                   P                              (Parm)

void AMutator::DriverLeftVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.DriverLeftVehicle");

	AMutator_DriverLeftVehicle_Params params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.CanLeaveVehicle
// ()
// Parameters:
// class AVehicle*                V                              (Parm)
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::CanLeaveVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.CanLeaveVehicle");

	AMutator_CanLeaveVehicle_Params params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.DriverEnteredVehicle
// ()
// Parameters:
// class AVehicle*                V                              (Parm)
// class APawn*                   P                              (Parm)

void AMutator::DriverEnteredVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.DriverEnteredVehicle");

	AMutator_DriverEnteredVehicle_Params params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.NotifyLogin
// ()
// Parameters:
// class AController*             NewPlayer                      (Parm)

void AMutator::NotifyLogin(class AController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.NotifyLogin");

	AMutator_NotifyLogin_Params params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.NotifyLogout
// ()
// Parameters:
// class AController*             Exiting                        (Parm)

void AMutator::NotifyLogout(class AController* Exiting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.NotifyLogout");

	AMutator_NotifyLogout_Params params;
	params.Exiting = Exiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.CheckReplacement
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::CheckReplacement(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.CheckReplacement");

	AMutator_CheckReplacement_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.CheckRelevance
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::CheckRelevance(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.CheckRelevance");

	AMutator_CheckRelevance_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.IsRelevant
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::IsRelevant(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.IsRelevant");

	AMutator_IsRelevant_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.AlwaysKeep
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::AlwaysKeep(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.AlwaysKeep");

	AMutator_AlwaysKeep_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.AddMutator
// ()
// Parameters:
// class AMutator*                M                              (Parm)

void AMutator::AddMutator(class AMutator* M)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.AddMutator");

	AMutator_AddMutator_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.ModifyPlayer
// ()
// Parameters:
// class APawn*                   Other                          (Parm)

void AMutator::ModifyPlayer(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.ModifyPlayer");

	AMutator_ModifyPlayer_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.ModifyLogin
// ()
// Parameters:
// struct FString                 Portal                         (Parm, OutParm, NeedCtorLink)
// struct FString                 Options                        (Parm, OutParm, NeedCtorLink)

void AMutator::ModifyLogin(struct FString* Portal, struct FString* Options)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.ModifyLogin");

	AMutator_ModifyLogin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Portal != nullptr)
		*Portal = params.Portal;
	if (Options != nullptr)
		*Options = params.Options;
}


// Function Engine.Mutator.Mutate
// ()
// Parameters:
// struct FString                 MutateString                   (Parm, NeedCtorLink)
// class APlayerController*       Sender                         (Parm)

void AMutator::Mutate(const struct FString& MutateString, class APlayerController* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.Mutate");

	AMutator_Mutate_Params params;
	params.MutateString = MutateString;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.Destroyed
// ()

void AMutator::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.Destroyed");

	AMutator_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.MutatorIsAllowed
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::MutatorIsAllowed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.MutatorIsAllowed");

	AMutator_MutatorIsAllowed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.PreBeginPlay
// ()

void AMutator::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.PreBeginPlay");

	AMutator_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PotentialClimbWatcher.Tick
// ()
// Parameters:
// float                          DeltaTime                      (Parm)

void APotentialClimbWatcher::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PotentialClimbWatcher.Tick");

	APotentialClimbWatcher_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Route.MoveOntoRoutePath
// ()
// Parameters:
// class APawn*                   P                              (Parm)
// TEnumAsByte<ERouteDirection>   RouteDirection                 (OptionalParm, Parm)
// float                          DistFudgeFactor                (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ARoute::MoveOntoRoutePath(class APawn* P, TEnumAsByte<ERouteDirection> RouteDirection, float DistFudgeFactor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Route.MoveOntoRoutePath");

	ARoute_MoveOntoRoutePath_Params params;
	params.P = P;
	params.RouteDirection = RouteDirection;
	params.DistFudgeFactor = DistFudgeFactor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Route.ResolveRouteIndex
// ()
// Parameters:
// int                            Idx                            (Parm)
// TEnumAsByte<ERouteDirection>   RouteDirection                 (Parm)
// unsigned char                  out_bComplete                  (Parm, OutParm)
// unsigned char                  out_bReverse                   (Parm, OutParm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ARoute::ResolveRouteIndex(int Idx, TEnumAsByte<ERouteDirection> RouteDirection, unsigned char* out_bComplete, unsigned char* out_bReverse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Route.ResolveRouteIndex");

	ARoute_ResolveRouteIndex_Params params;
	params.Idx = Idx;
	params.RouteDirection = RouteDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_bComplete != nullptr)
		*out_bComplete = params.out_bComplete;
	if (out_bReverse != nullptr)
		*out_bReverse = params.out_bReverse;

	return params.ReturnValue;
}


// Function Engine.Inventory.GetLocalString
// ()
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AInventory::GetLocalString(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.GetLocalString");

	AInventory_GetLocalString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.DropFrom
// ()
// Parameters:
// struct FVector                 StartLocation                  (Parm)
// struct FVector                 StartVelocity                  (Parm)

void AInventory::DropFrom(const struct FVector& StartLocation, const struct FVector& StartVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.DropFrom");

	AInventory_DropFrom_Params params;
	params.StartLocation = StartLocation;
	params.StartVelocity = StartVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.DenyPickupQuery
// ()
// Parameters:
// class UClass*                  ItemClass                      (Parm)
// class AActor*                  Pickup                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AInventory::DenyPickupQuery(class UClass* ItemClass, class AActor* Pickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.DenyPickupQuery");

	AInventory_DenyPickupQuery_Params params;
	params.ItemClass = ItemClass;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.ItemRemovedFromInvManager
// ()

void AInventory::ItemRemovedFromInvManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.ItemRemovedFromInvManager");

	AInventory_ItemRemovedFromInvManager_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.ClientGivenTo
// ()
// Parameters:
// class APawn*                   NewOwner                       (Parm)
// bool                           bDoNotActivate                 (Parm)

void AInventory::ClientGivenTo(class APawn* NewOwner, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.ClientGivenTo");

	AInventory_ClientGivenTo_Params params;
	params.NewOwner = NewOwner;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.GivenTo
// ()
// Parameters:
// class APawn*                   thisPawn                       (Parm)
// bool                           bDoNotActivate                 (OptionalParm, Parm)

void AInventory::GivenTo(class APawn* thisPawn, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.GivenTo");

	AInventory_GivenTo_Params params;
	params.thisPawn = thisPawn;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.AnnouncePickup
// ()
// Parameters:
// class APawn*                   Other                          (Parm)

void AInventory::AnnouncePickup(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.AnnouncePickup");

	AInventory_AnnouncePickup_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.GiveTo
// ()
// Parameters:
// class APawn*                   Other                          (Parm)

void AInventory::GiveTo(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.GiveTo");

	AInventory_GiveTo_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.DetourWeight
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// float                          PathWeight                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AInventory::DetourWeight(class APawn* Other, float PathWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.DetourWeight");

	AInventory_DetourWeight_Params params;
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.BotDesireability
// ()
// Parameters:
// class AActor*                  PickupHolder                   (Parm)
// class APawn*                   P                              (Parm)
// class AController*             C                              (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AInventory::BotDesireability(class AActor* PickupHolder, class APawn* P, class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.BotDesireability");

	AInventory_BotDesireability_Params params;
	params.PickupHolder = PickupHolder;
	params.P = P;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.Destroyed
// ()

void AInventory::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.Destroyed");

	AInventory_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.GetHumanReadableName
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AInventory::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.GetHumanReadableName");

	AInventory_GetHumanReadableName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetTargetDistance
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AWeapon::GetTargetDistance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetTargetDistance");

	AWeapon_GetTargetDistance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.CacheAIController
// ()

void AWeapon::CacheAIController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.CacheAIController");

	AWeapon_CacheAIController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.WeaponIsDown
// ()

void AWeapon::WeaponIsDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.WeaponIsDown");

	AWeapon_WeaponIsDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.StillFiring
// ()
// Parameters:
// unsigned char                  FireMode                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::StillFiring(unsigned char FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.StillFiring");

	AWeapon_StillFiring_Params params;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.ShouldRefire
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::ShouldRefire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ShouldRefire");

	AWeapon_ShouldRefire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.NotifyWeaponFinishedFiring
// ()
// Parameters:
// unsigned char                  FireMode                       (Parm)

void AWeapon::NotifyWeaponFinishedFiring(unsigned char FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.NotifyWeaponFinishedFiring");

	AWeapon_NotifyWeaponFinishedFiring_Params params;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.NotifyWeaponFired
// ()
// Parameters:
// unsigned char                  FireMode                       (Parm)

void AWeapon::NotifyWeaponFired(unsigned char FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.NotifyWeaponFired");

	AWeapon_NotifyWeaponFired_Params params;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.HandleFinishedFiring
// ()

void AWeapon::HandleFinishedFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.HandleFinishedFiring");

	AWeapon_HandleFinishedFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.TryPutDown
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::TryPutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.TryPutDown");

	AWeapon_TryPutDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetPhysicalFireStartLoc
// ()
// Parameters:
// struct FVector                 AimDir                         (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AWeapon::GetPhysicalFireStartLoc(const struct FVector& AimDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetPhysicalFireStartLoc");

	AWeapon_GetPhysicalFireStartLoc_Params params;
	params.AimDir = AimDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetMuzzleLoc
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AWeapon::GetMuzzleLoc()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetMuzzleLoc");

	AWeapon_GetMuzzleLoc_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.CustomFire
// ()

void AWeapon::CustomFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.CustomFire");

	AWeapon_CustomFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ProjectileFire
// ()
// Parameters:
// class AProjectile*             ReturnValue                    (Parm, OutParm, ReturnParm)

class AProjectile* AWeapon::ProjectileFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ProjectileFire");

	AWeapon_ProjectileFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.ProcessInstantHit
// ()
// Parameters:
// unsigned char                  FiringMode                     (Parm)
// struct FImpactInfo             Impact                         (Parm)
// int                            NumHits                        (OptionalParm, Parm)

void AWeapon::ProcessInstantHit(unsigned char FiringMode, const struct FImpactInfo& Impact, int NumHits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ProcessInstantHit");

	AWeapon_ProcessInstantHit_Params params;
	params.FiringMode = FiringMode;
	params.Impact = Impact;
	params.NumHits = NumHits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.InstantFire
// ()

void AWeapon::InstantFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.InstantFire");

	AWeapon_InstantFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.PassThroughDamage
// ()
// Parameters:
// class AActor*                  HitActor                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::PassThroughDamage(class AActor* HitActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.PassThroughDamage");

	AWeapon_PassThroughDamage_Params params;
	params.HitActor = HitActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.CalcWeaponFire
// ()
// Parameters:
// struct FVector                 StartTrace                     (Parm)
// struct FVector                 EndTrace                       (Parm)
// TArray<struct FImpactInfo>     ImpactList                     (OptionalParm, Parm, OutParm, NeedCtorLink)
// struct FVector                 Extent                         (OptionalParm, Parm)
// struct FImpactInfo             ReturnValue                    (Parm, OutParm, ReturnParm)

struct FImpactInfo AWeapon::CalcWeaponFire(const struct FVector& StartTrace, const struct FVector& EndTrace, const struct FVector& Extent, TArray<struct FImpactInfo>* ImpactList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.CalcWeaponFire");

	AWeapon_CalcWeaponFire_Params params;
	params.StartTrace = StartTrace;
	params.EndTrace = EndTrace;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ImpactList != nullptr)
		*ImpactList = params.ImpactList;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetTraceOwner
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AWeapon::GetTraceOwner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetTraceOwner");

	AWeapon_GetTraceOwner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetTraceRange
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AWeapon::GetTraceRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetTraceRange");

	AWeapon_GetTraceRange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetAdjustedAim
// ()
// Parameters:
// struct FVector                 StartFireLoc                   (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator AWeapon::GetAdjustedAim(const struct FVector& StartFireLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetAdjustedAim");

	AWeapon_GetAdjustedAim_Params params;
	params.StartFireLoc = StartFireLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.FireAmmunition
// ()

void AWeapon::FireAmmunition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.FireAmmunition");

	AWeapon_FireAmmunition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.FireModeUpdated
// ()
// Parameters:
// unsigned char                  FiringMode                     (Parm)
// bool                           bViaReplication                (Parm)

void AWeapon::FireModeUpdated(unsigned char FiringMode, bool bViaReplication)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.FireModeUpdated");

	AWeapon_FireModeUpdated_Params params;
	params.FiringMode = FiringMode;
	params.bViaReplication = bViaReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.SetCurrentFireMode
// ()
// Parameters:
// unsigned char                  FiringModeNum                  (Parm)

void AWeapon::SetCurrentFireMode(unsigned char FiringModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.SetCurrentFireMode");

	AWeapon_SetCurrentFireMode_Params params;
	params.FiringModeNum = FiringModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.SendToFiringState
// ()
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AWeapon::SendToFiringState(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.SendToFiringState");

	AWeapon_SendToFiringState_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ForceEndFire
// ()

void AWeapon::ForceEndFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ForceEndFire");

	AWeapon_ForceEndFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.EndFire
// ()
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AWeapon::EndFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.EndFire");

	AWeapon_EndFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ServerStopFire
// ()
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AWeapon::ServerStopFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ServerStopFire");

	AWeapon_ServerStopFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.StopFire
// ()
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AWeapon::StopFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.StopFire");

	AWeapon_StopFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.BeginFire
// ()
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AWeapon::BeginFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.BeginFire");

	AWeapon_BeginFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ServerStartFire
// ()
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AWeapon::ServerStartFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ServerStartFire");

	AWeapon_ServerStartFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.StartFire
// ()
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AWeapon::StartFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.StartFire");

	AWeapon_StartFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ClientWeaponSet
// ()
// Parameters:
// bool                           bOptionalSet                   (Parm)
// bool                           bDoNotActivate                 (OptionalParm, Parm)

void AWeapon::ClientWeaponSet(bool bOptionalSet, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClientWeaponSet");

	AWeapon_ClientWeaponSet_Params params;
	params.bOptionalSet = bOptionalSet;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ClientGivenTo
// ()
// Parameters:
// class APawn*                   NewOwner                       (Parm)
// bool                           bDoNotActivate                 (Parm)

void AWeapon::ClientGivenTo(class APawn* NewOwner, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClientGivenTo");

	AWeapon_ClientGivenTo_Params params;
	params.NewOwner = NewOwner;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.DetachWeapon
// ()

void AWeapon::DetachWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DetachWeapon");

	AWeapon_DetachWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.AttachWeaponTo
// ()
// Parameters:
// class USkeletalMeshComponent*  MeshCpnt                       (Parm, EditInline)
// struct FName                   SocketName                     (OptionalParm, Parm)

void AWeapon::AttachWeaponTo(class USkeletalMeshComponent* MeshCpnt, const struct FName& SocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.AttachWeaponTo");

	AWeapon_AttachWeaponTo_Params params;
	params.MeshCpnt = MeshCpnt;
	params.SocketName = SocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ClearFlashLocation
// ()

void AWeapon::ClearFlashLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClearFlashLocation");

	AWeapon_ClearFlashLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.SetFlashLocation
// ()
// Parameters:
// struct FVector                 HitLocation                    (Parm)

void AWeapon::SetFlashLocation(const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.SetFlashLocation");

	AWeapon_SetFlashLocation_Params params;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ClearFlashCount
// ()

void AWeapon::ClearFlashCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClearFlashCount");

	AWeapon_ClearFlashCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.IncrementFlashCount
// ()

void AWeapon::IncrementFlashCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.IncrementFlashCount");

	AWeapon_IncrementFlashCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.WeaponEmpty
// ()

void AWeapon::WeaponEmpty()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.WeaponEmpty");

	AWeapon_WeaponEmpty_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.DenyPickupQuery
// ()
// Parameters:
// class UClass*                  ItemClass                      (Parm)
// class AActor*                  Pickup                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::DenyPickupQuery(class UClass* ItemClass, class AActor* Pickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DenyPickupQuery");

	AWeapon_DenyPickupQuery_Params params;
	params.ItemClass = ItemClass;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.PutDownWeapon
// ()

void AWeapon::PutDownWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.PutDownWeapon");

	AWeapon_PutDownWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.Activate
// ()

void AWeapon::Activate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.Activate");

	AWeapon_Activate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.TimeWeaponEquipping
// ()

void AWeapon::TimeWeaponEquipping()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.TimeWeaponEquipping");

	AWeapon_TimeWeaponEquipping_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.TimeWeaponPutDown
// ()

void AWeapon::TimeWeaponPutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.TimeWeaponPutDown");

	AWeapon_TimeWeaponPutDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.RefireCheckTimer
// ()

void AWeapon::RefireCheckTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.RefireCheckTimer");

	AWeapon_RefireCheckTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.TimeWeaponFiring
// ()
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AWeapon::TimeWeaponFiring(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.TimeWeaponFiring");

	AWeapon_TimeWeaponFiring_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.GetFireInterval
// ()
// Parameters:
// unsigned char                  FireModeNum                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AWeapon::GetFireInterval(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetFireInterval");

	AWeapon_GetFireInterval_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.StopFireEffects
// ()
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AWeapon::StopFireEffects(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.StopFireEffects");

	AWeapon_StopFireEffects_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.PlayFireEffects
// ()
// Parameters:
// unsigned char                  FireModeNum                    (Parm)
// struct FVector                 HitLocation                    (OptionalParm, Parm)

void AWeapon::PlayFireEffects(unsigned char FireModeNum, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.PlayFireEffects");

	AWeapon_PlayFireEffects_Params params;
	params.FireModeNum = FireModeNum;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.StopWeaponAnimation
// ()

void AWeapon::StopWeaponAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.StopWeaponAnimation");

	AWeapon_StopWeaponAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.PlayWeaponAnimation
// ()
// Parameters:
// struct FName                   Sequence                       (Parm)
// float                          fDesiredDuration               (Parm)
// bool                           bLoop                          (OptionalParm, Parm)
// class USkeletalMeshComponent*  SkelMesh                       (OptionalParm, Parm, EditInline)

void AWeapon::PlayWeaponAnimation(const struct FName& Sequence, float fDesiredDuration, bool bLoop, class USkeletalMeshComponent* SkelMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.PlayWeaponAnimation");

	AWeapon_PlayWeaponAnimation_Params params;
	params.Sequence = Sequence;
	params.fDesiredDuration = fDesiredDuration;
	params.bLoop = bLoop;
	params.SkelMesh = SkelMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.GetWeaponAnimNodeSeq
// ()
// Parameters:
// class UAnimNodeSequence*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimNodeSequence* AWeapon::GetWeaponAnimNodeSeq()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetWeaponAnimNodeSeq");

	AWeapon_GetWeaponAnimNodeSeq_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.FireOnRelease
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::FireOnRelease()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.FireOnRelease");

	AWeapon_FireOnRelease_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.CanAttack
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::CanAttack(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.CanAttack");

	AWeapon_CanAttack_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetWeaponRating
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AWeapon::GetWeaponRating()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetWeaponRating");

	AWeapon_GetWeaponRating_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetAIRating
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AWeapon::GetAIRating()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetAIRating");

	AWeapon_GetAIRating_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.MaxRange
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AWeapon::MaxRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.MaxRange");

	AWeapon_MaxRange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.AddSpread
// ()
// Parameters:
// struct FRotator                BaseAim                        (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator AWeapon::AddSpread(const struct FRotator& BaseAim)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.AddSpread");

	AWeapon_AddSpread_Params params;
	params.BaseAim = BaseAim;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetProjectileClass
// ()
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* AWeapon::GetProjectileClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetProjectileClass");

	AWeapon_GetProjectileClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.ClearPendingFire
// ()
// Parameters:
// int                            FireMode                       (Parm)

void AWeapon::ClearPendingFire(int FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClearPendingFire");

	AWeapon_ClearPendingFire_Params params;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.SetPendingFire
// ()
// Parameters:
// int                            FireMode                       (Parm)

void AWeapon::SetPendingFire(int FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.SetPendingFire");

	AWeapon_SetPendingFire_Params params;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.PendingFire
// ()
// Parameters:
// int                            FireMode                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::PendingFire(int FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.PendingFire");

	AWeapon_PendingFire_Params params;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetPendingFireLength
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AWeapon::GetPendingFireLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetPendingFireLength");

	AWeapon_GetPendingFireLength_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.HasAnyAmmo
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::HasAnyAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.HasAnyAmmo");

	AWeapon_HasAnyAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.HasAmmo
// ()
// Parameters:
// unsigned char                  FireModeNum                    (Parm)
// int                            Amount                         (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::HasAmmo(unsigned char FireModeNum, int Amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.HasAmmo");

	AWeapon_HasAmmo_Params params;
	params.FireModeNum = FireModeNum;
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.AddAmmo
// ()
// Parameters:
// int                            Amount                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AWeapon::AddAmmo(int Amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.AddAmmo");

	AWeapon_AddAmmo_Params params;
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.ConsumeAmmo
// ()
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AWeapon::ConsumeAmmo(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ConsumeAmmo");

	AWeapon_ConsumeAmmo_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.GetWeaponDebug
// ()
// Parameters:
// TArray<struct FString>         DebugInfo                      (Parm, OutParm, NeedCtorLink)

void AWeapon::GetWeaponDebug(TArray<struct FString>* DebugInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetWeaponDebug");

	AWeapon_GetWeaponDebug_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DebugInfo != nullptr)
		*DebugInfo = params.DebugInfo;
}


// Function Engine.Weapon.DisplayDebug
// ()
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void AWeapon::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DisplayDebug");

	AWeapon_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.Weapon.DenyClientWeaponSet
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::DenyClientWeaponSet()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DenyClientWeaponSet");

	AWeapon_DenyClientWeaponSet_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.IsFiring
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::IsFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.IsFiring");

	AWeapon_IsFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.ClientWeaponThrown
// ()

void AWeapon::ClientWeaponThrown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClientWeaponThrown");

	AWeapon_ClientWeaponThrown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.CanThrow
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::CanThrow()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.CanThrow");

	AWeapon_CanThrow_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.DropFrom
// ()
// Parameters:
// struct FVector                 StartLocation                  (Parm)
// struct FVector                 StartVelocity                  (Parm)

void AWeapon::DropFrom(const struct FVector& StartLocation, const struct FVector& StartVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DropFrom");

	AWeapon_DropFrom_Params params;
	params.StartLocation = StartLocation;
	params.StartVelocity = StartVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.DoOverridePrevWeapon
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::DoOverridePrevWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DoOverridePrevWeapon");

	AWeapon_DoOverridePrevWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.DoOverrideNextWeapon
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::DoOverrideNextWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DoOverrideNextWeapon");

	AWeapon_DoOverrideNextWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.HolderDied
// ()

void AWeapon::HolderDied()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.HolderDied");

	AWeapon_HolderDied_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ItemRemovedFromInvManager
// ()

void AWeapon::ItemRemovedFromInvManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ItemRemovedFromInvManager");

	AWeapon_ItemRemovedFromInvManager_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.Destroyed
// ()

void AWeapon::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.Destroyed");

	AWeapon_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.UpdateController
// ()

void AInventoryManager::UpdateController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.UpdateController");

	AInventoryManager_UpdateController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.ClientWeaponSet
// ()
// Parameters:
// class AWeapon*                 NewWeapon                      (Parm)
// bool                           bOptionalSet                   (Parm)
// bool                           bDoNotActivate                 (OptionalParm, Parm)

void AInventoryManager::ClientWeaponSet(class AWeapon* NewWeapon, bool bOptionalSet, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ClientWeaponSet");

	AInventoryManager_ClientWeaponSet_Params params;
	params.NewWeapon = NewWeapon;
	params.bOptionalSet = bOptionalSet;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.ChangedWeapon
// ()

void AInventoryManager::ChangedWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ChangedWeapon");

	AInventoryManager_ChangedWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.ClearPendingWeapon
// ()

void AInventoryManager::ClearPendingWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ClearPendingWeapon");

	AInventoryManager_ClearPendingWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.CancelWeaponChange
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AInventoryManager::CancelWeaponChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.CancelWeaponChange");

	AInventoryManager_CancelWeaponChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.SetPendingWeapon
// ()
// Parameters:
// class AWeapon*                 DesiredWeapon                  (Parm)

void AInventoryManager::SetPendingWeapon(class AWeapon* DesiredWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.SetPendingWeapon");

	AInventoryManager_SetPendingWeapon_Params params;
	params.DesiredWeapon = DesiredWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.InternalSetCurrentWeapon
// ()
// Parameters:
// class AWeapon*                 DesiredWeapon                  (Parm)

void AInventoryManager::InternalSetCurrentWeapon(class AWeapon* DesiredWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.InternalSetCurrentWeapon");

	AInventoryManager_InternalSetCurrentWeapon_Params params;
	params.DesiredWeapon = DesiredWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.ServerSetCurrentWeapon
// ()
// Parameters:
// class AWeapon*                 DesiredWeapon                  (Parm)

void AInventoryManager::ServerSetCurrentWeapon(class AWeapon* DesiredWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ServerSetCurrentWeapon");

	AInventoryManager_ServerSetCurrentWeapon_Params params;
	params.DesiredWeapon = DesiredWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.SetCurrentWeapon
// ()
// Parameters:
// class AWeapon*                 DesiredWeapon                  (Parm)

void AInventoryManager::SetCurrentWeapon(class AWeapon* DesiredWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.SetCurrentWeapon");

	AInventoryManager_SetCurrentWeapon_Params params;
	params.DesiredWeapon = DesiredWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.NextWeapon
// ()

void AInventoryManager::NextWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.NextWeapon");

	AInventoryManager_NextWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.PrevWeapon
// ()

void AInventoryManager::PrevWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.PrevWeapon");

	AInventoryManager_PrevWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.SwitchToBestWeapon
// ()
// Parameters:
// bool                           bForceADifferentWeapon         (OptionalParm, Parm)

void AInventoryManager::SwitchToBestWeapon(bool bForceADifferentWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.SwitchToBestWeapon");

	AInventoryManager_SwitchToBestWeapon_Params params;
	params.bForceADifferentWeapon = bForceADifferentWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.GetBestWeapon
// ()
// Parameters:
// bool                           bForceADifferentWeapon         (OptionalParm, Parm)
// class AWeapon*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class AWeapon* AInventoryManager::GetBestWeapon(bool bForceADifferentWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.GetBestWeapon");

	AInventoryManager_GetBestWeapon_Params params;
	params.bForceADifferentWeapon = bForceADifferentWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.GetWeaponRatingFor
// ()
// Parameters:
// class AWeapon*                 W                              (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AInventoryManager::GetWeaponRatingFor(class AWeapon* W)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.GetWeaponRatingFor");

	AInventoryManager_GetWeaponRatingFor_Params params;
	params.W = W;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.DrawHUD
// ()
// Parameters:
// class AHUD*                    H                              (Parm)

void AInventoryManager::DrawHUD(class AHUD* H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.DrawHUD");

	AInventoryManager_DrawHUD_Params params;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.OwnerDied
// ()

void AInventoryManager::OwnerDied()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.OwnerDied");

	AInventoryManager_OwnerDied_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.DiscardInventory
// ()

void AInventoryManager::DiscardInventory()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.DiscardInventory");

	AInventoryManager_DiscardInventory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.RemoveFromInventory
// ()
// Parameters:
// class AInventory*              ItemToRemove                   (Parm)

void AInventoryManager::RemoveFromInventory(class AInventory* ItemToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.RemoveFromInventory");

	AInventoryManager_RemoveFromInventory_Params params;
	params.ItemToRemove = ItemToRemove;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.AddInventory
// ()
// Parameters:
// class AInventory*              NewItem                        (Parm)
// bool                           bDoNotActivate                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AInventoryManager::AddInventory(class AInventory* NewItem, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.AddInventory");

	AInventoryManager_AddInventory_Params params;
	params.NewItem = NewItem;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.CreateInventory
// ()
// Parameters:
// class UClass*                  NewInventoryItemClass          (Parm)
// bool                           bDoNotActivate                 (OptionalParm, Parm)
// class AInventory*              ReturnValue                    (Parm, OutParm, ReturnParm)

class AInventory* AInventoryManager::CreateInventory(class UClass* NewInventoryItemClass, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.CreateInventory");

	AInventoryManager_CreateInventory_Params params;
	params.NewInventoryItemClass = NewInventoryItemClass;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.FindInventoryType
// ()
// Parameters:
// class UClass*                  DesiredClass                   (Parm)
// bool                           bAllowSubclass                 (OptionalParm, Parm)
// class AInventory*              ReturnValue                    (Parm, OutParm, ReturnParm)

class AInventory* AInventoryManager::FindInventoryType(class UClass* DesiredClass, bool bAllowSubclass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.FindInventoryType");

	AInventoryManager_FindInventoryType_Params params;
	params.DesiredClass = DesiredClass;
	params.bAllowSubclass = bAllowSubclass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.HandlePickupQuery
// ()
// Parameters:
// class UClass*                  ItemClass                      (Parm)
// class AActor*                  Pickup                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AInventoryManager::HandlePickupQuery(class UClass* ItemClass, class AActor* Pickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.HandlePickupQuery");

	AInventoryManager_HandlePickupQuery_Params params;
	params.ItemClass = ItemClass;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.Destroyed
// ()

void AInventoryManager::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.Destroyed");

	AInventoryManager_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.SetupFor
// ()
// Parameters:
// class APawn*                   P                              (Parm)

void AInventoryManager::SetupFor(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.SetupFor");

	AInventoryManager_SetupFor_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.InventoryActors
// ()
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AInventory*              Inv                            (Parm, OutParm)

void AInventoryManager::InventoryActors(class UClass* BaseClass, class AInventory** Inv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.InventoryActors");

	AInventoryManager_InventoryActors_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Inv != nullptr)
		*Inv = params.Inv;
}


// Function Engine.InventoryManager.ClearAllPendingFire
// ()
// Parameters:
// class AWeapon*                 InWeapon                       (Parm)

void AInventoryManager::ClearAllPendingFire(class AWeapon* InWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ClearAllPendingFire");

	AInventoryManager_ClearAllPendingFire_Params params;
	params.InWeapon = InWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.IsPendingFire
// ()
// Parameters:
// class AWeapon*                 InWeapon                       (Parm)
// int                            InFiringMode                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AInventoryManager::IsPendingFire(class AWeapon* InWeapon, int InFiringMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.IsPendingFire");

	AInventoryManager_IsPendingFire_Params params;
	params.InWeapon = InWeapon;
	params.InFiringMode = InFiringMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.ClearPendingFire
// ()
// Parameters:
// class AWeapon*                 InWeapon                       (Parm)
// int                            InFiringMode                   (Parm)

void AInventoryManager::ClearPendingFire(class AWeapon* InWeapon, int InFiringMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ClearPendingFire");

	AInventoryManager_ClearPendingFire_Params params;
	params.InWeapon = InWeapon;
	params.InFiringMode = InFiringMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.SetPendingFire
// ()
// Parameters:
// class AWeapon*                 InWeapon                       (Parm)
// int                            InFiringMode                   (Parm)

void AInventoryManager::SetPendingFire(class AWeapon* InWeapon, int InFiringMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.SetPendingFire");

	AInventoryManager_SetPendingFire_Params params;
	params.InWeapon = InWeapon;
	params.InFiringMode = InFiringMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.GetPendingFireLength
// ()
// Parameters:
// class AWeapon*                 InWeapon                       (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AInventoryManager::GetPendingFireLength(class AWeapon* InWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.GetPendingFireLength");

	AInventoryManager_GetPendingFireLength_Params params;
	params.InWeapon = InWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.PostBeginPlay
// ()

void AInventoryManager::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.PostBeginPlay");

	AInventoryManager_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MatineeActor.CheckPriorityRefresh
// ()

void AMatineeActor::CheckPriorityRefresh()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.CheckPriorityRefresh");

	AMatineeActor_CheckPriorityRefresh_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MatineeActor.Update
// ()

void AMatineeActor::Update()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.Update");

	AMatineeActor_Update_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MatineeActor.AddAIGroupActor
// ()
// Parameters:
// class UInterpGroupInstAI*      AIGroupInst                    (Parm)

void AMatineeActor::AddAIGroupActor(class UInterpGroupInstAI* AIGroupInst)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.AddAIGroupActor");

	AMatineeActor_AddAIGroupActor_Params params;
	params.AIGroupInst = AIGroupInst;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationPoint.GetDebugAbbrev
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ANavigationPoint::GetDebugAbbrev()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetDebugAbbrev");

	ANavigationPoint_GetDebugAbbrev_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.ApplyCheckpointRecord
// ()
// Parameters:
// struct ANavigationPoint_FCheckpointRecord Record                         (Const, Parm, OutParm)

void ANavigationPoint::ApplyCheckpointRecord(struct ANavigationPoint_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.ApplyCheckpointRecord");

	ANavigationPoint_ApplyCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.NavigationPoint.CreateCheckpointRecord
// ()
// Parameters:
// struct ANavigationPoint_FCheckpointRecord Record                         (Parm, OutParm)

void ANavigationPoint::CreateCheckpointRecord(struct ANavigationPoint_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.CreateCheckpointRecord");

	ANavigationPoint_CreateCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.NavigationPoint.ShouldSaveForCheckpoint
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::ShouldSaveForCheckpoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.ShouldSaveForCheckpoint");

	ANavigationPoint_ShouldSaveForCheckpoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.ShutDown
// ()

void ANavigationPoint::ShutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.ShutDown");

	ANavigationPoint_ShutDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationPoint.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          inAction                       (Parm)

void ANavigationPoint::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.OnToggle");

	ANavigationPoint_OnToggle_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationPoint.IsOnDifferentNetwork
// ()
// Parameters:
// class ANavigationPoint*        Nav                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::IsOnDifferentNetwork(class ANavigationPoint* Nav)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.IsOnDifferentNetwork");

	ANavigationPoint_IsOnDifferentNetwork_Params params;
	params.Nav = Nav;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.GetAllNavInRadius
// ()
// Parameters:
// class AActor*                  ChkActor                       (Parm)
// struct FVector                 ChkPoint                       (Parm)
// float                          Radius                         (Parm)
// TArray<class ANavigationPoint*> out_NavList                    (Parm, OutParm, NeedCtorLink)
// bool                           bSkipBlocked                   (OptionalParm, Parm)
// int                            inNetworkID                    (OptionalParm, Parm)
// struct FCylinder               MinSize                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::GetAllNavInRadius(class AActor* ChkActor, const struct FVector& ChkPoint, float Radius, bool bSkipBlocked, int inNetworkID, const struct FCylinder& MinSize, TArray<class ANavigationPoint*>* out_NavList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetAllNavInRadius");

	ANavigationPoint_GetAllNavInRadius_Params params;
	params.ChkActor = ChkActor;
	params.ChkPoint = ChkPoint;
	params.Radius = Radius;
	params.bSkipBlocked = bSkipBlocked;
	params.inNetworkID = inNetworkID;
	params.MinSize = MinSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_NavList != nullptr)
		*out_NavList = params.out_NavList;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.GetNearestNavToPoint
// ()
// Parameters:
// class AActor*                  ChkActor                       (Parm)
// struct FVector                 ChkPoint                       (Parm)
// class UClass*                  RequiredClass                  (OptionalParm, Parm)
// TArray<class ANavigationPoint*> ExcludeList                    (OptionalParm, Parm, NeedCtorLink)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* ANavigationPoint::GetNearestNavToPoint(class AActor* ChkActor, const struct FVector& ChkPoint, class UClass* RequiredClass, TArray<class ANavigationPoint*> ExcludeList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetNearestNavToPoint");

	ANavigationPoint_GetNearestNavToPoint_Params params;
	params.ChkActor = ChkActor;
	params.ChkPoint = ChkPoint;
	params.RequiredClass = RequiredClass;
	params.ExcludeList = ExcludeList;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.GetNearestNavToActor
// ()
// Parameters:
// class AActor*                  ChkActor                       (Parm)
// class UClass*                  RequiredClass                  (OptionalParm, Parm)
// TArray<class ANavigationPoint*> ExcludeList                    (OptionalParm, Parm, NeedCtorLink)
// float                          MinDist                        (OptionalParm, Parm)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* ANavigationPoint::GetNearestNavToActor(class AActor* ChkActor, class UClass* RequiredClass, TArray<class ANavigationPoint*> ExcludeList, float MinDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetNearestNavToActor");

	ANavigationPoint_GetNearestNavToActor_Params params;
	params.ChkActor = ChkActor;
	params.RequiredClass = RequiredClass;
	params.ExcludeList = ExcludeList;
	params.MinDist = MinDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.ProceedWithMove
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::ProceedWithMove(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.ProceedWithMove");

	ANavigationPoint_ProceedWithMove_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.SuggestMovePreparation
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.SuggestMovePreparation");

	ANavigationPoint_SuggestMovePreparation_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.DetourWeight
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// float                          PathWeight                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ANavigationPoint::DetourWeight(class APawn* Other, float PathWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.DetourWeight");

	ANavigationPoint_DetourWeight_Params params;
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.Accept
// ()
// Parameters:
// class AActor*                  Incoming                       (Parm)
// class AActor*                  Source                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::Accept(class AActor* Incoming, class AActor* Source)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.Accept");

	ANavigationPoint_Accept_Params params;
	params.Incoming = Incoming;
	params.Source = Source;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.SpecialCost
// ()
// Parameters:
// class APawn*                   Seeker                         (Parm)
// class UReachSpec*              Path                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ANavigationPoint::SpecialCost(class APawn* Seeker, class UReachSpec* Path)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.SpecialCost");

	ANavigationPoint_SpecialCost_Params params;
	params.Seeker = Seeker;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.CanTeleport
// ()
// Parameters:
// class AActor*                  A                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::CanTeleport(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.CanTeleport");

	ANavigationPoint_CanTeleport_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.IsUsableAnchorFor
// ()
// Parameters:
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::IsUsableAnchorFor(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.IsUsableAnchorFor");

	ANavigationPoint_IsUsableAnchorFor_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.GetReachSpecTo
// ()
// Parameters:
// class ANavigationPoint*        Nav                            (Parm)
// class UClass*                  SpecClass                      (OptionalParm, Parm)
// class UReachSpec*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UReachSpec* ANavigationPoint::GetReachSpecTo(class ANavigationPoint* Nav, class UClass* SpecClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetReachSpecTo");

	ANavigationPoint_GetReachSpecTo_Params params;
	params.Nav = Nav;
	params.SpecClass = SpecClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.GetBoundingCylinder
// ()
// Parameters:
// float                          CollisionRadius                (Parm, OutParm)
// float                          CollisionHeight                (Parm, OutParm)

void ANavigationPoint::GetBoundingCylinder(float* CollisionRadius, float* CollisionHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetBoundingCylinder");

	ANavigationPoint_GetBoundingCylinder_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CollisionRadius != nullptr)
		*CollisionRadius = params.CollisionRadius;
	if (CollisionHeight != nullptr)
		*CollisionHeight = params.CollisionHeight;
}


// Function Engine.Pylon.CanReachPylon
// ()
// Parameters:
// class APylon*                  DestPylon                      (Parm)
// class AController*             C                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APylon::CanReachPylon(class APylon* DestPylon, class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pylon.CanReachPylon");

	APylon_CanReachPylon_Params params;
	params.DestPylon = DestPylon;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pylon.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void APylon::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pylon.OnToggle");

	APylon_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pylon.IsEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APylon::IsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pylon.IsEnabled");

	APylon_IsEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pylon.SetEnabled
// ()
// Parameters:
// bool                           bEnabled                       (Parm)

void APylon::SetEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pylon.SetEnabled");

	APylon_SetEnabled_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pylon.PostBeginPlay
// ()

void APylon::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pylon.PostBeginPlay");

	APylon_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pylon.OnPylonStatusChange
// ()

void APylon::OnPylonStatusChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pylon.OnPylonStatusChange");

	APylon_OnPylonStatusChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.GetDebugAbbrev
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ACoverLink::GetDebugAbbrev()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetDebugAbbrev");

	ACoverLink_GetDebugAbbrev_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetLocationDescription
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// TEnumAsByte<ECoverLocationDescription> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ECoverLocationDescription> ACoverLink::GetLocationDescription(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetLocationDescription");

	ACoverLink_GetLocationDescription_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetDebugString
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ACoverLink::GetDebugString(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetDebugString");

	ACoverLink_GetDebugString_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.AddCoverSlot
// ()
// Parameters:
// struct FVector                 SlotLocation                   (Parm)
// struct FRotator                SlotRotation                   (Parm)
// int                            SlotIdx                        (OptionalParm, Parm)
// bool                           bForceSlotUpdate               (OptionalParm, Parm)
// class AScout*                  Scout                          (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ACoverLink::AddCoverSlot(const struct FVector& SlotLocation, const struct FRotator& SlotRotation, int SlotIdx, bool bForceSlotUpdate, class AScout* Scout)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.AddCoverSlot");

	ACoverLink_AddCoverSlot_Params params;
	params.SlotLocation = SlotLocation;
	params.SlotRotation = SlotRotation;
	params.SlotIdx = SlotIdx;
	params.bForceSlotUpdate = bForceSlotUpdate;
	params.Scout = Scout;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.Tick
// ()
// Parameters:
// float                          DeltaTime                      (Parm)

void ACoverLink::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.Tick");

	ACoverLink_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.BreakFracturedMeshes
// ()
// Parameters:
// struct FVector                 Origin                         (Parm)
// float                          Radius                         (Parm)
// float                          RBStrength                     (Parm)
// class UClass*                  DamageType                     (Parm)

void ACoverLink::BreakFracturedMeshes(const struct FVector& Origin, float Radius, float RBStrength, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.BreakFracturedMeshes");

	ACoverLink_BreakFracturedMeshes_Params params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.RBStrength = RBStrength;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.GetSwatTurnTarget
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// int                            Direction                      (Parm)
// struct FCoverInfo              out_Info                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::GetSwatTurnTarget(int SlotIdx, int Direction, struct FCoverInfo* out_Info)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSwatTurnTarget");

	ACoverLink_GetSwatTurnTarget_Params params;
	params.SlotIdx = SlotIdx;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Info != nullptr)
		*out_Info = params.out_Info;

	return params.ReturnValue;
}


// Function Engine.CoverLink.ShutDown
// ()

void ACoverLink::ShutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.ShutDown");

	ACoverLink_ShutDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.ApplyCheckpointRecord
// ()
// Parameters:
// struct ANavigationPoint_FCheckpointRecord Record                         (Const, Parm, OutParm)

void ACoverLink::ApplyCheckpointRecord(struct ANavigationPoint_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.ApplyCheckpointRecord");

	ACoverLink_ApplyCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.CoverLink.CreateCheckpointRecord
// ()
// Parameters:
// struct ANavigationPoint_FCheckpointRecord Record                         (Parm, OutParm)

void ACoverLink::CreateCheckpointRecord(struct ANavigationPoint_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.CreateCheckpointRecord");

	ACoverLink_CreateCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.CoverLink.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          inAction                       (Parm)

void ACoverLink::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.OnToggle");

	ACoverLink_OnToggle_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.IsEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::IsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsEnabled");

	ACoverLink_IsEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.AutoAdjustSlot
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           bOnlyCheckLeans                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::AutoAdjustSlot(int SlotIdx, bool bOnlyCheckLeans)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.AutoAdjustSlot");

	ACoverLink_AutoAdjustSlot_Params params;
	params.SlotIdx = SlotIdx;
	params.bOnlyCheckLeans = bOnlyCheckLeans;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.OnModifyCover
// ()
// Parameters:
// class USeqAct_ModifyCover*     Action                         (Parm)

void ACoverLink::OnModifyCover(class USeqAct_ModifyCover* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.OnModifyCover");

	ACoverLink_OnModifyCover_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.SetSlotPlayerOnly
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           bInPlayerOnly                  (Parm)

void ACoverLink::SetSlotPlayerOnly(int SlotIdx, bool bInPlayerOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.SetSlotPlayerOnly");

	ACoverLink_SetSlotPlayerOnly_Params params;
	params.SlotIdx = SlotIdx;
	params.bInPlayerOnly = bInPlayerOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.NotifySlotOwnerCoverDisabled
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           bAIOnly                        (OptionalParm, Parm)

void ACoverLink::NotifySlotOwnerCoverDisabled(int SlotIdx, bool bAIOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.NotifySlotOwnerCoverDisabled");

	ACoverLink_NotifySlotOwnerCoverDisabled_Params params;
	params.SlotIdx = SlotIdx;
	params.bAIOnly = bAIOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.SetSlotEnabled
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           bEnable                        (Parm)

void ACoverLink::SetSlotEnabled(int SlotIdx, bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.SetSlotEnabled");

	ACoverLink_SetSlotEnabled_Params params;
	params.SlotIdx = SlotIdx;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.SetDisabled
// ()
// Parameters:
// bool                           bNewDisabled                   (Parm)

void ACoverLink::SetDisabled(bool bNewDisabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.SetDisabled");

	ACoverLink_SetDisabled_Params params;
	params.bNewDisabled = bNewDisabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.GetSlotActions
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// TArray<TEnumAsByte<ECoverAction>> Actions                        (Parm, OutParm, NeedCtorLink)

void ACoverLink::GetSlotActions(int SlotIdx, TArray<TEnumAsByte<ECoverAction>>* Actions)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotActions");

	ACoverLink_GetSlotActions_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actions != nullptr)
		*Actions = params.Actions;
}


// Function Engine.CoverLink.HasFireLinkTo
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// struct FCoverInfo              ChkCover                       (Parm)
// bool                           bAllowFallbackLinks            (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::HasFireLinkTo(int SlotIdx, const struct FCoverInfo& ChkCover, bool bAllowFallbackLinks)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.HasFireLinkTo");

	ACoverLink_HasFireLinkTo_Params params;
	params.SlotIdx = SlotIdx;
	params.ChkCover = ChkCover;
	params.bAllowFallbackLinks = bAllowFallbackLinks;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetFireLinkTo
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// struct FCoverInfo              ChkCover                       (Parm)
// TEnumAsByte<ECoverAction>      ChkAction                      (Parm)
// TEnumAsByte<ECoverType>        ChkType                        (Parm)
// int                            out_FireLinkIdx                (Parm, OutParm)
// TArray<int>                    out_Items                      (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::GetFireLinkTo(int SlotIdx, const struct FCoverInfo& ChkCover, TEnumAsByte<ECoverAction> ChkAction, TEnumAsByte<ECoverType> ChkType, int* out_FireLinkIdx, TArray<int>* out_Items)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetFireLinkTo");

	ACoverLink_GetFireLinkTo_Params params;
	params.SlotIdx = SlotIdx;
	params.ChkCover = ChkCover;
	params.ChkAction = ChkAction;
	params.ChkType = ChkType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_FireLinkIdx != nullptr)
		*out_FireLinkIdx = params.out_FireLinkIdx;
	if (out_Items != nullptr)
		*out_Items = params.out_Items;

	return params.ReturnValue;
}


// Function Engine.CoverLink.AllowLeftTransition
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::AllowLeftTransition(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.AllowLeftTransition");

	ACoverLink_AllowLeftTransition_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.AllowRightTransition
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::AllowRightTransition(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.AllowRightTransition");

	ACoverLink_AllowRightTransition_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetSlotIdxToRight
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// int                            Cnt                            (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ACoverLink::GetSlotIdxToRight(int SlotIdx, int Cnt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotIdxToRight");

	ACoverLink_GetSlotIdxToRight_Params params;
	params.SlotIdx = SlotIdx;
	params.Cnt = Cnt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetSlotIdxToLeft
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// int                            Cnt                            (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ACoverLink::GetSlotIdxToLeft(int SlotIdx, int Cnt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotIdxToLeft");

	ACoverLink_GetSlotIdxToLeft_Params params;
	params.SlotIdx = SlotIdx;
	params.Cnt = Cnt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.IsRightEdgeSlot
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           bIgnoreLeans                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::IsRightEdgeSlot(int SlotIdx, bool bIgnoreLeans)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsRightEdgeSlot");

	ACoverLink_IsRightEdgeSlot_Params params;
	params.SlotIdx = SlotIdx;
	params.bIgnoreLeans = bIgnoreLeans;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.IsLeftEdgeSlot
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           bIgnoreLeans                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::IsLeftEdgeSlot(int SlotIdx, bool bIgnoreLeans)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsLeftEdgeSlot");

	ACoverLink_IsLeftEdgeSlot_Params params;
	params.SlotIdx = SlotIdx;
	params.bIgnoreLeans = bIgnoreLeans;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.IsEdgeSlot
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           bIgnoreLeans                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::IsEdgeSlot(int SlotIdx, bool bIgnoreLeans)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsEdgeSlot");

	ACoverLink_IsEdgeSlot_Params params;
	params.SlotIdx = SlotIdx;
	params.bIgnoreLeans = bIgnoreLeans;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.FindSlots
// ()
// Parameters:
// struct FVector                 CheckLocation                  (Parm)
// float                          MaxDistance                    (Parm)
// int                            LeftSlotIdx                    (Parm, OutParm)
// int                            RightSlotIdx                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::FindSlots(const struct FVector& CheckLocation, float MaxDistance, int* LeftSlotIdx, int* RightSlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.FindSlots");

	ACoverLink_FindSlots_Params params;
	params.CheckLocation = CheckLocation;
	params.MaxDistance = MaxDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LeftSlotIdx != nullptr)
		*LeftSlotIdx = params.LeftSlotIdx;
	if (RightSlotIdx != nullptr)
		*RightSlotIdx = params.RightSlotIdx;

	return params.ReturnValue;
}


// Function Engine.CoverLink.IsStationarySlot
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::IsStationarySlot(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsStationarySlot");

	ACoverLink_IsStationarySlot_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.IsValidClaimBetween
// ()
// Parameters:
// class APawn*                   ChkClaim                       (Parm)
// int                            StartSlotIdx                   (Parm)
// int                            EndSlotIdx                     (Parm)
// bool                           bSkipTeamCheck                 (OptionalParm, Parm)
// bool                           bSkipOverlapCheck              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::IsValidClaimBetween(class APawn* ChkClaim, int StartSlotIdx, int EndSlotIdx, bool bSkipTeamCheck, bool bSkipOverlapCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsValidClaimBetween");

	ACoverLink_IsValidClaimBetween_Params params;
	params.ChkClaim = ChkClaim;
	params.StartSlotIdx = StartSlotIdx;
	params.EndSlotIdx = EndSlotIdx;
	params.bSkipTeamCheck = bSkipTeamCheck;
	params.bSkipOverlapCheck = bSkipOverlapCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.IsValidClaim
// ()
// Parameters:
// class APawn*                   ChkClaim                       (Parm)
// int                            SlotIdx                        (Parm)
// bool                           bSkipTeamCheck                 (OptionalParm, Parm)
// bool                           bSkipOverlapCheck              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::IsValidClaim(class APawn* ChkClaim, int SlotIdx, bool bSkipTeamCheck, bool bSkipOverlapCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsValidClaim");

	ACoverLink_IsValidClaim_Params params;
	params.ChkClaim = ChkClaim;
	params.SlotIdx = SlotIdx;
	params.bSkipTeamCheck = bSkipTeamCheck;
	params.bSkipOverlapCheck = bSkipOverlapCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.UnClaim
// ()
// Parameters:
// class APawn*                   OldClaim                       (Parm)
// int                            SlotIdx                        (Parm)
// bool                           bUnclaimAll                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::UnClaim(class APawn* OldClaim, int SlotIdx, bool bUnclaimAll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.UnClaim");

	ACoverLink_UnClaim_Params params;
	params.OldClaim = OldClaim;
	params.SlotIdx = SlotIdx;
	params.bUnclaimAll = bUnclaimAll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.Claim
// ()
// Parameters:
// class APawn*                   NewClaim                       (Parm)
// int                            SlotIdx                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::Claim(class APawn* NewClaim, int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.Claim");

	ACoverLink_Claim_Params params;
	params.NewClaim = NewClaim;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.SetInvalidUntil
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// float                          TimeToBecomeValid              (Parm)

void ACoverLink::SetInvalidUntil(int SlotIdx, float TimeToBecomeValid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.SetInvalidUntil");

	ACoverLink_SetInvalidUntil_Params params;
	params.SlotIdx = SlotIdx;
	params.TimeToBecomeValid = TimeToBecomeValid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.IsExposedTo
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// struct FCoverInfo              ChkSlot                        (Parm)
// float                          out_ExposedScale               (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::IsExposedTo(int SlotIdx, const struct FCoverInfo& ChkSlot, float* out_ExposedScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsExposedTo");

	ACoverLink_IsExposedTo_Params params;
	params.SlotIdx = SlotIdx;
	params.ChkSlot = ChkSlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ExposedScale != nullptr)
		*out_ExposedScale = params.out_ExposedScale;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetSlotViewPoint
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// TEnumAsByte<ECoverType>        Type                           (OptionalParm, Parm)
// TEnumAsByte<ECoverAction>      Action                         (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ACoverLink::GetSlotViewPoint(int SlotIdx, TEnumAsByte<ECoverType> Type, TEnumAsByte<ECoverAction> Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotViewPoint");

	ACoverLink_GetSlotViewPoint_Params params;
	params.SlotIdx = SlotIdx;
	params.Type = Type;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetSlotRotation
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           bForceUseOffset                (OptionalParm, Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator ACoverLink::GetSlotRotation(int SlotIdx, bool bForceUseOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotRotation");

	ACoverLink_GetSlotRotation_Params params;
	params.SlotIdx = SlotIdx;
	params.bForceUseOffset = bForceUseOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetSlotLocation
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           bForceUseOffset                (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ACoverLink::GetSlotLocation(int SlotIdx, bool bForceUseOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotLocation");

	ACoverLink_GetSlotLocation_Params params;
	params.SlotIdx = SlotIdx;
	params.bForceUseOffset = bForceUseOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.UnPackFireLinkInteractionInfo
// ()
// Parameters:
// unsigned char                  PackedByte                     (Const, Parm)
// TEnumAsByte<ECoverType>        SrcType                        (Parm, OutParm)
// TEnumAsByte<ECoverAction>      SrcAction                      (Parm, OutParm)
// TEnumAsByte<ECoverType>        DestType                       (Parm, OutParm)
// TEnumAsByte<ECoverAction>      DestAction                     (Parm, OutParm)

void ACoverLink::UnPackFireLinkInteractionInfo(unsigned char PackedByte, TEnumAsByte<ECoverType>* SrcType, TEnumAsByte<ECoverAction>* SrcAction, TEnumAsByte<ECoverType>* DestType, TEnumAsByte<ECoverAction>* DestAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.UnPackFireLinkInteractionInfo");

	ACoverLink_UnPackFireLinkInteractionInfo_Params params;
	params.PackedByte = PackedByte;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SrcType != nullptr)
		*SrcType = params.SrcType;
	if (SrcAction != nullptr)
		*SrcAction = params.SrcAction;
	if (DestType != nullptr)
		*DestType = params.DestType;
	if (DestAction != nullptr)
		*DestAction = params.DestAction;
}


// Function Engine.CoverLink.PackFireLinkInteractionInfo
// ()
// Parameters:
// TEnumAsByte<ECoverType>        SrcType                        (Parm)
// TEnumAsByte<ECoverAction>      SrcAction                      (Parm)
// TEnumAsByte<ECoverType>        DestType                       (Parm)
// TEnumAsByte<ECoverAction>      DestAction                     (Parm)
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char ACoverLink::PackFireLinkInteractionInfo(TEnumAsByte<ECoverType> SrcType, TEnumAsByte<ECoverAction> SrcAction, TEnumAsByte<ECoverType> DestType, TEnumAsByte<ECoverAction> DestAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.PackFireLinkInteractionInfo");

	ACoverLink_PackFireLinkInteractionInfo_Params params;
	params.SrcType = SrcType;
	params.SrcAction = SrcAction;
	params.DestType = DestType;
	params.DestAction = DestAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetFireLinkTargetCoverInfo
// ()
// Parameters:
// int                            SlotIdx                        (Parm)
// int                            FireLinkIdx                    (Parm)
// struct FCoverInfo              out_Info                       (Parm, OutParm)
// TEnumAsByte<EFireLinkID>       ArrayID                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::GetFireLinkTargetCoverInfo(int SlotIdx, int FireLinkIdx, TEnumAsByte<EFireLinkID> ArrayID, struct FCoverInfo* out_Info)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetFireLinkTargetCoverInfo");

	ACoverLink_GetFireLinkTargetCoverInfo_Params params;
	params.SlotIdx = SlotIdx;
	params.FireLinkIdx = FireLinkIdx;
	params.ArrayID = ArrayID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Info != nullptr)
		*out_Info = params.out_Info;

	return params.ReturnValue;
}


// Function Engine.DoorMarker.SuggestMovePreparation
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ADoorMarker::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.SuggestMovePreparation");

	ADoorMarker_SuggestMovePreparation_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DoorMarker.ProceedWithMove
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ADoorMarker::ProceedWithMove(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.ProceedWithMove");

	ADoorMarker_ProceedWithMove_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DoorMarker.SpecialHandling
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ADoorMarker::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.SpecialHandling");

	ADoorMarker_SpecialHandling_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DoorMarker.MoverClosed
// ()

void ADoorMarker::MoverClosed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.MoverClosed");

	ADoorMarker_MoverClosed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DoorMarker.MoverOpened
// ()

void ADoorMarker::MoverOpened()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.MoverOpened");

	ADoorMarker_MoverOpened_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DoorMarker.PostBeginPlay
// ()

void ADoorMarker::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.PostBeginPlay");

	ADoorMarker_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Ladder.SuggestMovePreparation
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALadder::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Ladder.SuggestMovePreparation");

	ALadder_SuggestMovePreparation_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LiftCenter.ProceedWithMove
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALiftCenter::ProceedWithMove(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftCenter.ProceedWithMove");

	ALiftCenter_ProceedWithMove_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LiftCenter.SuggestMovePreparation
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALiftCenter::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftCenter.SuggestMovePreparation");

	ALiftCenter_SuggestMovePreparation_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LiftCenter.SpecialHandling
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ALiftCenter::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftCenter.SpecialHandling");

	ALiftCenter_SpecialHandling_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LiftCenter.PostBeginPlay
// ()

void ALiftCenter::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftCenter.PostBeginPlay");

	ALiftCenter_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LiftExit.SuggestMovePreparation
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALiftExit::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftExit.SuggestMovePreparation");

	ALiftExit_SuggestMovePreparation_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LiftExit.WaitForLift
// ()
// Parameters:
// class APawn*                   Other                          (Parm)

void ALiftExit::WaitForLift(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftExit.WaitForLift");

	ALiftExit_WaitForLift_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LiftExit.CanBeReachedFromLiftBy
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALiftExit::CanBeReachedFromLiftBy(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftExit.CanBeReachedFromLiftBy");

	ALiftExit_CanBeReachedFromLiftBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PathNode.GetDebugAbbrev
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APathNode::GetDebugAbbrev()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PathNode.GetDebugAbbrev");

	APathNode_GetDebugAbbrev_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PickupFactory.DelayRespawn
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APickupFactory::DelayRespawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.DelayRespawn");

	APickupFactory_DelayRespawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PickupFactory.Destroyed
// ()

void APickupFactory::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.Destroyed");

	APickupFactory_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.SetPickupVisible
// ()

void APickupFactory::SetPickupVisible()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SetPickupVisible");

	APickupFactory_SetPickupVisible_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.SetPickupHidden
// ()

void APickupFactory::SetPickupHidden()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SetPickupHidden");

	APickupFactory_SetPickupHidden_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.RespawnEffect
// ()

void APickupFactory::RespawnEffect()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.RespawnEffect");

	APickupFactory_RespawnEffect_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.GetRespawnTime
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APickupFactory::GetRespawnTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.GetRespawnTime");

	APickupFactory_GetRespawnTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PickupFactory.RecheckValidTouch
// ()

void APickupFactory::RecheckValidTouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.RecheckValidTouch");

	APickupFactory_RecheckValidTouch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.PickedUpBy
// ()
// Parameters:
// class APawn*                   P                              (Parm)

void APickupFactory::PickedUpBy(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.PickedUpBy");

	APickupFactory_PickedUpBy_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.GiveTo
// ()
// Parameters:
// class APawn*                   P                              (Parm)

void APickupFactory::GiveTo(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.GiveTo");

	APickupFactory_GiveTo_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.ReadyToPickup
// ()
// Parameters:
// float                          MaxWait                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APickupFactory::ReadyToPickup(float MaxWait)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.ReadyToPickup");

	APickupFactory_ReadyToPickup_Params params;
	params.MaxWait = MaxWait;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PickupFactory.SpawnCopyFor
// ()
// Parameters:
// class APawn*                   Recipient                      (Parm)

void APickupFactory::SpawnCopyFor(class APawn* Recipient)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SpawnCopyFor");

	APickupFactory_SpawnCopyFor_Params params;
	params.Recipient = Recipient;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.DetourWeight
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// float                          PathWeight                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APickupFactory::DetourWeight(class APawn* Other, float PathWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.DetourWeight");

	APickupFactory_DetourWeight_Params params;
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PickupFactory.StartSleeping
// ()

void APickupFactory::StartSleeping()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.StartSleeping");

	APickupFactory_StartSleeping_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.SetRespawn
// ()

void APickupFactory::SetRespawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SetRespawn");

	APickupFactory_SetRespawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.CheckForErrors
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APickupFactory::CheckForErrors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.CheckForErrors");

	APickupFactory_CheckForErrors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PickupFactory.Reset
// ()

void APickupFactory::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.Reset");

	APickupFactory_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.SetPickupMesh
// ()

void APickupFactory::SetPickupMesh()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SetPickupMesh");

	APickupFactory_SetPickupMesh_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.ShutDown
// ()

void APickupFactory::ShutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.ShutDown");

	APickupFactory_ShutDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.SetInitialState
// ()

void APickupFactory::SetInitialState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SetInitialState");

	APickupFactory_SetInitialState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.InitializePickup
// ()

void APickupFactory::InitializePickup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.InitializePickup");

	APickupFactory_InitializePickup_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.PreBeginPlay
// ()

void APickupFactory::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.PreBeginPlay");

	APickupFactory_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void APickupFactory::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.ReplicatedEvent");

	APickupFactory_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerStart.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void APlayerStart::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerStart.OnToggle");

	APlayerStart_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PortalMarker.CanTeleport
// ()
// Parameters:
// class AActor*                  A                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APortalMarker::CanTeleport(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PortalMarker.CanTeleport");

	APortalMarker_CanTeleport_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AISwitchablePylon.IsEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAISwitchablePylon::IsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AISwitchablePylon.IsEnabled");

	AAISwitchablePylon_IsEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AISwitchablePylon.SetEnabled
// ()
// Parameters:
// bool                           bEnabled                       (Parm)

void AAISwitchablePylon::SetEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AISwitchablePylon.SetEnabled");

	AAISwitchablePylon_SetEnabled_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AISwitchablePylon.PostBeginPlay
// ()

void AAISwitchablePylon::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AISwitchablePylon.PostBeginPlay");

	AAISwitchablePylon_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicPylon.StoppedMoving
// ()

void ADynamicPylon::StoppedMoving()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicPylon.StoppedMoving");

	ADynamicPylon_StoppedMoving_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicPylon.StartedMoving
// ()

void ADynamicPylon::StartedMoving()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicPylon.StartedMoving");

	ADynamicPylon_StartedMoving_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicPylon.FlushDynamicEdges
// ()

void ADynamicPylon::FlushDynamicEdges()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicPylon.FlushDynamicEdges");

	ADynamicPylon_FlushDynamicEdges_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicPylon.RebuildDynamicEdges
// ()

void ADynamicPylon::RebuildDynamicEdges()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicPylon.RebuildDynamicEdges");

	ADynamicPylon_RebuildDynamicEdges_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicPylon.PostBeginPlay
// ()

void ADynamicPylon::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicPylon.PostBeginPlay");

	ADynamicPylon_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Teleporter.SpecialHandling
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ATeleporter::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.SpecialHandling");

	ATeleporter_SpecialHandling_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Teleporter.PostTouch
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void ATeleporter::PostTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.PostTouch");

	ATeleporter_PostTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Teleporter.Touch
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void ATeleporter::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.Touch");

	ATeleporter_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Teleporter.Accept
// ()
// Parameters:
// class AActor*                  Incoming                       (Parm)
// class AActor*                  Source                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ATeleporter::Accept(class AActor* Incoming, class AActor* Source)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.Accept");

	ATeleporter_Accept_Params params;
	params.Incoming = Incoming;
	params.Source = Source;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Teleporter.PostBeginPlay
// ()

void ATeleporter::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.PostBeginPlay");

	ATeleporter_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Teleporter.CanTeleport
// ()
// Parameters:
// class AActor*                  A                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ATeleporter::CanTeleport(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.CanTeleport");

	ATeleporter_CanTeleport_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.ApplyFluidSurfaceImpact
// ()
// Parameters:
// class AFluidSurfaceActor*      Fluid                          (Parm)
// struct FVector                 HitLocation                    (Parm)

void AProjectile::ApplyFluidSurfaceImpact(class AFluidSurfaceActor* Fluid, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.ApplyFluidSurfaceImpact");

	AProjectile_ApplyFluidSurfaceImpact_Params params;
	params.Fluid = Fluid;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.GetRange
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AProjectile::GetRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.GetRange");

	AProjectile_GetRange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.StaticGetTimeToLocation
// ()
// Parameters:
// struct FVector                 TargetLoc                      (Parm)
// struct FVector                 StartLoc                       (Parm)
// class AController*             RequestedBy                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AProjectile::StaticGetTimeToLocation(const struct FVector& TargetLoc, const struct FVector& StartLoc, class AController* RequestedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.StaticGetTimeToLocation");

	AProjectile_StaticGetTimeToLocation_Params params;
	params.TargetLoc = TargetLoc;
	params.StartLoc = StartLoc;
	params.RequestedBy = RequestedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.GetTimeToLocation
// ()
// Parameters:
// struct FVector                 TargetLoc                      (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AProjectile::GetTimeToLocation(const struct FVector& TargetLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.GetTimeToLocation");

	AProjectile_GetTimeToLocation_Params params;
	params.TargetLoc = TargetLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.FellOutOfWorld
// ()
// Parameters:
// class UClass*                  dmgType                        (Parm)

void AProjectile::FellOutOfWorld(class UClass* dmgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.FellOutOfWorld");

	AProjectile_FellOutOfWorld_Params params;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.IsStationary
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AProjectile::IsStationary()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.IsStationary");

	AProjectile_IsStationary_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.RandSpin
// ()
// Parameters:
// float                          spinRate                       (Parm)

void AProjectile::RandSpin(float spinRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.RandSpin");

	AProjectile_RandSpin_Params params;
	params.spinRate = spinRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.Explode
// ()
// Parameters:
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void AProjectile::Explode(const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.Explode");

	AProjectile_Explode_Params params;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.EncroachedBy
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void AProjectile::EncroachedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.EncroachedBy");

	AProjectile_EncroachedBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.HitWall
// ()
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  Wall                           (Parm)
// class UPrimitiveComponent*     WallComp                       (Parm, EditInline)

void AProjectile::HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.HitWall");

	AProjectile_HitWall_Params params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;
	params.WallComp = WallComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.ProcessTouch
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void AProjectile::ProcessTouch(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.ProcessTouch");

	AProjectile_ProcessTouch_Params params;
	params.Other = Other;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.Touch
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void AProjectile::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.Touch");

	AProjectile_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.HurtRadius
// ()
// Parameters:
// float                          DamageAmount                   (Parm)
// float                          InDamageRadius                 (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HurtOrigin                     (Parm)
// class AActor*                  IgnoredActor                   (OptionalParm, Parm)
// class AController*             InstigatedByController         (OptionalParm, Parm)
// bool                           bDoFullDamage                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AProjectile::HurtRadius(float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, bool bDoFullDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.HurtRadius");

	AProjectile_HurtRadius_Params params;
	params.DamageAmount = DamageAmount;
	params.InDamageRadius = InDamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.IgnoredActor = IgnoredActor;
	params.InstigatedByController = InstigatedByController;
	params.bDoFullDamage = bDoFullDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.ProjectileHurtRadius
// ()
// Parameters:
// struct FVector                 HurtOrigin                     (Parm)
// struct FVector                 HitNormal                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AProjectile::ProjectileHurtRadius(const struct FVector& HurtOrigin, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.ProjectileHurtRadius");

	AProjectile_ProjectileHurtRadius_Params params;
	params.HurtOrigin = HurtOrigin;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.Reset
// ()

void AProjectile::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.Reset");

	AProjectile_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.CanSplash
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AProjectile::CanSplash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.CanSplash");

	AProjectile_CanSplash_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.GetTeamNum
// ()
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char AProjectile::GetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.GetTeamNum");

	AProjectile_GetTeamNum_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.Init
// ()
// Parameters:
// struct FVector                 Direction                      (Parm)

void AProjectile::Init(const struct FVector& Direction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.Init");

	AProjectile_Init_Params params;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.PostBeginPlay
// ()

void AProjectile::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.PostBeginPlay");

	AProjectile_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.PreBeginPlay
// ()

void AProjectile::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.PreBeginPlay");

	AProjectile_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.EncroachingOn
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AProjectile::EncroachingOn(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.EncroachingOn");

	AProjectile_EncroachingOn_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneCaptureActor.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void ASceneCaptureActor::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureActor.OnToggle");

	ASceneCaptureActor_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PortalTeleporter.StopsProjectile
// ()
// Parameters:
// class AProjectile*             P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APortalTeleporter::StopsProjectile(class AProjectile* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PortalTeleporter.StopsProjectile");

	APortalTeleporter_StopsProjectile_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PortalTeleporter.CreatePortalTexture
// ()
// Parameters:
// class UTextureRenderTarget2D*  ReturnValue                    (Parm, OutParm, ReturnParm)

class UTextureRenderTarget2D* APortalTeleporter::CreatePortalTexture()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PortalTeleporter.CreatePortalTexture");

	APortalTeleporter_CreatePortalTexture_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PortalTeleporter.TransformHitLocation
// ()
// Parameters:
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector APortalTeleporter::TransformHitLocation(const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PortalTeleporter.TransformHitLocation");

	APortalTeleporter_TransformHitLocation_Params params;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PortalTeleporter.TransformVectorDir
// ()
// Parameters:
// struct FVector                 V                              (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector APortalTeleporter::TransformVectorDir(const struct FVector& V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PortalTeleporter.TransformVectorDir");

	APortalTeleporter_TransformVectorDir_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PortalTeleporter.TransformActor
// ()
// Parameters:
// class AActor*                  A                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APortalTeleporter::TransformActor(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PortalTeleporter.TransformActor");

	APortalTeleporter_TransformActor_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StaticMeshActor.PreBeginPlay
// ()

void AStaticMeshActor::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshActor.PreBeginPlay");

	AStaticMeshActor_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StaticMeshActorBasedOnExtremeContent.SetMaterialBasedOnExtremeContent
// ()

void AStaticMeshActorBasedOnExtremeContent::SetMaterialBasedOnExtremeContent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshActorBasedOnExtremeContent.SetMaterialBasedOnExtremeContent");

	AStaticMeshActorBasedOnExtremeContent_SetMaterialBasedOnExtremeContent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StaticMeshActorBasedOnExtremeContent.PostBeginPlay
// ()

void AStaticMeshActorBasedOnExtremeContent::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshActorBasedOnExtremeContent.PostBeginPlay");

	AStaticMeshActorBasedOnExtremeContent_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Trigger.ApplyCheckpointRecord
// ()
// Parameters:
// struct ATrigger_FCheckpointRecord Record                         (Const, Parm, OutParm)

void ATrigger::ApplyCheckpointRecord(struct ATrigger_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.ApplyCheckpointRecord");

	ATrigger_ApplyCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.Trigger.CreateCheckpointRecord
// ()
// Parameters:
// struct ATrigger_FCheckpointRecord Record                         (Parm, OutParm)

void ATrigger::CreateCheckpointRecord(struct ATrigger_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.CreateCheckpointRecord");

	ATrigger_CreateCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.Trigger.ShouldSaveForCheckpoint
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ATrigger::ShouldSaveForCheckpoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.ShouldSaveForCheckpoint");

	ATrigger_ShouldSaveForCheckpoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Trigger.StopsProjectile
// ()
// Parameters:
// class AProjectile*             P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ATrigger::StopsProjectile(class AProjectile* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.StopsProjectile");

	ATrigger_StopsProjectile_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Trigger.UnTrigger
// ()

void ATrigger::UnTrigger()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.UnTrigger");

	ATrigger_UnTrigger_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Trigger.NotifyTriggered
// ()

void ATrigger::NotifyTriggered()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.NotifyTriggered");

	ATrigger_NotifyTriggered_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Trigger.Touch
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void ATrigger::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.Touch");

	ATrigger_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.DetachFromAny
// ()

void UActorComponent::DetachFromAny()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.DetachFromAny");

	UActorComponent_DetachFromAny_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.ForceUpdate
// ()
// Parameters:
// bool                           bTransformOnly                 (Parm)

void UActorComponent::ForceUpdate(bool bTransformOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ForceUpdate");

	UActorComponent_ForceUpdate_Params params;
	params.bTransformOnly = bTransformOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.SetComponentRBFixed
// ()
// Parameters:
// bool                           bFixed                         (Parm)

void UActorComponent::SetComponentRBFixed(bool bFixed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetComponentRBFixed");

	UActorComponent_SetComponentRBFixed_Params params;
	params.bFixed = bFixed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.SetTickGroup
// ()
// Parameters:
// TEnumAsByte<ETickingGroup>     NewTickGroup                   (Parm)

void UActorComponent::SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetTickGroup");

	UActorComponent_SetTickGroup_Params params;
	params.NewTickGroup = NewTickGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.OcclusionChanged
// ()
// Parameters:
// bool                           bNowOccluded                   (Parm)

void UAudioComponent::OcclusionChanged(bool bNowOccluded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.OcclusionChanged");

	UAudioComponent_OcclusionChanged_Params params;
	params.bNowOccluded = bNowOccluded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.OnQueueSubtitles
// ()
// Parameters:
// TArray<struct FSubtitleCue>    Subtitles                      (Parm, NeedCtorLink)
// float                          CueDuration                    (Parm)

void UAudioComponent::OnQueueSubtitles(TArray<struct FSubtitleCue> Subtitles, float CueDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.OnQueueSubtitles");

	UAudioComponent_OnQueueSubtitles_Params params;
	params.Subtitles = Subtitles;
	params.CueDuration = CueDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.OnAudioFinished
// ()
// Parameters:
// class UAudioComponent*         AC                             (Parm, EditInline)

void UAudioComponent::OnAudioFinished(class UAudioComponent* AC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.OnAudioFinished");

	UAudioComponent_OnAudioFinished_Params params;
	params.AC = AC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.ResetToDefaults
// ()

void UAudioComponent::ResetToDefaults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.ResetToDefaults");

	UAudioComponent_ResetToDefaults_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.SetWaveParameter
// ()
// Parameters:
// struct FName                   InName                         (Parm)
// class USoundNodeWave*          InWave                         (Parm)

void UAudioComponent::SetWaveParameter(const struct FName& InName, class USoundNodeWave* InWave)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetWaveParameter");

	UAudioComponent_SetWaveParameter_Params params;
	params.InName = InName;
	params.InWave = InWave;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.SetFloatParameter
// ()
// Parameters:
// struct FName                   InName                         (Parm)
// float                          InFloat                        (Parm)

void UAudioComponent::SetFloatParameter(const struct FName& InName, float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetFloatParameter");

	UAudioComponent_SetFloatParameter_Params params;
	params.InName = InName;
	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.AdjustVolume
// ()
// Parameters:
// float                          AdjustVolumeDuration           (Parm)
// float                          AdjustVolumeLevel              (Parm)

void UAudioComponent::AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.AdjustVolume");

	UAudioComponent_AdjustVolume_Params params;
	params.AdjustVolumeDuration = AdjustVolumeDuration;
	params.AdjustVolumeLevel = AdjustVolumeLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.FadeOut
// ()
// Parameters:
// float                          FadeOutDuration                (Parm)
// float                          FadeVolumeLevel                (Parm)

void UAudioComponent::FadeOut(float FadeOutDuration, float FadeVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.FadeOut");

	UAudioComponent_FadeOut_Params params;
	params.FadeOutDuration = FadeOutDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.FadeIn
// ()
// Parameters:
// float                          FadeInDuration                 (Parm)
// float                          FadeVolumeLevel                (Parm)

void UAudioComponent::FadeIn(float FadeInDuration, float FadeVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.FadeIn");

	UAudioComponent_FadeIn_Params params;
	params.FadeInDuration = FadeInDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.IsPlaying
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UAudioComponent::IsPlaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.IsPlaying");

	UAudioComponent_IsPlaying_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AudioComponent.Stop
// ()

void UAudioComponent::Stop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.Stop");

	UAudioComponent_Stop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.Play
// ()

void UAudioComponent::Play()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.Play");

	UAudioComponent_Play_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HeightFogComponent.SetEnabled
// ()
// Parameters:
// bool                           bSetEnabled                    (Parm)

void UHeightFogComponent::SetEnabled(bool bSetEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HeightFogComponent.SetEnabled");

	UHeightFogComponent_SetEnabled_Params params;
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.OnUpdatePropertyLightColor
// ()

void ULightComponent::OnUpdatePropertyLightColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.OnUpdatePropertyLightColor");

	ULightComponent_OnUpdatePropertyLightColor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.OnUpdatePropertyBrightness
// ()

void ULightComponent::OnUpdatePropertyBrightness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.OnUpdatePropertyBrightness");

	ULightComponent_OnUpdatePropertyBrightness_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.OnUpdatePropertyOcclusionMaskDarkness
// ()

void ULightComponent::OnUpdatePropertyOcclusionMaskDarkness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.OnUpdatePropertyOcclusionMaskDarkness");

	ULightComponent_OnUpdatePropertyOcclusionMaskDarkness_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.OnUpdatePropertyBloomTint
// ()

void ULightComponent::OnUpdatePropertyBloomTint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.OnUpdatePropertyBloomTint");

	ULightComponent_OnUpdatePropertyBloomTint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.OnUpdatePropertyBloomScale
// ()

void ULightComponent::OnUpdatePropertyBloomScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.OnUpdatePropertyBloomScale");

	ULightComponent_OnUpdatePropertyBloomScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.UpdateLightShaftParameters
// ()

void ULightComponent::UpdateLightShaftParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.UpdateLightShaftParameters");

	ULightComponent_UpdateLightShaftParameters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.UpdateColorAndBrightness
// ()

void ULightComponent::UpdateColorAndBrightness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.UpdateColorAndBrightness");

	ULightComponent_UpdateColorAndBrightness_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.GetDirection
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ULightComponent::GetDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.GetDirection");

	ULightComponent_GetDirection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LightComponent.GetOrigin
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ULightComponent::GetOrigin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.GetOrigin");

	ULightComponent_GetOrigin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LightComponent.SetLightProperties
// ()
// Parameters:
// float                          NewBrightness                  (OptionalParm, Parm)
// struct FColor                  NewLightColor                  (OptionalParm, Parm)
// class ULightFunction*          NewLightFunction               (OptionalParm, Parm)

void ULightComponent::SetLightProperties(float NewBrightness, const struct FColor& NewLightColor, class ULightFunction* NewLightFunction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightProperties");

	ULightComponent_SetLightProperties_Params params;
	params.NewBrightness = NewBrightness;
	params.NewLightColor = NewLightColor;
	params.NewLightFunction = NewLightFunction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.SetEnabled
// ()
// Parameters:
// bool                           bSetEnabled                    (Parm)

void ULightComponent::SetEnabled(bool bSetEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetEnabled");

	ULightComponent_SetEnabled_Params params;
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.ClosestPointOnComponentToComponent
// ()
// Parameters:
// class UPrimitiveComponent*     OtherComponent                 (Parm, OutParm, EditInline)
// struct FVector                 PointOnComponentA              (Parm, OutParm)
// struct FVector                 PointOnComponentB              (Parm, OutParm)
// TEnumAsByte<EGJKResult>        ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EGJKResult> UPrimitiveComponent::ClosestPointOnComponentToComponent(class UPrimitiveComponent** OtherComponent, struct FVector* PointOnComponentA, struct FVector* PointOnComponentB)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ClosestPointOnComponentToComponent");

	UPrimitiveComponent_ClosestPointOnComponentToComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OtherComponent != nullptr)
		*OtherComponent = params.OtherComponent;
	if (PointOnComponentA != nullptr)
		*PointOnComponentA = params.PointOnComponentA;
	if (PointOnComponentB != nullptr)
		*PointOnComponentB = params.PointOnComponentB;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.ClosestPointOnComponentToPoint
// ()
// Parameters:
// struct FVector                 POI                            (Parm, OutParm)
// struct FVector                 Extent                         (Parm, OutParm)
// struct FVector                 OutPointA                      (Parm, OutParm)
// struct FVector                 OutPointB                      (Parm, OutParm)
// TEnumAsByte<EGJKResult>        ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EGJKResult> UPrimitiveComponent::ClosestPointOnComponentToPoint(struct FVector* POI, struct FVector* Extent, struct FVector* OutPointA, struct FVector* OutPointB)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ClosestPointOnComponentToPoint");

	UPrimitiveComponent_ClosestPointOnComponentToPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (POI != nullptr)
		*POI = params.POI;
	if (Extent != nullptr)
		*Extent = params.Extent;
	if (OutPointA != nullptr)
		*OutPointA = params.OutPointA;
	if (OutPointB != nullptr)
		*OutPointB = params.OutPointB;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator UPrimitiveComponent::GetRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetRotation");

	UPrimitiveComponent_GetRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetPosition
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UPrimitiveComponent::GetPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetPosition");

	UPrimitiveComponent_GetPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.SetAbsolute
// ()
// Parameters:
// bool                           NewAbsoluteTranslation         (OptionalParm, Parm)
// bool                           NewAbsoluteRotation            (OptionalParm, Parm)
// bool                           NewAbsoluteScale               (OptionalParm, Parm)

void UPrimitiveComponent::SetAbsolute(bool NewAbsoluteTranslation, bool NewAbsoluteRotation, bool NewAbsoluteScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetAbsolute");

	UPrimitiveComponent_SetAbsolute_Params params;
	params.NewAbsoluteTranslation = NewAbsoluteTranslation;
	params.NewAbsoluteRotation = NewAbsoluteRotation;
	params.NewAbsoluteScale = NewAbsoluteScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetScale3D
// ()
// Parameters:
// struct FVector                 NewScale3D                     (Parm)

void UPrimitiveComponent::SetScale3D(const struct FVector& NewScale3D)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetScale3D");

	UPrimitiveComponent_SetScale3D_Params params;
	params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetScale
// ()
// Parameters:
// float                          NewScale                       (Parm)

void UPrimitiveComponent::SetScale(float NewScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetScale");

	UPrimitiveComponent_SetScale_Params params;
	params.NewScale = NewScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (Parm)

void UPrimitiveComponent::SetRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRotation");

	UPrimitiveComponent_SetRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetTranslation
// ()
// Parameters:
// struct FVector                 NewTranslation                 (Parm)

void UPrimitiveComponent::SetTranslation(const struct FVector& NewTranslation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetTranslation");

	UPrimitiveComponent_SetTranslation_Params params;
	params.NewTranslation = NewTranslation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetActorCollision
// ()
// Parameters:
// bool                           NewCollideActors               (Parm)
// bool                           NewBlockActors                 (Parm)
// bool                           NewAlwaysCheckCollision        (OptionalParm, Parm)

void UPrimitiveComponent::SetActorCollision(bool NewCollideActors, bool NewBlockActors, bool NewAlwaysCheckCollision)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetActorCollision");

	UPrimitiveComponent_SetActorCollision_Params params;
	params.NewCollideActors = NewCollideActors;
	params.NewBlockActors = NewBlockActors;
	params.NewAlwaysCheckCollision = NewAlwaysCheckCollision;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetTraceBlocking
// ()
// Parameters:
// bool                           NewBlockZeroExtent             (Parm)
// bool                           NewBlockNonZeroExtent          (Parm)

void UPrimitiveComponent::SetTraceBlocking(bool NewBlockZeroExtent, bool NewBlockNonZeroExtent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetTraceBlocking");

	UPrimitiveComponent_SetTraceBlocking_Params params;
	params.NewBlockZeroExtent = NewBlockZeroExtent;
	params.NewBlockNonZeroExtent = NewBlockNonZeroExtent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetViewOwnerDepthPriorityGroup
// ()
// Parameters:
// bool                           bNewUseViewOwnerDepthPriorityGroup (Parm)
// TEnumAsByte<ESceneDepthPriorityGroup> NewViewOwnerDepthPriorityGroup (Parm)

void UPrimitiveComponent::SetViewOwnerDepthPriorityGroup(bool bNewUseViewOwnerDepthPriorityGroup, TEnumAsByte<ESceneDepthPriorityGroup> NewViewOwnerDepthPriorityGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetViewOwnerDepthPriorityGroup");

	UPrimitiveComponent_SetViewOwnerDepthPriorityGroup_Params params;
	params.bNewUseViewOwnerDepthPriorityGroup = bNewUseViewOwnerDepthPriorityGroup;
	params.NewViewOwnerDepthPriorityGroup = NewViewOwnerDepthPriorityGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetDepthPriorityGroup
// ()
// Parameters:
// TEnumAsByte<ESceneDepthPriorityGroup> NewDepthPriorityGroup          (Parm)

void UPrimitiveComponent::SetDepthPriorityGroup(TEnumAsByte<ESceneDepthPriorityGroup> NewDepthPriorityGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetDepthPriorityGroup");

	UPrimitiveComponent_SetDepthPriorityGroup_Params params;
	params.NewDepthPriorityGroup = NewDepthPriorityGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetLightingChannels
// ()
// Parameters:
// struct FLightingChannelContainer NewLightingChannels            (Parm)

void UPrimitiveComponent::SetLightingChannels(const struct FLightingChannelContainer& NewLightingChannels)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetLightingChannels");

	UPrimitiveComponent_SetLightingChannels_Params params;
	params.NewLightingChannels = NewLightingChannels;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetCullDistance
// ()
// Parameters:
// float                          NewCullDistance                (Parm)

void UPrimitiveComponent::SetCullDistance(float NewCullDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCullDistance");

	UPrimitiveComponent_SetCullDistance_Params params;
	params.NewCullDistance = NewCullDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetLightEnvironment
// ()
// Parameters:
// class ULightEnvironmentComponent* NewLightEnvironment            (Parm, EditInline)

void UPrimitiveComponent::SetLightEnvironment(class ULightEnvironmentComponent* NewLightEnvironment)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetLightEnvironment");

	UPrimitiveComponent_SetLightEnvironment_Params params;
	params.NewLightEnvironment = NewLightEnvironment;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetShadowParent
// ()
// Parameters:
// class UPrimitiveComponent*     NewShadowParent                (Parm, EditInline)

void UPrimitiveComponent::SetShadowParent(class UPrimitiveComponent* NewShadowParent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetShadowParent");

	UPrimitiveComponent_SetShadowParent_Params params;
	params.NewShadowParent = NewShadowParent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetIgnoreOwnerHidden
// ()
// Parameters:
// bool                           bNewIgnoreOwnerHidden          (Parm)

void UPrimitiveComponent::SetIgnoreOwnerHidden(bool bNewIgnoreOwnerHidden)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetIgnoreOwnerHidden");

	UPrimitiveComponent_SetIgnoreOwnerHidden_Params params;
	params.bNewIgnoreOwnerHidden = bNewIgnoreOwnerHidden;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetOnlyOwnerSee
// ()
// Parameters:
// bool                           bNewOnlyOwnerSee               (Parm)

void UPrimitiveComponent::SetOnlyOwnerSee(bool bNewOnlyOwnerSee)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetOnlyOwnerSee");

	UPrimitiveComponent_SetOnlyOwnerSee_Params params;
	params.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetOwnerNoSee
// ()
// Parameters:
// bool                           bNewOwnerNoSee                 (Parm)

void UPrimitiveComponent::SetOwnerNoSee(bool bNewOwnerNoSee)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetOwnerNoSee");

	UPrimitiveComponent_SetOwnerNoSee_Params params;
	params.bNewOwnerNoSee = bNewOwnerNoSee;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetHidden
// ()
// Parameters:
// bool                           NewHidden                      (Parm)

void UPrimitiveComponent::SetHidden(bool NewHidden)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetHidden");

	UPrimitiveComponent_SetHidden_Params params;
	params.NewHidden = NewHidden;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.ShouldComponentAddToScene
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPrimitiveComponent::ShouldComponentAddToScene()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ShouldComponentAddToScene");

	UPrimitiveComponent_ShouldComponentAddToScene_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.SetRBDominanceGroup
// ()
// Parameters:
// unsigned char                  InDomGroup                     (Parm)

void UPrimitiveComponent::SetRBDominanceGroup(unsigned char InDomGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBDominanceGroup");

	UPrimitiveComponent_SetRBDominanceGroup_Params params;
	params.InDomGroup = InDomGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.GetRootBodyInstance
// ()
// Parameters:
// class URB_BodyInstance*        ReturnValue                    (Parm, OutParm, ReturnParm)

class URB_BodyInstance* UPrimitiveComponent::GetRootBodyInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetRootBodyInstance");

	UPrimitiveComponent_GetRootBodyInstance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.SetPhysMaterialOverride
// ()
// Parameters:
// class UPhysicalMaterial*       NewPhysMaterial                (Parm)

void UPrimitiveComponent::SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysMaterialOverride");

	UPrimitiveComponent_SetPhysMaterialOverride_Params params;
	params.NewPhysMaterial = NewPhysMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.InitRBPhys
// ()

void UPrimitiveComponent::InitRBPhys()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.InitRBPhys");

	UPrimitiveComponent_InitRBPhys_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
// ()
// Parameters:
// bool                           bNewNotifyRigidBodyCollision   (Parm)

void UPrimitiveComponent::SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision");

	UPrimitiveComponent_SetNotifyRigidBodyCollision_Params params;
	params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRBChannel
// ()
// Parameters:
// TEnumAsByte<ERBCollisionChannel> Channel                        (Parm)

void UPrimitiveComponent::SetRBChannel(TEnumAsByte<ERBCollisionChannel> Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBChannel");

	UPrimitiveComponent_SetRBChannel_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRBCollisionChannels
// ()
// Parameters:
// struct FRBCollisionChannelContainer Channels                       (Parm)

void UPrimitiveComponent::SetRBCollisionChannels(const struct FRBCollisionChannelContainer& Channels)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBCollisionChannels");

	UPrimitiveComponent_SetRBCollisionChannels_Params params;
	params.Channels = Channels;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRBCollidesWithChannel
// ()
// Parameters:
// TEnumAsByte<ERBCollisionChannel> Channel                        (Parm)
// bool                           bNewCollides                   (Parm)

void UPrimitiveComponent::SetRBCollidesWithChannel(TEnumAsByte<ERBCollisionChannel> Channel, bool bNewCollides)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBCollidesWithChannel");

	UPrimitiveComponent_SetRBCollidesWithChannel_Params params;
	params.Channel = Channel;
	params.bNewCollides = bNewCollides;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetBlockRigidBody
// ()
// Parameters:
// bool                           bNewBlockRigidBody             (Parm)

void UPrimitiveComponent::SetBlockRigidBody(bool bNewBlockRigidBody)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetBlockRigidBody");

	UPrimitiveComponent_SetBlockRigidBody_Params params;
	params.bNewBlockRigidBody = bNewBlockRigidBody;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.RigidBodyIsAwake
// ()
// Parameters:
// struct FName                   BoneName                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPrimitiveComponent::RigidBodyIsAwake(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.RigidBodyIsAwake");

	UPrimitiveComponent_RigidBodyIsAwake_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.PutRigidBodyToSleep
// ()
// Parameters:
// struct FName                   BoneName                       (OptionalParm, Parm)

void UPrimitiveComponent::PutRigidBodyToSleep(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.PutRigidBodyToSleep");

	UPrimitiveComponent_PutRigidBodyToSleep_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.WakeRigidBody
// ()
// Parameters:
// struct FName                   BoneName                       (OptionalParm, Parm)

void UPrimitiveComponent::WakeRigidBody(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.WakeRigidBody");

	UPrimitiveComponent_WakeRigidBody_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRBRotation
// ()
// Parameters:
// struct FRotator                NewRot                         (Parm)
// struct FName                   BoneName                       (OptionalParm, Parm)

void UPrimitiveComponent::SetRBRotation(const struct FRotator& NewRot, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBRotation");

	UPrimitiveComponent_SetRBRotation_Params params;
	params.NewRot = NewRot;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRBPosition
// ()
// Parameters:
// struct FVector                 NewPos                         (Parm)
// struct FName                   BoneName                       (OptionalParm, Parm)

void UPrimitiveComponent::SetRBPosition(const struct FVector& NewPos, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBPosition");

	UPrimitiveComponent_SetRBPosition_Params params;
	params.NewPos = NewPos;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.RetardRBLinearVelocity
// ()
// Parameters:
// struct FVector                 RetardDir                      (Parm)
// float                          VelScale                       (Parm)

void UPrimitiveComponent::RetardRBLinearVelocity(const struct FVector& RetardDir, float VelScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.RetardRBLinearVelocity");

	UPrimitiveComponent_RetardRBLinearVelocity_Params params;
	params.RetardDir = RetardDir;
	params.VelScale = VelScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRBAngularVelocity
// ()
// Parameters:
// struct FVector                 NewAngVel                      (Parm)
// bool                           bAddToCurrent                  (OptionalParm, Parm)

void UPrimitiveComponent::SetRBAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBAngularVelocity");

	UPrimitiveComponent_SetRBAngularVelocity_Params params;
	params.NewAngVel = NewAngVel;
	params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRBLinearVelocity
// ()
// Parameters:
// struct FVector                 NewVel                         (Parm)
// bool                           bAddToCurrent                  (OptionalParm, Parm)

void UPrimitiveComponent::SetRBLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBLinearVelocity");

	UPrimitiveComponent_SetRBLinearVelocity_Params params;
	params.NewVel = NewVel;
	params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.AddTorque
// ()
// Parameters:
// struct FVector                 Torque                         (Parm)
// struct FName                   BoneName                       (OptionalParm, Parm)

void UPrimitiveComponent::AddTorque(const struct FVector& Torque, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddTorque");

	UPrimitiveComponent_AddTorque_Params params;
	params.Torque = Torque;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.AddRadialForce
// ()
// Parameters:
// struct FVector                 Origin                         (Parm)
// float                          Radius                         (Parm)
// float                          Strength                       (Parm)
// TEnumAsByte<ERadialImpulseFalloff> Falloff                        (Parm)

void UPrimitiveComponent::AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddRadialForce");

	UPrimitiveComponent_AddRadialForce_Params params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.Strength = Strength;
	params.Falloff = Falloff;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.AddForce
// ()
// Parameters:
// struct FVector                 Force                          (Parm)
// struct FVector                 Position                       (OptionalParm, Parm)
// struct FName                   BoneName                       (OptionalParm, Parm)

void UPrimitiveComponent::AddForce(const struct FVector& Force, const struct FVector& Position, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddForce");

	UPrimitiveComponent_AddForce_Params params;
	params.Force = Force;
	params.Position = Position;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.AddRadialImpulse
// ()
// Parameters:
// struct FVector                 Origin                         (Parm)
// float                          Radius                         (Parm)
// float                          Strength                       (Parm)
// TEnumAsByte<ERadialImpulseFalloff> Falloff                        (Parm)
// bool                           bVelChange                     (OptionalParm, Parm)

void UPrimitiveComponent::AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddRadialImpulse");

	UPrimitiveComponent_AddRadialImpulse_Params params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.Strength = Strength;
	params.Falloff = Falloff;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.AddImpulse
// ()
// Parameters:
// struct FVector                 Impulse                        (Parm)
// struct FVector                 Position                       (OptionalParm, Parm)
// struct FName                   BoneName                       (OptionalParm, Parm)
// bool                           bVelChange                     (OptionalParm, Parm)

void UPrimitiveComponent::AddImpulse(const struct FVector& Impulse, const struct FVector& Position, const struct FName& BoneName, bool bVelChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddImpulse");

	UPrimitiveComponent_AddImpulse_Params params;
	params.Impulse = Impulse;
	params.Position = Position;
	params.BoneName = BoneName;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CylinderComponent.SetCylinderSize
// ()
// Parameters:
// float                          NewRadius                      (Parm)
// float                          NewHeight                      (Parm)

void UCylinderComponent::SetCylinderSize(float NewRadius, float NewHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CylinderComponent.SetCylinderSize");

	UCylinderComponent_SetCylinderSize_Params params;
	params.NewRadius = NewRadius;
	params.NewHeight = NewHeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SpriteComponent.SetSpriteAndUV
// ()
// Parameters:
// class UTexture2D*              NewSprite                      (Parm)
// int                            NewU                           (Parm)
// int                            NewUL                          (Parm)
// int                            NewV                           (Parm)
// int                            NewVL                          (Parm)

void USpriteComponent::SetSpriteAndUV(class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpriteComponent.SetSpriteAndUV");

	USpriteComponent_SetSpriteAndUV_Params params;
	params.NewSprite = NewSprite;
	params.NewU = NewU;
	params.NewUL = NewUL;
	params.NewV = NewV;
	params.NewVL = NewVL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SpriteComponent.SetUV
// ()
// Parameters:
// int                            NewU                           (Parm)
// int                            NewUL                          (Parm)
// int                            NewV                           (Parm)
// int                            NewVL                          (Parm)

void USpriteComponent::SetUV(int NewU, int NewUL, int NewV, int NewVL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpriteComponent.SetUV");

	USpriteComponent_SetUV_Params params;
	params.NewU = NewU;
	params.NewUL = NewUL;
	params.NewV = NewV;
	params.NewVL = NewVL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SpriteComponent.SetSprite
// ()
// Parameters:
// class UTexture2D*              NewSprite                      (Parm)

void USpriteComponent::SetSprite(class UTexture2D* NewSprite)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpriteComponent.SetSprite");

	USpriteComponent_SetSprite_Params params;
	params.NewSprite = NewSprite;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialBlurComponent.OnUpdatePropertyBlurOpacity
// ()

void URadialBlurComponent::OnUpdatePropertyBlurOpacity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.OnUpdatePropertyBlurOpacity");

	URadialBlurComponent_OnUpdatePropertyBlurOpacity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialBlurComponent.OnUpdatePropertyBlurFalloffExponent
// ()

void URadialBlurComponent::OnUpdatePropertyBlurFalloffExponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.OnUpdatePropertyBlurFalloffExponent");

	URadialBlurComponent_OnUpdatePropertyBlurFalloffExponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialBlurComponent.OnUpdatePropertyBlurScale
// ()

void URadialBlurComponent::OnUpdatePropertyBlurScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.OnUpdatePropertyBlurScale");

	URadialBlurComponent_OnUpdatePropertyBlurScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialBlurComponent.SetEnabled
// ()
// Parameters:
// bool                           bInEnabled                     (Parm)

void URadialBlurComponent::SetEnabled(bool bInEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.SetEnabled");

	URadialBlurComponent_SetEnabled_Params params;
	params.bInEnabled = bInEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialBlurComponent.SetBlurOpacity
// ()
// Parameters:
// float                          InBlurOpacity                  (Parm)

void URadialBlurComponent::SetBlurOpacity(float InBlurOpacity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.SetBlurOpacity");

	URadialBlurComponent_SetBlurOpacity_Params params;
	params.InBlurOpacity = InBlurOpacity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialBlurComponent.SetBlurFalloffExponent
// ()
// Parameters:
// float                          InBlurFalloffExponent          (Parm)

void URadialBlurComponent::SetBlurFalloffExponent(float InBlurFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.SetBlurFalloffExponent");

	URadialBlurComponent_SetBlurFalloffExponent_Params params;
	params.InBlurFalloffExponent = InBlurFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialBlurComponent.SetBlurScale
// ()
// Parameters:
// float                          InBlurScale                    (Parm)

void URadialBlurComponent::SetBlurScale(float InBlurScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.SetBlurScale");

	URadialBlurComponent_SetBlurScale_Params params;
	params.InBlurScale = InBlurScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialBlurComponent.SetMaterial
// ()
// Parameters:
// class UMaterialInterface*      InMaterial                     (Parm)

void URadialBlurComponent::SetMaterial(class UMaterialInterface* InMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.SetMaterial");

	URadialBlurComponent_SetMaterial_Params params;
	params.InMaterial = InMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCaptureComponent.SetEnabled
// ()
// Parameters:
// bool                           bEnable                        (Parm)

void USceneCaptureComponent::SetEnabled(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.SetEnabled");

	USceneCaptureComponent_SetEnabled_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCaptureComponent.SetFrameRate
// ()
// Parameters:
// float                          NewFrameRate                   (Parm)

void USceneCaptureComponent::SetFrameRate(float NewFrameRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.SetFrameRate");

	USceneCaptureComponent_SetFrameRate_Params params;
	params.NewFrameRate = NewFrameRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCapture2DComponent.SetView
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm)
// struct FRotator                NewRotation                    (Parm)

void USceneCapture2DComponent::SetView(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCapture2DComponent.SetView");

	USceneCapture2DComponent_SetView_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCapture2DComponent.SetCaptureParameters
// ()
// Parameters:
// class UTextureRenderTarget2D*  NewTextureTarget               (OptionalParm, Parm)
// float                          NewFOV                         (OptionalParm, Parm)
// float                          NewNearPlane                   (OptionalParm, Parm)
// float                          NewFarPlane                    (OptionalParm, Parm)

void USceneCapture2DComponent::SetCaptureParameters(class UTextureRenderTarget2D* NewTextureTarget, float NewFOV, float NewNearPlane, float NewFarPlane)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCapture2DComponent.SetCaptureParameters");

	USceneCapture2DComponent_SetCaptureParameters_Params params;
	params.NewTextureTarget = NewTextureTarget;
	params.NewFOV = NewFOV;
	params.NewNearPlane = NewNearPlane;
	params.NewFarPlane = NewFarPlane;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCapture2DHitMaskComponent.SetFadingStartTimeSinceHit
// ()
// Parameters:
// float                          InFadingStartTimeSinceHit      (Const, Parm)

void USceneCapture2DHitMaskComponent::SetFadingStartTimeSinceHit(float InFadingStartTimeSinceHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCapture2DHitMaskComponent.SetFadingStartTimeSinceHit");

	USceneCapture2DHitMaskComponent_SetFadingStartTimeSinceHit_Params params;
	params.InFadingStartTimeSinceHit = InFadingStartTimeSinceHit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCapture2DHitMaskComponent.SetCaptureParameters
// ()
// Parameters:
// struct FVector                 InMaskPosition                 (Const, Parm)
// float                          InMaskRadius                   (Const, Parm)
// struct FVector                 InStartupPosition              (Const, Parm)
// bool                           bOnlyWhenFacing                (Const, Parm)

void USceneCapture2DHitMaskComponent::SetCaptureParameters(const struct FVector& InMaskPosition, float InMaskRadius, const struct FVector& InStartupPosition, bool bOnlyWhenFacing)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCapture2DHitMaskComponent.SetCaptureParameters");

	USceneCapture2DHitMaskComponent_SetCaptureParameters_Params params;
	params.InMaskPosition = InMaskPosition;
	params.InMaskRadius = InMaskRadius;
	params.InStartupPosition = InStartupPosition;
	params.bOnlyWhenFacing = bOnlyWhenFacing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCapture2DHitMaskComponent.SetCaptureTargetTexture
// ()
// Parameters:
// class UTextureRenderTarget2D*  InTextureTarget                (Const, Parm)

void USceneCapture2DHitMaskComponent::SetCaptureTargetTexture(class UTextureRenderTarget2D* InTextureTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCapture2DHitMaskComponent.SetCaptureTargetTexture");

	USceneCapture2DHitMaskComponent_SetCaptureTargetTexture_Params params;
	params.InTextureTarget = InTextureTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCapturePortalComponent.SetCaptureParameters
// ()
// Parameters:
// class UTextureRenderTarget2D*  NewTextureTarget               (OptionalParm, Parm)
// float                          NewScaleFOV                    (OptionalParm, Parm)
// class AActor*                  NewViewDest                    (OptionalParm, Parm)

void USceneCapturePortalComponent::SetCaptureParameters(class UTextureRenderTarget2D* NewTextureTarget, float NewScaleFOV, class AActor* NewViewDest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCapturePortalComponent.SetCaptureParameters");

	USceneCapturePortalComponent_SetCaptureParameters_Params params;
	params.NewTextureTarget = NewTextureTarget;
	params.NewScaleFOV = NewScaleFOV;
	params.NewViewDest = NewViewDest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorFactory.PostCreateActor
// ()
// Parameters:
// class AActor*                  NewActor                       (Parm)

void UActorFactory::PostCreateActor(class AActor* NewActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorFactory.PostCreateActor");

	UActorFactory_PostCreateActor_Params params;
	params.NewActor = NewActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GeneratePathToLocation
// ()
// Parameters:
// struct FVector                 Goal                           (Parm)
// float                          WithinDistance                 (OptionalParm, Parm)
// bool                           bAllowPartialPath              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::GeneratePathToLocation(const struct FVector& Goal, float WithinDistance, bool bAllowPartialPath)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GeneratePathToLocation");

	AController_GeneratePathToLocation_Params params;
	params.Goal = Goal;
	params.WithinDistance = WithinDistance;
	params.bAllowPartialPath = bAllowPartialPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.GeneratePathToActor
// ()
// Parameters:
// class AActor*                  Goal                           (Parm)
// float                          WithinDistance                 (OptionalParm, Parm)
// bool                           bAllowPartialPath              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::GeneratePathToActor(class AActor* Goal, float WithinDistance, bool bAllowPartialPath)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GeneratePathToActor");

	AController_GeneratePathToActor_Params params;
	params.Goal = Goal;
	params.WithinDistance = WithinDistance;
	params.bAllowPartialPath = bAllowPartialPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.InterpolationFinished
// ()
// Parameters:
// class USeqAct_Interp*          InterpAction                   (Parm)

void AController::InterpolationFinished(class USeqAct_Interp* InterpAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.InterpolationFinished");

	AController_InterpolationFinished_Params params;
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.InterpolationStarted
// ()
// Parameters:
// class USeqAct_Interp*          InterpAction                   (Parm)
// class UInterpGroupInst*        GroupInst                      (Parm)

void AController::InterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.InterpolationStarted");

	AController_InterpolationStarted_Params params;
	params.InterpAction = InterpAction;
	params.GroupInst = GroupInst;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.InitNavigationHandle
// ()

void AController::InitNavigationHandle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.InitNavigationHandle");

	AController_InitNavigationHandle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ReadyForLift
// ()

void AController::ReadyForLift()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReadyForLift");

	AController_ReadyForLift_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SendMessage
// ()
// Parameters:
// class APlayerReplicationInfo*  Recipient                      (Parm)
// struct FName                   MessageType                    (Parm)
// float                          Wait                           (Parm)
// class UClass*                  DamageType                     (OptionalParm, Parm)

void AController::SendMessage(class APlayerReplicationInfo* Recipient, const struct FName& MessageType, float Wait, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SendMessage");

	AController_SendMessage_Params params;
	params.Recipient = Recipient;
	params.MessageType = MessageType;
	params.Wait = Wait;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.CurrentLevelUnloaded
// ()

void AController::CurrentLevelUnloaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CurrentLevelUnloaded");

	AController_CurrentLevelUnloaded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.IsInCombat
// ()
// Parameters:
// bool                           bForceCheck                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsInCombat(bool bForceCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsInCombat");

	AController_IsInCombat_Params params;
	params.bForceCheck = bForceCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsSpectating
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsSpectating()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsSpectating");

	AController_IsSpectating_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.OnToggleHidden
// ()
// Parameters:
// class USeqAct_ToggleHidden*    Action                         (Parm)

void AController::OnToggleHidden(class USeqAct_ToggleHidden* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnToggleHidden");

	AController_OnToggleHidden_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyAddInventory
// ()
// Parameters:
// class AInventory*              NewItem                        (Parm)

void AController::NotifyAddInventory(class AInventory* NewItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyAddInventory");

	AController_NotifyAddInventory_Params params;
	params.NewItem = NewItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnModifyHealth
// ()
// Parameters:
// class USeqAct_ModifyHealth*    Action                         (Parm)

void AController::OnModifyHealth(class USeqAct_ModifyHealth* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnModifyHealth");

	AController_OnModifyHealth_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyCoverClaimViolation
// ()
// Parameters:
// class AController*             NewClaim                       (Parm)
// class ACoverLink*              Link                           (Parm)
// int                            SlotIdx                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::NotifyCoverClaimViolation(class AController* NewClaim, class ACoverLink* Link, int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyCoverClaimViolation");

	AController_NotifyCoverClaimViolation_Params params;
	params.NewClaim = NewClaim;
	params.Link = Link;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyCoverAdjusted
// ()

void AController::NotifyCoverAdjusted()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyCoverAdjusted");

	AController_NotifyCoverAdjusted_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyCoverDisabled
// ()
// Parameters:
// class ACoverLink*              Link                           (Parm)
// int                            SlotIdx                        (Parm)
// bool                           bAdjacentIdx                   (OptionalParm, Parm)

void AController::NotifyCoverDisabled(class ACoverLink* Link, int SlotIdx, bool bAdjacentIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyCoverDisabled");

	AController_NotifyCoverDisabled_Params params;
	params.Link = Link;
	params.SlotIdx = SlotIdx;
	params.bAdjacentIdx = bAdjacentIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnSetVelocity
// ()
// Parameters:
// class USeqAct_SetVelocity*     Action                         (Parm)

void AController::OnSetVelocity(class USeqAct_SetVelocity* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnSetVelocity");

	AController_OnSetVelocity_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnSetPhysics
// ()
// Parameters:
// class USeqAct_SetPhysics*      Action                         (Parm)

void AController::OnSetPhysics(class USeqAct_SetPhysics* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnSetPhysics");

	AController_OnSetPhysics_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnToggleGodMode
// ()
// Parameters:
// class USeqAct_ToggleGodMode*   inAction                       (Parm)

void AController::OnToggleGodMode(class USeqAct_ToggleGodMode* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnToggleGodMode");

	AController_OnToggleGodMode_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnTeleport
// ()
// Parameters:
// class USeqAct_Teleport*        Action                         (Parm)

void AController::OnTeleport(class USeqAct_Teleport* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnTeleport");

	AController_OnTeleport_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.IsDead
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsDead()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsDead");

	AController_IsDead_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.GetHumanReadableName
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AController::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetHumanReadableName");

	AController_GetHumanReadableName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.DisplayDebug
// ()
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void AController::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.DisplayDebug");

	AController_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.Controller.StopLatentExecution
// ()

void AController::StopLatentExecution()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.StopLatentExecution");

	AController_StopLatentExecution_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.InLatentExecution
// ()
// Parameters:
// int                            LatentActionNumber             (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::InLatentExecution(int LatentActionNumber)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.InLatentExecution");

	AController_InLatentExecution_Params params;
	params.LatentActionNumber = LatentActionNumber;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.ReachedPreciseDestination
// ()

void AController::ReachedPreciseDestination()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReachedPreciseDestination");

	AController_ReachedPreciseDestination_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyMissedJump
// ()

void AController::NotifyMissedJump()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyMissedJump");

	AController_NotifyMissedJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyJumpApex
// ()

void AController::NotifyJumpApex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyJumpApex");

	AController_NotifyJumpApex_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyBump
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// struct FVector                 HitNormal                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::NotifyBump(class AActor* Other, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyBump");

	AController_NotifyBump_Params params;
	params.Other = Other;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyFallingHitWall
// ()
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  Wall                           (Parm)

void AController::NotifyFallingHitWall(const struct FVector& HitNormal, class AActor* Wall)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyFallingHitWall");

	AController_NotifyFallingHitWall_Params params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyHitWall
// ()
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  Wall                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::NotifyHitWall(const struct FVector& HitNormal, class AActor* Wall)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyHitWall");

	AController_NotifyHitWall_Params params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyLanded
// ()
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  FloorActor                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::NotifyLanded(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyLanded");

	AController_NotifyLanded_Params params;
	params.HitNormal = HitNormal;
	params.FloorActor = FloorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyHeadVolumeChange
// ()
// Parameters:
// class APhysicsVolume*          NewVolume                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::NotifyHeadVolumeChange(class APhysicsVolume* NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyHeadVolumeChange");

	AController_NotifyHeadVolumeChange_Params params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyPhysicsVolumeChange
// ()
// Parameters:
// class APhysicsVolume*          NewVolume                      (Parm)

void AController::NotifyPhysicsVolumeChange(class APhysicsVolume* NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyPhysicsVolumeChange");

	AController_NotifyPhysicsVolumeChange_Params params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.LandingShake
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::LandingShake()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.LandingShake");

	AController_LandingShake_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsAimingAt
// ()
// Parameters:
// class AActor*                  ATarget                        (Parm)
// float                          Epsilon                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsAimingAt(class AActor* ATarget, float Epsilon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsAimingAt");

	AController_IsAimingAt_Params params;
	params.ATarget = ATarget;
	params.Epsilon = Epsilon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.GetActorEyesViewPoint
// ()
// Parameters:
// struct FVector                 out_Location                   (Parm, OutParm)
// struct FRotator                out_Rotation                   (Parm, OutParm)

void AController::GetActorEyesViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetActorEyesViewPoint");

	AController_GetActorEyesViewPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;
}


// Function Engine.Controller.GetPlayerViewPoint
// ()
// Parameters:
// struct FVector                 out_Location                   (Parm, OutParm)
// struct FRotator                out_Rotation                   (Parm, OutParm)

void AController::GetPlayerViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetPlayerViewPoint");

	AController_GetPlayerViewPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;
}


// Function Engine.Controller.HandlePathObstruction
// ()
// Parameters:
// class AActor*                  BlockedBy                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::HandlePathObstruction(class AActor* BlockedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.HandlePathObstruction");

	AController_HandlePathObstruction_Params params;
	params.BlockedBy = BlockedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.UnderLift
// ()
// Parameters:
// class ALiftCenter*             Lift                           (Parm)

void AController::UnderLift(class ALiftCenter* Lift)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.UnderLift");

	AController_UnderLift_Params params;
	params.Lift = Lift;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.MoverFinished
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::MoverFinished()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoverFinished");

	AController_MoverFinished_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.WaitForMover
// ()
// Parameters:
// class AInterpActor*            M                              (Parm)

void AController::WaitForMover(class AInterpActor* M)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.WaitForMover");

	AController_WaitForMover_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.AllowDetourTo
// ()
// Parameters:
// class ANavigationPoint*        N                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::AllowDetourTo(class ANavigationPoint* N)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.AllowDetourTo");

	AController_AllowDetourTo_Params params;
	params.N = N;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.MayFall
// ()
// Parameters:
// bool                           bFloor                         (Parm)
// struct FVector                 FloorNormal                    (Parm)

void AController::MayFall(bool bFloor, const struct FVector& FloorNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MayFall");

	AController_MayFall_Params params;
	params.bFloor = bFloor;
	params.FloorNormal = FloorNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.EndClimbLadder
// ()

void AController::EndClimbLadder()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.EndClimbLadder");

	AController_EndClimbLadder_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.LongFall
// ()

void AController::LongFall()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.LongFall");

	AController_LongFall_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.WaitForLanding
// ()
// Parameters:
// float                          waitDuration                   (OptionalParm, Parm)

void AController::WaitForLanding(float waitDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.WaitForLanding");

	AController_WaitForLanding_Params params;
	params.waitDuration = waitDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.PickWallAdjust
// ()
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::PickWallAdjust(const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PickWallAdjust");

	AController_PickWallAdjust_Params params;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.MoveUnreachable
// ()
// Parameters:
// struct FVector                 AttemptedDest                  (Parm)
// class AActor*                  AttemptedTarget                (Parm)

void AController::MoveUnreachable(const struct FVector& AttemptedDest, class AActor* AttemptedTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoveUnreachable");

	AController_MoveUnreachable_Params params;
	params.AttemptedDest = AttemptedDest;
	params.AttemptedTarget = AttemptedTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ActorReachable
// ()
// Parameters:
// class AActor*                  anActor                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::ActorReachable(class AActor* anActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ActorReachable");

	AController_ActorReachable_Params params;
	params.anActor = anActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.PointReachable
// ()
// Parameters:
// struct FVector                 aPoint                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::PointReachable(const struct FVector& aPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PointReachable");

	AController_PointReachable_Params params;
	params.aPoint = aPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FindPathToIntercept
// ()
// Parameters:
// class APawn*                   P                              (Parm)
// class AActor*                  InRouteGoal                    (Parm)
// bool                           bWeightDetours                 (OptionalParm, Parm)
// int                            MaxPathLength                  (OptionalParm, Parm)
// bool                           bReturnPartial                 (OptionalParm, Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AController::FindPathToIntercept(class APawn* P, class AActor* InRouteGoal, bool bWeightDetours, int MaxPathLength, bool bReturnPartial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindPathToIntercept");

	AController_FindPathToIntercept_Params params;
	params.P = P;
	params.InRouteGoal = InRouteGoal;
	params.bWeightDetours = bWeightDetours;
	params.MaxPathLength = MaxPathLength;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FindRandomDest
// ()
// Parameters:
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* AController::FindRandomDest()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindRandomDest");

	AController_FindRandomDest_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FindPathTowardNearest
// ()
// Parameters:
// class UClass*                  GoalClass                      (Parm)
// bool                           bWeightDetours                 (OptionalParm, Parm)
// int                            MaxPathLength                  (OptionalParm, Parm)
// bool                           bReturnPartial                 (OptionalParm, Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AController::FindPathTowardNearest(class UClass* GoalClass, bool bWeightDetours, int MaxPathLength, bool bReturnPartial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindPathTowardNearest");

	AController_FindPathTowardNearest_Params params;
	params.GoalClass = GoalClass;
	params.bWeightDetours = bWeightDetours;
	params.MaxPathLength = MaxPathLength;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FindPathToward
// ()
// Parameters:
// class AActor*                  anActor                        (Parm)
// bool                           bWeightDetours                 (OptionalParm, Parm)
// int                            MaxPathLength                  (OptionalParm, Parm)
// bool                           bReturnPartial                 (OptionalParm, Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AController::FindPathToward(class AActor* anActor, bool bWeightDetours, int MaxPathLength, bool bReturnPartial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindPathToward");

	AController_FindPathToward_Params params;
	params.anActor = anActor;
	params.bWeightDetours = bWeightDetours;
	params.MaxPathLength = MaxPathLength;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FindPathTo
// ()
// Parameters:
// struct FVector                 aPoint                         (Parm)
// int                            MaxPathLength                  (OptionalParm, Parm)
// bool                           bReturnPartial                 (OptionalParm, Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AController::FindPathTo(const struct FVector& aPoint, int MaxPathLength, bool bReturnPartial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindPathTo");

	AController_FindPathTo_Params params;
	params.aPoint = aPoint;
	params.MaxPathLength = MaxPathLength;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FinishRotation
// ()

void AController::FinishRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FinishRotation");

	AController_FinishRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SetupSpecialPathAbilities
// ()

void AController::SetupSpecialPathAbilities()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetupSpecialPathAbilities");

	AController_SetupSpecialPathAbilities_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.MoveToward
// ()
// Parameters:
// class AActor*                  NewTarget                      (Parm)
// class AActor*                  ViewFocus                      (OptionalParm, Parm)
// float                          DestinationOffset              (OptionalParm, Parm)
// bool                           bUseStrafing                   (OptionalParm, Parm)
// bool                           bShouldWalk                    (OptionalParm, Parm)

void AController::MoveToward(class AActor* NewTarget, class AActor* ViewFocus, float DestinationOffset, bool bUseStrafing, bool bShouldWalk)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoveToward");

	AController_MoveToward_Params params;
	params.NewTarget = NewTarget;
	params.ViewFocus = ViewFocus;
	params.DestinationOffset = DestinationOffset;
	params.bUseStrafing = bUseStrafing;
	params.bShouldWalk = bShouldWalk;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.MoveToDirectNonPathPos
// ()
// Parameters:
// struct FVector                 NewDestination                 (Parm)
// class AActor*                  ViewFocus                      (OptionalParm, Parm)
// float                          DestinationOffset              (OptionalParm, Parm)
// bool                           bShouldWalk                    (OptionalParm, Parm)

void AController::MoveToDirectNonPathPos(const struct FVector& NewDestination, class AActor* ViewFocus, float DestinationOffset, bool bShouldWalk)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoveToDirectNonPathPos");

	AController_MoveToDirectNonPathPos_Params params;
	params.NewDestination = NewDestination;
	params.ViewFocus = ViewFocus;
	params.DestinationOffset = DestinationOffset;
	params.bShouldWalk = bShouldWalk;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.MoveTo
// ()
// Parameters:
// struct FVector                 NewDestination                 (Parm)
// class AActor*                  ViewFocus                      (OptionalParm, Parm)
// float                          DestinationOffset              (OptionalParm, Parm)
// bool                           bShouldWalk                    (OptionalParm, Parm)

void AController::MoveTo(const struct FVector& NewDestination, class AActor* ViewFocus, float DestinationOffset, bool bShouldWalk)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoveTo");

	AController_MoveTo_Params params;
	params.NewDestination = NewDestination;
	params.ViewFocus = ViewFocus;
	params.DestinationOffset = DestinationOffset;
	params.bShouldWalk = bShouldWalk;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.EnemyNotVisible
// ()

void AController::EnemyNotVisible()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.EnemyNotVisible");

	AController_EnemyNotVisible_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SeeMonster
// ()
// Parameters:
// class APawn*                   Seen                           (Parm)

void AController::SeeMonster(class APawn* Seen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SeeMonster");

	AController_SeeMonster_Params params;
	params.Seen = Seen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SeePlayer
// ()
// Parameters:
// class APawn*                   Seen                           (Parm)

void AController::SeePlayer(class APawn* Seen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SeePlayer");

	AController_SeePlayer_Params params;
	params.Seen = Seen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.HearNoise
// ()
// Parameters:
// float                          Loudness                       (Parm)
// class AActor*                  NoiseMaker                     (Parm)
// struct FName                   NoiseType                      (OptionalParm, Parm)

void AController::HearNoise(float Loudness, class AActor* NoiseMaker, const struct FName& NoiseType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.HearNoise");

	AController_HearNoise_Params params;
	params.Loudness = Loudness;
	params.NoiseMaker = NoiseMaker;
	params.NoiseType = NoiseType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.PickTarget
// ()
// Parameters:
// class UClass*                  TargetClass                    (Parm)
// float                          bestAim                        (Parm, OutParm)
// float                          bestDist                       (Parm, OutParm)
// struct FVector                 FireDir                        (Parm)
// struct FVector                 projStart                      (Parm)
// float                          MaxRange                       (Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* AController::PickTarget(class UClass* TargetClass, const struct FVector& FireDir, const struct FVector& projStart, float MaxRange, float* bestAim, float* bestDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PickTarget");

	AController_PickTarget_Params params;
	params.TargetClass = TargetClass;
	params.FireDir = FireDir;
	params.projStart = projStart;
	params.MaxRange = MaxRange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bestAim != nullptr)
		*bestAim = params.bestAim;
	if (bestDist != nullptr)
		*bestDist = params.bestDist;

	return params.ReturnValue;
}


// Function Engine.Controller.CanSeeByPoints
// ()
// Parameters:
// struct FVector                 ViewLocation                   (Parm)
// struct FVector                 TestLocation                   (Parm)
// struct FRotator                ViewRotation                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::CanSeeByPoints(const struct FVector& ViewLocation, const struct FVector& TestLocation, const struct FRotator& ViewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CanSeeByPoints");

	AController_CanSeeByPoints_Params params;
	params.ViewLocation = ViewLocation;
	params.TestLocation = TestLocation;
	params.ViewRotation = ViewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.CanSee
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::CanSee(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CanSee");

	AController_CanSee_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.LineOfSightTo
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// struct FVector                 chkLocation                    (OptionalParm, Parm)
// bool                           bTryAlternateTargetLoc         (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::LineOfSightTo(class AActor* Other, const struct FVector& chkLocation, bool bTryAlternateTargetLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.LineOfSightTo");

	AController_LineOfSightTo_Params params;
	params.Other = Other;
	params.chkLocation = chkLocation;
	params.bTryAlternateTargetLoc = bTryAlternateTargetLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyChangedWeapon
// ()
// Parameters:
// class AWeapon*                 PrevWeapon                     (Parm)
// class AWeapon*                 NewWeapon                      (Parm)

void AController::NotifyChangedWeapon(class AWeapon* PrevWeapon, class AWeapon* NewWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyChangedWeapon");

	AController_NotifyChangedWeapon_Params params;
	params.PrevWeapon = PrevWeapon;
	params.NewWeapon = NewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientSwitchToBestWeapon
// ()
// Parameters:
// bool                           bForceNewWeapon                (OptionalParm, Parm)

void AController::ClientSwitchToBestWeapon(bool bForceNewWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSwitchToBestWeapon");

	AController_ClientSwitchToBestWeapon_Params params;
	params.bForceNewWeapon = bForceNewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SwitchToBestWeapon
// ()
// Parameters:
// bool                           bForceNewWeapon                (OptionalParm, Parm)

void AController::SwitchToBestWeapon(bool bForceNewWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SwitchToBestWeapon");

	AController_SwitchToBestWeapon_Params params;
	params.bForceNewWeapon = bForceNewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ReceiveProjectileWarning
// ()
// Parameters:
// class AProjectile*             Proj                           (Parm)

void AController::ReceiveProjectileWarning(class AProjectile* Proj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceiveProjectileWarning");

	AController_ReceiveProjectileWarning_Params params;
	params.Proj = Proj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ReceiveWarning
// ()
// Parameters:
// class APawn*                   shooter                        (Parm)
// float                          projSpeed                      (Parm)
// struct FVector                 FireDir                        (Parm)

void AController::ReceiveWarning(class APawn* shooter, float projSpeed, const struct FVector& FireDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceiveWarning");

	AController_ReceiveWarning_Params params;
	params.shooter = shooter;
	params.projSpeed = projSpeed;
	params.FireDir = FireDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.InstantWarnTarget
// ()
// Parameters:
// class AActor*                  InTarget                       (Parm)
// class AWeapon*                 FiredWeapon                    (Parm)
// struct FVector                 FireDir                        (Parm)

void AController::InstantWarnTarget(class AActor* InTarget, class AWeapon* FiredWeapon, const struct FVector& FireDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.InstantWarnTarget");

	AController_InstantWarnTarget_Params params;
	params.InTarget = InTarget;
	params.FiredWeapon = FiredWeapon;
	params.FireDir = FireDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GetAdjustedAimFor
// ()
// Parameters:
// class AWeapon*                 W                              (Parm)
// struct FVector                 StartFireLoc                   (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator AController::GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetAdjustedAimFor");

	AController_GetAdjustedAimFor_Params params;
	params.W = W;
	params.StartFireLoc = StartFireLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.HandlePickup
// ()
// Parameters:
// class AInventory*              Inv                            (Parm)

void AController::HandlePickup(class AInventory* Inv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.HandlePickup");

	AController_HandlePickup_Params params;
	params.Inv = Inv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.RoundHasEnded
// ()
// Parameters:
// class AActor*                  EndRoundFocus                  (OptionalParm, Parm)

void AController::RoundHasEnded(class AActor* EndRoundFocus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RoundHasEnded");

	AController_RoundHasEnded_Params params;
	params.EndRoundFocus = EndRoundFocus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.StopFiring
// ()

void AController::StopFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.StopFiring");

	AController_StopFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.FireWeaponAt
// ()
// Parameters:
// class AActor*                  inActor                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::FireWeaponAt(class AActor* inActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FireWeaponAt");

	AController_FireWeaponAt_Params params;
	params.inActor = inActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.RatePickup
// ()
// Parameters:
// class AActor*                  PickupHolder                   (Parm)
// class UClass*                  inPickup                       (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AController::RatePickup(class AActor* PickupHolder, class UClass* inPickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RatePickup");

	AController_RatePickup_Params params;
	params.PickupHolder = PickupHolder;
	params.inPickup = inPickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.WarnProjExplode
// ()
// Parameters:
// class AProjectile*             Proj                           (Parm)

void AController::WarnProjExplode(class AProjectile* Proj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.WarnProjExplode");

	AController_WarnProjExplode_Params params;
	params.Proj = Proj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyProjLanded
// ()
// Parameters:
// class AProjectile*             Proj                           (Parm)

void AController::NotifyProjLanded(class AProjectile* Proj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyProjLanded");

	AController_NotifyProjLanded_Params params;
	params.Proj = Proj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyKilled
// ()
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Killed                         (Parm)
// class APawn*                   KilledPawn                     (Parm)
// class UClass*                  damageTyp                      (Parm)

void AController::NotifyKilled(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* damageTyp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyKilled");

	AController_NotifyKilled_Params params;
	params.Killer = Killer;
	params.Killed = Killed;
	params.KilledPawn = KilledPawn;
	params.damageTyp = damageTyp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GameHasEnded
// ()
// Parameters:
// class AActor*                  EndGameFocus                   (OptionalParm, Parm)
// bool                           bIsWinner                      (OptionalParm, Parm)

void AController::GameHasEnded(class AActor* EndGameFocus, bool bIsWinner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GameHasEnded");

	AController_GameHasEnded_Params params;
	params.EndGameFocus = EndGameFocus;
	params.bIsWinner = bIsWinner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SetCharacter
// ()
// Parameters:
// struct FString                 inCharacter                    (Parm, NeedCtorLink)

void AController::SetCharacter(const struct FString& inCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetCharacter");

	AController_SetCharacter_Params params;
	params.inCharacter = inCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ServerGivePawn
// ()

void AController::ServerGivePawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ServerGivePawn");

	AController_ServerGivePawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ServerRestartPlayer
// ()

void AController::ServerRestartPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ServerRestartPlayer");

	AController_ServerRestartPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GetTeamNum
// ()
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char AController::GetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetTeamNum");

	AController_GetTeamNum_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.InitPlayerReplicationInfo
// ()

void AController::InitPlayerReplicationInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.InitPlayerReplicationInfo");

	AController_InitPlayerReplicationInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyTakeHit
// ()
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// int                            Damage                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 Momentum                       (Parm)

void AController::NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyTakeHit");

	AController_NotifyTakeHit_Params params;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.Momentum = Momentum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.EnemyJustTeleported
// ()

void AController::EnemyJustTeleported()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.EnemyJustTeleported");

	AController_EnemyJustTeleported_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.BeyondFogDistance
// ()
// Parameters:
// struct FVector                 ViewPoint                      (Parm)
// struct FVector                 OtherPoint                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::BeyondFogDistance(const struct FVector& ViewPoint, const struct FVector& OtherPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.BeyondFogDistance");

	AController_BeyondFogDistance_Params params;
	params.ViewPoint = ViewPoint;
	params.OtherPoint = OtherPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.Restart
// ()
// Parameters:
// bool                           bVehicleTransition             (Parm)

void AController::Restart(bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Restart");

	AController_Restart_Params params;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.CleanupPRI
// ()

void AController::CleanupPRI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CleanupPRI");

	AController_CleanupPRI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.Destroyed
// ()

void AController::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Destroyed");

	AController_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyPostLanded
// ()

void AController::NotifyPostLanded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyPostLanded");

	AController_NotifyPostLanded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GamePlayEndedState
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::GamePlayEndedState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GamePlayEndedState");

	AController_GamePlayEndedState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.PawnDied
// ()
// Parameters:
// class APawn*                   inPawn                         (Parm)

void AController::PawnDied(class APawn* inPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PawnDied");

	AController_PawnDied_Params params;
	params.inPawn = inPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.UnPossess
// ()

void AController::UnPossess()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.UnPossess");

	AController_UnPossess_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.Possess
// ()
// Parameters:
// class APawn*                   inPawn                         (Parm)
// bool                           bVehicleTransition             (Parm)

void AController::Possess(class APawn* inPawn, bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Possess");

	AController_Possess_Params params;
	params.inPawn = inPawn;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnPossess
// ()
// Parameters:
// class USeqAct_Possess*         inAction                       (Parm)

void AController::OnPossess(class USeqAct_Possess* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnPossess");

	AController_OnPossess_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void AController::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReplicatedEvent");

	AController_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientSetRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (Parm)
// bool                           bResetCamera                   (OptionalParm, Parm)

void AController::ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSetRotation");

	AController_ClientSetRotation_Params params;
	params.NewRotation = NewRotation;
	params.bResetCamera = bResetCamera;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientSetLocation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm)
// struct FRotator                NewRotation                    (Parm)

void AController::ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSetLocation");

	AController_ClientSetLocation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.Reset
// ()

void AController::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Reset");

	AController_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.PostBeginPlay
// ()

void AController::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PostBeginPlay");

	AController_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SetSkelControlScale
// ()
// Parameters:
// struct FName                   SkelControlName                (Parm)
// float                          Scale                          (Parm)

void AController::SetSkelControlScale(const struct FName& SkelControlName, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetSkelControlScale");

	AController_SetSkelControlScale_Params params;
	params.SkelControlName = SkelControlName;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SetMorphWeight
// ()
// Parameters:
// struct FName                   MorphNodeName                  (Parm)
// float                          MorphWeight                    (Parm)

void AController::SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetMorphWeight");

	AController_SetMorphWeight_Params params;
	params.MorphNodeName = MorphNodeName;
	params.MorphWeight = MorphWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.StopActorFaceFXAnim
// ()

void AController::StopActorFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.StopActorFaceFXAnim");

	AController_StopActorFaceFXAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.PlayActorFaceFXAnim
// ()
// Parameters:
// class UFaceFXAnimSet*          AnimSet                        (Parm)
// struct FString                 GroupName                      (Parm, NeedCtorLink)
// struct FString                 SeqName                        (Parm, NeedCtorLink)
// class USoundCue*               SoundCueToPlay                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName, class USoundCue* SoundCueToPlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PlayActorFaceFXAnim");

	AController_PlayActorFaceFXAnim_Params params;
	params.AnimSet = AnimSet;
	params.GroupName = GroupName;
	params.SeqName = SeqName;
	params.SoundCueToPlay = SoundCueToPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FinishAnimControl
// ()
// Parameters:
// class UInterpGroup*            InInterpGroup                  (Parm)

void AController::FinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FinishAnimControl");

	AController_FinishAnimControl_Params params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SetAnimPosition
// ()
// Parameters:
// struct FName                   SlotName                       (Parm)
// int                            ChannelIndex                   (Parm)
// struct FName                   InAnimSeqName                  (Parm)
// float                          InPosition                     (Parm)
// bool                           bFireNotifies                  (Parm)
// bool                           bLooping                       (Parm)
// bool                           bEnableRootMotion              (Parm)

void AController::SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetAnimPosition");

	AController_SetAnimPosition_Params params;
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.BeginAnimControl
// ()
// Parameters:
// class UInterpGroup*            InInterpGroup                  (Parm)

void AController::BeginAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.BeginAnimControl");

	AController_BeginAnimControl_Params params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyPathChanged
// ()

void AController::NotifyPathChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyPathChanged");

	AController_NotifyPathChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GetAdjustLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AController::GetAdjustLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetAdjustLocation");

	AController_GetAdjustLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.SetAdjustLocation
// ()
// Parameters:
// struct FVector                 NewLoc                         (Parm)
// bool                           bAdjust                        (Parm)
// bool                           bOffsetFromBase                (OptionalParm, Parm)

void AController::SetAdjustLocation(const struct FVector& NewLoc, bool bAdjust, bool bOffsetFromBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetAdjustLocation");

	AController_SetAdjustLocation_Params params;
	params.NewLoc = NewLoc;
	params.bAdjust = bAdjust;
	params.bOffsetFromBase = bOffsetFromBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GetDestinationPosition
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AController::GetDestinationPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetDestinationPosition");

	AController_GetDestinationPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.SetDestinationPosition
// ()
// Parameters:
// struct FVector                 Dest                           (Parm)
// bool                           bOffsetFromBase                (OptionalParm, Parm)

void AController::SetDestinationPosition(const struct FVector& Dest, bool bOffsetFromBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetDestinationPosition");

	AController_SetDestinationPosition_Params params;
	params.Dest = Dest;
	params.bOffsetFromBase = bOffsetFromBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GetFocalPoint
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AController::GetFocalPoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetFocalPoint");

	AController_GetFocalPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.SetFocalPoint
// ()
// Parameters:
// struct FVector                 FP                             (Parm)
// bool                           bOffsetFromBase                (OptionalParm, Parm)

void AController::SetFocalPoint(const struct FVector& FP, bool bOffsetFromBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetFocalPoint");

	AController_SetFocalPoint_Params params;
	params.FP = FP;
	params.bOffsetFromBase = bOffsetFromBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.RouteCache_RemoveIndex
// ()
// Parameters:
// int                            InIndex                        (Parm)
// int                            Count                          (OptionalParm, Parm)

void AController::RouteCache_RemoveIndex(int InIndex, int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RouteCache_RemoveIndex");

	AController_RouteCache_RemoveIndex_Params params;
	params.InIndex = InIndex;
	params.Count = Count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.RouteCache_RemoveItem
// ()
// Parameters:
// class ANavigationPoint*        Nav                            (Parm)

void AController::RouteCache_RemoveItem(class ANavigationPoint* Nav)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RouteCache_RemoveItem");

	AController_RouteCache_RemoveItem_Params params;
	params.Nav = Nav;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.RouteCache_InsertItem
// ()
// Parameters:
// class ANavigationPoint*        Nav                            (Parm)
// int                            Idx                            (OptionalParm, Parm)

void AController::RouteCache_InsertItem(class ANavigationPoint* Nav, int Idx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RouteCache_InsertItem");

	AController_RouteCache_InsertItem_Params params;
	params.Nav = Nav;
	params.Idx = Idx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.RouteCache_AddItem
// ()
// Parameters:
// class ANavigationPoint*        Nav                            (Parm)

void AController::RouteCache_AddItem(class ANavigationPoint* Nav)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RouteCache_AddItem");

	AController_RouteCache_AddItem_Params params;
	params.Nav = Nav;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.RouteCache_Empty
// ()

void AController::RouteCache_Empty()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RouteCache_Empty");

	AController_RouteCache_Empty_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.IsLocalPlayerController
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsLocalPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsLocalPlayerController");

	AController_IsLocalPlayerController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.UpdateFromURL
// ()
// Parameters:
// struct FString                 URL                            (Const, Parm, OutParm, NeedCtorLink)
// class AGameInfo*               Game                           (Parm)

void USettings::UpdateFromURL(class AGameInfo* Game, struct FString* URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.UpdateFromURL");

	USettings_UpdateFromURL_Params params;
	params.Game = Game;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;
}


// Function Engine.Settings.BuildURL
// ()
// Parameters:
// struct FString                 URL                            (Parm, OutParm, NeedCtorLink)

void USettings::BuildURL(struct FString* URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.BuildURL");

	USettings_BuildURL_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;
}


// Function Engine.Settings.AppendContextsToURL
// ()
// Parameters:
// struct FString                 URL                            (Parm, OutParm, NeedCtorLink)

void USettings::AppendContextsToURL(struct FString* URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.AppendContextsToURL");

	USettings_AppendContextsToURL_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;
}


// Function Engine.Settings.AppendPropertiesToURL
// ()
// Parameters:
// struct FString                 URL                            (Parm, OutParm, NeedCtorLink)

void USettings::AppendPropertiesToURL(struct FString* URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.AppendPropertiesToURL");

	USettings_AppendPropertiesToURL_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;
}


// Function Engine.Settings.AppendDataBindingsToURL
// ()
// Parameters:
// struct FString                 URL                            (Parm, OutParm, NeedCtorLink)

void USettings::AppendDataBindingsToURL(struct FString* URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.AppendDataBindingsToURL");

	USettings_AppendDataBindingsToURL_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;
}


// Function Engine.Settings.GetQoSAdvertisedStringSettings
// ()
// Parameters:
// TArray<struct FLocalizedStringSetting> QoSSettings                    (Parm, OutParm, NeedCtorLink)

void USettings::GetQoSAdvertisedStringSettings(TArray<struct FLocalizedStringSetting>* QoSSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetQoSAdvertisedStringSettings");

	USettings_GetQoSAdvertisedStringSettings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (QoSSettings != nullptr)
		*QoSSettings = params.QoSSettings;
}


// Function Engine.Settings.GetQoSAdvertisedProperties
// ()
// Parameters:
// TArray<struct FSettingsProperty> QoSProps                       (Parm, OutParm, NeedCtorLink)

void USettings::GetQoSAdvertisedProperties(TArray<struct FSettingsProperty>* QoSProps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetQoSAdvertisedProperties");

	USettings_GetQoSAdvertisedProperties_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (QoSProps != nullptr)
		*QoSProps = params.QoSProps;
}


// Function Engine.Settings.GetRangedPropertyValue
// ()
// Parameters:
// int                            PropertyId                     (Parm)
// float                          OutValue                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetRangedPropertyValue(int PropertyId, float* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetRangedPropertyValue");

	USettings_GetRangedPropertyValue_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.Settings.SetRangedPropertyValue
// ()
// Parameters:
// int                            PropertyId                     (Parm)
// float                          NewValue                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::SetRangedPropertyValue(int PropertyId, float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetRangedPropertyValue");

	USettings_SetRangedPropertyValue_Params params;
	params.PropertyId = PropertyId;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyRange
// ()
// Parameters:
// int                            PropertyId                     (Parm)
// float                          OutMinValue                    (Parm, OutParm)
// float                          OutMaxValue                    (Parm, OutParm)
// float                          RangeIncrement                 (Parm, OutParm)
// unsigned char                  bFormatAsInt                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetPropertyRange(int PropertyId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyRange");

	USettings_GetPropertyRange_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutMinValue != nullptr)
		*OutMinValue = params.OutMinValue;
	if (OutMaxValue != nullptr)
		*OutMaxValue = params.OutMaxValue;
	if (RangeIncrement != nullptr)
		*RangeIncrement = params.RangeIncrement;
	if (bFormatAsInt != nullptr)
		*bFormatAsInt = params.bFormatAsInt;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyMappingType
// ()
// Parameters:
// int                            PropertyId                     (Parm)
// TEnumAsByte<EPropertyValueMappingType> OutType                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetPropertyMappingType(int PropertyId, TEnumAsByte<EPropertyValueMappingType>* OutType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyMappingType");

	USettings_GetPropertyMappingType_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutType != nullptr)
		*OutType = params.OutType;

	return params.ReturnValue;
}


// Function Engine.Settings.HasStringSetting
// ()
// Parameters:
// int                            SettingId                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::HasStringSetting(int SettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.HasStringSetting");

	USettings_HasStringSetting_Params params;
	params.SettingId = SettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.HasProperty
// ()
// Parameters:
// int                            PropertyId                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::HasProperty(int PropertyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.HasProperty");

	USettings_HasProperty_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.UpdateProperties
// ()
// Parameters:
// TArray<struct FSettingsProperty> Props                          (Const, Parm, OutParm, NeedCtorLink)
// bool                           bShouldAddIfMissing            (OptionalParm, Parm)

void USettings::UpdateProperties(bool bShouldAddIfMissing, TArray<struct FSettingsProperty>* Props)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.UpdateProperties");

	USettings_UpdateProperties_Params params;
	params.bShouldAddIfMissing = bShouldAddIfMissing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Props != nullptr)
		*Props = params.Props;
}


// Function Engine.Settings.UpdateStringSettings
// ()
// Parameters:
// TArray<struct FLocalizedStringSetting> Settings                       (Const, Parm, OutParm, NeedCtorLink)
// bool                           bShouldAddIfMissing            (OptionalParm, Parm)

void USettings::UpdateStringSettings(bool bShouldAddIfMissing, TArray<struct FLocalizedStringSetting>* Settings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.UpdateStringSettings");

	USettings_UpdateStringSettings_Params params;
	params.bShouldAddIfMissing = bShouldAddIfMissing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Settings != nullptr)
		*Settings = params.Settings;
}


// Function Engine.Settings.GetPropertyType
// ()
// Parameters:
// int                            PropertyId                     (Parm)
// TEnumAsByte<ESettingsDataType> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ESettingsDataType> USettings::GetPropertyType(int PropertyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyType");

	USettings_GetPropertyType_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyValueId
// ()
// Parameters:
// int                            PropertyId                     (Parm)
// int                            ValueId                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetPropertyValueId(int PropertyId, int* ValueId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyValueId");

	USettings_GetPropertyValueId_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ValueId != nullptr)
		*ValueId = params.ValueId;

	return params.ReturnValue;
}


// Function Engine.Settings.SetPropertyValueId
// ()
// Parameters:
// int                            PropertyId                     (Parm)
// int                            ValueId                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::SetPropertyValueId(int PropertyId, int ValueId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetPropertyValueId");

	USettings_SetPropertyValueId_Params params;
	params.PropertyId = PropertyId;
	params.ValueId = ValueId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringProperty
// ()
// Parameters:
// int                            PropertyId                     (Parm)
// struct FString                 Value                          (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetStringProperty(int PropertyId, struct FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringProperty");

	USettings_GetStringProperty_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.Settings.SetStringProperty
// ()
// Parameters:
// int                            PropertyId                     (Parm)
// struct FString                 Value                          (Parm, NeedCtorLink)

void USettings::SetStringProperty(int PropertyId, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetStringProperty");

	USettings_SetStringProperty_Params params;
	params.PropertyId = PropertyId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Settings.GetIntProperty
// ()
// Parameters:
// int                            PropertyId                     (Parm)
// int                            Value                          (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetIntProperty(int PropertyId, int* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetIntProperty");

	USettings_GetIntProperty_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.Settings.SetIntProperty
// ()
// Parameters:
// int                            PropertyId                     (Parm)
// int                            Value                          (Parm)

void USettings::SetIntProperty(int PropertyId, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetIntProperty");

	USettings_SetIntProperty_Params params;
	params.PropertyId = PropertyId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Settings.GetFloatProperty
// ()
// Parameters:
// int                            PropertyId                     (Parm)
// float                          Value                          (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetFloatProperty(int PropertyId, float* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetFloatProperty");

	USettings_GetFloatProperty_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.Settings.SetFloatProperty
// ()
// Parameters:
// int                            PropertyId                     (Parm)
// float                          Value                          (Parm)

void USettings::SetFloatProperty(int PropertyId, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetFloatProperty");

	USettings_SetFloatProperty_Params params;
	params.PropertyId = PropertyId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Settings.SetPropertyFromStringByName
// ()
// Parameters:
// struct FName                   PropertyName                   (Parm)
// struct FString                 NewValue                       (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::SetPropertyFromStringByName(const struct FName& PropertyName, struct FString* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetPropertyFromStringByName");

	USettings_SetPropertyFromStringByName_Params params;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyAsStringByName
// ()
// Parameters:
// struct FName                   PropertyName                   (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString USettings::GetPropertyAsStringByName(const struct FName& PropertyName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyAsStringByName");

	USettings_GetPropertyAsStringByName_Params params;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyAsString
// ()
// Parameters:
// int                            PropertyId                     (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString USettings::GetPropertyAsString(int PropertyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyAsString");

	USettings_GetPropertyAsString_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyColumnHeader
// ()
// Parameters:
// int                            PropertyId                     (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString USettings::GetPropertyColumnHeader(int PropertyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyColumnHeader");

	USettings_GetPropertyColumnHeader_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyName
// ()
// Parameters:
// int                            PropertyId                     (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName USettings::GetPropertyName(int PropertyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyName");

	USettings_GetPropertyName_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyId
// ()
// Parameters:
// struct FName                   PropertyName                   (Parm)
// int                            PropertyId                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetPropertyId(const struct FName& PropertyName, int* PropertyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyId");

	USettings_GetPropertyId_Params params;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PropertyId != nullptr)
		*PropertyId = params.PropertyId;

	return params.ReturnValue;
}


// Function Engine.Settings.SetStringSettingValueFromStringByName
// ()
// Parameters:
// struct FName                   StringSettingName              (Parm)
// struct FString                 NewValue                       (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::SetStringSettingValueFromStringByName(const struct FName& StringSettingName, struct FString* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetStringSettingValueFromStringByName");

	USettings_SetStringSettingValueFromStringByName_Params params;
	params.StringSettingName = StringSettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringSettingValueNameByName
// ()
// Parameters:
// struct FName                   StringSettingName              (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName USettings::GetStringSettingValueNameByName(const struct FName& StringSettingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingValueNameByName");

	USettings_GetStringSettingValueNameByName_Params params;
	params.StringSettingName = StringSettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringSettingValueName
// ()
// Parameters:
// int                            StringSettingId                (Parm)
// int                            ValueIndex                     (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName USettings::GetStringSettingValueName(int StringSettingId, int ValueIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingValueName");

	USettings_GetStringSettingValueName_Params params;
	params.StringSettingId = StringSettingId;
	params.ValueIndex = ValueIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.IsWildcardStringSetting
// ()
// Parameters:
// int                            StringSettingId                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::IsWildcardStringSetting(int StringSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.IsWildcardStringSetting");

	USettings_IsWildcardStringSetting_Params params;
	params.StringSettingId = StringSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringSettingColumnHeader
// ()
// Parameters:
// int                            StringSettingId                (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString USettings::GetStringSettingColumnHeader(int StringSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingColumnHeader");

	USettings_GetStringSettingColumnHeader_Params params;
	params.StringSettingId = StringSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringSettingName
// ()
// Parameters:
// int                            StringSettingId                (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName USettings::GetStringSettingName(int StringSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingName");

	USettings_GetStringSettingName_Params params;
	params.StringSettingId = StringSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringSettingId
// ()
// Parameters:
// struct FName                   StringSettingName              (Parm)
// int                            StringSettingId                (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetStringSettingId(const struct FName& StringSettingName, int* StringSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingId");

	USettings_GetStringSettingId_Params params;
	params.StringSettingName = StringSettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StringSettingId != nullptr)
		*StringSettingId = params.StringSettingId;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringSettingValueByName
// ()
// Parameters:
// struct FName                   StringSettingName              (Parm)
// int                            ValueIndex                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetStringSettingValueByName(const struct FName& StringSettingName, int* ValueIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingValueByName");

	USettings_GetStringSettingValueByName_Params params;
	params.StringSettingName = StringSettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ValueIndex != nullptr)
		*ValueIndex = params.ValueIndex;

	return params.ReturnValue;
}


// Function Engine.Settings.SetStringSettingValueByName
// ()
// Parameters:
// struct FName                   StringSettingName              (Parm)
// int                            ValueIndex                     (Parm)
// bool                           bShouldAutoAdd                 (Parm)

void USettings::SetStringSettingValueByName(const struct FName& StringSettingName, int ValueIndex, bool bShouldAutoAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetStringSettingValueByName");

	USettings_SetStringSettingValueByName_Params params;
	params.StringSettingName = StringSettingName;
	params.ValueIndex = ValueIndex;
	params.bShouldAutoAdd = bShouldAutoAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Settings.GetStringSettingValueNames
// ()
// Parameters:
// int                            StringSettingId                (Parm)
// TArray<struct FIdToStringMapping> Values                         (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetStringSettingValueNames(int StringSettingId, TArray<struct FIdToStringMapping>* Values)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingValueNames");

	USettings_GetStringSettingValueNames_Params params;
	params.StringSettingId = StringSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Values != nullptr)
		*Values = params.Values;

	return params.ReturnValue;
}


// Function Engine.Settings.IncrementStringSettingValue
// ()
// Parameters:
// int                            StringSettingId                (Parm)
// int                            Direction                      (Parm)
// bool                           bShouldWrap                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::IncrementStringSettingValue(int StringSettingId, int Direction, bool bShouldWrap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.IncrementStringSettingValue");

	USettings_IncrementStringSettingValue_Params params;
	params.StringSettingId = StringSettingId;
	params.Direction = Direction;
	params.bShouldWrap = bShouldWrap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringSettingValue
// ()
// Parameters:
// int                            StringSettingId                (Parm)
// int                            ValueIndex                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetStringSettingValue(int StringSettingId, int* ValueIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingValue");

	USettings_GetStringSettingValue_Params params;
	params.StringSettingId = StringSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ValueIndex != nullptr)
		*ValueIndex = params.ValueIndex;

	return params.ReturnValue;
}


// Function Engine.Settings.SetStringSettingValue
// ()
// Parameters:
// int                            StringSettingId                (Parm)
// int                            ValueIndex                     (Parm)
// bool                           bShouldAutoAdd                 (OptionalParm, Parm)

void USettings::SetStringSettingValue(int StringSettingId, int ValueIndex, bool bShouldAutoAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetStringSettingValue");

	USettings_SetStringSettingValue_Params params;
	params.StringSettingId = StringSettingId;
	params.ValueIndex = ValueIndex;
	params.bShouldAutoAdd = bShouldAutoAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Settings.GetSettingsDataDateTime
// ()
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// int                            OutInt1                        (Parm, OutParm)
// int                            OutInt2                        (Parm, OutParm)

void USettings::GetSettingsDataDateTime(struct FSettingsData* Data, int* OutInt1, int* OutInt2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetSettingsDataDateTime");

	USettings_GetSettingsDataDateTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
	if (OutInt1 != nullptr)
		*OutInt1 = params.OutInt1;
	if (OutInt2 != nullptr)
		*OutInt2 = params.OutInt2;
}


// Function Engine.Settings.GetSettingsDataBlob
// ()
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// TArray<unsigned char>          OutBlob                        (Parm, OutParm, NeedCtorLink)

void USettings::GetSettingsDataBlob(struct FSettingsData* Data, TArray<unsigned char>* OutBlob)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetSettingsDataBlob");

	USettings_GetSettingsDataBlob_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
	if (OutBlob != nullptr)
		*OutBlob = params.OutBlob;
}


// Function Engine.Settings.GetSettingsDataInt
// ()
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USettings::GetSettingsDataInt(struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetSettingsDataInt");

	USettings_GetSettingsDataInt_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;

	return params.ReturnValue;
}


// Function Engine.Settings.GetSettingsDataFloat
// ()
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USettings::GetSettingsDataFloat(struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetSettingsDataFloat");

	USettings_GetSettingsDataFloat_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;

	return params.ReturnValue;
}


// Function Engine.Settings.GetSettingsDataString
// ()
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString USettings::GetSettingsDataString(struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetSettingsDataString");

	USettings_GetSettingsDataString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;

	return params.ReturnValue;
}


// Function Engine.Settings.EmptySettingsData
// ()
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)

void USettings::EmptySettingsData(struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.EmptySettingsData");

	USettings_EmptySettingsData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.Settings.SetSettingsData
// ()
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// struct FSettingsData           Data2Copy                      (Parm, OutParm)

void USettings::SetSettingsData(struct FSettingsData* Data, struct FSettingsData* Data2Copy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsData");

	USettings_SetSettingsData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
	if (Data2Copy != nullptr)
		*Data2Copy = params.Data2Copy;
}


// Function Engine.Settings.SetSettingsDataBlob
// ()
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// TArray<unsigned char>          InBlob                         (Parm, OutParm, NeedCtorLink)

void USettings::SetSettingsDataBlob(struct FSettingsData* Data, TArray<unsigned char>* InBlob)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsDataBlob");

	USettings_SetSettingsDataBlob_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
	if (InBlob != nullptr)
		*InBlob = params.InBlob;
}


// Function Engine.Settings.SetSettingsDataDateTime
// ()
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// int                            InInt1                         (Parm)
// int                            InInt2                         (Parm)

void USettings::SetSettingsDataDateTime(int InInt1, int InInt2, struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsDataDateTime");

	USettings_SetSettingsDataDateTime_Params params;
	params.InInt1 = InInt1;
	params.InInt2 = InInt2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.Settings.SetSettingsDataInt
// ()
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// int                            InInt                          (Parm)

void USettings::SetSettingsDataInt(int InInt, struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsDataInt");

	USettings_SetSettingsDataInt_Params params;
	params.InInt = InInt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.Settings.SetSettingsDataFloat
// ()
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// float                          InFloat                        (Parm)

void USettings::SetSettingsDataFloat(float InFloat, struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsDataFloat");

	USettings_SetSettingsDataFloat_Params params;
	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.Settings.SetSettingsDataString
// ()
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// struct FString                 InString                       (Parm, NeedCtorLink)

void USettings::SetSettingsDataString(const struct FString& InString, struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsDataString");

	USettings_SetSettingsDataString_Params params;
	params.InString = InString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.OnlineGameSearch.SortSearchResults
// ()

void UOnlineGameSearch::SortSearchResults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameSearch.SortSearchResults");

	UOnlineGameSearch_SortSearchResults_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameSearch.SetSkillOverride
// ()
// Parameters:
// int                            LeaderboardId                  (Parm)
// TArray<struct FUniqueNetId>    Players                        (Const, Parm, OutParm, NeedCtorLink)

void UOnlineGameSearch::SetSkillOverride(int LeaderboardId, TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameSearch.SetSkillOverride");

	UOnlineGameSearch_SetSkillOverride_Params params;
	params.LeaderboardId = LeaderboardId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;
}


// Function Engine.Camera.StopCameraAnim
// ()
// Parameters:
// class UCameraAnimInst*         AnimInst                       (Parm)
// bool                           bImmediate                     (OptionalParm, Parm)

void ACamera::StopCameraAnim(class UCameraAnimInst* AnimInst, bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.StopCameraAnim");

	ACamera_StopCameraAnim_Params params;
	params.AnimInst = AnimInst;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.StopAllCameraAnimsByType
// ()
// Parameters:
// class UCameraAnim*             Anim                           (Parm)
// bool                           bImmediate                     (OptionalParm, Parm)

void ACamera::StopAllCameraAnimsByType(class UCameraAnim* Anim, bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.StopAllCameraAnimsByType");

	ACamera_StopAllCameraAnimsByType_Params params;
	params.Anim = Anim;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.StopAllCameraAnims
// ()
// Parameters:
// bool                           bImmediate                     (OptionalParm, Parm)

void ACamera::StopAllCameraAnims(bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.StopAllCameraAnims");

	ACamera_StopAllCameraAnims_Params params;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.PlayCameraAnim
// ()
// Parameters:
// class UCameraAnim*             Anim                           (Parm)
// float                          Rate                           (OptionalParm, Parm)
// float                          Scale                          (OptionalParm, Parm)
// float                          BlendInTime                    (OptionalParm, Parm)
// float                          BlendOutTime                   (OptionalParm, Parm)
// bool                           bLoop                          (OptionalParm, Parm)
// bool                           bRandomStartTime               (OptionalParm, Parm)
// float                          Duration                       (OptionalParm, Parm)
// bool                           bSingleInstance                (OptionalParm, Parm)
// class UCameraAnimInst*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UCameraAnimInst* ACamera::PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, bool bSingleInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.PlayCameraAnim");

	ACamera_PlayCameraAnim_Params params;
	params.Anim = Anim;
	params.Rate = Rate;
	params.Scale = Scale;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLoop = bLoop;
	params.bRandomStartTime = bRandomStartTime;
	params.Duration = Duration;
	params.bSingleInstance = bSingleInstance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Camera.ClearAllCameraShakes
// ()

void ACamera::ClearAllCameraShakes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.ClearAllCameraShakes");

	ACamera_ClearAllCameraShakes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.PlayWorldCameraShake
// ()
// Parameters:
// class UCameraShake*            Shake                          (Parm)
// class AActor*                  ShakeInstigator                (Parm)
// struct FVector                 Epicenter                      (Parm)
// float                          InnerRadius                    (Parm)
// float                          OuterRadius                    (Parm)
// float                          Falloff                        (Parm)
// bool                           bTryForceFeedback              (Parm)
// bool                           bOrientShakeTowardsEpicenter   (OptionalParm, Parm)

void ACamera::PlayWorldCameraShake(class UCameraShake* Shake, class AActor* ShakeInstigator, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bTryForceFeedback, bool bOrientShakeTowardsEpicenter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.PlayWorldCameraShake");

	ACamera_PlayWorldCameraShake_Params params;
	params.Shake = Shake;
	params.ShakeInstigator = ShakeInstigator;
	params.Epicenter = Epicenter;
	params.InnerRadius = InnerRadius;
	params.OuterRadius = OuterRadius;
	params.Falloff = Falloff;
	params.bTryForceFeedback = bTryForceFeedback;
	params.bOrientShakeTowardsEpicenter = bOrientShakeTowardsEpicenter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.CalcRadialShakeScale
// ()
// Parameters:
// class ACamera*                 Cam                            (Parm)
// struct FVector                 Epicenter                      (Parm)
// float                          InnerRadius                    (Parm)
// float                          OuterRadius                    (Parm)
// float                          Falloff                        (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ACamera::CalcRadialShakeScale(class ACamera* Cam, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.CalcRadialShakeScale");

	ACamera_CalcRadialShakeScale_Params params;
	params.Cam = Cam;
	params.Epicenter = Epicenter;
	params.InnerRadius = InnerRadius;
	params.OuterRadius = OuterRadius;
	params.Falloff = Falloff;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Camera.StopCameraShake
// ()
// Parameters:
// class UCameraShake*            Shake                          (Parm)

void ACamera::StopCameraShake(class UCameraShake* Shake)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.StopCameraShake");

	ACamera_StopCameraShake_Params params;
	params.Shake = Shake;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.PlayCameraShake
// ()
// Parameters:
// class UCameraShake*            Shake                          (Parm)
// float                          Scale                          (Parm)
// TEnumAsByte<ECameraAnimPlaySpace> PlaySpace                      (OptionalParm, Parm)
// struct FRotator                UserPlaySpaceRot               (OptionalParm, Parm)

void ACamera::PlayCameraShake(class UCameraShake* Shake, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.PlayCameraShake");

	ACamera_PlayCameraShake_Params params;
	params.Shake = Shake;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.ClearCameraLensEffects
// ()

void ACamera::ClearCameraLensEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.ClearCameraLensEffects");

	ACamera_ClearCameraLensEffects_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.RemoveCameraLensEffect
// ()
// Parameters:
// class AEmitterCameraLensEffectBase* Emitter                        (Parm)

void ACamera::RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.RemoveCameraLensEffect");

	ACamera_RemoveCameraLensEffect_Params params;
	params.Emitter = Emitter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.AddCameraLensEffect
// ()
// Parameters:
// class UClass*                  LensEffectEmitterClass         (Parm)

void ACamera::AddCameraLensEffect(class UClass* LensEffectEmitterClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.AddCameraLensEffect");

	ACamera_AddCameraLensEffect_Params params;
	params.LensEffectEmitterClass = LensEffectEmitterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.FindCameraLensEffect
// ()
// Parameters:
// class UClass*                  LensEffectEmitterClass         (Parm)
// class AEmitterCameraLensEffectBase* ReturnValue                    (Parm, OutParm, ReturnParm)

class AEmitterCameraLensEffectBase* ACamera::FindCameraLensEffect(class UClass* LensEffectEmitterClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.FindCameraLensEffect");

	ACamera_FindCameraLensEffect_Params params;
	params.LensEffectEmitterClass = LensEffectEmitterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Camera.DisplayDebug
// ()
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void ACamera::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.DisplayDebug");

	ACamera_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.Camera.ProcessViewRotation
// ()
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FRotator                OutViewRotation                (Parm, OutParm)
// struct FRotator                OutDeltaRot                    (Parm, OutParm)

void ACamera::ProcessViewRotation(float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.ProcessViewRotation");

	ACamera_ProcessViewRotation_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutViewRotation != nullptr)
		*OutViewRotation = params.OutViewRotation;
	if (OutDeltaRot != nullptr)
		*OutDeltaRot = params.OutDeltaRot;
}


// Function Engine.Camera.SetViewTarget
// ()
// Parameters:
// class AActor*                  NewViewTarget                  (Parm)
// struct FViewTargetTransitionParams TransitionParams               (OptionalParm, Parm)

void ACamera::SetViewTarget(class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.SetViewTarget");

	ACamera_SetViewTarget_Params params;
	params.NewViewTarget = NewViewTarget;
	params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.UpdateViewTarget
// ()
// Parameters:
// struct FTViewTarget            OutVT                          (Parm, OutParm)
// float                          DeltaTime                      (Parm)

void ACamera::UpdateViewTarget(float DeltaTime, struct FTViewTarget* OutVT)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.UpdateViewTarget");

	ACamera_UpdateViewTarget_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutVT != nullptr)
		*OutVT = params.OutVT;
}


// Function Engine.Camera.CheckViewTarget
// ()
// Parameters:
// struct FTViewTarget            VT                             (Parm, OutParm)

void ACamera::CheckViewTarget(struct FTViewTarget* VT)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.CheckViewTarget");

	ACamera_CheckViewTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (VT != nullptr)
		*VT = params.VT;
}


// Function Engine.Camera.FillCameraCache
// ()
// Parameters:
// struct FTPOV                   NewPOV                         (Const, Parm, OutParm)

void ACamera::FillCameraCache(struct FTPOV* NewPOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.FillCameraCache");

	ACamera_FillCameraCache_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewPOV != nullptr)
		*NewPOV = params.NewPOV;
}


// Function Engine.Camera.BlendViewTargets
// ()
// Parameters:
// struct FTViewTarget            A                              (Const, Parm, OutParm)
// struct FTViewTarget            B                              (Const, Parm, OutParm)
// float                          Alpha                          (Parm)
// struct FTPOV                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FTPOV ACamera::BlendViewTargets(float Alpha, struct FTViewTarget* A, struct FTViewTarget* B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.BlendViewTargets");

	ACamera_BlendViewTargets_Params params;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (A != nullptr)
		*A = params.A;
	if (B != nullptr)
		*B = params.B;

	return params.ReturnValue;
}


// Function Engine.Camera.UpdateCamera
// ()
// Parameters:
// float                          DeltaTime                      (Parm)

void ACamera::UpdateCamera(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.UpdateCamera");

	ACamera_UpdateCamera_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.SetDesiredColorScale
// ()
// Parameters:
// struct FVector                 NewColorScale                  (Parm)
// float                          InterpTime                     (Parm)

void ACamera::SetDesiredColorScale(const struct FVector& NewColorScale, float InterpTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.SetDesiredColorScale");

	ACamera_SetDesiredColorScale_Params params;
	params.NewColorScale = NewColorScale;
	params.InterpTime = InterpTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.GetCameraRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator ACamera::GetCameraRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.GetCameraRotation");

	ACamera_GetCameraRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Camera.GetCameraViewPoint
// ()
// Parameters:
// struct FVector                 OutCamLoc                      (Parm, OutParm)
// struct FRotator                OutCamRot                      (Parm, OutParm)

void ACamera::GetCameraViewPoint(struct FVector* OutCamLoc, struct FRotator* OutCamRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.GetCameraViewPoint");

	ACamera_GetCameraViewPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutCamLoc != nullptr)
		*OutCamLoc = params.OutCamLoc;
	if (OutCamRot != nullptr)
		*OutCamRot = params.OutCamRot;
}


// Function Engine.Camera.SetFOV
// ()
// Parameters:
// float                          NewFOV                         (Parm)

void ACamera::SetFOV(float NewFOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.SetFOV");

	ACamera_SetFOV_Params params;
	params.NewFOV = NewFOV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.GetFOVAngle
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ACamera::GetFOVAngle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.GetFOVAngle");

	ACamera_GetFOVAngle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Camera.InitializeFor
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)

void ACamera::InitializeFor(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.InitializeFor");

	ACamera_InitializeFor_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.ApplyCameraModifiers
// ()
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FTPOV                   OutPOV                         (Parm, OutParm)

void ACamera::ApplyCameraModifiers(float DeltaTime, struct FTPOV* OutPOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.ApplyCameraModifiers");

	ACamera_ApplyCameraModifiers_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPOV != nullptr)
		*OutPOV = params.OutPOV;
}


// Function Engine.Camera.Destroyed
// ()

void ACamera::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.Destroyed");

	ACamera_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.PostBeginPlay
// ()

void ACamera::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.PostBeginPlay");

	ACamera_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.CreateCameraModifier
// ()
// Parameters:
// class UClass*                  ModifierClass                  (Parm)
// class UCameraModifier*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UCameraModifier* ACamera::CreateCameraModifier(class UClass* ModifierClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.CreateCameraModifier");

	ACamera_CreateCameraModifier_Params params;
	params.ModifierClass = ModifierClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ReceivedGameClass
// ()
// Parameters:
// class UClass*                  GameClass                      (Parm)

void APlayerController::ReceivedGameClass(class UClass* GameClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReceivedGameClass");

	APlayerController_ReceivedGameClass_Params params;
	params.GameClass = GameClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LogOutBugItAIGoToLogFile
// ()
// Parameters:
// struct FString                 InScreenShotDesc               (Const, Parm, NeedCtorLink)
// struct FString                 InGoString                     (Const, Parm, NeedCtorLink)
// struct FString                 InLocString                    (Const, Parm, NeedCtorLink)

void APlayerController::LogOutBugItAIGoToLogFile(const struct FString& InScreenShotDesc, const struct FString& InGoString, const struct FString& InLocString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LogOutBugItAIGoToLogFile");

	APlayerController_LogOutBugItAIGoToLogFile_Params params;
	params.InScreenShotDesc = InScreenShotDesc;
	params.InGoString = InGoString;
	params.InLocString = InLocString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LogOutBugItGoToLogFile
// ()
// Parameters:
// struct FString                 InScreenShotDesc               (Const, Parm, NeedCtorLink)
// struct FString                 InGoString                     (Const, Parm, NeedCtorLink)
// struct FString                 InLocString                    (Const, Parm, NeedCtorLink)

void APlayerController::LogOutBugItGoToLogFile(const struct FString& InScreenShotDesc, const struct FString& InGoString, const struct FString& InLocString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LogOutBugItGoToLogFile");

	APlayerController_LogOutBugItGoToLogFile_Params params;
	params.InScreenShotDesc = InScreenShotDesc;
	params.InGoString = InGoString;
	params.InLocString = InLocString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DisableDebugAI
// ()

void APlayerController::DisableDebugAI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DisableDebugAI");

	APlayerController_DisableDebugAI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DumpPeers
// ()

void APlayerController::DumpPeers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DumpPeers");

	APlayerController_DumpPeers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DumpVoiceMutingState
// ()

void APlayerController::DumpVoiceMutingState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DumpVoiceMutingState");

	APlayerController_DumpVoiceMutingState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DumpOnlineSessionState
// ()

void APlayerController::DumpOnlineSessionState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DumpOnlineSessionState");

	APlayerController_DumpOnlineSessionState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DebugLogPRIs
// ()

void APlayerController::DebugLogPRIs()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DebugLogPRIs");

	APlayerController_DebugLogPRIs_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnEngineInitialTick
// ()

void APlayerController::OnEngineInitialTick()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnEngineInitialTick");

	APlayerController_OnEngineInitialTick_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.BugItStringCreator
// ()
// Parameters:
// struct FVector                 ViewLocation                   (Const, Parm, OutParm)
// struct FRotator                ViewRotation                   (Const, Parm, OutParm)
// struct FString                 GoString                       (Parm, OutParm, NeedCtorLink)
// struct FString                 LocString                      (Parm, OutParm, NeedCtorLink)

void APlayerController::BugItStringCreator(struct FVector* ViewLocation, struct FRotator* ViewRotation, struct FString* GoString, struct FString* LocString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BugItStringCreator");

	APlayerController_BugItStringCreator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ViewLocation != nullptr)
		*ViewLocation = params.ViewLocation;
	if (ViewRotation != nullptr)
		*ViewRotation = params.ViewRotation;
	if (GoString != nullptr)
		*GoString = params.GoString;
	if (LocString != nullptr)
		*LocString = params.LocString;
}


// Function Engine.PlayerController.BugItAI
// ()
// Parameters:
// struct FString                 ScreenShotDescription          (OptionalParm, Parm, NeedCtorLink)

void APlayerController::BugItAI(const struct FString& ScreenShotDescription)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BugItAI");

	APlayerController_BugItAI_Params params;
	params.ScreenShotDescription = ScreenShotDescription;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LogLoc
// ()

void APlayerController::LogLoc()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LogLoc");

	APlayerController_LogLoc_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.BugIt
// ()
// Parameters:
// struct FString                 ScreenShotDescription          (OptionalParm, Parm, NeedCtorLink)

void APlayerController::BugIt(const struct FString& ScreenShotDescription)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BugIt");

	APlayerController_BugIt_Params params;
	params.ScreenShotDescription = ScreenShotDescription;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.BugItWorker
// ()
// Parameters:
// struct FVector                 TheLocation                    (Parm)
// struct FRotator                TheRotation                    (Parm)

void APlayerController::BugItWorker(const struct FVector& TheLocation, const struct FRotator& TheRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BugItWorker");

	APlayerController_BugItWorker_Params params;
	params.TheLocation = TheLocation;
	params.TheRotation = TheRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.BugItGoString
// ()
// Parameters:
// struct FString                 TheLocation                    (Parm, NeedCtorLink)
// struct FString                 TheRotation                    (Parm, NeedCtorLink)

void APlayerController::BugItGoString(const struct FString& TheLocation, const struct FString& TheRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BugItGoString");

	APlayerController_BugItGoString_Params params;
	params.TheLocation = TheLocation;
	params.TheRotation = TheRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.BugItGo
// ()
// Parameters:
// float                          X                              (Parm, CoerceParm)
// float                          Y                              (Parm, CoerceParm)
// float                          Z                              (Parm, CoerceParm)
// int                            Pitch                          (Parm, CoerceParm)
// int                            Yaw                            (Parm, CoerceParm)
// int                            Roll                           (Parm, CoerceParm)

void APlayerController::BugItGo(float X, float Y, float Z, int Pitch, int Yaw, int Roll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BugItGo");

	APlayerController_BugItGo_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;
	params.Pitch = Pitch;
	params.Yaw = Yaw;
	params.Roll = Roll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.HasPeerConnection
// ()
// Parameters:
// struct FUniqueNetId            PeerNetId                      (Const, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::HasPeerConnection(struct FUniqueNetId* PeerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HasPeerConnection");

	APlayerController_HasPeerConnection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PeerNetId != nullptr)
		*PeerNetId = params.PeerNetId;

	return params.ReturnValue;
}


// Function Engine.PlayerController.OnSetSoundMode
// ()
// Parameters:
// class USeqAct_SetSoundMode*    Action                         (Parm)

void APlayerController::OnSetSoundMode(class USeqAct_SetSoundMode* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnSetSoundMode");

	APlayerController_OnSetSoundMode_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSpawnCameraLensEffect
// ()
// Parameters:
// class UClass*                  LensEffectEmitterClass         (Parm)

void APlayerController::ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSpawnCameraLensEffect");

	APlayerController_ClientSpawnCameraLensEffect_Params params;
	params.LensEffectEmitterClass = LensEffectEmitterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DebugCameraAnims
// ()

void APlayerController::DebugCameraAnims()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DebugCameraAnims");

	APlayerController_DebugCameraAnims_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientStopCameraAnim
// ()
// Parameters:
// class UCameraAnim*             AnimToStop                     (Parm)

void APlayerController::ClientStopCameraAnim(class UCameraAnim* AnimToStop)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopCameraAnim");

	APlayerController_ClientStopCameraAnim_Params params;
	params.AnimToStop = AnimToStop;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPlayCameraAnim
// ()
// Parameters:
// class UCameraAnim*             AnimToPlay                     (Parm)
// float                          Scale                          (OptionalParm, Parm)
// float                          Rate                           (OptionalParm, Parm)
// float                          BlendInTime                    (OptionalParm, Parm)
// float                          BlendOutTime                   (OptionalParm, Parm)
// bool                           bLoop                          (OptionalParm, Parm)
// bool                           bRandomStartTime               (OptionalParm, Parm)
// TEnumAsByte<ECameraAnimPlaySpace> Space                          (OptionalParm, Parm)
// struct FRotator                CustomPlaySpace                (OptionalParm, Parm)

void APlayerController::ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, TEnumAsByte<ECameraAnimPlaySpace> Space, const struct FRotator& CustomPlaySpace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayCameraAnim");

	APlayerController_ClientPlayCameraAnim_Params params;
	params.AnimToPlay = AnimToPlay;
	params.Scale = Scale;
	params.Rate = Rate;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLoop = bLoop;
	params.bRandomStartTime = bRandomStartTime;
	params.Space = Space;
	params.CustomPlaySpace = CustomPlaySpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnCameraShake
// ()
// Parameters:
// class USeqAct_CameraShake*     inAction                       (Parm)

void APlayerController::OnCameraShake(class USeqAct_CameraShake* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnCameraShake");

	APlayerController_OnCameraShake_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientStopCameraShake
// ()
// Parameters:
// class UCameraShake*            Shake                          (Parm)

void APlayerController::ClientStopCameraShake(class UCameraShake* Shake)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopCameraShake");

	APlayerController_ClientStopCameraShake_Params params;
	params.Shake = Shake;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPlayCameraShake
// ()
// Parameters:
// class UCameraShake*            Shake                          (Parm)
// float                          Scale                          (OptionalParm, Parm)
// bool                           bTryForceFeedback              (OptionalParm, Parm)
// TEnumAsByte<ECameraAnimPlaySpace> PlaySpace                      (OptionalParm, Parm)
// struct FRotator                UserPlaySpaceRot               (OptionalParm, Parm)

void APlayerController::ClientPlayCameraShake(class UCameraShake* Shake, float Scale, bool bTryForceFeedback, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayCameraShake");

	APlayerController_ClientPlayCameraShake_Params params;
	params.Shake = Shake;
	params.Scale = Scale;
	params.bTryForceFeedback = bTryForceFeedback;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DoForceFeedbackForScreenShake
// ()
// Parameters:
// class UCameraShake*            ShakeData                      (Parm)
// float                          ShakeScale                     (Parm)

void APlayerController::DoForceFeedbackForScreenShake(class UCameraShake* ShakeData, float ShakeScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DoForceFeedbackForScreenShake");

	APlayerController_DoForceFeedbackForScreenShake_Params params;
	params.ShakeData = ShakeData;
	params.ShakeScale = ShakeScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.InputMatchDelegate
// ()

void APlayerController::InputMatchDelegate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.InputMatchDelegate");

	APlayerController_InputMatchDelegate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Sentinel_PostAcquireTravelTheWorldPoints
// ()

void APlayerController::Sentinel_PostAcquireTravelTheWorldPoints()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Sentinel_PostAcquireTravelTheWorldPoints");

	APlayerController_Sentinel_PostAcquireTravelTheWorldPoints_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Sentinel_PreAcquireTravelTheWorldPoints
// ()

void APlayerController::Sentinel_PreAcquireTravelTheWorldPoints()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Sentinel_PreAcquireTravelTheWorldPoints");

	APlayerController_Sentinel_PreAcquireTravelTheWorldPoints_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Sentinel_SetupForGamebasedTravelTheWorld
// ()

void APlayerController::Sentinel_SetupForGamebasedTravelTheWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Sentinel_SetupForGamebasedTravelTheWorld");

	APlayerController_Sentinel_SetupForGamebasedTravelTheWorld_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnFlyThroughHasEnded
// ()
// Parameters:
// class USeqAct_FlyThroughHasEnded* inAction                       (Parm)

void APlayerController::OnFlyThroughHasEnded(class USeqAct_FlyThroughHasEnded* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnFlyThroughHasEnded");

	APlayerController_OnFlyThroughHasEnded_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetAchievementProgression
// ()
// Parameters:
// int                            AchievementId                  (Parm)
// float                          CurrentValue                   (Parm, OutParm)
// float                          MaxValue                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::GetAchievementProgression(int AchievementId, float* CurrentValue, float* MaxValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetAchievementProgression");

	APlayerController_GetAchievementProgression_Params params;
	params.AchievementId = AchievementId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CurrentValue != nullptr)
		*CurrentValue = params.CurrentValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetPartyGameTypeName
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::GetPartyGameTypeName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPartyGameTypeName");

	APlayerController_GetPartyGameTypeName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetPartyMapName
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::GetPartyMapName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPartyMapName");

	APlayerController_GetPartyMapName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsPartyLeader
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsPartyLeader()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsPartyLeader");

	APlayerController_IsPartyLeader_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientPrestreamTextures
// ()
// Parameters:
// class AActor*                  ForcedActor                    (Parm)
// float                          ForceDuration                  (Parm)
// bool                           bEnableStreaming               (Parm)
// int                            CinematicTextureGroups         (OptionalParm, Parm)

void APlayerController::ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPrestreamTextures");

	APlayerController_ClientPrestreamTextures_Params params;
	params.ForcedActor = ForcedActor;
	params.ForceDuration = ForceDuration;
	params.bEnableStreaming = bEnableStreaming;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident
// ()
// Parameters:
// class UMaterialInterface*      Material                       (Parm)
// float                          ForceDuration                  (Parm)
// int                            CinematicTextureGroups         (OptionalParm, Parm)

void APlayerController::ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident");

	APlayerController_ClientSetForceMipLevelsToBeResident_Params params;
	params.Material = Material;
	params.ForceDuration = ForceDuration;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientControlMovieTexture
// ()
// Parameters:
// class UTextureMovie*           MovieTexture                   (Parm)
// TEnumAsByte<EMovieControlType> Mode                           (Parm)

void APlayerController::ClientControlMovieTexture(class UTextureMovie* MovieTexture, TEnumAsByte<EMovieControlType> Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientControlMovieTexture");

	APlayerController_ClientControlMovieTexture_Params params;
	params.MovieTexture = MovieTexture;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetSplitscreenPlayerCount
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APlayerController::GetSplitscreenPlayerCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetSplitscreenPlayerCount");

	APlayerController_GetSplitscreenPlayerCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetSplitscreenPlayerByIndex
// ()
// Parameters:
// int                            PlayerIndex                    (OptionalParm, Parm)
// class APlayerReplicationInfo*  ReturnValue                    (Parm, OutParm, ReturnParm)

class APlayerReplicationInfo* APlayerController::GetSplitscreenPlayerByIndex(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetSplitscreenPlayerByIndex");

	APlayerController_GetSplitscreenPlayerByIndex_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsSplitscreenPlayer
// ()
// Parameters:
// int                            out_SplitscreenPlayerIndex     (OptionalParm, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsSplitscreenPlayer(int* out_SplitscreenPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsSplitscreenPlayer");

	APlayerController_IsSplitscreenPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_SplitscreenPlayerIndex != nullptr)
		*out_SplitscreenPlayerIndex = params.out_SplitscreenPlayerIndex;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsPrimaryPlayer
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsPrimaryPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsPrimaryPlayer");

	APlayerController_IsPrimaryPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ServerNotifyPartyHostLeaving
// ()
// Parameters:
// struct FUniqueNetId            PartyHostPlayerId              (Parm)

void APlayerController::ServerNotifyPartyHostLeaving(const struct FUniqueNetId& PartyHostPlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerNotifyPartyHostLeaving");

	APlayerController_ServerNotifyPartyHostLeaving_Params params;
	params.PartyHostPlayerId = PartyHostPlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientNotifyPartyHostLeaving
// ()
// Parameters:
// struct FUniqueNetId            PartyHostPlayerId              (Parm)

void APlayerController::ClientNotifyPartyHostLeaving(const struct FUniqueNetId& PartyHostPlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientNotifyPartyHostLeaving");

	APlayerController_ClientNotifyPartyHostLeaving_Params params;
	params.PartyHostPlayerId = PartyHostPlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientReturnToParty
// ()
// Parameters:
// struct FUniqueNetId            RequestingPlayerId             (Parm)

void APlayerController::ClientReturnToParty(const struct FUniqueNetId& RequestingPlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReturnToParty");

	APlayerController_ClientReturnToParty_Params params;
	params.RequestingPlayerId = RequestingPlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnJoinTravelToSessionComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void APlayerController::OnJoinTravelToSessionComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnJoinTravelToSessionComplete");

	APlayerController_OnJoinTravelToSessionComplete_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PreJoinUpdateGameSettings
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// class UOnlineGameSettings*     GameSettings                   (Parm)

void APlayerController::PreJoinUpdateGameSettings(const struct FName& SessionName, class UOnlineGameSettings* GameSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PreJoinUpdateGameSettings");

	APlayerController_PreJoinUpdateGameSettings_Params params;
	params.SessionName = SessionName;
	params.GameSettings = GameSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientTravelToSession
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// class UClass*                  SearchClass                    (Parm)
// unsigned char                  PlatformSpecificInfo           (Parm)

void APlayerController::ClientTravelToSession(const struct FName& SessionName, class UClass* SearchClass, unsigned char PlatformSpecificInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTravelToSession");

	APlayerController_ClientTravelToSession_Params params;
	params.SessionName = SessionName;
	params.SearchClass = SearchClass;
	params.PlatformSpecificInfo = PlatformSpecificInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PathClear
// ()

void APlayerController::PathClear()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PathClear");

	APlayerController_PathClear_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PathChild
// ()
// Parameters:
// int                            Cnt                            (OptionalParm, Parm)

void APlayerController::PathChild(int Cnt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PathChild");

	APlayerController_PathChild_Params params;
	params.Cnt = Cnt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PathStep
// ()
// Parameters:
// int                            Cnt                            (OptionalParm, Parm)

void APlayerController::PathStep(int Cnt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PathStep");

	APlayerController_PathStep_Params params;
	params.Cnt = Cnt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SoakPause
// ()
// Parameters:
// class APawn*                   P                              (Parm)

void APlayerController::SoakPause(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SoakPause");

	APlayerController_SoakPause_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IncrementNumberOfMatchesPlayed
// ()

void APlayerController::IncrementNumberOfMatchesPlayed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IncrementNumberOfMatchesPlayed");

	APlayerController_IncrementNumberOfMatchesPlayed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CanViewUserCreatedContent
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::CanViewUserCreatedContent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanViewUserCreatedContent");

	APlayerController_CanViewUserCreatedContent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientEndOnlineGame
// ()

void APlayerController::ClientEndOnlineGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientEndOnlineGame");

	APlayerController_ClientEndOnlineGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientStartOnlineGame
// ()

void APlayerController::ClientStartOnlineGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStartOnlineGame");

	APlayerController_ClientStartOnlineGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerRegisterClientStatGuid
// ()
// Parameters:
// struct FString                 StatGuid                       (Parm, NeedCtorLink)

void APlayerController::ServerRegisterClientStatGuid(const struct FString& StatGuid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerRegisterClientStatGuid");

	APlayerController_ServerRegisterClientStatGuid_Params params;
	params.StatGuid = StatGuid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnRegisterHostStatGuidComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void APlayerController::OnRegisterHostStatGuidComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnRegisterHostStatGuidComplete");

	APlayerController_OnRegisterHostStatGuidComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientRegisterHostStatGuid
// ()
// Parameters:
// struct FString                 StatGuid                       (Parm, NeedCtorLink)

void APlayerController::ClientRegisterHostStatGuid(const struct FString& StatGuid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRegisterHostStatGuid");

	APlayerController_ClientRegisterHostStatGuid_Params params;
	params.StatGuid = StatGuid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RemoveAllDebugStrings
// ()

void APlayerController::RemoveAllDebugStrings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RemoveAllDebugStrings");

	APlayerController_RemoveAllDebugStrings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RemoveDebugText
// ()
// Parameters:
// class AActor*                  SrcActor                       (Parm)

void APlayerController::RemoveDebugText(class AActor* SrcActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RemoveDebugText");

	APlayerController_RemoveDebugText_Params params;
	params.SrcActor = SrcActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AddDebugText
// ()
// Parameters:
// struct FString                 DebugText                      (Parm, NeedCtorLink)
// class AActor*                  SrcActor                       (OptionalParm, Parm)
// float                          Duration                       (OptionalParm, Parm)
// struct FVector                 Offset                         (OptionalParm, Parm)
// struct FVector                 DesiredOffset                  (OptionalParm, Parm)
// struct FColor                  TextColor                      (OptionalParm, Parm)
// bool                           bSkipOverwriteCheck            (OptionalParm, Parm)
// bool                           bAbsoluteLocation              (OptionalParm, Parm)
// bool                           bKeepAttachedToActor           (OptionalParm, Parm)
// class UFont*                   InFont                         (OptionalParm, Parm)

void APlayerController::AddDebugText(const struct FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddDebugText");

	APlayerController_AddDebugText_Params params;
	params.DebugText = DebugText;
	params.SrcActor = SrcActor;
	params.Duration = Duration;
	params.Offset = Offset;
	params.DesiredOffset = DesiredOffset;
	params.TextColor = TextColor;
	params.bSkipOverwriteCheck = bSkipOverwriteCheck;
	params.bAbsoluteLocation = bAbsoluteLocation;
	params.bKeepAttachedToActor = bKeepAttachedToActor;
	params.InFont = InFont;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DrawDebugTextList
// ()
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// float                          RenderDelta                    (Parm)

void APlayerController::DrawDebugTextList(class UCanvas* Canvas, float RenderDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DrawDebugTextList");

	APlayerController_DrawDebugTextList_Params params;
	params.Canvas = Canvas;
	params.RenderDelta = RenderDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnDestroy
// ()
// Parameters:
// class USeqAct_Destroy*         Action                         (Parm)

void APlayerController::OnDestroy(class USeqAct_Destroy* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnDestroy");

	APlayerController_OnDestroy_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientStartNetworkedVoice
// ()

void APlayerController::ClientStartNetworkedVoice()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStartNetworkedVoice");

	APlayerController_ClientStartNetworkedVoice_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientStopNetworkedVoice
// ()

void APlayerController::ClientStopNetworkedVoice()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopNetworkedVoice");

	APlayerController_ClientStopNetworkedVoice_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetHostUniqueId
// ()
// Parameters:
// struct FUniqueNetId            InHostId                       (Parm)

void APlayerController::ClientSetHostUniqueId(const struct FUniqueNetId& InHostId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetHostUniqueId");

	APlayerController_ClientSetHostUniqueId_Params params;
	params.InHostId = InHostId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientWriteLeaderboardStats
// ()
// Parameters:
// class UClass*                  OnlineStatsWriteClass          (Parm)
// bool                           bIsIncomplete                  (OptionalParm, Parm)

void APlayerController::ClientWriteLeaderboardStats(class UClass* OnlineStatsWriteClass, bool bIsIncomplete)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientWriteLeaderboardStats");

	APlayerController_ClientWriteLeaderboardStats_Params params;
	params.OnlineStatsWriteClass = OnlineStatsWriteClass;
	params.bIsIncomplete = bIsIncomplete;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientWriteOnlinePlayerScores
// ()
// Parameters:
// int                            LeaderboardId                  (Parm)

void APlayerController::ClientWriteOnlinePlayerScores(int LeaderboardId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientWriteOnlinePlayerScores");

	APlayerController_ClientWriteOnlinePlayerScores_Params params;
	params.LeaderboardId = LeaderboardId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientArbitratedMatchEnded
// ()

void APlayerController::ClientArbitratedMatchEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientArbitratedMatchEnded");

	APlayerController_ClientArbitratedMatchEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyNotEnoughSpaceInInvite
// ()

void APlayerController::NotifyNotEnoughSpaceInInvite()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyNotEnoughSpaceInInvite");

	APlayerController_NotifyNotEnoughSpaceInInvite_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyNotAllPlayersCanJoinInvite
// ()

void APlayerController::NotifyNotAllPlayersCanJoinInvite()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyNotAllPlayersCanJoinInvite");

	APlayerController_NotifyNotAllPlayersCanJoinInvite_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyInviteFailed
// ()

void APlayerController::NotifyInviteFailed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyInviteFailed");

	APlayerController_NotifyInviteFailed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnInviteJoinComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void APlayerController::OnInviteJoinComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnInviteJoinComplete");

	APlayerController_OnInviteJoinComplete_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ModifyClientURL
// ()
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::ModifyClientURL(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ModifyClientURL");

	APlayerController_ModifyClientURL_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.OnDestroyForInviteComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void APlayerController::OnDestroyForInviteComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnDestroyForInviteComplete");

	APlayerController_OnDestroyForInviteComplete_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnEndForInviteComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void APlayerController::OnEndForInviteComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnEndForInviteComplete");

	APlayerController_OnEndForInviteComplete_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClearInviteDelegates
// ()

void APlayerController::ClearInviteDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearInviteDelegates");

	APlayerController_ClearInviteDelegates_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CanAllPlayersPlayOnline
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::CanAllPlayersPlayOnline()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanAllPlayersPlayOnline");

	APlayerController_CanAllPlayersPlayOnline_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.InviteHasEnoughSpace
// ()
// Parameters:
// class UOnlineGameSettings*     InviteSettings                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::InviteHasEnoughSpace(class UOnlineGameSettings* InviteSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.InviteHasEnoughSpace");

	APlayerController_InviteHasEnoughSpace_Params params;
	params.InviteSettings = InviteSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.OnGameInviteAccepted
// ()
// Parameters:
// struct FOnlineGameSearchResult InviteResult                   (Const, Parm, OutParm)

void APlayerController::OnGameInviteAccepted(struct FOnlineGameSearchResult* InviteResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnGameInviteAccepted");

	APlayerController_OnGameInviteAccepted_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InviteResult != nullptr)
		*InviteResult = params.InviteResult;
}


// Function Engine.PlayerController.ServerRegisteredForArbitration
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void APlayerController::ServerRegisteredForArbitration(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerRegisteredForArbitration");

	APlayerController_ServerRegisteredForArbitration_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnArbitrationRegisterComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void APlayerController::OnArbitrationRegisterComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnArbitrationRegisterComplete");

	APlayerController_OnArbitrationRegisterComplete_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientRegisterForArbitration
// ()

void APlayerController::ClientRegisterForArbitration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRegisterForArbitration");

	APlayerController_ClientRegisterForArbitration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientWasKicked
// ()

void APlayerController::ClientWasKicked()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientWasKicked");

	APlayerController_ClientWasKicked_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsShowingSubtitles
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsShowingSubtitles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsShowingSubtitles");

	APlayerController_IsShowingSubtitles_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetShowSubtitles
// ()
// Parameters:
// bool                           bValue                         (Parm)

void APlayerController::SetShowSubtitles(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetShowSubtitles");

	APlayerController_SetShowSubtitles_Params params;
	params.bValue = bValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyDirectorControl
// ()
// Parameters:
// bool                           bNowControlling                (Parm)

void APlayerController::NotifyDirectorControl(bool bNowControlling)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyDirectorControl");

	APlayerController_NotifyDirectorControl_Params params;
	params.bNowControlling = bNowControlling;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerUnmutePlayer
// ()
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (Parm)

void APlayerController::ServerUnmutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUnmutePlayer");

	APlayerController_ServerUnmutePlayer_Params params;
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerMutePlayer
// ()
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (Parm)

void APlayerController::ServerMutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerMutePlayer");

	APlayerController_ServerMutePlayer_Params params;
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GameplayUnmutePlayer
// ()
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (Parm)

void APlayerController::GameplayUnmutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GameplayUnmutePlayer");

	APlayerController_GameplayUnmutePlayer_Params params;
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GameplayMutePlayer
// ()
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (Parm)

void APlayerController::GameplayMutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GameplayMutePlayer");

	APlayerController_GameplayMutePlayer_Params params;
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientUnmutePlayer
// ()
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (Parm)

void APlayerController::ClientUnmutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUnmutePlayer");

	APlayerController_ClientUnmutePlayer_Params params;
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientMutePlayer
// ()
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (Parm)

void APlayerController::ClientMutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientMutePlayer");

	APlayerController_ClientMutePlayer_Params params;
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientVoiceHandshakeComplete
// ()

void APlayerController::ClientVoiceHandshakeComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientVoiceHandshakeComplete");

	APlayerController_ClientVoiceHandshakeComplete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetPlayerControllerFromNetId
// ()
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (Parm)
// class APlayerController*       ReturnValue                    (Parm, OutParm, ReturnParm)

class APlayerController* APlayerController::GetPlayerControllerFromNetId(const struct FUniqueNetId& PlayerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPlayerControllerFromNetId");

	APlayerController_GetPlayerControllerFromNetId_Params params;
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientSetOnlineStatus
// ()

void APlayerController::ClientSetOnlineStatus()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetOnlineStatus");

	APlayerController_ClientSetOnlineStatus_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SeamlessTravelFrom
// ()
// Parameters:
// class APlayerController*       OldPC                          (Parm)

void APlayerController::SeamlessTravelFrom(class APlayerController* OldPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SeamlessTravelFrom");

	APlayerController_SeamlessTravelFrom_Params params;
	params.OldPC = OldPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SeamlessTravelTo
// ()
// Parameters:
// class APlayerController*       NewPC                          (Parm)

void APlayerController::SeamlessTravelTo(class APlayerController* NewPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SeamlessTravelTo");

	APlayerController_SeamlessTravelTo_Params params;
	params.NewPC = NewPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetSeamlessTravelActorList
// ()
// Parameters:
// bool                           bToEntry                       (Parm)
// TArray<class AActor*>          ActorList                      (Parm, OutParm, NeedCtorLink)

void APlayerController::GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetSeamlessTravelActorList");

	APlayerController_GetSeamlessTravelActorList_Params params;
	params.bToEntry = bToEntry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ActorList != nullptr)
		*ActorList = params.ActorList;
}


// Function Engine.PlayerController.IsPlayerMuted
// ()
// Parameters:
// struct FUniqueNetId            Sender                         (Const, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsPlayerMuted(struct FUniqueNetId* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsPlayerMuted");

	APlayerController_IsPlayerMuted_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Sender != nullptr)
		*Sender = params.Sender;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetUIController
// ()
// Parameters:
// class UUIInteraction*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIInteraction* APlayerController::GetUIController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetUIController");

	APlayerController_GetUIController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SaveActorConfig
// ()
// Parameters:
// struct FName                   actorName                      (Parm, CoerceParm)

void APlayerController::SaveActorConfig(const struct FName& actorName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SaveActorConfig");

	APlayerController_SaveActorConfig_Params params;
	params.actorName = actorName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SaveClassConfig
// ()
// Parameters:
// struct FString                 ClassName                      (Parm, CoerceParm, NeedCtorLink)

void APlayerController::SaveClassConfig(const struct FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SaveClassConfig");

	APlayerController_SaveClassConfig_Params params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetBlockOnAsyncLoading
// ()

void APlayerController::ClientSetBlockOnAsyncLoading()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetBlockOnAsyncLoading");

	APlayerController_ClientSetBlockOnAsyncLoading_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientFlushLevelStreaming
// ()

void APlayerController::ClientFlushLevelStreaming()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientFlushLevelStreaming");

	APlayerController_ClientFlushLevelStreaming_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientCancelPendingMapChange
// ()

void APlayerController::ClientCancelPendingMapChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCancelPendingMapChange");

	APlayerController_ClientCancelPendingMapChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientCommitMapChange
// ()

void APlayerController::ClientCommitMapChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCommitMapChange");

	APlayerController_ClientCommitMapChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DelayedPrepareMapChange
// ()

void APlayerController::DelayedPrepareMapChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DelayedPrepareMapChange");

	APlayerController_DelayedPrepareMapChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPrepareMapChange
// ()
// Parameters:
// struct FName                   LevelName                      (Parm)
// bool                           bFirst                         (Parm)
// bool                           bLast                          (Parm)

void APlayerController::ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPrepareMapChange");

	APlayerController_ClientPrepareMapChange_Params params;
	params.LevelName = LevelName;
	params.bFirst = bFirst;
	params.bLast = bLast;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerUpdateLevelVisibility
// ()
// Parameters:
// struct FName                   PackageName                    (Parm)
// bool                           bIsVisible                     (Parm)

void APlayerController::ServerUpdateLevelVisibility(const struct FName& PackageName, bool bIsVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUpdateLevelVisibility");

	APlayerController_ServerUpdateLevelVisibility_Params params;
	params.PackageName = PackageName;
	params.bIsVisible = bIsVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientUpdateLevelStreamingStatus
// ()
// Parameters:
// struct FName                   PackageName                    (Parm)
// bool                           bNewShouldBeLoaded             (Parm)
// bool                           bNewShouldBeVisible            (Parm)
// bool                           bNewShouldBlockOnLoad          (Parm)

void APlayerController::ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUpdateLevelStreamingStatus");

	APlayerController_ClientUpdateLevelStreamingStatus_Params params;
	params.PackageName = PackageName;
	params.bNewShouldBeLoaded = bNewShouldBeLoaded;
	params.bNewShouldBeVisible = bNewShouldBeVisible;
	params.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LevelStreamingStatusChanged
// ()
// Parameters:
// class ULevelStreaming*         LevelObject                    (Parm)
// bool                           bNewShouldBeLoaded             (Parm)
// bool                           bNewShouldBeVisible            (Parm)
// bool                           bNewShouldBlockOnLoad          (Parm)

void APlayerController::LevelStreamingStatusChanged(class ULevelStreaming* LevelObject, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LevelStreamingStatusChanged");

	APlayerController_LevelStreamingStatusChanged_Params params;
	params.LevelObject = LevelObject;
	params.bNewShouldBeLoaded = bNewShouldBeLoaded;
	params.bNewShouldBeVisible = bNewShouldBeVisible;
	params.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientForceGarbageCollection
// ()

void APlayerController::ClientForceGarbageCollection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientForceGarbageCollection");

	APlayerController_ClientForceGarbageCollection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnConsoleCommand
// ()
// Parameters:
// class USeqAct_ConsoleCommand*  inAction                       (Parm)

void APlayerController::OnConsoleCommand(class USeqAct_ConsoleCommand* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnConsoleCommand");

	APlayerController_OnConsoleCommand_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ResetPlayerMovementInput
// ()

void APlayerController::ResetPlayerMovementInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetPlayerMovementInput");

	APlayerController_ResetPlayerMovementInput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsLookInputIgnored
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsLookInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsLookInputIgnored");

	APlayerController_IsLookInputIgnored_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IgnoreLookInput
// ()
// Parameters:
// bool                           bNewLookInput                  (Parm)

void APlayerController::IgnoreLookInput(bool bNewLookInput)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IgnoreLookInput");

	APlayerController_IgnoreLookInput_Params params;
	params.bNewLookInput = bNewLookInput;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsMoveInputIgnored
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsMoveInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsMoveInputIgnored");

	APlayerController_IsMoveInputIgnored_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IgnoreMoveInput
// ()
// Parameters:
// bool                           bNewMoveInput                  (Parm)

void APlayerController::IgnoreMoveInput(bool bNewMoveInput)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IgnoreMoveInput");

	APlayerController_IgnoreMoveInput_Params params;
	params.bNewMoveInput = bNewMoveInput;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetCinematicMode
// ()
// Parameters:
// bool                           bInCinematicMode               (Parm)
// bool                           bAffectsMovement               (Parm)
// bool                           bAffectsTurning                (Parm)
// bool                           bAffectsHUD                    (Parm)

void APlayerController::ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCinematicMode");

	APlayerController_ClientSetCinematicMode_Params params;
	params.bInCinematicMode = bInCinematicMode;
	params.bAffectsMovement = bAffectsMovement;
	params.bAffectsTurning = bAffectsTurning;
	params.bAffectsHUD = bAffectsHUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetCinematicMode
// ()
// Parameters:
// bool                           bInCinematicMode               (Parm)
// bool                           bHidePlayer                    (Parm)
// bool                           bAffectsHUD                    (Parm)
// bool                           bAffectsMovement               (Parm)
// bool                           bAffectsTurning                (Parm)
// bool                           bAffectsButtons                (Parm)

void APlayerController::SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsButtons)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetCinematicMode");

	APlayerController_SetCinematicMode_Params params;
	params.bInCinematicMode = bInCinematicMode;
	params.bHidePlayer = bHidePlayer;
	params.bAffectsHUD = bAffectsHUD;
	params.bAffectsMovement = bAffectsMovement;
	params.bAffectsTurning = bAffectsTurning;
	params.bAffectsButtons = bAffectsButtons;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnToggleCinematicMode
// ()
// Parameters:
// class USeqAct_ToggleCinematicMode* Action                         (Parm)

void APlayerController::OnToggleCinematicMode(class USeqAct_ToggleCinematicMode* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnToggleCinematicMode");

	APlayerController_OnToggleCinematicMode_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsForceFeedbackAllowed
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsForceFeedbackAllowed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsForceFeedbackAllowed");

	APlayerController_IsForceFeedbackAllowed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientStopForceFeedbackWaveform
// ()
// Parameters:
// class UForceFeedbackWaveform*  FFWaveform                     (OptionalParm, Parm)

void APlayerController::ClientStopForceFeedbackWaveform(class UForceFeedbackWaveform* FFWaveform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopForceFeedbackWaveform");

	APlayerController_ClientStopForceFeedbackWaveform_Params params;
	params.FFWaveform = FFWaveform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPlayForceFeedbackWaveform
// ()
// Parameters:
// class UForceFeedbackWaveform*  FFWaveform                     (Parm)
// class AActor*                  FFWaveformInstigator           (OptionalParm, Parm)

void APlayerController::ClientPlayForceFeedbackWaveform(class UForceFeedbackWaveform* FFWaveform, class AActor* FFWaveformInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayForceFeedbackWaveform");

	APlayerController_ClientPlayForceFeedbackWaveform_Params params;
	params.FFWaveform = FFWaveform;
	params.FFWaveformInstigator = FFWaveformInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PlayRumble
// ()
// Parameters:
// class UAnimNotify_Rumble*      TheAnimNotify                  (Const, Parm)

void APlayerController::PlayRumble(class UAnimNotify_Rumble* TheAnimNotify)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayRumble");

	APlayerController_PlayRumble_Params params;
	params.TheAnimNotify = TheAnimNotify;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnForceFeedback
// ()
// Parameters:
// class USeqAct_ForceFeedback*   Action                         (Parm)

void APlayerController::OnForceFeedback(class USeqAct_ForceFeedback* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnForceFeedback");

	APlayerController_OnForceFeedback_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyTakeHit
// ()
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// int                            Damage                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 Momentum                       (Parm)

void APlayerController::NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyTakeHit");

	APlayerController_NotifyTakeHit_Params params;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.Momentum = Momentum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ShowGameState
// ()

void APlayerController::ShowGameState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShowGameState");

	APlayerController_ShowGameState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ShowPlayerState
// ()

void APlayerController::ShowPlayerState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShowPlayerState");

	APlayerController_ShowPlayerState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerRemoteEvent
// ()
// Parameters:
// struct FName                   EventName                      (Parm)

void APlayerController::ServerRemoteEvent(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerRemoteEvent");

	APlayerController_ServerRemoteEvent_Params params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RE
// ()
// Parameters:
// struct FName                   EventName                      (OptionalParm, Parm)

void APlayerController::RE(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RE");

	APlayerController_RE_Params params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RemoteEvent
// ()
// Parameters:
// struct FName                   EventName                      (OptionalParm, Parm)

void APlayerController::RemoteEvent(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RemoteEvent");

	APlayerController_RemoteEvent_Params params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ListCE
// ()

void APlayerController::ListCE()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ListCE");

	APlayerController_ListCE_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ListConsoleEvents
// ()

void APlayerController::ListConsoleEvents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ListConsoleEvents");

	APlayerController_ListConsoleEvents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CE
// ()
// Parameters:
// struct FName                   EventName                      (OptionalParm, Parm)

void APlayerController::CE(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CE");

	APlayerController_CE_Params params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CauseEvent
// ()
// Parameters:
// struct FName                   EventName                      (OptionalParm, Parm)

void APlayerController::CauseEvent(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CauseEvent");

	APlayerController_CauseEvent_Params params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerCauseEvent
// ()
// Parameters:
// struct FName                   EventName                      (Parm)

void APlayerController::ServerCauseEvent(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerCauseEvent");

	APlayerController_ServerCauseEvent_Params params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnToggleHUD
// ()
// Parameters:
// class USeqAct_ToggleHUD*       inAction                       (Parm)

void APlayerController::OnToggleHUD(class USeqAct_ToggleHUD* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnToggleHUD");

	APlayerController_OnToggleHUD_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnSetCameraTarget
// ()
// Parameters:
// class USeqAct_SetCameraTarget* inAction                       (Parm)

void APlayerController::OnSetCameraTarget(class USeqAct_SetCameraTarget* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnSetCameraTarget");

	APlayerController_OnSetCameraTarget_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientClearKismetText
// ()
// Parameters:
// struct FVector2D               MessageOffset                  (Parm)

void APlayerController::ClientClearKismetText(const struct FVector2D& MessageOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientClearKismetText");

	APlayerController_ClientClearKismetText_Params params;
	params.MessageOffset = MessageOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientDrawKismetText
// ()
// Parameters:
// struct FKismetDrawTextInfo     DrawTextInfo                   (Parm, NeedCtorLink)
// float                          DisplayTime                    (Parm)

void APlayerController::ClientDrawKismetText(const struct FKismetDrawTextInfo& DrawTextInfo, float DisplayTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientDrawKismetText");

	APlayerController_ClientDrawKismetText_Params params;
	params.DrawTextInfo = DrawTextInfo;
	params.DisplayTime = DisplayTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnDrawText
// ()
// Parameters:
// class USeqAct_DrawText*        inAction                       (Parm)

void APlayerController::OnDrawText(class USeqAct_DrawText* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnDrawText");

	APlayerController_OnDrawText_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DisplayDebug
// ()
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void APlayerController::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DisplayDebug");

	APlayerController_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.PlayerController.ClientIgnoreLookInput
// ()
// Parameters:
// bool                           bIgnore                        (Parm)

void APlayerController::ClientIgnoreLookInput(bool bIgnore)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientIgnoreLookInput");

	APlayerController_ClientIgnoreLookInput_Params params;
	params.bIgnore = bIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientIgnoreMoveInput
// ()
// Parameters:
// bool                           bIgnore                        (Parm)

void APlayerController::ClientIgnoreMoveInput(bool bIgnore)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientIgnoreMoveInput");

	APlayerController_ClientIgnoreMoveInput_Params params;
	params.bIgnore = bIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnToggleInput
// ()
// Parameters:
// class USeqAct_ToggleInput*     inAction                       (Parm)

void APlayerController::OnToggleInput(class USeqAct_ToggleInput* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnToggleInput");

	APlayerController_OnToggleInput_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DrawHUD
// ()
// Parameters:
// class AHUD*                    H                              (Parm)

void APlayerController::DrawHUD(class AHUD* H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DrawHUD");

	APlayerController_DrawHUD_Params params;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CanRestartPlayer
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::CanRestartPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanRestartPlayer");

	APlayerController_CanRestartPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ServerViewSelf
// ()
// Parameters:
// struct FViewTargetTransitionParams TransitionParams               (OptionalParm, Parm)

void APlayerController::ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewSelf");

	APlayerController_ServerViewSelf_Params params;
	params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ViewAPlayer
// ()
// Parameters:
// int                            Dir                            (Parm)

void APlayerController::ViewAPlayer(int Dir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ViewAPlayer");

	APlayerController_ViewAPlayer_Params params;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerViewPrevPlayer
// ()

void APlayerController::ServerViewPrevPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewPrevPlayer");

	APlayerController_ServerViewPrevPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerViewNextPlayer
// ()

void APlayerController::ServerViewNextPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewNextPlayer");

	APlayerController_ServerViewNextPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSetSpectatorLocation
// ()
// Parameters:
// struct FVector                 NewLoc                         (Parm)

void APlayerController::ServerSetSpectatorLocation(const struct FVector& NewLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetSpectatorLocation");

	APlayerController_ServerSetSpectatorLocation_Params params;
	params.NewLoc = NewLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsSpectating
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsSpectating()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsSpectating");

	APlayerController_IsSpectating_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CheckJumpOrDuck
// ()

void APlayerController::CheckJumpOrDuck()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CheckJumpOrDuck");

	APlayerController_CheckJumpOrDuck_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LimitViewRotation
// ()
// Parameters:
// struct FRotator                ViewRotation                   (Parm)
// float                          ViewPitchMin                   (Parm)
// float                          ViewPitchMax                   (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator APlayerController::LimitViewRotation(const struct FRotator& ViewRotation, float ViewPitchMin, float ViewPitchMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LimitViewRotation");

	APlayerController_LimitViewRotation_Params params;
	params.ViewRotation = ViewRotation;
	params.ViewPitchMin = ViewPitchMin;
	params.ViewPitchMax = ViewPitchMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ProcessViewRotation
// ()
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FRotator                out_ViewRotation               (Parm, OutParm)
// struct FRotator                DeltaRot                       (Parm)

void APlayerController::ProcessViewRotation(float DeltaTime, const struct FRotator& DeltaRot, struct FRotator* out_ViewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ProcessViewRotation");

	APlayerController_ProcessViewRotation_Params params;
	params.DeltaTime = DeltaTime;
	params.DeltaRot = DeltaRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ViewRotation != nullptr)
		*out_ViewRotation = params.out_ViewRotation;
}


// Function Engine.PlayerController.UpdateRotation
// ()
// Parameters:
// float                          DeltaTime                      (Parm)

void APlayerController::UpdateRotation(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UpdateRotation");

	APlayerController_UpdateRotation_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ViewShake
// ()
// Parameters:
// float                          DeltaTime                      (Parm)

void APlayerController::ViewShake(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ViewShake");

	APlayerController_ViewShake_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetPlayerViewPoint
// ()
// Parameters:
// struct FVector                 out_Location                   (Parm, OutParm)
// struct FRotator                out_Rotation                   (Parm, OutParm)

void APlayerController::GetPlayerViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPlayerViewPoint");

	APlayerController_GetPlayerViewPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;
}


// Function Engine.PlayerController.SpawnPlayerCamera
// ()

void APlayerController::SpawnPlayerCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SpawnPlayerCamera");

	APlayerController_SpawnPlayerCamera_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerVerifyViewTarget
// ()

void APlayerController::ServerVerifyViewTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerVerifyViewTarget");

	APlayerController_ServerVerifyViewTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetViewTarget
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* APlayerController::GetViewTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetViewTarget");

	APlayerController_GetViewTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientSetViewTarget
// ()
// Parameters:
// class AActor*                  A                              (Parm)
// struct FViewTargetTransitionParams TransitionParams               (OptionalParm, Parm)

void APlayerController::ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget");

	APlayerController_ClientSetViewTarget_Params params;
	params.A = A;
	params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetViewTargetWithBlend
// ()
// Parameters:
// class AActor*                  NewViewTarget                  (Parm)
// float                          BlendTime                      (OptionalParm, Parm)
// TEnumAsByte<EViewTargetBlendFunction> BlendFunc                      (OptionalParm, Parm)
// float                          BlendExp                       (OptionalParm, Parm)
// bool                           bLockOutgoing                  (OptionalParm, Parm)

void APlayerController::SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetViewTargetWithBlend");

	APlayerController_SetViewTargetWithBlend_Params params;
	params.NewViewTarget = NewViewTarget;
	params.BlendTime = BlendTime;
	params.BlendFunc = BlendFunc;
	params.BlendExp = BlendExp;
	params.bLockOutgoing = bLockOutgoing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetViewTarget
// ()
// Parameters:
// class AActor*                  NewViewTarget                  (Parm)
// struct FViewTargetTransitionParams TransitionParams               (OptionalParm, Parm)

void APlayerController::SetViewTarget(class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetViewTarget");

	APlayerController_SetViewTarget_Params params;
	params.NewViewTarget = NewViewTarget;
	params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsLocalPlayerController
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsLocalPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsLocalPlayerController");

	APlayerController_IsLocalPlayerController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetFOVAngle
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APlayerController::GetFOVAngle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetFOVAngle");

	APlayerController_GetFOVAngle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.AdjustFOV
// ()
// Parameters:
// float                          DeltaTime                      (Parm)

void APlayerController::AdjustFOV(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AdjustFOV");

	APlayerController_AdjustFOV_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyLanded
// ()
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  FloorActor                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::NotifyLanded(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyLanded");

	APlayerController_NotifyLanded_Params params;
	params.HitNormal = HitNormal;
	params.FloorActor = FloorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.AimHelpDot
// ()
// Parameters:
// bool                           bInstantHit                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APlayerController::AimHelpDot(bool bInstantHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AimHelpDot");

	APlayerController_AimHelpDot_Params params;
	params.bInstantHit = bInstantHit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetAdjustedAimFor
// ()
// Parameters:
// class AWeapon*                 W                              (Parm)
// struct FVector                 StartFireLoc                   (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator APlayerController::GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetAdjustedAimFor");

	APlayerController_GetAdjustedAimFor_Params params;
	params.W = W;
	params.StartFireLoc = StartFireLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CameraLookAtFinished
// ()
// Parameters:
// class USeqAct_CameraLookAt*    Action                         (Parm)

void APlayerController::CameraLookAtFinished(class USeqAct_CameraLookAt* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CameraLookAtFinished");

	APlayerController_CameraLookAtFinished_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AimingHelp
// ()
// Parameters:
// bool                           bInstantHit                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::AimingHelp(bool bInstantHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AimingHelp");

	APlayerController_AimingHelp_Params params;
	params.bInstantHit = bInstantHit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.PlayerMove
// ()
// Parameters:
// float                          DeltaTime                      (Parm)

void APlayerController::PlayerMove(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayerMove");

	APlayerController_PlayerMove_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PlayerTick
// ()
// Parameters:
// float                          DeltaTime                      (Parm)

void APlayerController::PlayerTick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayerTick");

	APlayerController_PlayerTick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyChangedWeapon
// ()
// Parameters:
// class AWeapon*                 PreviousWeapon                 (Parm)
// class AWeapon*                 NewWeapon                      (Parm)

void APlayerController::NotifyChangedWeapon(class AWeapon* PreviousWeapon, class AWeapon* NewWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyChangedWeapon");

	APlayerController_NotifyChangedWeapon_Params params;
	params.PreviousWeapon = PreviousWeapon;
	params.NewWeapon = NewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientGameEnded
// ()
// Parameters:
// class AActor*                  EndGameFocus                   (Parm)
// bool                           bIsWinner                      (Parm)

void APlayerController::ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientGameEnded");

	APlayerController_ClientGameEnded_Params params;
	params.EndGameFocus = EndGameFocus;
	params.bIsWinner = bIsWinner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GameHasEnded
// ()
// Parameters:
// class AActor*                  EndGameFocus                   (OptionalParm, Parm)
// bool                           bIsWinner                      (OptionalParm, Parm)

void APlayerController::GameHasEnded(class AActor* EndGameFocus, bool bIsWinner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GameHasEnded");

	APlayerController_GameHasEnded_Params params;
	params.EndGameFocus = EndGameFocus;
	params.bIsWinner = bIsWinner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientRestart
// ()
// Parameters:
// class APawn*                   NewPawn                        (Parm)

void APlayerController::ClientRestart(class APawn* NewPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRestart");

	APlayerController_ClientRestart_Params params;
	params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.EnterStartState
// ()

void APlayerController::EnterStartState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EnterStartState");

	APlayerController_EnterStartState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ForceSingleNetUpdateFor
// ()
// Parameters:
// class AActor*                  Target                         (Parm)

void APlayerController::ForceSingleNetUpdateFor(class AActor* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ForceSingleNetUpdateFor");

	APlayerController_ForceSingleNetUpdateFor_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.HasClientLoadedCurrentWorld
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::HasClientLoadedCurrentWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HasClientLoadedCurrentWorld");

	APlayerController_HasClientLoadedCurrentWorld_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.NotifyLoadedWorld
// ()
// Parameters:
// struct FName                   WorldPackageName               (Parm)
// bool                           bFinalDest                     (Parm)

void APlayerController::NotifyLoadedWorld(const struct FName& WorldPackageName, bool bFinalDest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyLoadedWorld");

	APlayerController_NotifyLoadedWorld_Params params;
	params.WorldPackageName = WorldPackageName;
	params.bFinalDest = bFinalDest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerNotifyLoadedWorld
// ()
// Parameters:
// struct FName                   WorldPackageName               (Parm)

void APlayerController::ServerNotifyLoadedWorld(const struct FName& WorldPackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerNotifyLoadedWorld");

	APlayerController_ServerNotifyLoadedWorld_Params params;
	params.WorldPackageName = WorldPackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Restart
// ()
// Parameters:
// bool                           bVehicleTransition             (Parm)

void APlayerController::Restart(bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Restart");

	APlayerController_Restart_Params params;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetProgressMessage
// ()
// Parameters:
// TEnumAsByte<EProgressMessageType> MessageType                    (Parm)
// struct FString                 Message                        (Parm, NeedCtorLink)
// struct FString                 Title                          (OptionalParm, Parm, NeedCtorLink)
// bool                           bIgnoreFutureNetworkMessages   (OptionalParm, Parm)

void APlayerController::ClientSetProgressMessage(TEnumAsByte<EProgressMessageType> MessageType, const struct FString& Message, const struct FString& Title, bool bIgnoreFutureNetworkMessages)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetProgressMessage");

	APlayerController_ClientSetProgressMessage_Params params;
	params.MessageType = MessageType;
	params.Message = Message;
	params.Title = Title;
	params.bIgnoreFutureNetworkMessages = bIgnoreFutureNetworkMessages;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SwitchLevel
// ()
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)

void APlayerController::SwitchLevel(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SwitchLevel");

	APlayerController_SwitchLevel_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerChangeTeam
// ()
// Parameters:
// int                            N                              (Parm)

void APlayerController::ServerChangeTeam(int N)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerChangeTeam");

	APlayerController_ServerChangeTeam_Params params;
	params.N = N;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ChangeTeam
// ()
// Parameters:
// struct FString                 TeamName                       (OptionalParm, Parm, NeedCtorLink)

void APlayerController::ChangeTeam(const struct FString& TeamName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ChangeTeam");

	APlayerController_ChangeTeam_Params params;
	params.TeamName = TeamName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SwitchTeam
// ()

void APlayerController::SwitchTeam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SwitchTeam");

	APlayerController_SwitchTeam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerChangeName
// ()
// Parameters:
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)

void APlayerController::ServerChangeName(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerChangeName");

	APlayerController_ServerChangeName_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetName
// ()
// Parameters:
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)

void APlayerController::SetName(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetName");

	APlayerController_SetName_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSuicide
// ()

void APlayerController::ServerSuicide()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSuicide");

	APlayerController_ServerSuicide_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Suicide
// ()

void APlayerController::Suicide()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Suicide");

	APlayerController_Suicide_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.TriggerInteracted
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::TriggerInteracted()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TriggerInteracted");

	APlayerController_TriggerInteracted_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.FindVehicleToDrive
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::FindVehicleToDrive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FindVehicleToDrive");

	APlayerController_FindVehicleToDrive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.PerformedUseAction
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::PerformedUseAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PerformedUseAction");

	APlayerController_PerformedUseAction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ServerUse
// ()

void APlayerController::ServerUse()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUse");

	APlayerController_ServerUse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Use
// ()

void APlayerController::Use()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Use");

	APlayerController_Use_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetTriggerUseList
// ()
// Parameters:
// float                          interactDistanceToCheck        (Parm)
// float                          crosshairDist                  (Parm)
// float                          minDot                         (Parm)
// bool                           bUsuableOnly                   (Parm)
// TArray<class ATrigger*>        out_useList                    (Parm, OutParm, NeedCtorLink)

void APlayerController::GetTriggerUseList(float interactDistanceToCheck, float crosshairDist, float minDot, bool bUsuableOnly, TArray<class ATrigger*>* out_useList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetTriggerUseList");

	APlayerController_GetTriggerUseList_Params params;
	params.interactDistanceToCheck = interactDistanceToCheck;
	params.crosshairDist = crosshairDist;
	params.minDot = minDot;
	params.bUsuableOnly = bUsuableOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_useList != nullptr)
		*out_useList = params.out_useList;
}


// Function Engine.PlayerController.StopAltFire
// ()
// Parameters:
// unsigned char                  FireModeNum                    (OptionalParm, Parm)

void APlayerController::StopAltFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StopAltFire");

	APlayerController_StopAltFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.StartAltFire
// ()
// Parameters:
// unsigned char                  FireModeNum                    (OptionalParm, Parm)

void APlayerController::StartAltFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StartAltFire");

	APlayerController_StartAltFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.StopFire
// ()
// Parameters:
// unsigned char                  FireModeNum                    (OptionalParm, Parm)

void APlayerController::StopFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StopFire");

	APlayerController_StopFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.StartFire
// ()
// Parameters:
// unsigned char                  FireModeNum                    (OptionalParm, Parm)

void APlayerController::StartFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StartFire");

	APlayerController_StartFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NextWeapon
// ()

void APlayerController::NextWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NextWeapon");

	APlayerController_NextWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PrevWeapon
// ()

void APlayerController::PrevWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PrevWeapon");

	APlayerController_PrevWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerThrowWeapon
// ()

void APlayerController::ServerThrowWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerThrowWeapon");

	APlayerController_ServerThrowWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ThrowWeapon
// ()

void APlayerController::ThrowWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ThrowWeapon");

	APlayerController_ThrowWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UTrace
// ()

void APlayerController::UTrace()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UTrace");

	APlayerController_UTrace_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerUTrace
// ()

void APlayerController::ServerUTrace()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUTrace");

	APlayerController_ServerUTrace_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ConditionalPause
// ()
// Parameters:
// bool                           bDesiredPauseState             (Parm)

void APlayerController::ConditionalPause(bool bDesiredPauseState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ConditionalPause");

	APlayerController_ConditionalPause_Params params;
	params.bDesiredPauseState = bDesiredPauseState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerPause
// ()

void APlayerController::ServerPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerPause");

	APlayerController_ServerPause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Pause
// ()

void APlayerController::Pause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Pause");

	APlayerController_Pause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsPaused
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsPaused()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsPaused");

	APlayerController_IsPaused_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetPause
// ()
// Parameters:
// bool                           bPause                         (Parm)
// struct FScriptDelegate         CanUnpauseDelegate             (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::SetPause(bool bPause, const struct FScriptDelegate& CanUnpauseDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetPause");

	APlayerController_SetPause_Params params;
	params.bPause = bPause;
	params.CanUnpauseDelegate = CanUnpauseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CanUnpause
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::CanUnpause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanUnpause");

	APlayerController_CanUnpause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.PauseRumbleForAllPlayers
// ()
// Parameters:
// bool                           bShouldPauseRumble             (OptionalParm, Parm)

void APlayerController::PauseRumbleForAllPlayers(bool bShouldPauseRumble)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PauseRumbleForAllPlayers");

	APlayerController_PauseRumbleForAllPlayers_Params params;
	params.bShouldPauseRumble = bShouldPauseRumble;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LocalTravel
// ()
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)

void APlayerController::LocalTravel(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LocalTravel");

	APlayerController_LocalTravel_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RestartLevel
// ()

void APlayerController::RestartLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RestartLevel");

	APlayerController_RestartLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSpeech
// ()
// Parameters:
// struct FName                   Type                           (Parm)
// int                            Index                          (Parm)
// struct FString                 Callsign                       (Parm, NeedCtorLink)

void APlayerController::ServerSpeech(const struct FName& Type, int Index, const struct FString& Callsign)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSpeech");

	APlayerController_ServerSpeech_Params params;
	params.Type = Type;
	params.Index = Index;
	params.Callsign = Callsign;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Speech
// ()
// Parameters:
// struct FName                   Type                           (Parm)
// int                            Index                          (Parm)
// struct FString                 Callsign                       (Parm, NeedCtorLink)

void APlayerController::Speech(const struct FName& Type, int Index, const struct FString& Callsign)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Speech");

	APlayerController_Speech_Params params;
	params.Type = Type;
	params.Index = Index;
	params.Callsign = Callsign;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerRestartGame
// ()

void APlayerController::ServerRestartGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerRestartGame");

	APlayerController_ServerRestartGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.HandleWalking
// ()

void APlayerController::HandleWalking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HandleWalking");

	APlayerController_HandleWalking_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CallServerMove
// ()
// Parameters:
// class USavedMove*              NewMove                        (Parm)
// struct FVector                 ClientLoc                      (Parm)
// unsigned char                  ClientRoll                     (Parm)
// int                            View                           (Parm)
// class USavedMove*              OldMove                        (Parm)

void APlayerController::CallServerMove(class USavedMove* NewMove, const struct FVector& ClientLoc, unsigned char ClientRoll, int View, class USavedMove* OldMove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CallServerMove");

	APlayerController_CallServerMove_Params params;
	params.NewMove = NewMove;
	params.ClientLoc = ClientLoc;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.OldMove = OldMove;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ReplicateMove
// ()
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FVector                 newAccel                       (Parm)
// TEnumAsByte<EDoubleClickDir>   DoubleClickMove                (Parm)
// struct FRotator                DeltaRot                       (Parm)

void APlayerController::ReplicateMove(float DeltaTime, const struct FVector& newAccel, TEnumAsByte<EDoubleClickDir> DoubleClickMove, const struct FRotator& DeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReplicateMove");

	APlayerController_ReplicateMove_Params params;
	params.DeltaTime = DeltaTime;
	params.newAccel = newAccel;
	params.DoubleClickMove = DoubleClickMove;
	params.DeltaRot = DeltaRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CompressAccel
// ()
// Parameters:
// int                            C                              (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APlayerController::CompressAccel(int C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CompressAccel");

	APlayerController_CompressAccel_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetFreeMove
// ()
// Parameters:
// class USavedMove*              ReturnValue                    (Parm, OutParm, ReturnParm)

class USavedMove* APlayerController::GetFreeMove()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetFreeMove");

	APlayerController_GetFreeMove_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientUpdatePosition
// ()

void APlayerController::ClientUpdatePosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUpdatePosition");

	APlayerController_ClientUpdatePosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClearAckedMoves
// ()

void APlayerController::ClearAckedMoves()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearAckedMoves");

	APlayerController_ClearAckedMoves_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerUpdatePing
// ()
// Parameters:
// int                            NewPing                        (Parm)

void APlayerController::ServerUpdatePing(int NewPing)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUpdatePing");

	APlayerController_ServerUpdatePing_Params params;
	params.NewPing = NewPing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UpdateStateFromAdjustment
// ()
// Parameters:
// struct FName                   NewState                       (Parm)

void APlayerController::UpdateStateFromAdjustment(const struct FName& NewState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UpdateStateFromAdjustment");

	APlayerController_UpdateStateFromAdjustment_Params params;
	params.NewState = NewState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LongClientAdjustPosition
// ()
// Parameters:
// float                          TimeStamp                      (Parm)
// struct FName                   NewState                       (Parm)
// TEnumAsByte<EPhysics>          newPhysics                     (Parm)
// float                          NewLocX                        (Parm)
// float                          NewLocY                        (Parm)
// float                          NewLocZ                        (Parm)
// float                          NewVelX                        (Parm)
// float                          NewVelY                        (Parm)
// float                          NewVelZ                        (Parm)
// class AActor*                  NewBase                        (Parm)
// float                          NewFloorX                      (Parm)
// float                          NewFloorY                      (Parm)
// float                          NewFloorZ                      (Parm)

void APlayerController::LongClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LongClientAdjustPosition");

	APlayerController_LongClientAdjustPosition_Params params;
	params.TimeStamp = TimeStamp;
	params.NewState = NewState;
	params.newPhysics = newPhysics;
	params.NewLocX = NewLocX;
	params.NewLocY = NewLocY;
	params.NewLocZ = NewLocZ;
	params.NewVelX = NewVelX;
	params.NewVelY = NewVelY;
	params.NewVelZ = NewVelZ;
	params.NewBase = NewBase;
	params.NewFloorX = NewFloorX;
	params.NewFloorY = NewFloorY;
	params.NewFloorZ = NewFloorZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SkipPositionUpdateForRM
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::SkipPositionUpdateForRM()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SkipPositionUpdateForRM");

	APlayerController_SkipPositionUpdateForRM_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.UpdatePing
// ()
// Parameters:
// float                          TimeStamp                      (Parm)

void APlayerController::UpdatePing(float TimeStamp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UpdatePing");

	APlayerController_UpdatePing_Params params;
	params.TimeStamp = TimeStamp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientAdjustPosition
// ()
// Parameters:
// float                          TimeStamp                      (Parm)
// struct FName                   NewState                       (Parm)
// TEnumAsByte<EPhysics>          newPhysics                     (Parm)
// float                          NewLocX                        (Parm)
// float                          NewLocY                        (Parm)
// float                          NewLocZ                        (Parm)
// float                          NewVelX                        (Parm)
// float                          NewVelY                        (Parm)
// float                          NewVelZ                        (Parm)
// class AActor*                  NewBase                        (Parm)

void APlayerController::ClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAdjustPosition");

	APlayerController_ClientAdjustPosition_Params params;
	params.TimeStamp = TimeStamp;
	params.NewState = NewState;
	params.newPhysics = newPhysics;
	params.NewLocX = NewLocX;
	params.NewLocY = NewLocY;
	params.NewLocZ = NewLocZ;
	params.NewVelX = NewVelX;
	params.NewVelY = NewVelY;
	params.NewVelZ = NewVelZ;
	params.NewBase = NewBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientAckGoodMove
// ()
// Parameters:
// float                          TimeStamp                      (Parm)

void APlayerController::ClientAckGoodMove(float TimeStamp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAckGoodMove");

	APlayerController_ClientAckGoodMove_Params params;
	params.TimeStamp = TimeStamp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientCapBandwidth
// ()
// Parameters:
// int                            Cap                            (Parm)

void APlayerController::ClientCapBandwidth(int Cap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCapBandwidth");

	APlayerController_ClientCapBandwidth_Params params;
	params.Cap = Cap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ShortClientAdjustPosition
// ()
// Parameters:
// float                          TimeStamp                      (Parm)
// struct FName                   NewState                       (Parm)
// TEnumAsByte<EPhysics>          newPhysics                     (Parm)
// float                          NewLocX                        (Parm)
// float                          NewLocY                        (Parm)
// float                          NewLocZ                        (Parm)
// class AActor*                  NewBase                        (Parm)

void APlayerController::ShortClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShortClientAdjustPosition");

	APlayerController_ShortClientAdjustPosition_Params params;
	params.TimeStamp = TimeStamp;
	params.NewState = NewState;
	params.newPhysics = newPhysics;
	params.NewLocX = NewLocX;
	params.NewLocY = NewLocY;
	params.NewLocZ = NewLocZ;
	params.NewBase = NewBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.VeryShortClientAdjustPosition
// ()
// Parameters:
// float                          TimeStamp                      (Parm)
// float                          NewLocX                        (Parm)
// float                          NewLocY                        (Parm)
// float                          NewLocZ                        (Parm)
// class AActor*                  NewBase                        (Parm)

void APlayerController::VeryShortClientAdjustPosition(float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.VeryShortClientAdjustPosition");

	APlayerController_VeryShortClientAdjustPosition_Params params;
	params.TimeStamp = TimeStamp;
	params.NewLocX = NewLocX;
	params.NewLocY = NewLocY;
	params.NewLocZ = NewLocZ;
	params.NewBase = NewBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.MoveAutonomous
// ()
// Parameters:
// float                          DeltaTime                      (Parm)
// unsigned char                  CompressedFlags                (Parm)
// struct FVector                 newAccel                       (Parm)
// struct FRotator                DeltaRot                       (Parm)

void APlayerController::MoveAutonomous(float DeltaTime, unsigned char CompressedFlags, const struct FVector& newAccel, const struct FRotator& DeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.MoveAutonomous");

	APlayerController_MoveAutonomous_Params params;
	params.DeltaTime = DeltaTime;
	params.CompressedFlags = CompressedFlags;
	params.newAccel = newAccel;
	params.DeltaRot = DeltaRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ProcessMove
// ()
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FVector                 newAccel                       (Parm)
// TEnumAsByte<EDoubleClickDir>   DoubleClickMove                (Parm)
// struct FRotator                DeltaRot                       (Parm)

void APlayerController::ProcessMove(float DeltaTime, const struct FVector& newAccel, TEnumAsByte<EDoubleClickDir> DoubleClickMove, const struct FRotator& DeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ProcessMove");

	APlayerController_ProcessMove_Params params;
	params.DeltaTime = DeltaTime;
	params.newAccel = newAccel;
	params.DoubleClickMove = DoubleClickMove;
	params.DeltaRot = DeltaRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ProcessDrive
// ()
// Parameters:
// float                          InForward                      (Parm)
// float                          InStrafe                       (Parm)
// float                          InUp                           (Parm)
// bool                           InJump                         (Parm)

void APlayerController::ProcessDrive(float InForward, float InStrafe, float InUp, bool InJump)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ProcessDrive");

	APlayerController_ProcessDrive_Params params;
	params.InForward = InForward;
	params.InStrafe = InStrafe;
	params.InUp = InUp;
	params.InJump = InJump;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerDrive
// ()
// Parameters:
// float                          InForward                      (Parm)
// float                          InStrafe                       (Parm)
// float                          aUp                            (Parm)
// bool                           InJump                         (Parm)
// int                            View                           (Parm)

void APlayerController::ServerDrive(float InForward, float InStrafe, float aUp, bool InJump, int View)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerDrive");

	APlayerController_ServerDrive_Params params;
	params.InForward = InForward;
	params.InStrafe = InStrafe;
	params.aUp = aUp;
	params.InJump = InJump;
	params.View = View;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SendClientAdjustment
// ()

void APlayerController::SendClientAdjustment()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SendClientAdjustment");

	APlayerController_SendClientAdjustment_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerMove
// ()
// Parameters:
// float                          TimeStamp                      (Parm)
// struct FVector                 InAccel                        (Parm)
// struct FVector                 ClientLoc                      (Parm)
// unsigned char                  MoveFlags                      (Parm)
// unsigned char                  ClientRoll                     (Parm)
// int                            View                           (Parm)

void APlayerController::ServerMove(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerMove");

	APlayerController_ServerMove_Params params;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.MoveFlags = MoveFlags;
	params.ClientRoll = ClientRoll;
	params.View = View;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerMoveHandleClientError
// ()
// Parameters:
// float                          TimeStamp                      (Parm)
// struct FVector                 Accel                          (Parm)
// struct FVector                 ClientLoc                      (Parm)

void APlayerController::ServerMoveHandleClientError(float TimeStamp, const struct FVector& Accel, const struct FVector& ClientLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerMoveHandleClientError");

	APlayerController_ServerMoveHandleClientError_Params params;
	params.TimeStamp = TimeStamp;
	params.Accel = Accel;
	params.ClientLoc = ClientLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetServerMoveDeltaTime
// ()
// Parameters:
// float                          TimeStamp                      (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APlayerController::GetServerMoveDeltaTime(float TimeStamp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetServerMoveDeltaTime");

	APlayerController_GetServerMoveDeltaTime_Params params;
	params.TimeStamp = TimeStamp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.OldServerMove
// ()
// Parameters:
// float                          OldTimeStamp                   (Parm)
// unsigned char                  OldAccelX                      (Parm)
// unsigned char                  OldAccelY                      (Parm)
// unsigned char                  OldAccelZ                      (Parm)
// unsigned char                  OldMoveFlags                   (Parm)

void APlayerController::OldServerMove(float OldTimeStamp, unsigned char OldAccelX, unsigned char OldAccelY, unsigned char OldAccelZ, unsigned char OldMoveFlags)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OldServerMove");

	APlayerController_OldServerMove_Params params;
	params.OldTimeStamp = OldTimeStamp;
	params.OldAccelX = OldAccelX;
	params.OldAccelY = OldAccelY;
	params.OldAccelZ = OldAccelZ;
	params.OldMoveFlags = OldMoveFlags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DualServerMove
// ()
// Parameters:
// float                          TimeStamp0                     (Parm)
// struct FVector                 InAccel0                       (Parm)
// unsigned char                  PendingFlags                   (Parm)
// int                            View0                          (Parm)
// float                          TimeStamp                      (Parm)
// struct FVector                 InAccel                        (Parm)
// struct FVector                 ClientLoc                      (Parm)
// unsigned char                  NewFlags                       (Parm)
// unsigned char                  ClientRoll                     (Parm)
// int                            View                           (Parm)

void APlayerController::DualServerMove(float TimeStamp0, const struct FVector& InAccel0, unsigned char PendingFlags, int View0, float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, int View)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DualServerMove");

	APlayerController_DualServerMove_Params params;
	params.TimeStamp0 = TimeStamp0;
	params.InAccel0 = InAccel0;
	params.PendingFlags = PendingFlags;
	params.View0 = View0;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.NewFlags = NewFlags;
	params.ClientRoll = ClientRoll;
	params.View = View;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ForceDeathUpdate
// ()

void APlayerController::ForceDeathUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ForceDeathUpdate");

	APlayerController_ForceDeathUpdate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UsingFirstPersonCamera
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::UsingFirstPersonCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UsingFirstPersonCamera");

	APlayerController_UsingFirstPersonCamera_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientSetCameraFade
// ()
// Parameters:
// bool                           bEnableFading                  (Parm)
// struct FColor                  FadeColor                      (OptionalParm, Parm)
// struct FVector2D               FadeAlpha                      (OptionalParm, Parm)
// float                          FadeTime                       (OptionalParm, Parm)

void APlayerController::ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCameraFade");

	APlayerController_ClientSetCameraFade_Params params;
	params.bEnableFading = bEnableFading;
	params.FadeColor = FadeColor;
	params.FadeAlpha = FadeAlpha;
	params.FadeTime = FadeTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ResetCameraMode
// ()

void APlayerController::ResetCameraMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetCameraMode");

	APlayerController_ResetCameraMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetCameraMode
// ()
// Parameters:
// struct FName                   NewCamMode                     (Parm)

void APlayerController::SetCameraMode(const struct FName& NewCamMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetCameraMode");

	APlayerController_SetCameraMode_Params params;
	params.NewCamMode = NewCamMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetCameraMode
// ()
// Parameters:
// struct FName                   NewCamMode                     (Parm)

void APlayerController::ClientSetCameraMode(const struct FName& NewCamMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCameraMode");

	APlayerController_ClientSetCameraMode_Params params;
	params.NewCamMode = NewCamMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerCamera
// ()
// Parameters:
// struct FName                   NewMode                        (Parm)

void APlayerController::ServerCamera(const struct FName& NewMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerCamera");

	APlayerController_ServerCamera_Params params;
	params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Camera
// ()
// Parameters:
// struct FName                   NewMode                        (Parm)

void APlayerController::Camera(const struct FName& NewMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Camera");

	APlayerController_Camera_Params params;
	params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PreClientTravel
// ()
// Parameters:
// struct FString                 PendingURL                     (Parm, NeedCtorLink)
// TEnumAsByte<ETravelType>       TravelType                     (Parm)
// bool                           bIsSeamlessTravel              (Parm)

void APlayerController::PreClientTravel(const struct FString& PendingURL, TEnumAsByte<ETravelType> TravelType, bool bIsSeamlessTravel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PreClientTravel");

	APlayerController_PreClientTravel_Params params;
	params.PendingURL = PendingURL;
	params.TravelType = TravelType;
	params.bIsSeamlessTravel = bIsSeamlessTravel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerTeamSay
// ()
// Parameters:
// struct FString                 msg                            (Parm, NeedCtorLink)

void APlayerController::ServerTeamSay(const struct FString& msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerTeamSay");

	APlayerController_ServerTeamSay_Params params;
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.TeamSay
// ()
// Parameters:
// struct FString                 msg                            (Parm, NeedCtorLink)

void APlayerController::TeamSay(const struct FString& msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TeamSay");

	APlayerController_TeamSay_Params params;
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientAdminMessage
// ()
// Parameters:
// struct FString                 msg                            (Parm, NeedCtorLink)

void APlayerController::ClientAdminMessage(const struct FString& msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAdminMessage");

	APlayerController_ClientAdminMessage_Params params;
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSay
// ()
// Parameters:
// struct FString                 msg                            (Parm, NeedCtorLink)

void APlayerController::ServerSay(const struct FString& msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSay");

	APlayerController_ServerSay_Params params;
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Say
// ()
// Parameters:
// struct FString                 msg                            (Parm, NeedCtorLink)

void APlayerController::Say(const struct FString& msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Say");

	APlayerController_Say_Params params;
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AllowTextMessage
// ()
// Parameters:
// struct FString                 msg                            (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::AllowTextMessage(const struct FString& msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AllowTextMessage");

	APlayerController_AllowTextMessage_Params params;
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ServerMutate
// ()
// Parameters:
// struct FString                 MutateString                   (Parm, NeedCtorLink)

void APlayerController::ServerMutate(const struct FString& MutateString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerMutate");

	APlayerController_ServerMutate_Params params;
	params.MutateString = MutateString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Mutate
// ()
// Parameters:
// struct FString                 MutateString                   (Parm, NeedCtorLink)

void APlayerController::Mutate(const struct FString& MutateString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Mutate");

	APlayerController_Mutate_Params params;
	params.MutateString = MutateString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.FOV
// ()
// Parameters:
// float                          F                              (Parm)

void APlayerController::FOV(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FOV");

	APlayerController_FOV_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ResetFOV
// ()

void APlayerController::ResetFOV()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetFOV");

	APlayerController_ResetFOV_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetFOV
// ()
// Parameters:
// float                          NewFOV                         (Parm)

void APlayerController::SetFOV(float NewFOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetFOV");

	APlayerController_SetFOV_Params params;
	params.NewFOV = NewFOV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.FixFOV
// ()

void APlayerController::FixFOV()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FixFOV");

	APlayerController_FixFOV_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Destroyed
// ()

void APlayerController::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Destroyed");

	APlayerController_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CleanupPawn
// ()

void APlayerController::CleanupPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CleanupPawn");

	APlayerController_CleanupPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClearOnlineDelegates
// ()

void APlayerController::ClearOnlineDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearOnlineDelegates");

	APlayerController_ClearOnlineDelegates_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnPartyMembersInfoChanged
// ()
// Parameters:
// struct FString                 PlayerName                     (Parm, NeedCtorLink)
// struct FUniqueNetId            PlayerID                       (Parm)
// int                            CustomData1                    (Parm)
// int                            CustomData2                    (Parm)
// int                            CustomData3                    (Parm)
// int                            CustomData4                    (Parm)

void APlayerController::OnPartyMembersInfoChanged(const struct FString& PlayerName, const struct FUniqueNetId& PlayerID, int CustomData1, int CustomData2, int CustomData3, int CustomData4)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnPartyMembersInfoChanged");

	APlayerController_OnPartyMembersInfoChanged_Params params;
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;
	params.CustomData1 = CustomData1;
	params.CustomData2 = CustomData2;
	params.CustomData3 = CustomData3;
	params.CustomData4 = CustomData4;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnPartyMemberListChanged
// ()
// Parameters:
// bool                           bJoinedOrLeft                  (Parm)
// struct FString                 PlayerName                     (Parm, NeedCtorLink)
// struct FUniqueNetId            PlayerID                       (Parm)

void APlayerController::OnPartyMemberListChanged(bool bJoinedOrLeft, const struct FString& PlayerName, const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnPartyMemberListChanged");

	APlayerController_OnPartyMemberListChanged_Params params;
	params.bJoinedOrLeft = bJoinedOrLeft;
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RegisterOnlineDelegates
// ()

void APlayerController::RegisterOnlineDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RegisterOnlineDelegates");

	APlayerController_RegisterOnlineDelegates_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PlayBeepSound
// ()

void APlayerController::PlayBeepSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayBeepSound");

	APlayerController_PlayBeepSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.TeamMessage
// ()
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (Parm)
// float                          MsgLifeTime                    (OptionalParm, Parm)

void APlayerController::TeamMessage(class APlayerReplicationInfo* PRI, const struct FString& S, const struct FName& Type, float MsgLifeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TeamMessage");

	APlayerController_TeamMessage_Params params;
	params.PRI = PRI;
	params.S = S;
	params.Type = Type;
	params.MsgLifeTime = MsgLifeTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SpeakTTS
// ()
// Parameters:
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)
// class APlayerReplicationInfo*  PRI                            (OptionalParm, Parm)

void APlayerController::SpeakTTS(const struct FString& S, class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SpeakTTS");

	APlayerController_SpeakTTS_Params params;
	params.S = S;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.TeamTalk
// ()

void APlayerController::TeamTalk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TeamTalk");

	APlayerController_TeamTalk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Talk
// ()

void APlayerController::Talk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Talk");

	APlayerController_Talk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CreateTTSSoundCue
// ()
// Parameters:
// struct FString                 StrToSpeak                     (Parm, NeedCtorLink)
// class APlayerReplicationInfo*  PRI                            (Parm)
// class USoundCue*               ReturnValue                    (Parm, OutParm, ReturnParm)

class USoundCue* APlayerController::CreateTTSSoundCue(const struct FString& StrToSpeak, class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CreateTTSSoundCue");

	APlayerController_CreateTTSSoundCue_Params params;
	params.StrToSpeak = StrToSpeak;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.AllowTTSMessageFrom
// ()
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::AllowTTSMessageFrom(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AllowTTSMessageFrom");

	APlayerController_AllowTTSMessageFrom_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CanCommunicate
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::CanCommunicate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanCommunicate");

	APlayerController_CanCommunicate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientMessage
// ()
// Parameters:
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)
// float                          MsgLifeTime                    (OptionalParm, Parm)

void APlayerController::ClientMessage(const struct FString& S, const struct FName& Type, float MsgLifeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientMessage");

	APlayerController_ClientMessage_Params params;
	params.S = S;
	params.Type = Type;
	params.MsgLifeTime = MsgLifeTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPlayActorFaceFXAnim
// ()
// Parameters:
// class AActor*                  SourceActor                    (Parm)
// class UFaceFXAnimSet*          AnimSet                        (Parm)
// struct FString                 GroupName                      (Parm, NeedCtorLink)
// struct FString                 SeqName                        (Parm, NeedCtorLink)
// class USoundCue*               SoundCueToPlay                 (Parm)

void APlayerController::ClientPlayActorFaceFXAnim(class AActor* SourceActor, class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName, class USoundCue* SoundCueToPlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayActorFaceFXAnim");

	APlayerController_ClientPlayActorFaceFXAnim_Params params;
	params.SourceActor = SourceActor;
	params.AnimSet = AnimSet;
	params.GroupName = GroupName;
	params.SeqName = SeqName;
	params.SoundCueToPlay = SoundCueToPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Kismet_ClientStopSound
// ()
// Parameters:
// class USoundCue*               ASound                         (Parm)
// class AActor*                  SourceActor                    (Parm)
// float                          FadeOutTime                    (Parm)

void APlayerController::Kismet_ClientStopSound(class USoundCue* ASound, class AActor* SourceActor, float FadeOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Kismet_ClientStopSound");

	APlayerController_Kismet_ClientStopSound_Params params;
	params.ASound = ASound;
	params.SourceActor = SourceActor;
	params.FadeOutTime = FadeOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Kismet_ClientPlaySound
// ()
// Parameters:
// class USoundCue*               ASound                         (Parm)
// class AActor*                  SourceActor                    (Parm)
// float                          VolumeMultiplier               (Parm)
// float                          PitchMultiplier                (Parm)
// float                          FadeInTime                     (Parm)
// bool                           bSuppressSubtitles             (Parm)
// bool                           bSuppressSpatialization        (Parm)

void APlayerController::Kismet_ClientPlaySound(class USoundCue* ASound, class AActor* SourceActor, float VolumeMultiplier, float PitchMultiplier, float FadeInTime, bool bSuppressSubtitles, bool bSuppressSpatialization)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Kismet_ClientPlaySound");

	APlayerController_Kismet_ClientPlaySound_Params params;
	params.ASound = ASound;
	params.SourceActor = SourceActor;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.FadeInTime = FadeInTime;
	params.bSuppressSubtitles = bSuppressSubtitles;
	params.bSuppressSpatialization = bSuppressSpatialization;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsClosestLocalPlayerToActor
// ()
// Parameters:
// class AActor*                  TheActor                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsClosestLocalPlayerToActor(class AActor* TheActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsClosestLocalPlayerToActor");

	APlayerController_IsClosestLocalPlayerToActor_Params params;
	params.TheActor = TheActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientHearSound
// ()
// Parameters:
// class USoundCue*               ASound                         (Parm)
// class AActor*                  SourceActor                    (Parm)
// struct FVector                 SourceLocation                 (Parm)
// bool                           bStopWhenOwnerDestroyed        (Parm)
// bool                           bIsOccluded                    (OptionalParm, Parm)

void APlayerController::ClientHearSound(class USoundCue* ASound, class AActor* SourceActor, const struct FVector& SourceLocation, bool bStopWhenOwnerDestroyed, bool bIsOccluded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientHearSound");

	APlayerController_ClientHearSound_Params params;
	params.ASound = ASound;
	params.SourceActor = SourceActor;
	params.SourceLocation = SourceLocation;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.bIsOccluded = bIsOccluded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetPooledAudioComponent
// ()
// Parameters:
// class USoundCue*               ASound                         (Parm)
// class AActor*                  SourceActor                    (Parm)
// bool                           bStopWhenOwnerDestroyed        (Parm)
// bool                           bUseLocation                   (OptionalParm, Parm)
// struct FVector                 SourceLocation                 (OptionalParm, Parm)
// class UAudioComponent*         ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UAudioComponent* APlayerController::GetPooledAudioComponent(class USoundCue* ASound, class AActor* SourceActor, bool bStopWhenOwnerDestroyed, bool bUseLocation, const struct FVector& SourceLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPooledAudioComponent");

	APlayerController_GetPooledAudioComponent_Params params;
	params.ASound = ASound;
	params.SourceActor = SourceActor;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.bUseLocation = bUseLocation;
	params.SourceLocation = SourceLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.HearSoundFinished
// ()
// Parameters:
// class UAudioComponent*         AC                             (Parm, EditInline)

void APlayerController::HearSoundFinished(class UAudioComponent* AC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HearSoundFinished");

	APlayerController_HearSoundFinished_Params params;
	params.AC = AC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPlaySound
// ()
// Parameters:
// class USoundCue*               ASound                         (Parm)

void APlayerController::ClientPlaySound(class USoundCue* ASound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlaySound");

	APlayerController_ClientPlaySound_Params params;
	params.ASound = ASound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ReceiveLocalizedMessage
// ()
// Parameters:
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void APlayerController::ReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReceiveLocalizedMessage");

	APlayerController_ReceiveLocalizedMessage_Params params;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CleanupPRI
// ()

void APlayerController::CleanupPRI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CleanupPRI");

	APlayerController_CleanupPRI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.HandlePickup
// ()
// Parameters:
// class AInventory*              Inv                            (Parm)

void APlayerController::HandlePickup(class AInventory* Inv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HandlePickup");

	APlayerController_HandlePickup_Params params;
	params.Inv = Inv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetHUD
// ()
// Parameters:
// class UClass*                  newHUDType                     (Parm)

void APlayerController::ClientSetHUD(class UClass* newHUDType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetHUD");

	APlayerController_ClientSetHUD_Params params;
	params.newHUDType = newHUDType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PawnDied
// ()
// Parameters:
// class APawn*                   P                              (Parm)

void APlayerController::PawnDied(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PawnDied");

	APlayerController_PawnDied_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UnPossess
// ()

void APlayerController::UnPossess()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UnPossess");

	APlayerController_UnPossess_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerAcknowledgePossession
// ()
// Parameters:
// class APawn*                   P                              (Parm)

void APlayerController::ServerAcknowledgePossession(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerAcknowledgePossession");

	APlayerController_ServerAcknowledgePossession_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AcknowledgePossession
// ()
// Parameters:
// class APawn*                   P                              (Parm)

void APlayerController::AcknowledgePossession(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AcknowledgePossession");

	APlayerController_AcknowledgePossession_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Possess
// ()
// Parameters:
// class APawn*                   aPawn                          (Parm)
// bool                           bVehicleTransition             (Parm)

void APlayerController::Possess(class APawn* aPawn, bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Possess");

	APlayerController_Possess_Params params;
	params.aPawn = aPawn;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GivePawn
// ()
// Parameters:
// class APawn*                   NewPawn                        (Parm)

void APlayerController::GivePawn(class APawn* NewPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GivePawn");

	APlayerController_GivePawn_Params params;
	params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AskForPawn
// ()

void APlayerController::AskForPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AskForPawn");

	APlayerController_AskForPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientGotoState
// ()
// Parameters:
// struct FName                   NewState                       (Parm)
// struct FName                   NewLabel                       (OptionalParm, Parm)

void APlayerController::ClientGotoState(const struct FName& NewState, const struct FName& NewLabel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientGotoState");

	APlayerController_ClientGotoState_Params params;
	params.NewState = NewState;
	params.NewLabel = NewLabel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsMouseAvailable
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsMouseAvailable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsMouseAvailable");

	APlayerController_IsMouseAvailable_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsKeyboardAvailable
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsKeyboardAvailable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsKeyboardAvailable");

	APlayerController_IsKeyboardAvailable_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetUseTiltForwardAndBack
// ()
// Parameters:
// bool                           bActive                        (Parm)

void APlayerController::SetUseTiltForwardAndBack(bool bActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetUseTiltForwardAndBack");

	APlayerController_SetUseTiltForwardAndBack_Params params;
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetOnlyUseControllerTiltInput
// ()
// Parameters:
// bool                           bActive                        (Parm)

void APlayerController::SetOnlyUseControllerTiltInput(bool bActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetOnlyUseControllerTiltInput");

	APlayerController_SetOnlyUseControllerTiltInput_Params params;
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetControllerTiltActive
// ()
// Parameters:
// bool                           bActive                        (Parm)

void APlayerController::SetControllerTiltActive(bool bActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetControllerTiltActive");

	APlayerController_SetControllerTiltActive_Params params;
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetControllerTiltDesiredIfAvailable
// ()
// Parameters:
// bool                           bActive                        (Parm)

void APlayerController::SetControllerTiltDesiredIfAvailable(bool bActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetControllerTiltDesiredIfAvailable");

	APlayerController_SetControllerTiltDesiredIfAvailable_Params params;
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsControllerTiltActive
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsControllerTiltActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsControllerTiltActive");

	APlayerController_IsControllerTiltActive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetRumbleScale
// ()
// Parameters:
// float                          ScaleBy                        (Parm)

void APlayerController::SetRumbleScale(float ScaleBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetRumbleScale");

	APlayerController_SetRumbleScale_Params params;
	params.ScaleBy = ScaleBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ReloadProfileSettings
// ()

void APlayerController::ReloadProfileSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReloadProfileSettings");

	APlayerController_ReloadProfileSettings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UnregisterStandardPlayerDataStores
// ()

void APlayerController::UnregisterStandardPlayerDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UnregisterStandardPlayerDataStores");

	APlayerController_UnregisterStandardPlayerDataStores_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UnregisterPlayerDataStores
// ()

void APlayerController::UnregisterPlayerDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UnregisterPlayerDataStores");

	APlayerController_UnregisterPlayerDataStores_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RegisterStandardPlayerDataStores
// ()

void APlayerController::RegisterStandardPlayerDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RegisterStandardPlayerDataStores");

	APlayerController_RegisterStandardPlayerDataStores_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RegisterCustomPlayerDataStores
// ()

void APlayerController::RegisterCustomPlayerDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RegisterCustomPlayerDataStores");

	APlayerController_RegisterCustomPlayerDataStores_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RegisterPlayerDataStores
// ()

void APlayerController::RegisterPlayerDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RegisterPlayerDataStores");

	APlayerController_RegisterPlayerDataStores_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientInitializeDataStores
// ()

void APlayerController::ClientInitializeDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientInitializeDataStores");

	APlayerController_ClientInitializeDataStores_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.InitInputSystem
// ()

void APlayerController::InitInputSystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.InitInputSystem");

	APlayerController_InitInputSystem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetOnlineSubsystem
// ()
// Parameters:
// class UOnlineSubsystem*        ReturnValue                    (Parm, OutParm, ReturnParm)

class UOnlineSubsystem* APlayerController::GetOnlineSubsystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetOnlineSubsystem");

	APlayerController_GetOnlineSubsystem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.PostControllerIdChange
// ()

void APlayerController::PostControllerIdChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PostControllerIdChange");

	APlayerController_PostControllerIdChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PreControllerIdChange
// ()

void APlayerController::PreControllerIdChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PreControllerIdChange");

	APlayerController_PreControllerIdChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CleanOutSavedMoves
// ()

void APlayerController::CleanOutSavedMoves()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CleanOutSavedMoves");

	APlayerController_CleanOutSavedMoves_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientReset
// ()

void APlayerController::ClientReset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReset");

	APlayerController_ClientReset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Reset
// ()

void APlayerController::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Reset");

	APlayerController_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SpawnDefaultHUD
// ()

void APlayerController::SpawnDefaultHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SpawnDefaultHUD");

	APlayerController_SpawnDefaultHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.EnableCheats
// ()

void APlayerController::EnableCheats()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EnableCheats");

	APlayerController_EnableCheats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AddCheats
// ()
// Parameters:
// bool                           bForce                         (OptionalParm, Parm)

void APlayerController::AddCheats(bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddCheats");

	APlayerController_AddCheats_Params params;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.KickWarning
// ()

void APlayerController::KickWarning()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.KickWarning");

	APlayerController_KickWarning_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerGivePawn
// ()

void APlayerController::ServerGivePawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerGivePawn");

	APlayerController_ServerGivePawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerShortTimeout
// ()

void APlayerController::ServerShortTimeout()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerShortTimeout");

	APlayerController_ServerShortTimeout_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ResetTimeMargin
// ()

void APlayerController::ResetTimeMargin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetTimeMargin");

	APlayerController_ResetTimeMargin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PreRender
// ()
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void APlayerController::PreRender(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PreRender");

	APlayerController_PreRender_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnJoinMigratedGame
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void APlayerController::OnJoinMigratedGame(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnJoinMigratedGame");

	APlayerController_OnJoinMigratedGame_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PeerDesignatedAsClient
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)

void APlayerController::PeerDesignatedAsClient(const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PeerDesignatedAsClient");

	APlayerController_PeerDesignatedAsClient_Params params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnUnregisterPlayerCompleteForJoinMigrate
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// struct FUniqueNetId            PlayerID                       (Parm)
// bool                           bWasSuccessful                 (Parm)

void APlayerController::OnUnregisterPlayerCompleteForJoinMigrate(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnUnregisterPlayerCompleteForJoinMigrate");

	APlayerController_OnUnregisterPlayerCompleteForJoinMigrate_Params params;
	params.SessionName = SessionName;
	params.PlayerID = PlayerID;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PeerReceivedMigratedSession
// ()
// Parameters:
// struct FUniqueNetId            FromPeerNetId                  (Parm)
// struct FName                   SessionName                    (Parm)
// class UClass*                  SearchClass                    (Parm)
// unsigned char                  PlatformSpecificInfo           (Parm)

void APlayerController::PeerReceivedMigratedSession(const struct FUniqueNetId& FromPeerNetId, const struct FName& SessionName, class UClass* SearchClass, unsigned char PlatformSpecificInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PeerReceivedMigratedSession");

	APlayerController_PeerReceivedMigratedSession_Params params;
	params.FromPeerNetId = FromPeerNetId;
	params.SessionName = SessionName;
	params.SearchClass = SearchClass;
	params.PlatformSpecificInfo = PlatformSpecificInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.TellPeerToTravelToSession
// ()
// Parameters:
// struct FUniqueNetId            ToPeerNetId                    (Parm)
// struct FName                   SessionName                    (Parm)
// class UClass*                  SearchClass                    (Parm)
// unsigned char                  PlatformSpecificInfo           (Parm)
// int                            PlatformSpecificInfoSize       (Parm)

void APlayerController::TellPeerToTravelToSession(const struct FUniqueNetId& ToPeerNetId, const struct FName& SessionName, class UClass* SearchClass, unsigned char PlatformSpecificInfo, int PlatformSpecificInfoSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TellPeerToTravelToSession");

	APlayerController_TellPeerToTravelToSession_Params params;
	params.ToPeerNetId = ToPeerNetId;
	params.SessionName = SessionName;
	params.SearchClass = SearchClass;
	params.PlatformSpecificInfo = PlatformSpecificInfo;
	params.PlatformSpecificInfoSize = PlatformSpecificInfoSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.TellPeerToTravel
// ()
// Parameters:
// struct FUniqueNetId            ToPeerNetId                    (Parm)

void APlayerController::TellPeerToTravel(const struct FUniqueNetId& ToPeerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TellPeerToTravel");

	APlayerController_TellPeerToTravel_Params params;
	params.ToPeerNetId = ToPeerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PeerTravelAsHost
// ()
// Parameters:
// float                          TravelCountdownTimer           (Parm)
// struct FString                 URL                            (Parm, NeedCtorLink)

void APlayerController::PeerTravelAsHost(float TravelCountdownTimer, const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PeerTravelAsHost");

	APlayerController_PeerTravelAsHost_Params params;
	params.TravelCountdownTimer = TravelCountdownTimer;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetNewPeerHostURL
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::GetNewPeerHostURL()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetNewPeerHostURL");

	APlayerController_GetNewPeerHostURL_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.PeerDesignatedAsHost
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)

void APlayerController::PeerDesignatedAsHost(const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PeerDesignatedAsHost");

	APlayerController_PeerDesignatedAsHost_Params params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetCurrentSearchClass
// ()
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* APlayerController::GetCurrentSearchClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetCurrentSearchClass");

	APlayerController_GetCurrentSearchClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.OnHostMigratedOnlineGame
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void APlayerController::OnHostMigratedOnlineGame(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnHostMigratedOnlineGame");

	APlayerController_OnHostMigratedOnlineGame_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnUnregisterPlayerCompleteForHostMigrate
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// struct FUniqueNetId            PlayerID                       (Parm)
// bool                           bWasSuccessful                 (Parm)

void APlayerController::OnUnregisterPlayerCompleteForHostMigrate(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnUnregisterPlayerCompleteForHostMigrate");

	APlayerController_OnUnregisterPlayerCompleteForHostMigrate_Params params;
	params.SessionName = SessionName;
	params.PlayerID = PlayerID;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RemoveMissingPeersFromSession
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// struct FScriptDelegate         UnregisterDelegate             (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::RemoveMissingPeersFromSession(const struct FName& SessionName, const struct FScriptDelegate& UnregisterDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RemoveMissingPeersFromSession");

	APlayerController_RemoveMissingPeersFromSession_Params params;
	params.SessionName = SessionName;
	params.UnregisterDelegate = UnregisterDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.OnMissingPeersUnregistered
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// struct FUniqueNetId            PlayerID                       (Parm)
// bool                           bWasSuccessful                 (Parm)

void APlayerController::OnMissingPeersUnregistered(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnMissingPeersUnregistered");

	APlayerController_OnMissingPeersUnregistered_Params params;
	params.SessionName = SessionName;
	params.PlayerID = PlayerID;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetRegisteredPlayersInSession
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// TArray<struct FUniqueNetId>    OutRegisteredPlayers           (Parm, OutParm, NeedCtorLink)

void APlayerController::GetRegisteredPlayersInSession(const struct FName& SessionName, TArray<struct FUniqueNetId>* OutRegisteredPlayers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetRegisteredPlayersInSession");

	APlayerController_GetRegisteredPlayersInSession_Params params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutRegisteredPlayers != nullptr)
		*OutRegisteredPlayers = params.OutRegisteredPlayers;
}


// Function Engine.PlayerController.NotifyHostMigrationStarted
// ()

void APlayerController::NotifyHostMigrationStarted()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyHostMigrationStarted");

	APlayerController_NotifyHostMigrationStarted_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.MigrateNewHost
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::MigrateNewHost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.MigrateNewHost");

	APlayerController_MigrateNewHost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsBestHostPeer
// ()
// Parameters:
// struct FUniqueNetId            PeerNetId                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsBestHostPeer(const struct FUniqueNetId& PeerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsBestHostPeer");

	APlayerController_IsBestHostPeer_Params params;
	params.PeerNetId = PeerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.NotifyPeerDisconnectHost
// ()
// Parameters:
// struct FUniqueNetId            PeerNetId                      (Parm)

void APlayerController::NotifyPeerDisconnectHost(const struct FUniqueNetId& PeerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyPeerDisconnectHost");

	APlayerController_NotifyPeerDisconnectHost_Params params;
	params.PeerNetId = PeerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientUpdateBestNextHosts
// ()
// Parameters:
// struct FUniqueNetId            SortedNextHosts                (Parm)
// unsigned char                  NumEntries                     (Parm)

void APlayerController::ClientUpdateBestNextHosts(const struct FUniqueNetId& SortedNextHosts, unsigned char NumEntries)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUpdateBestNextHosts");

	APlayerController_ClientUpdateBestNextHosts_Params params;
	params.SortedNextHosts = SortedNextHosts;
	params.NumEntries = NumEntries;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerRemovePeer
// ()
// Parameters:
// struct FUniqueNetId            PeerNetId                      (Parm)

void APlayerController::ServerRemovePeer(const struct FUniqueNetId& PeerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerRemovePeer");

	APlayerController_ServerRemovePeer_Params params;
	params.PeerNetId = PeerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerAddPeer
// ()
// Parameters:
// struct FUniqueNetId            PeerNetId                      (Parm)
// TEnumAsByte<ENATType>          NatType                        (Parm)

void APlayerController::ServerAddPeer(const struct FUniqueNetId& PeerNetId, TEnumAsByte<ENATType> NatType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerAddPeer");

	APlayerController_ServerAddPeer_Params params;
	params.PeerNetId = PeerNetId;
	params.NatType = NatType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RemovePeer
// ()
// Parameters:
// struct FUniqueNetId            PeerNetId                      (Parm)

void APlayerController::RemovePeer(const struct FUniqueNetId& PeerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RemovePeer");

	APlayerController_RemovePeer_Params params;
	params.PeerNetId = PeerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AddPeer
// ()
// Parameters:
// struct FUniqueNetId            PeerNetId                      (Parm)
// TEnumAsByte<ENATType>          NatType                        (Parm)

void APlayerController::AddPeer(const struct FUniqueNetId& PeerNetId, TEnumAsByte<ENATType> NatType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddPeer");

	APlayerController_AddPeer_Params params;
	params.PeerNetId = PeerNetId;
	params.NatType = NatType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.FindConnectedPeerIndex
// ()
// Parameters:
// struct FUniqueNetId            PeerNetId                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APlayerController::FindConnectedPeerIndex(const struct FUniqueNetId& PeerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FindConnectedPeerIndex");

	APlayerController_FindConnectedPeerIndex_Params params;
	params.PeerNetId = PeerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ReceivedPlayer
// ()

void APlayerController::ReceivedPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReceivedPlayer");

	APlayerController_ReceivedPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PostBeginPlay
// ()

void APlayerController::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PostBeginPlay");

	APlayerController_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SpawnCoverReplicator
// ()
// Parameters:
// class ACoverReplicator*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ACoverReplicator* APlayerController::SpawnCoverReplicator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SpawnCoverReplicator");

	APlayerController_SpawnCoverReplicator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CanUnpauseControllerConnected
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::CanUnpauseControllerConnected()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanUnpauseControllerConnected");

	APlayerController_CanUnpauseControllerConnected_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.OnControllerChanged
// ()
// Parameters:
// int                            ControllerId                   (Parm)
// bool                           bIsConnected                   (Parm)

void APlayerController::OnControllerChanged(int ControllerId, bool bIsConnected)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnControllerChanged");

	APlayerController_OnControllerChanged_Params params;
	params.ControllerId = ControllerId;
	params.bIsConnected = bIsConnected;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CanUnpauseExternalUI
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::CanUnpauseExternalUI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanUnpauseExternalUI");

	APlayerController_CanUnpauseExternalUI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.OnExternalUIChanged
// ()
// Parameters:
// bool                           bIsOpening                     (Parm)

void APlayerController::OnExternalUIChanged(bool bIsOpening)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnExternalUIChanged");

	APlayerController_OnExternalUIChanged_Params params;
	params.bIsOpening = bIsOpening;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ForceClearUnpauseDelegates
// ()

void APlayerController::ForceClearUnpauseDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ForceClearUnpauseDelegates");

	APlayerController_ForceClearUnpauseDelegates_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.FellOutOfWorld
// ()
// Parameters:
// class UClass*                  dmgType                        (Parm)

void APlayerController::FellOutOfWorld(class UClass* dmgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FellOutOfWorld");

	APlayerController_FellOutOfWorld_Params params;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CleanUpAudioComponents
// ()

void APlayerController::CleanUpAudioComponents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CleanUpAudioComponents");

	APlayerController_CleanUpAudioComponents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.FindStairRotation
// ()
// Parameters:
// float                          DeltaTime                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APlayerController::FindStairRotation(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FindStairRotation");

	APlayerController_FindStairRotation_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CheckSpeedHack
// ()
// Parameters:
// float                          DeltaTime                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::CheckSpeedHack(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CheckSpeedHack");

	APlayerController_CheckSpeedHack_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ServerProcessConvolve
// ()
// Parameters:
// struct FString                 C                              (Parm, NeedCtorLink)
// int                            H                              (Parm)

void APlayerController::ServerProcessConvolve(const struct FString& C, int H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerProcessConvolve");

	APlayerController_ServerProcessConvolve_Params params;
	params.C = C;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientConvolve
// ()
// Parameters:
// struct FString                 C                              (Parm, NeedCtorLink)
// int                            H                              (Parm)

void APlayerController::ClientConvolve(const struct FString& C, int H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientConvolve");

	APlayerController_ClientConvolve_Params params;
	params.C = C;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetAudioGroupVolume
// ()
// Parameters:
// struct FName                   GroupName                      (Parm)
// float                          Volume                         (Parm)

void APlayerController::SetAudioGroupVolume(const struct FName& GroupName, float Volume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetAudioGroupVolume");

	APlayerController_SetAudioGroupVolume_Params params;
	params.GroupName = GroupName;
	params.Volume = Volume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetAllowMatureLanguage
// ()
// Parameters:
// bool                           bAllowMatureLanguge            (Parm)

void APlayerController::SetAllowMatureLanguage(bool bAllowMatureLanguge)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetAllowMatureLanguage");

	APlayerController_SetAllowMatureLanguage_Params params;
	params.bAllowMatureLanguge = bAllowMatureLanguge;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PasteFromClipboard
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::PasteFromClipboard()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PasteFromClipboard");

	APlayerController_PasteFromClipboard_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CopyToClipboard
// ()
// Parameters:
// struct FString                 Text                           (Parm, NeedCtorLink)

void APlayerController::CopyToClipboard(const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CopyToClipboard");

	APlayerController_CopyToClipboard_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetDefaultURL
// ()
// Parameters:
// struct FString                 Option                         (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::GetDefaultURL(const struct FString& Option)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetDefaultURL");

	APlayerController_GetDefaultURL_Params params;
	params.Option = Option;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.UpdateURL
// ()
// Parameters:
// struct FString                 NewOption                      (Parm, NeedCtorLink)
// struct FString                 NewValue                       (Parm, NeedCtorLink)
// bool                           bSave1Default                  (Parm)

void APlayerController::UpdateURL(const struct FString& NewOption, const struct FString& NewValue, bool bSave1Default)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UpdateURL");

	APlayerController_UpdateURL_Params params;
	params.NewOption = NewOption;
	params.NewValue = NewValue;
	params.bSave1Default = bSave1Default;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientTravel
// ()
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)
// TEnumAsByte<ETravelType>       TravelType                     (Parm)
// bool                           bSeamless                      (OptionalParm, Parm)
// struct FGuid                   MapPackageGuid                 (OptionalParm, Parm, AlwaysInit)

void APlayerController::ClientTravel(const struct FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTravel");

	APlayerController_ClientTravel_Params params;
	params.URL = URL;
	params.TravelType = TravelType;
	params.bSeamless = bSeamless;
	params.MapPackageGuid = MapPackageGuid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ConsoleCommand
// ()
// Parameters:
// struct FString                 Command                        (Parm, NeedCtorLink)
// bool                           bWriteToLog                    (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::ConsoleCommand(const struct FString& Command, bool bWriteToLog)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ConsoleCommand");

	APlayerController_ConsoleCommand_Params params;
	params.Command = Command;
	params.bWriteToLog = bWriteToLog;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetServerNetworkAddress
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::GetServerNetworkAddress()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetServerNetworkAddress");

	APlayerController_GetServerNetworkAddress_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetPlayerNetworkAddress
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::GetPlayerNetworkAddress()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPlayerNetworkAddress");

	APlayerController_GetPlayerNetworkAddress_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetNetSpeed
// ()
// Parameters:
// int                            NewSpeed                       (Parm)

void APlayerController::SetNetSpeed(int NewSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetNetSpeed");

	APlayerController_SetNetSpeed_Params params;
	params.NewSpeed = NewSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DumpCoverStats
// ()

void UCheatManager::DumpCoverStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DumpCoverStats");

	UCheatManager_DumpCoverStats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ToggleAILogging
// ()

void UCheatManager::ToggleAILogging()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ToggleAILogging");

	UCheatManager_ToggleAILogging_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.PrintNavMeshObstacles
// ()

void UCheatManager::PrintNavMeshObstacles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.PrintNavMeshObstacles");

	UCheatManager_PrintNavMeshObstacles_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.NavMeshVerification
// ()
// Parameters:
// float                          interval                       (OptionalParm, Parm)

void UCheatManager::NavMeshVerification(float interval)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.NavMeshVerification");

	UCheatManager_NavMeshVerification_Params params;
	params.interval = interval;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DrawUnsupportingEdges
// ()
// Parameters:
// struct FString                 PawnClassName                  (Parm, CoerceParm, NeedCtorLink)

void UCheatManager::DrawUnsupportingEdges(const struct FString& PawnClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DrawUnsupportingEdges");

	UCheatManager_DrawUnsupportingEdges_Params params;
	params.PawnClassName = PawnClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.VerifyNavMeshObjects
// ()

void UCheatManager::VerifyNavMeshObjects()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.VerifyNavMeshObjects");

	UCheatManager_VerifyNavMeshObjects_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.LogParticleActivateSystemCalls
// ()
// Parameters:
// bool                           bShouldLog                     (Parm)

void UCheatManager::LogParticleActivateSystemCalls(bool bShouldLog)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.LogParticleActivateSystemCalls");

	UCheatManager_LogParticleActivateSystemCalls_Params params;
	params.bShouldLog = bShouldLog;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.LogPlaySoundCalls
// ()
// Parameters:
// bool                           bShouldLog                     (Parm)

void UCheatManager::LogPlaySoundCalls(bool bShouldLog)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.LogPlaySoundCalls");

	UCheatManager_LogPlaySoundCalls_Params params;
	params.bShouldLog = bShouldLog;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.InitCheatManager
// ()

void UCheatManager::InitCheatManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.InitCheatManager");

	UCheatManager_InitCheatManager_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.VerbosePathDebug
// ()

void UCheatManager::VerbosePathDebug()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.VerbosePathDebug");

	UCheatManager_VerbosePathDebug_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.TestNavMeshPath
// ()
// Parameters:
// bool                           bDrawPath                      (OptionalParm, Parm)

void UCheatManager::TestNavMeshPath(bool bDrawPath)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.TestNavMeshPath");

	UCheatManager_TestNavMeshPath_Params params;
	params.bDrawPath = bDrawPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetOnlineDebugLevel
// ()
// Parameters:
// int                            DebugLevel                     (Parm)

void UCheatManager::SetOnlineDebugLevel(int DebugLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetOnlineDebugLevel");

	UCheatManager_SetOnlineDebugLevel_Params params;
	params.DebugLevel = DebugLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DumpOnlineSessionState
// ()

void UCheatManager::DumpOnlineSessionState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DumpOnlineSessionState");

	UCheatManager_DumpOnlineSessionState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.TestLevel
// ()

void UCheatManager::TestLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.TestLevel");

	UCheatManager_TestLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.EnableDebugCamera
// ()

void UCheatManager::EnableDebugCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.EnableDebugCamera");

	UCheatManager_EnableDebugCamera_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ToggleDebugCamera
// ()

void UCheatManager::ToggleDebugCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ToggleDebugCamera");

	UCheatManager_ToggleDebugCamera_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.StreamLevelOut
// ()
// Parameters:
// struct FName                   PackageName                    (Parm)

void UCheatManager::StreamLevelOut(const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.StreamLevelOut");

	UCheatManager_StreamLevelOut_Params params;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.OnlyLoadLevel
// ()
// Parameters:
// struct FName                   PackageName                    (Parm)

void UCheatManager::OnlyLoadLevel(const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnlyLoadLevel");

	UCheatManager_OnlyLoadLevel_Params params;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.StreamLevelIn
// ()
// Parameters:
// struct FName                   PackageName                    (Parm)

void UCheatManager::StreamLevelIn(const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.StreamLevelIn");

	UCheatManager_StreamLevelIn_Params params;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetLevelStreamingStatus
// ()
// Parameters:
// struct FName                   PackageName                    (Parm)
// bool                           bShouldBeLoaded                (Parm)
// bool                           bShouldBeVisible               (Parm)

void UCheatManager::SetLevelStreamingStatus(const struct FName& PackageName, bool bShouldBeLoaded, bool bShouldBeVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetLevelStreamingStatus");

	UCheatManager_SetLevelStreamingStatus_Params params;
	params.PackageName = PackageName;
	params.bShouldBeLoaded = bShouldBeLoaded;
	params.bShouldBeVisible = bShouldBeVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.AllWeapons
// ()

void UCheatManager::AllWeapons()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.AllWeapons");

	UCheatManager_AllWeapons_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Loaded
// ()

void UCheatManager::Loaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Loaded");

	UCheatManager_Loaded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewClass
// ()
// Parameters:
// class UClass*                  aClass                         (Parm)

void UCheatManager::ViewClass(class UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewClass");

	UCheatManager_ViewClass_Params params;
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewBot
// ()

void UCheatManager::ViewBot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewBot");

	UCheatManager_ViewBot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewActor
// ()
// Parameters:
// struct FName                   actorName                      (Parm)

void UCheatManager::ViewActor(const struct FName& actorName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewActor");

	UCheatManager_ViewActor_Params params;
	params.actorName = actorName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewPlayer
// ()
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void UCheatManager::ViewPlayer(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewPlayer");

	UCheatManager_ViewPlayer_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewSelf
// ()
// Parameters:
// bool                           bQuiet                         (OptionalParm, Parm)

void UCheatManager::ViewSelf(bool bQuiet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewSelf");

	UCheatManager_ViewSelf_Params params;
	params.bQuiet = bQuiet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.RememberSpot
// ()

void UCheatManager::RememberSpot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.RememberSpot");

	UCheatManager_RememberSpot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.FractureAllMeshesToMaximizeMemoryUsage
// ()

void UCheatManager::FractureAllMeshesToMaximizeMemoryUsage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FractureAllMeshesToMaximizeMemoryUsage");

	UCheatManager_FractureAllMeshesToMaximizeMemoryUsage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.FractureAllMeshes
// ()

void UCheatManager::FractureAllMeshes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FractureAllMeshes");

	UCheatManager_FractureAllMeshes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DestroyFractures
// ()
// Parameters:
// float                          Radius                         (OptionalParm, Parm)

void UCheatManager::DestroyFractures(float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DestroyFractures");

	UCheatManager_DestroyFractures_Params params;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.PlayersOnly
// ()

void UCheatManager::PlayersOnly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.PlayersOnly");

	UCheatManager_PlayersOnly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.GiveWeapon
// ()
// Parameters:
// struct FString                 WeaponClassStr                 (Parm, NeedCtorLink)
// class AWeapon*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class AWeapon* UCheatManager::GiveWeapon(const struct FString& WeaponClassStr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.GiveWeapon");

	UCheatManager_GiveWeapon_Params params;
	params.WeaponClassStr = WeaponClassStr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CheatManager.Summon
// ()
// Parameters:
// struct FString                 ClassName                      (Parm, NeedCtorLink)

void UCheatManager::Summon(const struct FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Summon");

	UCheatManager_Summon_Params params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Avatar
// ()
// Parameters:
// struct FName                   ClassName                      (Parm)

void UCheatManager::Avatar(const struct FName& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Avatar");

	UCheatManager_Avatar_Params params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.KillPawns
// ()

void UCheatManager::KillPawns()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.KillPawns");

	UCheatManager_KillPawns_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.KillAllPawns
// ()
// Parameters:
// class UClass*                  aClass                         (Parm)

void UCheatManager::KillAllPawns(class UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.KillAllPawns");

	UCheatManager_KillAllPawns_Params params;
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.KillAll
// ()
// Parameters:
// class UClass*                  aClass                         (Parm)

void UCheatManager::KillAll(class UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.KillAll");

	UCheatManager_KillAll_Params params;
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetSpeed
// ()
// Parameters:
// float                          F                              (Parm)

void UCheatManager::SetSpeed(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetSpeed");

	UCheatManager_SetSpeed_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetGravity
// ()
// Parameters:
// float                          F                              (Parm)

void UCheatManager::SetGravity(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetGravity");

	UCheatManager_SetGravity_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetJumpZ
// ()
// Parameters:
// float                          F                              (Parm)

void UCheatManager::SetJumpZ(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetJumpZ");

	UCheatManager_SetJumpZ_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Slomo
// ()
// Parameters:
// float                          T                              (Parm)

void UCheatManager::Slomo(float T)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Slomo");

	UCheatManager_Slomo_Params params;
	params.T = T;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.God
// ()

void UCheatManager::God()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.God");

	UCheatManager_God_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.AllAmmo
// ()

void UCheatManager::AllAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.AllAmmo");

	UCheatManager_AllAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Ghost
// ()

void UCheatManager::Ghost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Ghost");

	UCheatManager_Ghost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Walk
// ()

void UCheatManager::Walk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Walk");

	UCheatManager_Walk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Fly
// ()

void UCheatManager::Fly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Fly");

	UCheatManager_Fly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Amphibious
// ()

void UCheatManager::Amphibious()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Amphibious");

	UCheatManager_Amphibious_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.EndPath
// ()

void UCheatManager::EndPath()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.EndPath");

	UCheatManager_EndPath_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ChangeSize
// ()
// Parameters:
// float                          F                              (Parm)

void UCheatManager::ChangeSize(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ChangeSize");

	UCheatManager_ChangeSize_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Teleport
// ()

void UCheatManager::Teleport()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Teleport");

	UCheatManager_Teleport_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.KillViewedActor
// ()

void UCheatManager::KillViewedActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.KillViewedActor");

	UCheatManager_KillViewedActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.WriteToLog
// ()
// Parameters:
// struct FString                 Param                          (Parm, NeedCtorLink)

void UCheatManager::WriteToLog(const struct FString& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.WriteToLog");

	UCheatManager_WriteToLog_Params params;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.FreezeFrame
// ()
// Parameters:
// float                          Delay                          (Parm)

void UCheatManager::FreezeFrame(float Delay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FreezeFrame");

	UCheatManager_FreezeFrame_Params params;
	params.Delay = Delay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ListDynamicActors
// ()

void UCheatManager::ListDynamicActors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ListDynamicActors");

	UCheatManager_ListDynamicActors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DebugPause
// ()

void UCheatManager::DebugPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugPause");

	UCheatManager_DebugPause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.EditAIByTrace
// ()

void UCheatManager::EditAIByTrace()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.EditAIByTrace");

	UCheatManager_EditAIByTrace_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DebugAI
// ()
// Parameters:
// struct FName                   Category                       (OptionalParm, Parm, CoerceParm)

void UCheatManager::DebugAI(const struct FName& Category)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugAI");

	UCheatManager_DebugAI_Params params;
	params.Category = Category;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.FXStop
// ()
// Parameters:
// class UClass*                  aClass                         (Parm)

void UCheatManager::FXStop(class UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FXStop");

	UCheatManager_FXStop_Params params;
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.FXPlay
// ()
// Parameters:
// class UClass*                  aClass                         (Parm)
// struct FString                 FXAnimPath                     (Parm, NeedCtorLink)

void UCheatManager::FXPlay(class UClass* aClass, const struct FString& FXAnimPath)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FXPlay");

	UCheatManager_FXPlay_Params params;
	params.aClass = aClass;
	params.FXAnimPath = FXAnimPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DamageType.VehicleDamageScalingFor
// ()
// Parameters:
// class AVehicle*                V                              (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UDamageType::VehicleDamageScalingFor(class AVehicle* V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DamageType.VehicleDamageScalingFor");

	UDamageType_VehicleDamageScalingFor_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FacebookIntegration.ClearWebRequestCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         InDelegate                     (Parm, NeedCtorLink)

void UFacebookIntegration::ClearWebRequestCompleteDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.ClearWebRequestCompleteDelegate");

	UFacebookIntegration_ClearWebRequestCompleteDelegate_Params params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FacebookIntegration.AddWebRequestCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         InDelegate                     (Parm, NeedCtorLink)

void UFacebookIntegration::AddWebRequestCompleteDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.AddWebRequestCompleteDelegate");

	UFacebookIntegration_AddWebRequestCompleteDelegate_Params params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FacebookIntegration.OnWebRequestComplete
// ()
// Parameters:
// struct FString                 Response                       (Parm, NeedCtorLink)

void UFacebookIntegration::OnWebRequestComplete(const struct FString& Response)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.OnWebRequestComplete");

	UFacebookIntegration_OnWebRequestComplete_Params params;
	params.Response = Response;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FacebookIntegration.ClearFacebookRequestCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         InDelegate                     (Parm, NeedCtorLink)

void UFacebookIntegration::ClearFacebookRequestCompleteDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.ClearFacebookRequestCompleteDelegate");

	UFacebookIntegration_ClearFacebookRequestCompleteDelegate_Params params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FacebookIntegration.AddFacebookRequestCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         InDelegate                     (Parm, NeedCtorLink)

void UFacebookIntegration::AddFacebookRequestCompleteDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.AddFacebookRequestCompleteDelegate");

	UFacebookIntegration_AddFacebookRequestCompleteDelegate_Params params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FacebookIntegration.OnFacebookRequestComplete
// ()
// Parameters:
// struct FString                 JsonString                     (Parm, NeedCtorLink)

void UFacebookIntegration::OnFacebookRequestComplete(const struct FString& JsonString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.OnFacebookRequestComplete");

	UFacebookIntegration_OnFacebookRequestComplete_Params params;
	params.JsonString = JsonString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FacebookIntegration.ClearAuthorizationCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         InDelegate                     (Parm, NeedCtorLink)

void UFacebookIntegration::ClearAuthorizationCompleteDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.ClearAuthorizationCompleteDelegate");

	UFacebookIntegration_ClearAuthorizationCompleteDelegate_Params params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FacebookIntegration.AddAuthorizationCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         InDelegate                     (Parm, NeedCtorLink)

void UFacebookIntegration::AddAuthorizationCompleteDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.AddAuthorizationCompleteDelegate");

	UFacebookIntegration_AddAuthorizationCompleteDelegate_Params params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FacebookIntegration.OnAuthorizationComplete
// ()
// Parameters:
// bool                           bSucceeded                     (Parm)

void UFacebookIntegration::OnAuthorizationComplete(bool bSucceeded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.OnAuthorizationComplete");

	UFacebookIntegration_OnAuthorizationComplete_Params params;
	params.bSucceeded = bSucceeded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FacebookIntegration.Disconnect
// ()

void UFacebookIntegration::Disconnect()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.Disconnect");

	UFacebookIntegration_Disconnect_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FacebookIntegration.FacebookRequest
// ()
// Parameters:
// struct FString                 GraphRequest                   (Parm, NeedCtorLink)

void UFacebookIntegration::FacebookRequest(const struct FString& GraphRequest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.FacebookRequest");

	UFacebookIntegration_FacebookRequest_Params params;
	params.GraphRequest = GraphRequest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FacebookIntegration.WebRequest
// ()
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)
// struct FString                 POSTPayload                    (Parm, NeedCtorLink)

void UFacebookIntegration::WebRequest(const struct FString& URL, const struct FString& POSTPayload)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.WebRequest");

	UFacebookIntegration_WebRequest_Params params;
	params.URL = URL;
	params.POSTPayload = POSTPayload;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FacebookIntegration.IsAuthorized
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UFacebookIntegration::IsAuthorized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.IsAuthorized");

	UFacebookIntegration_IsAuthorized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FacebookIntegration.Authorize
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UFacebookIntegration::Authorize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.Authorize");

	UFacebookIntegration_Authorize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FacebookIntegration.Init
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UFacebookIntegration::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.Init");

	UFacebookIntegration_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FaceFXAsset.UnmountFaceFXAnimSet
// ()
// Parameters:
// class UFaceFXAnimSet*          AnimSet                        (Parm)

void UFaceFXAsset::UnmountFaceFXAnimSet(class UFaceFXAnimSet* AnimSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FaceFXAsset.UnmountFaceFXAnimSet");

	UFaceFXAsset_UnmountFaceFXAnimSet_Params params;
	params.AnimSet = AnimSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FaceFXAsset.MountFaceFXAnimSet
// ()
// Parameters:
// class UFaceFXAnimSet*          AnimSet                        (Parm)

void UFaceFXAsset::MountFaceFXAnimSet(class UFaceFXAnimSet* AnimSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FaceFXAsset.MountFaceFXAnimSet");

	UFaceFXAsset_MountFaceFXAnimSet_Params params;
	params.AnimSet = AnimSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Font.GetStringHeightAndWidth
// ()
// Parameters:
// struct FString                 InString                       (Const, Parm, OutParm, NeedCtorLink)
// int                            Height                         (Parm, OutParm)
// int                            Width                          (Parm, OutParm)

void UFont::GetStringHeightAndWidth(struct FString* InString, int* Height, int* Width)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Font.GetStringHeightAndWidth");

	UFont_GetStringHeightAndWidth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InString != nullptr)
		*InString = params.InString;
	if (Height != nullptr)
		*Height = params.Height;
	if (Width != nullptr)
		*Width = params.Width;
}


// Function Engine.Font.GetMaxCharHeight
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UFont::GetMaxCharHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Font.GetMaxCharHeight");

	UFont_GetMaxCharHeight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Font.GetAuthoredViewportHeight
// ()
// Parameters:
// float                          ViewportHeight                 (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UFont::GetAuthoredViewportHeight(float ViewportHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Font.GetAuthoredViewportHeight");

	UFont_GetAuthoredViewportHeight_Params params;
	params.ViewportHeight = ViewportHeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Font.GetScalingFactor
// ()
// Parameters:
// float                          HeightTest                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UFont::GetScalingFactor(float HeightTest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Font.GetScalingFactor");

	UFont_GetScalingFactor_Params params;
	params.HeightTest = HeightTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Font.GetResolutionPageIndex
// ()
// Parameters:
// float                          HeightTest                     (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UFont::GetResolutionPageIndex(float HeightTest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Font.GetResolutionPageIndex");

	UFont_GetResolutionPageIndex_Params params;
	params.HeightTest = HeightTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MultiFont.GetResolutionTestTableIndex
// ()
// Parameters:
// float                          HeightTest                     (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UMultiFont::GetResolutionTestTableIndex(float HeightTest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MultiFont.GetResolutionTestTableIndex");

	UMultiFont_GetResolutionTestTableIndex_Params params;
	params.HeightTest = HeightTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ForceFeedbackManager.PauseWaveform
// ()
// Parameters:
// bool                           bPause                         (OptionalParm, Parm)

void UForceFeedbackManager::PauseWaveform(bool bPause)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackManager.PauseWaveform");

	UForceFeedbackManager_PauseWaveform_Params params;
	params.bPause = bPause;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFeedbackManager.StopForceFeedbackWaveform
// ()
// Parameters:
// class UForceFeedbackWaveform*  WaveForm                       (OptionalParm, Parm)

void UForceFeedbackManager::StopForceFeedbackWaveform(class UForceFeedbackWaveform* WaveForm)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackManager.StopForceFeedbackWaveform");

	UForceFeedbackManager_StopForceFeedbackWaveform_Params params;
	params.WaveForm = WaveForm;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFeedbackManager.PlayForceFeedbackWaveform
// ()
// Parameters:
// class UForceFeedbackWaveform*  WaveForm                       (Parm)
// class AActor*                  WaveInstigator                 (Parm)

void UForceFeedbackManager::PlayForceFeedbackWaveform(class UForceFeedbackWaveform* WaveForm, class AActor* WaveInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackManager.PlayForceFeedbackWaveform");

	UForceFeedbackManager_PlayForceFeedbackWaveform_Params params;
	params.WaveForm = WaveForm;
	params.WaveInstigator = WaveInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEvents.GetFilename
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UGameplayEvents::GetFilename()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEvents.GetFilename");

	UGameplayEvents_GetFilename_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEvents.CloseStatsFile
// ()

void UGameplayEvents::CloseStatsFile()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEvents.CloseStatsFile");

	UGameplayEvents_CloseStatsFile_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEvents.OpenStatsFile
// ()
// Parameters:
// struct FString                 Filename                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameplayEvents::OpenStatsFile(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEvents.OpenStatsFile");

	UGameplayEvents_OpenStatsFile_Params params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsReader.GetSessionDuration
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UGameplayEventsReader::GetSessionDuration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.GetSessionDuration");

	UGameplayEventsReader_GetSessionDuration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsReader.GetSessionEnd
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UGameplayEventsReader::GetSessionEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.GetSessionEnd");

	UGameplayEventsReader_GetSessionEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsReader.GetSessionStart
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UGameplayEventsReader::GetSessionStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.GetSessionStart");

	UGameplayEventsReader_GetSessionStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsReader.GetSessionTimestamp
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UGameplayEventsReader::GetSessionTimestamp()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.GetSessionTimestamp");

	UGameplayEventsReader_GetSessionTimestamp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsReader.GetPlatform
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UGameplayEventsReader::GetPlatform()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.GetPlatform");

	UGameplayEventsReader_GetPlatform_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsReader.GetTitleID
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UGameplayEventsReader::GetTitleID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.GetTitleID");

	UGameplayEventsReader_GetTitleID_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsReader.GetSessionID
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UGameplayEventsReader::GetSessionID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.GetSessionID");

	UGameplayEventsReader_GetSessionID_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsReader.ProcessStreamEnd
// ()

void UGameplayEventsReader::ProcessStreamEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.ProcessStreamEnd");

	UGameplayEventsReader_ProcessStreamEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsReader.ProcessStream
// ()

void UGameplayEventsReader::ProcessStream()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.ProcessStream");

	UGameplayEventsReader_ProcessStream_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsReader.ProcessStreamStart
// ()

void UGameplayEventsReader::ProcessStreamStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.ProcessStreamStart");

	UGameplayEventsReader_ProcessStreamStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsReader.UnregisterHandler
// ()
// Parameters:
// class UGameplayEventsHandler*  ExistingHandler                (Parm)

void UGameplayEventsReader::UnregisterHandler(class UGameplayEventsHandler* ExistingHandler)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.UnregisterHandler");

	UGameplayEventsReader_UnregisterHandler_Params params;
	params.ExistingHandler = ExistingHandler;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsReader.RegisterHandler
// ()
// Parameters:
// class UGameplayEventsHandler*  NewHandler                     (Parm)

void UGameplayEventsReader::RegisterHandler(class UGameplayEventsHandler* NewHandler)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.RegisterHandler");

	UGameplayEventsReader_RegisterHandler_Params params;
	params.NewHandler = NewHandler;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsReader.SerializeHeader
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameplayEventsReader::SerializeHeader()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.SerializeHeader");

	UGameplayEventsReader_SerializeHeader_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsReader.CloseStatsFile
// ()

void UGameplayEventsReader::CloseStatsFile()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.CloseStatsFile");

	UGameplayEventsReader_CloseStatsFile_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsReader.OpenStatsFile
// ()
// Parameters:
// struct FString                 Filename                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameplayEventsReader::OpenStatsFile(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.OpenStatsFile");

	UGameplayEventsReader_OpenStatsFile_Params params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsWriter.RecordCoverLinkFireLinks
// ()
// Parameters:
// class ACoverLink*              Link                           (Parm)
// class AController*             Player                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UGameplayEventsWriter::RecordCoverLinkFireLinks(class ACoverLink* Link, class AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.RecordCoverLinkFireLinks");

	UGameplayEventsWriter_RecordCoverLinkFireLinks_Params params;
	params.Link = Link;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsWriter.RecordAIPathFail
// ()
// Parameters:
// class AController*             AI                             (Parm)
// struct FString                 Reason                         (Parm, CoerceParm, NeedCtorLink)
// struct FVector                 Dest                           (Parm)

void UGameplayEventsWriter::RecordAIPathFail(class AController* AI, const struct FString& Reason, const struct FVector& Dest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.RecordAIPathFail");

	UGameplayEventsWriter_RecordAIPathFail_Params params;
	params.AI = AI;
	params.Reason = Reason;
	params.Dest = Dest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.GetGenericParamListEntry
// ()
// Parameters:
// class UGenericParamListStatEntry* ReturnValue                    (Parm, OutParm, ReturnParm)

class UGenericParamListStatEntry* UGameplayEventsWriter::GetGenericParamListEntry()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.GetGenericParamListEntry");

	UGameplayEventsWriter_GetGenericParamListEntry_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsWriter.LogSystemPollEvents
// ()

void UGameplayEventsWriter::LogSystemPollEvents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogSystemPollEvents");

	UGameplayEventsWriter_LogSystemPollEvents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogProjectileIntEvent
// ()
// Parameters:
// int                            EventID                        (Parm)
// class AController*             Player                         (Parm)
// class UClass*                  Proj                           (Parm)
// int                            Value                          (Parm)

void UGameplayEventsWriter::LogProjectileIntEvent(int EventID, class AController* Player, class UClass* Proj, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogProjectileIntEvent");

	UGameplayEventsWriter_LogProjectileIntEvent_Params params;
	params.EventID = EventID;
	params.Player = Player;
	params.Proj = Proj;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogDamageEvent
// ()
// Parameters:
// int                            EventID                        (Parm)
// class AController*             Player                         (Parm)
// class UClass*                  dmgType                        (Parm)
// class AController*             Target                         (Parm)
// int                            Amount                         (Parm)

void UGameplayEventsWriter::LogDamageEvent(int EventID, class AController* Player, class UClass* dmgType, class AController* Target, int Amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogDamageEvent");

	UGameplayEventsWriter_LogDamageEvent_Params params;
	params.EventID = EventID;
	params.Player = Player;
	params.dmgType = dmgType;
	params.Target = Target;
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogWeaponIntEvent
// ()
// Parameters:
// int                            EventID                        (Parm)
// class AController*             Player                         (Parm)
// class UClass*                  WeaponClass                    (Parm)
// int                            Value                          (Parm)

void UGameplayEventsWriter::LogWeaponIntEvent(int EventID, class AController* Player, class UClass* WeaponClass, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogWeaponIntEvent");

	UGameplayEventsWriter_LogWeaponIntEvent_Params params;
	params.EventID = EventID;
	params.Player = Player;
	params.WeaponClass = WeaponClass;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogPlayerPlayerEvent
// ()
// Parameters:
// int                            EventID                        (Parm)
// class AController*             Player                         (Parm)
// class AController*             Target                         (Parm)

void UGameplayEventsWriter::LogPlayerPlayerEvent(int EventID, class AController* Player, class AController* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogPlayerPlayerEvent");

	UGameplayEventsWriter_LogPlayerPlayerEvent_Params params;
	params.EventID = EventID;
	params.Player = Player;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogPlayerKillDeath
// ()
// Parameters:
// int                            EventID                        (Parm)
// int                            KillType                       (Parm)
// class AController*             Killer                         (Parm)
// class UClass*                  dmgType                        (Parm)
// class AController*             Dead                           (Parm)

void UGameplayEventsWriter::LogPlayerKillDeath(int EventID, int KillType, class AController* Killer, class UClass* dmgType, class AController* Dead)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogPlayerKillDeath");

	UGameplayEventsWriter_LogPlayerKillDeath_Params params;
	params.EventID = EventID;
	params.KillType = KillType;
	params.Killer = Killer;
	params.dmgType = dmgType;
	params.Dead = Dead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogAllPlayerPositionsEvent
// ()
// Parameters:
// int                            EventID                        (Parm)

void UGameplayEventsWriter::LogAllPlayerPositionsEvent(int EventID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogAllPlayerPositionsEvent");

	UGameplayEventsWriter_LogAllPlayerPositionsEvent_Params params;
	params.EventID = EventID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogPlayerLoginChange
// ()
// Parameters:
// int                            EventID                        (Parm)
// class AController*             Player                         (Parm)
// struct FString                 PlayerName                     (Parm, NeedCtorLink)
// struct FUniqueNetId            PlayerID                       (Parm)
// bool                           bSplitScreen                   (Parm)

void UGameplayEventsWriter::LogPlayerLoginChange(int EventID, class AController* Player, const struct FString& PlayerName, const struct FUniqueNetId& PlayerID, bool bSplitScreen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogPlayerLoginChange");

	UGameplayEventsWriter_LogPlayerLoginChange_Params params;
	params.EventID = EventID;
	params.Player = Player;
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;
	params.bSplitScreen = bSplitScreen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogPlayerSpawnEvent
// ()
// Parameters:
// int                            EventID                        (Parm)
// class AController*             Player                         (Parm)
// class UClass*                  PawnClass                      (Parm)
// int                            TeamID                         (Parm)

void UGameplayEventsWriter::LogPlayerSpawnEvent(int EventID, class AController* Player, class UClass* PawnClass, int TeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogPlayerSpawnEvent");

	UGameplayEventsWriter_LogPlayerSpawnEvent_Params params;
	params.EventID = EventID;
	params.Player = Player;
	params.PawnClass = PawnClass;
	params.TeamID = TeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogPlayerStringEvent
// ()
// Parameters:
// int                            EventID                        (Parm)
// class AController*             Player                         (Parm)
// struct FString                 EventString                    (Parm, NeedCtorLink)

void UGameplayEventsWriter::LogPlayerStringEvent(int EventID, class AController* Player, const struct FString& EventString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogPlayerStringEvent");

	UGameplayEventsWriter_LogPlayerStringEvent_Params params;
	params.EventID = EventID;
	params.Player = Player;
	params.EventString = EventString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogPlayerFloatEvent
// ()
// Parameters:
// int                            EventID                        (Parm)
// class AController*             Player                         (Parm)
// float                          Value                          (Parm)

void UGameplayEventsWriter::LogPlayerFloatEvent(int EventID, class AController* Player, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogPlayerFloatEvent");

	UGameplayEventsWriter_LogPlayerFloatEvent_Params params;
	params.EventID = EventID;
	params.Player = Player;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogPlayerIntEvent
// ()
// Parameters:
// int                            EventID                        (Parm)
// class AController*             Player                         (Parm)
// int                            Value                          (Parm)

void UGameplayEventsWriter::LogPlayerIntEvent(int EventID, class AController* Player, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogPlayerIntEvent");

	UGameplayEventsWriter_LogPlayerIntEvent_Params params;
	params.EventID = EventID;
	params.Player = Player;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogTeamStringEvent
// ()
// Parameters:
// int                            EventID                        (Parm)
// class ATeamInfo*               Team                           (Parm)
// struct FString                 Value                          (Parm, NeedCtorLink)

void UGameplayEventsWriter::LogTeamStringEvent(int EventID, class ATeamInfo* Team, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogTeamStringEvent");

	UGameplayEventsWriter_LogTeamStringEvent_Params params;
	params.EventID = EventID;
	params.Team = Team;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogTeamFloatEvent
// ()
// Parameters:
// int                            EventID                        (Parm)
// class ATeamInfo*               Team                           (Parm)
// float                          Value                          (Parm)

void UGameplayEventsWriter::LogTeamFloatEvent(int EventID, class ATeamInfo* Team, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogTeamFloatEvent");

	UGameplayEventsWriter_LogTeamFloatEvent_Params params;
	params.EventID = EventID;
	params.Team = Team;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogTeamIntEvent
// ()
// Parameters:
// int                            EventID                        (Parm)
// class ATeamInfo*               Team                           (Parm)
// int                            Value                          (Parm)

void UGameplayEventsWriter::LogTeamIntEvent(int EventID, class ATeamInfo* Team, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogTeamIntEvent");

	UGameplayEventsWriter_LogTeamIntEvent_Params params;
	params.EventID = EventID;
	params.Team = Team;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogGamePositionEvent
// ()
// Parameters:
// int                            EventID                        (Parm)
// struct FVector                 Position                       (Const, Parm, OutParm)
// float                          Value                          (Parm)

void UGameplayEventsWriter::LogGamePositionEvent(int EventID, float Value, struct FVector* Position)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogGamePositionEvent");

	UGameplayEventsWriter_LogGamePositionEvent_Params params;
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Position != nullptr)
		*Position = params.Position;
}


// Function Engine.GameplayEventsWriter.LogGameFloatEvent
// ()
// Parameters:
// int                            EventID                        (Parm)
// float                          Value                          (Parm)

void UGameplayEventsWriter::LogGameFloatEvent(int EventID, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogGameFloatEvent");

	UGameplayEventsWriter_LogGameFloatEvent_Params params;
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogGameStringEvent
// ()
// Parameters:
// int                            EventID                        (Parm)
// struct FString                 Value                          (Parm, NeedCtorLink)

void UGameplayEventsWriter::LogGameStringEvent(int EventID, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogGameStringEvent");

	UGameplayEventsWriter_LogGameStringEvent_Params params;
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogGameIntEvent
// ()
// Parameters:
// int                            EventID                        (Parm)
// int                            Value                          (Parm)

void UGameplayEventsWriter::LogGameIntEvent(int EventID, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogGameIntEvent");

	UGameplayEventsWriter_LogGameIntEvent_Params params;
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.GetGameTypeId
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UGameplayEventsWriter::GetGameTypeId()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.GetGameTypeId");

	UGameplayEventsWriter_GetGameTypeId_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsWriter.Poll
// ()

void UGameplayEventsWriter::Poll()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.Poll");

	UGameplayEventsWriter_Poll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.SerializeFooter
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameplayEventsWriter::SerializeFooter()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.SerializeFooter");

	UGameplayEventsWriter_SerializeFooter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsWriter.SerializeHeader
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameplayEventsWriter::SerializeHeader()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.SerializeHeader");

	UGameplayEventsWriter_SerializeHeader_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsWriter.CloseStatsFile
// ()

void UGameplayEventsWriter::CloseStatsFile()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.CloseStatsFile");

	UGameplayEventsWriter_CloseStatsFile_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.OpenStatsFile
// ()
// Parameters:
// struct FString                 Filename                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameplayEventsWriter::OpenStatsFile(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.OpenStatsFile");

	UGameplayEventsWriter_OpenStatsFile_Params params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsWriter.IsSessionInProgress
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameplayEventsWriter::IsSessionInProgress()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.IsSessionInProgress");

	UGameplayEventsWriter_IsSessionInProgress_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsWriter.EndLogging
// ()

void UGameplayEventsWriter::EndLogging()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.EndLogging");

	UGameplayEventsWriter_EndLogging_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.ResetLogging
// ()
// Parameters:
// float                          HeartbeatDelta                 (OptionalParm, Parm)

void UGameplayEventsWriter::ResetLogging(float HeartbeatDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.ResetLogging");

	UGameplayEventsWriter_ResetLogging_Params params;
	params.HeartbeatDelta = HeartbeatDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.StartLogging
// ()
// Parameters:
// float                          HeartbeatDelta                 (OptionalParm, Parm)

void UGameplayEventsWriter::StartLogging(float HeartbeatDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.StartLogging");

	UGameplayEventsWriter_StartLogging_Params params;
	params.HeartbeatDelta = HeartbeatDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.ResolvePlayerIndex
// ()
// Parameters:
// class AController*             Player                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UGameplayEventsWriter::ResolvePlayerIndex(class AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.ResolvePlayerIndex");

	UGameplayEventsWriter_ResolvePlayerIndex_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsHandler.RemoveFilter
// ()
// Parameters:
// int                            EventID                        (Parm)

void UGameplayEventsHandler::RemoveFilter(int EventID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsHandler.RemoveFilter");

	UGameplayEventsHandler_RemoveFilter_Params params;
	params.EventID = EventID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsHandler.AddFilter
// ()
// Parameters:
// int                            EventID                        (Parm)

void UGameplayEventsHandler::AddFilter(int EventID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsHandler.AddFilter");

	UGameplayEventsHandler_AddFilter_Params params;
	params.EventID = EventID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsHandler.ResolveGroupFilters
// ()

void UGameplayEventsHandler::ResolveGroupFilters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsHandler.ResolveGroupFilters");

	UGameplayEventsHandler_ResolveGroupFilters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsHandler.PostProcessStream
// ()

void UGameplayEventsHandler::PostProcessStream()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsHandler.PostProcessStream");

	UGameplayEventsHandler_PostProcessStream_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsHandler.PreProcessStream
// ()

void UGameplayEventsHandler::PreProcessStream()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsHandler.PreProcessStream");

	UGameplayEventsHandler_PreProcessStream_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsHandler.SetReader
// ()
// Parameters:
// class UGameplayEventsReader*   NewReader                      (Parm)

void UGameplayEventsHandler::SetReader(class UGameplayEventsReader* NewReader)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsHandler.SetReader");

	UGameplayEventsHandler_SetReader_Params params;
	params.NewReader = NewReader;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.DebugSetUISystemEnabled
// ()
// Parameters:
// bool                           bOldUISystemActive             (Parm)
// bool                           bGFxUISystemActive             (Parm)

void UGameViewportClient::DebugSetUISystemEnabled(bool bOldUISystemActive, bool bGFxUISystemActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DebugSetUISystemEnabled");

	UGameViewportClient_DebugSetUISystemEnabled_Params params;
	params.bOldUISystemActive = bOldUISystemActive;
	params.bGFxUISystemActive = bGFxUISystemActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.BecomePrimaryPlayer
// ()
// Parameters:
// int                            PlayerIndex                    (Parm)

void UGameViewportClient::BecomePrimaryPlayer(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.BecomePrimaryPlayer");

	UGameViewportClient_BecomePrimaryPlayer_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.OnPrimaryPlayerSwitch
// ()
// Parameters:
// class ULocalPlayer*            OldPrimaryPlayer               (Parm)
// class ULocalPlayer*            NewPrimaryPlayer               (Parm)

void UGameViewportClient::OnPrimaryPlayerSwitch(class ULocalPlayer* OldPrimaryPlayer, class ULocalPlayer* NewPrimaryPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.OnPrimaryPlayerSwitch");

	UGameViewportClient_OnPrimaryPlayerSwitch_Params params;
	params.OldPrimaryPlayer = OldPrimaryPlayer;
	params.NewPrimaryPlayer = NewPrimaryPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.FixupOwnerReferences
// ()

void UGameViewportClient::FixupOwnerReferences()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.FixupOwnerReferences");

	UGameViewportClient_FixupOwnerReferences_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.GetPlayerOwner
// ()
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            ReturnValue                    (Parm, OutParm, ReturnParm)

class ULocalPlayer* UGameViewportClient::GetPlayerOwner(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetPlayerOwner");

	UGameViewportClient_GetPlayerOwner_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.ClearProgressMessages
// ()

void UGameViewportClient::ClearProgressMessages()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.ClearProgressMessages");

	UGameViewportClient_ClearProgressMessages_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.SetProgressTime
// ()
// Parameters:
// float                          T                              (Parm)

void UGameViewportClient::SetProgressTime(float T)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetProgressTime");

	UGameViewportClient_SetProgressTime_Params params;
	params.T = T;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.NotifyConnectionError
// ()
// Parameters:
// TEnumAsByte<EProgressMessageType> MessageType                    (Parm)
// struct FString                 Message                        (OptionalParm, Parm, NeedCtorLink)
// struct FString                 Title                          (OptionalParm, Parm, NeedCtorLink)

void UGameViewportClient::NotifyConnectionError(TEnumAsByte<EProgressMessageType> MessageType, const struct FString& Message, const struct FString& Title)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.NotifyConnectionError");

	UGameViewportClient_NotifyConnectionError_Params params;
	params.MessageType = MessageType;
	params.Message = Message;
	params.Title = Title;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.SetProgressMessage
// ()
// Parameters:
// TEnumAsByte<EProgressMessageType> MessageType                    (Parm)
// struct FString                 Message                        (Parm, NeedCtorLink)
// struct FString                 Title                          (OptionalParm, Parm, NeedCtorLink)
// bool                           bIgnoreFutureNetworkMessages   (OptionalParm, Parm)

void UGameViewportClient::SetProgressMessage(TEnumAsByte<EProgressMessageType> MessageType, const struct FString& Message, const struct FString& Title, bool bIgnoreFutureNetworkMessages)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetProgressMessage");

	UGameViewportClient_SetProgressMessage_Params params;
	params.MessageType = MessageType;
	params.Message = Message;
	params.Title = Title;
	params.bIgnoreFutureNetworkMessages = bIgnoreFutureNetworkMessages;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.RemoveLocalPlayer
// ()
// Parameters:
// class ULocalPlayer*            ExistingPlayer                 (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UGameViewportClient::RemoveLocalPlayer(class ULocalPlayer* ExistingPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.RemoveLocalPlayer");

	UGameViewportClient_RemoveLocalPlayer_Params params;
	params.ExistingPlayer = ExistingPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.AddLocalPlayer
// ()
// Parameters:
// class ULocalPlayer*            NewPlayer                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UGameViewportClient::AddLocalPlayer(class ULocalPlayer* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.AddLocalPlayer");

	UGameViewportClient_AddLocalPlayer_Params params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.NotifyPlayerRemoved
// ()
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            RemovedPlayer                  (Parm)

void UGameViewportClient::NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.NotifyPlayerRemoved");

	UGameViewportClient_NotifyPlayerRemoved_Params params;
	params.PlayerIndex = PlayerIndex;
	params.RemovedPlayer = RemovedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.NotifyPlayerAdded
// ()
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            AddedPlayer                    (Parm)

void UGameViewportClient::NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.NotifyPlayerAdded");

	UGameViewportClient_NotifyPlayerAdded_Params params;
	params.PlayerIndex = PlayerIndex;
	params.AddedPlayer = AddedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.DrawTransitionMessage
// ()
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// struct FString                 Message                        (Parm, NeedCtorLink)

void UGameViewportClient::DrawTransitionMessage(class UCanvas* Canvas, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DrawTransitionMessage");

	UGameViewportClient_DrawTransitionMessage_Params params;
	params.Canvas = Canvas;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.DrawTransition
// ()
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void UGameViewportClient::DrawTransition(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DrawTransition");

	UGameViewportClient_DrawTransition_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.DisplayProgressMessage
// ()
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void UGameViewportClient::DisplayProgressMessage(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DisplayProgressMessage");

	UGameViewportClient_DisplayProgressMessage_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.PostRender
// ()
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void UGameViewportClient::PostRender(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.PostRender");

	UGameViewportClient_PostRender_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.DrawTitleSafeArea
// ()
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void UGameViewportClient::DrawTitleSafeArea(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DrawTitleSafeArea");

	UGameViewportClient_DrawTitleSafeArea_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.Tick
// ()
// Parameters:
// float                          DeltaTime                      (Parm)

void UGameViewportClient::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.Tick");

	UGameViewportClient_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.CalculateDeadZoneForAllSides
// ()
// Parameters:
// class ULocalPlayer*            LPlayer                        (Parm)
// class UCanvas*                 Canvas                         (Parm)
// float                          fTopSafeZone                   (Parm, OutParm)
// float                          fBottomSafeZone                (Parm, OutParm)
// float                          fLeftSafeZone                  (Parm, OutParm)
// float                          fRightSafeZone                 (Parm, OutParm)
// bool                           bUseMaxPercent                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::CalculateDeadZoneForAllSides(class ULocalPlayer* LPlayer, class UCanvas* Canvas, bool bUseMaxPercent, float* fTopSafeZone, float* fBottomSafeZone, float* fLeftSafeZone, float* fRightSafeZone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.CalculateDeadZoneForAllSides");

	UGameViewportClient_CalculateDeadZoneForAllSides_Params params;
	params.LPlayer = LPlayer;
	params.Canvas = Canvas;
	params.bUseMaxPercent = bUseMaxPercent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fTopSafeZone != nullptr)
		*fTopSafeZone = params.fTopSafeZone;
	if (fBottomSafeZone != nullptr)
		*fBottomSafeZone = params.fBottomSafeZone;
	if (fLeftSafeZone != nullptr)
		*fLeftSafeZone = params.fLeftSafeZone;
	if (fRightSafeZone != nullptr)
		*fRightSafeZone = params.fRightSafeZone;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.CalculateSafeZoneValues
// ()
// Parameters:
// float                          out_Horizontal                 (Parm, OutParm)
// float                          out_Vertical                   (Parm, OutParm)
// class UCanvas*                 Canvas                         (Parm)
// int                            LocalPlayerIndex               (Parm)
// bool                           bUseMaxPercent                 (Parm)

void UGameViewportClient::CalculateSafeZoneValues(class UCanvas* Canvas, int LocalPlayerIndex, bool bUseMaxPercent, float* out_Horizontal, float* out_Vertical)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.CalculateSafeZoneValues");

	UGameViewportClient_CalculateSafeZoneValues_Params params;
	params.Canvas = Canvas;
	params.LocalPlayerIndex = LocalPlayerIndex;
	params.bUseMaxPercent = bUseMaxPercent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Horizontal != nullptr)
		*out_Horizontal = params.out_Horizontal;
	if (out_Vertical != nullptr)
		*out_Vertical = params.out_Vertical;
}


// Function Engine.GameViewportClient.GetPixelSizeOfScreen
// ()
// Parameters:
// float                          out_Width                      (Parm, OutParm)
// float                          out_Height                     (Parm, OutParm)
// class UCanvas*                 Canvas                         (Parm)
// int                            LocalPlayerIndex               (Parm)

void UGameViewportClient::GetPixelSizeOfScreen(class UCanvas* Canvas, int LocalPlayerIndex, float* out_Width, float* out_Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetPixelSizeOfScreen");

	UGameViewportClient_GetPixelSizeOfScreen_Params params;
	params.Canvas = Canvas;
	params.LocalPlayerIndex = LocalPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Width != nullptr)
		*out_Width = params.out_Width;
	if (out_Height != nullptr)
		*out_Height = params.out_Height;
}


// Function Engine.GameViewportClient.HasRightSafeZone
// ()
// Parameters:
// int                            LocalPlayerIndex               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::HasRightSafeZone(int LocalPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HasRightSafeZone");

	UGameViewportClient_HasRightSafeZone_Params params;
	params.LocalPlayerIndex = LocalPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.HasLeftSafeZone
// ()
// Parameters:
// int                            LocalPlayerIndex               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::HasLeftSafeZone(int LocalPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HasLeftSafeZone");

	UGameViewportClient_HasLeftSafeZone_Params params;
	params.LocalPlayerIndex = LocalPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.HasBottomSafeZone
// ()
// Parameters:
// int                            LocalPlayerIndex               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::HasBottomSafeZone(int LocalPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HasBottomSafeZone");

	UGameViewportClient_HasBottomSafeZone_Params params;
	params.LocalPlayerIndex = LocalPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.HasTopSafeZone
// ()
// Parameters:
// int                            LocalPlayerIndex               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::HasTopSafeZone(int LocalPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HasTopSafeZone");

	UGameViewportClient_HasTopSafeZone_Params params;
	params.LocalPlayerIndex = LocalPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.ConvertLocalPlayerToGamePlayerIndex
// ()
// Parameters:
// class ULocalPlayer*            LPlayer                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UGameViewportClient::ConvertLocalPlayerToGamePlayerIndex(class ULocalPlayer* LPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.ConvertLocalPlayerToGamePlayerIndex");

	UGameViewportClient_ConvertLocalPlayerToGamePlayerIndex_Params params;
	params.LPlayer = LPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.GetSubtitleRegion
// ()
// Parameters:
// struct FVector2D               MinPos                         (Parm, OutParm)
// struct FVector2D               MaxPos                         (Parm, OutParm)

void UGameViewportClient::GetSubtitleRegion(struct FVector2D* MinPos, struct FVector2D* MaxPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetSubtitleRegion");

	UGameViewportClient_GetSubtitleRegion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MinPos != nullptr)
		*MinPos = params.MinPos;
	if (MaxPos != nullptr)
		*MaxPos = params.MaxPos;
}


// Function Engine.GameViewportClient.LayoutPlayers
// ()

void UGameViewportClient::LayoutPlayers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.LayoutPlayers");

	UGameViewportClient_LayoutPlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.UpdateActiveSplitscreenType
// ()

void UGameViewportClient::UpdateActiveSplitscreenType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.UpdateActiveSplitscreenType");

	UGameViewportClient_UpdateActiveSplitscreenType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.GetSplitscreenConfiguration
// ()
// Parameters:
// TEnumAsByte<ESplitScreenType>  ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ESplitScreenType> UGameViewportClient::GetSplitscreenConfiguration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetSplitscreenConfiguration");

	UGameViewportClient_GetSplitscreenConfiguration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.SetSplitscreenConfiguration
// ()
// Parameters:
// TEnumAsByte<ESplitScreenType>  SplitType                      (Parm)

void UGameViewportClient::SetSplitscreenConfiguration(TEnumAsByte<ESplitScreenType> SplitType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetSplitscreenConfiguration");

	UGameViewportClient_SetSplitscreenConfiguration_Params params;
	params.SplitType = SplitType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.GameSessionEnded
// ()

void UGameViewportClient::GameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GameSessionEnded");

	UGameViewportClient_GameSessionEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.InsertInteraction
// ()
// Parameters:
// class UInteraction*            NewInteraction                 (Parm)
// int                            InIndex                        (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UGameViewportClient::InsertInteraction(class UInteraction* NewInteraction, int InIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.InsertInteraction");

	UGameViewportClient_InsertInteraction_Params params;
	params.NewInteraction = NewInteraction;
	params.InIndex = InIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.CreateInitialPlayer
// ()
// Parameters:
// struct FString                 OutError                       (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::CreateInitialPlayer(struct FString* OutError)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.CreateInitialPlayer");

	UGameViewportClient_CreateInitialPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutError != nullptr)
		*OutError = params.OutError;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.Init
// ()
// Parameters:
// struct FString                 OutError                       (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::Init(struct FString* OutError)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.Init");

	UGameViewportClient_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutError != nullptr)
		*OutError = params.OutError;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.FindPlayerByControllerId
// ()
// Parameters:
// int                            ControllerId                   (Parm)
// class ULocalPlayer*            ReturnValue                    (Parm, OutParm, ReturnParm)

class ULocalPlayer* UGameViewportClient::FindPlayerByControllerId(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.FindPlayerByControllerId");

	UGameViewportClient_FindPlayerByControllerId_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.RemovePlayer
// ()
// Parameters:
// class ULocalPlayer*            ExPlayer                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::RemovePlayer(class ULocalPlayer* ExPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.RemovePlayer");

	UGameViewportClient_RemovePlayer_Params params;
	params.ExPlayer = ExPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.CreatePlayer
// ()
// Parameters:
// int                            ControllerId                   (Parm)
// struct FString                 OutError                       (Parm, OutParm, NeedCtorLink)
// bool                           bSpawnActor                    (Parm)
// class ULocalPlayer*            ReturnValue                    (Parm, OutParm, ReturnParm)

class ULocalPlayer* UGameViewportClient::CreatePlayer(int ControllerId, bool bSpawnActor, struct FString* OutError)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.CreatePlayer");

	UGameViewportClient_CreatePlayer_Params params;
	params.ControllerId = ControllerId;
	params.bSpawnActor = bSpawnActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutError != nullptr)
		*OutError = params.OutError;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.SetCustomInteractionObject
// ()
// Parameters:
// class UInteraction*            InInteraction                  (Parm)

void UGameViewportClient::SetCustomInteractionObject(class UInteraction* InInteraction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetCustomInteractionObject");

	UGameViewportClient_SetCustomInteractionObject_Params params;
	params.InInteraction = InInteraction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.GetCustomInteractionClass
// ()
// Parameters:
// int                            InIndex                        (Parm)
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* UGameViewportClient::GetCustomInteractionClass(int InIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetCustomInteractionClass");

	UGameViewportClient_GetCustomInteractionClass_Params params;
	params.InIndex = InIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.GetNumCustomInteractions
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UGameViewportClient::GetNumCustomInteractions()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetNumCustomInteractions");

	UGameViewportClient_GetNumCustomInteractions_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.ShouldForceFullscreenViewport
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::ShouldForceFullscreenViewport()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.ShouldForceFullscreenViewport");

	UGameViewportClient_ShouldForceFullscreenViewport_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.IsFullScreenViewport
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::IsFullScreenViewport()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.IsFullScreenViewport");

	UGameViewportClient_IsFullScreenViewport_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.GetViewportSize
// ()
// Parameters:
// struct FVector2D               out_ViewportSize               (Parm, OutParm)

void UGameViewportClient::GetViewportSize(struct FVector2D* out_ViewportSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetViewportSize");

	UGameViewportClient_GetViewportSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ViewportSize != nullptr)
		*out_ViewportSize = params.out_ViewportSize;
}


// Function Engine.GameViewportClient.ConsoleCommand
// ()
// Parameters:
// struct FString                 Command                        (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UGameViewportClient::ConsoleCommand(const struct FString& Command)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.ConsoleCommand");

	UGameViewportClient_ConsoleCommand_Params params;
	params.Command = Command;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.HandleInputChar
// ()
// Parameters:
// int                            ControllerId                   (Parm)
// struct FString                 Unicode                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::HandleInputChar(int ControllerId, const struct FString& Unicode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HandleInputChar");

	UGameViewportClient_HandleInputChar_Params params;
	params.ControllerId = ControllerId;
	params.Unicode = Unicode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.HandleInputAxis
// ()
// Parameters:
// int                            ControllerId                   (Parm)
// struct FName                   Key                            (Parm)
// float                          Delta                          (Parm)
// float                          DeltaTime                      (Parm)
// bool                           bGamepad                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::HandleInputAxis(int ControllerId, const struct FName& Key, float Delta, float DeltaTime, bool bGamepad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HandleInputAxis");

	UGameViewportClient_HandleInputAxis_Params params;
	params.ControllerId = ControllerId;
	params.Key = Key;
	params.Delta = Delta;
	params.DeltaTime = DeltaTime;
	params.bGamepad = bGamepad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.HandleInputKey
// ()
// Parameters:
// int                            ControllerId                   (Parm)
// struct FName                   Key                            (Parm)
// TEnumAsByte<EInputEvent>       EventType                      (Parm)
// float                          AmountDepressed                (Parm)
// bool                           bGamepad                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::HandleInputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> EventType, float AmountDepressed, bool bGamepad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HandleInputKey");

	UGameViewportClient_HandleInputKey_Params params;
	params.ControllerId = ControllerId;
	params.Key = Key;
	params.EventType = EventType;
	params.AmountDepressed = AmountDepressed;
	params.bGamepad = bGamepad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GenericParamListStatEntry.CommitToDisk
// ()

void UGenericParamListStatEntry::CommitToDisk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.CommitToDisk");

	UGenericParamListStatEntry_CommitToDisk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GenericParamListStatEntry.GetString
// ()
// Parameters:
// struct FName                   ParamName                      (Parm)
// struct FString                 out_string                     (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGenericParamListStatEntry::GetString(const struct FName& ParamName, struct FString* out_string)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.GetString");

	UGenericParamListStatEntry_GetString_Params params;
	params.ParamName = ParamName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_string != nullptr)
		*out_string = params.out_string;

	return params.ReturnValue;
}


// Function Engine.GenericParamListStatEntry.GetVector
// ()
// Parameters:
// struct FName                   ParamName                      (Parm)
// struct FVector                 out_vector                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGenericParamListStatEntry::GetVector(const struct FName& ParamName, struct FVector* out_vector)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.GetVector");

	UGenericParamListStatEntry_GetVector_Params params;
	params.ParamName = ParamName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_vector != nullptr)
		*out_vector = params.out_vector;

	return params.ReturnValue;
}


// Function Engine.GenericParamListStatEntry.GetInt
// ()
// Parameters:
// struct FName                   ParamName                      (Parm)
// int                            out_int                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGenericParamListStatEntry::GetInt(const struct FName& ParamName, int* out_int)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.GetInt");

	UGenericParamListStatEntry_GetInt_Params params;
	params.ParamName = ParamName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_int != nullptr)
		*out_int = params.out_int;

	return params.ReturnValue;
}


// Function Engine.GenericParamListStatEntry.GetFloat
// ()
// Parameters:
// struct FName                   ParamName                      (Parm)
// float                          out_Float                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGenericParamListStatEntry::GetFloat(const struct FName& ParamName, float* out_Float)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.GetFloat");

	UGenericParamListStatEntry_GetFloat_Params params;
	params.ParamName = ParamName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Float != nullptr)
		*out_Float = params.out_Float;

	return params.ReturnValue;
}


// Function Engine.GenericParamListStatEntry.AddString
// ()
// Parameters:
// struct FName                   ParamName                      (Parm)
// struct FString                 Value                          (Parm, CoerceParm, NeedCtorLink)

void UGenericParamListStatEntry::AddString(const struct FName& ParamName, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.AddString");

	UGenericParamListStatEntry_AddString_Params params;
	params.ParamName = ParamName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GenericParamListStatEntry.AddVector
// ()
// Parameters:
// struct FName                   ParamName                      (Parm)
// struct FVector                 Value                          (Parm)

void UGenericParamListStatEntry::AddVector(const struct FName& ParamName, const struct FVector& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.AddVector");

	UGenericParamListStatEntry_AddVector_Params params;
	params.ParamName = ParamName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GenericParamListStatEntry.AddInt
// ()
// Parameters:
// struct FName                   ParamName                      (Parm)
// int                            Value                          (Parm)

void UGenericParamListStatEntry::AddInt(const struct FName& ParamName, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.AddInt");

	UGenericParamListStatEntry_AddInt_Params params;
	params.ParamName = ParamName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GenericParamListStatEntry.AddFloat
// ()
// Parameters:
// struct FName                   ParamName                      (Parm)
// float                          Value                          (Parm)

void UGenericParamListStatEntry::AddFloat(const struct FName& ParamName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.AddFloat");

	UGenericParamListStatEntry_AddFloat_Params params;
	params.ParamName = ParamName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.UpdateLocFileName
// ()
// Parameters:
// struct FString                 Filename                       (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UIniLocPatcher::UpdateLocFileName(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.UpdateLocFileName");

	UIniLocPatcher_UpdateLocFileName_Params params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.IniLocPatcher.ClearCachedFiles
// ()

void UIniLocPatcher::ClearCachedFiles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.ClearCachedFiles");

	UIniLocPatcher_ClearCachedFiles_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.ClearReadFileDelegate
// ()
// Parameters:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  (Parm, NeedCtorLink)

void UIniLocPatcher::ClearReadFileDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.ClearReadFileDelegate");

	UIniLocPatcher_ClearReadFileDelegate_Params params;
	params.ReadTitleFileCompleteDelegate = ReadTitleFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.AddReadFileDelegate
// ()
// Parameters:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  (Parm, NeedCtorLink)

void UIniLocPatcher::AddReadFileDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.AddReadFileDelegate");

	UIniLocPatcher_AddReadFileDelegate_Params params;
	params.ReadTitleFileCompleteDelegate = ReadTitleFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.AddFileToDownload
// ()
// Parameters:
// struct FString                 Filename                       (Parm, NeedCtorLink)

void UIniLocPatcher::AddFileToDownload(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.AddFileToDownload");

	UIniLocPatcher_AddFileToDownload_Params params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.ProcessIniLocFile
// ()
// Parameters:
// struct FString                 Filename                       (Parm, NeedCtorLink)
// TArray<unsigned char>          FileData                       (Const, Parm, OutParm, NeedCtorLink)

void UIniLocPatcher::ProcessIniLocFile(const struct FString& Filename, TArray<unsigned char>* FileData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.ProcessIniLocFile");

	UIniLocPatcher_ProcessIniLocFile_Params params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FileData != nullptr)
		*FileData = params.FileData;
}


// Function Engine.IniLocPatcher.OnReadFileComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)
// struct FString                 Filename                       (Parm, NeedCtorLink)

void UIniLocPatcher::OnReadFileComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.OnReadFileComplete");

	UIniLocPatcher_OnReadFileComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.DownloadFiles
// ()

void UIniLocPatcher::DownloadFiles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.DownloadFiles");

	UIniLocPatcher_DownloadFiles_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.Init
// ()

void UIniLocPatcher::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.Init");

	UIniLocPatcher_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.OnReadTitleFileComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)
// struct FString                 Filename                       (Parm, NeedCtorLink)

void UIniLocPatcher::OnReadTitleFileComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.OnReadTitleFileComplete");

	UIniLocPatcher_OnReadTitleFileComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interface_NavigationHandle.NotifyPathChanged
// ()

void UInterface_NavigationHandle::NotifyPathChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interface_NavigationHandle.NotifyPathChanged");

	UInterface_NavigationHandle_NotifyPathChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interface_Speaker.Speak
// ()
// Parameters:
// class USoundCue*               Cue                            (Parm)

void UInterface_Speaker::Speak(class USoundCue* Cue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interface_Speaker.Speak");

	UInterface_Speaker_Speak_Params params;
	params.Cue = Cue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JsonObject.DecodeJson
// ()
// Parameters:
// struct FString                 Str                            (Const, Parm, NeedCtorLink)
// class UJsonObject*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UJsonObject* UJsonObject::DecodeJson(const struct FString& Str)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.DecodeJson");

	UJsonObject_DecodeJson_Params params;
	params.Str = Str;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.JsonObject.EncodeJson
// ()
// Parameters:
// class UJsonObject*             Root                           (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UJsonObject::EncodeJson(class UJsonObject* Root)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.EncodeJson");

	UJsonObject_EncodeJson_Params params;
	params.Root = Root;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.JsonObject.SetBoolValue
// ()
// Parameters:
// struct FString                 Key                            (Const, Parm, NeedCtorLink)
// bool                           Value                          (Parm)

void UJsonObject::SetBoolValue(const struct FString& Key, bool Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.SetBoolValue");

	UJsonObject_SetBoolValue_Params params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JsonObject.SetFloatValue
// ()
// Parameters:
// struct FString                 Key                            (Const, Parm, NeedCtorLink)
// float                          Value                          (Parm)

void UJsonObject::SetFloatValue(const struct FString& Key, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.SetFloatValue");

	UJsonObject_SetFloatValue_Params params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JsonObject.SetIntValue
// ()
// Parameters:
// struct FString                 Key                            (Const, Parm, NeedCtorLink)
// int                            Value                          (Parm)

void UJsonObject::SetIntValue(const struct FString& Key, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.SetIntValue");

	UJsonObject_SetIntValue_Params params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JsonObject.SetStringValue
// ()
// Parameters:
// struct FString                 Key                            (Const, Parm, NeedCtorLink)
// struct FString                 Value                          (Const, Parm, NeedCtorLink)

void UJsonObject::SetStringValue(const struct FString& Key, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.SetStringValue");

	UJsonObject_SetStringValue_Params params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JsonObject.SetObject
// ()
// Parameters:
// struct FString                 Key                            (Const, Parm, NeedCtorLink)
// class UJsonObject*             Object                         (Parm)

void UJsonObject::SetObject(const struct FString& Key, class UJsonObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.SetObject");

	UJsonObject_SetObject_Params params;
	params.Key = Key;
	params.Object = Object;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JsonObject.GetBoolValue
// ()
// Parameters:
// struct FString                 Key                            (Const, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UJsonObject::GetBoolValue(const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.GetBoolValue");

	UJsonObject_GetBoolValue_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.JsonObject.GetFloatValue
// ()
// Parameters:
// struct FString                 Key                            (Const, Parm, NeedCtorLink)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UJsonObject::GetFloatValue(const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.GetFloatValue");

	UJsonObject_GetFloatValue_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.JsonObject.GetIntValue
// ()
// Parameters:
// struct FString                 Key                            (Const, Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UJsonObject::GetIntValue(const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.GetIntValue");

	UJsonObject_GetIntValue_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.JsonObject.GetStringValue
// ()
// Parameters:
// struct FString                 Key                            (Const, Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UJsonObject::GetStringValue(const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.GetStringValue");

	UJsonObject_GetStringValue_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.JsonObject.GetObject
// ()
// Parameters:
// struct FString                 Key                            (Const, Parm, NeedCtorLink)
// class UJsonObject*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UJsonObject* UJsonObject::GetObject(const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.GetObject");

	UJsonObject_GetObject_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Surface.GetSurfaceHeight
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USurface::GetSurfaceHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Surface.GetSurfaceHeight");

	USurface_GetSurfaceHeight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Surface.GetSurfaceWidth
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USurface::GetSurfaceWidth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Surface.GetSurfaceWidth");

	USurface_GetSurfaceWidth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.SetForceMipLevelsToBeResident
// ()
// Parameters:
// bool                           OverrideForceMiplevelsToBeResident (Parm)
// bool                           bForceMiplevelsToBeResidentValue (Parm)
// float                          ForceDuration                  (Parm)
// int                            CinematicTextureGroups         (OptionalParm, Parm)

void UMaterialInterface::SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.SetForceMipLevelsToBeResident");

	UMaterialInterface_SetForceMipLevelsToBeResident_Params params;
	params.OverrideForceMiplevelsToBeResident = OverrideForceMiplevelsToBeResident;
	params.bForceMiplevelsToBeResidentValue = bForceMiplevelsToBeResidentValue;
	params.ForceDuration = ForceDuration;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInterface.GetVectorCurveParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FInterpCurveVector      OutValue                       (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaterialInterface::GetVectorCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveVector* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetVectorCurveParameterValue");

	UMaterialInterface_GetVectorCurveParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetVectorParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FLinearColor            OutValue                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaterialInterface::GetVectorParameterValue(const struct FName& ParameterName, struct FLinearColor* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetVectorParameterValue");

	UMaterialInterface_GetVectorParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetTextureParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class UTexture*                OutValue                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaterialInterface::GetTextureParameterValue(const struct FName& ParameterName, class UTexture** OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetTextureParameterValue");

	UMaterialInterface_GetTextureParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetScalarCurveParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FInterpCurveFloat       OutValue                       (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaterialInterface::GetScalarCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveFloat* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetScalarCurveParameterValue");

	UMaterialInterface_GetScalarCurveParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetScalarParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          OutValue                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaterialInterface::GetScalarParameterValue(const struct FName& ParameterName, float* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetScalarParameterValue");

	UMaterialInterface_GetScalarParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetFontParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class UFont*                   OutFontValue                   (Parm, OutParm)
// int                            OutFontPage                    (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaterialInterface::GetFontParameterValue(const struct FName& ParameterName, class UFont** OutFontValue, int* OutFontPage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetFontParameterValue");

	UMaterialInterface_GetFontParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutFontValue != nullptr)
		*OutFontValue = params.OutFontValue;
	if (OutFontPage != nullptr)
		*OutFontPage = params.OutFontPage;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetParameterDesc
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FString                 OutDesc                        (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaterialInterface::GetParameterDesc(const struct FName& ParameterName, struct FString* OutDesc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetParameterDesc");

	UMaterialInterface_GetParameterDesc_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutDesc != nullptr)
		*OutDesc = params.OutDesc;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetPhysicalMaterial
// ()
// Parameters:
// class UPhysicalMaterial*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UPhysicalMaterial* UMaterialInterface::GetPhysicalMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetPhysicalMaterial");

	UMaterialInterface_GetPhysicalMaterial_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetMaterial
// ()
// Parameters:
// class UMaterial*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UMaterial* UMaterialInterface::GetMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetMaterial");

	UMaterialInterface_GetMaterial_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineMatchmakingStats.StopTimer
// ()
// Parameters:
// struct FMMStats_Timer          Timer                          (Parm, OutParm)

void UOnlineMatchmakingStats::StopTimer(struct FMMStats_Timer* Timer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMatchmakingStats.StopTimer");

	UOnlineMatchmakingStats_StopTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Timer != nullptr)
		*Timer = params.Timer;
}


// Function Engine.OnlineMatchmakingStats.StartTimer
// ()
// Parameters:
// struct FMMStats_Timer          Timer                          (Parm, OutParm)

void UOnlineMatchmakingStats::StartTimer(struct FMMStats_Timer* Timer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMatchmakingStats.StartTimer");

	UOnlineMatchmakingStats_StartTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Timer != nullptr)
		*Timer = params.Timer;
}


// Function Engine.OnlinePlayerStorage.SetDefaultVersionNumber
// ()

void UOnlinePlayerStorage::SetDefaultVersionNumber()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetDefaultVersionNumber");

	UOnlinePlayerStorage_SetDefaultVersionNumber_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerStorage.GetVersionNumber
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UOnlinePlayerStorage::GetVersionNumber()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetVersionNumber");

	UOnlinePlayerStorage_GetVersionNumber_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.AppendVersionToSettings
// ()

void UOnlinePlayerStorage::AppendVersionToSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.AppendVersionToSettings");

	UOnlinePlayerStorage_AppendVersionToSettings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerStorage.SetToDefaults
// ()

void UOnlinePlayerStorage::SetToDefaults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetToDefaults");

	UOnlinePlayerStorage_SetToDefaults_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerStorage.AddSettingFloat
// ()
// Parameters:
// int                            SettingId                      (Parm)

void UOnlinePlayerStorage::AddSettingFloat(int SettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.AddSettingFloat");

	UOnlinePlayerStorage_AddSettingFloat_Params params;
	params.SettingId = SettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerStorage.AddSettingInt
// ()
// Parameters:
// int                            SettingId                      (Parm)

void UOnlinePlayerStorage::AddSettingInt(int SettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.AddSettingInt");

	UOnlinePlayerStorage_AddSettingInt_Params params;
	params.SettingId = SettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerStorage.GetRangedProfileSettingValue
// ()
// Parameters:
// int                            ProfileId                      (Parm)
// float                          OutValue                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerStorage::GetRangedProfileSettingValue(int ProfileId, float* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetRangedProfileSettingValue");

	UOnlinePlayerStorage_GetRangedProfileSettingValue_Params params;
	params.ProfileId = ProfileId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.SetRangedProfileSettingValue
// ()
// Parameters:
// int                            ProfileId                      (Parm)
// float                          NewValue                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerStorage::SetRangedProfileSettingValue(int ProfileId, float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetRangedProfileSettingValue");

	UOnlinePlayerStorage_SetRangedProfileSettingValue_Params params;
	params.ProfileId = ProfileId;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingRange
// ()
// Parameters:
// int                            ProfileId                      (Parm)
// float                          OutMinValue                    (Parm, OutParm)
// float                          OutMaxValue                    (Parm, OutParm)
// float                          RangeIncrement                 (Parm, OutParm)
// unsigned char                  bFormatAsInt                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerStorage::GetProfileSettingRange(int ProfileId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingRange");

	UOnlinePlayerStorage_GetProfileSettingRange_Params params;
	params.ProfileId = ProfileId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutMinValue != nullptr)
		*OutMinValue = params.OutMinValue;
	if (OutMaxValue != nullptr)
		*OutMaxValue = params.OutMaxValue;
	if (RangeIncrement != nullptr)
		*RangeIncrement = params.RangeIncrement;
	if (bFormatAsInt != nullptr)
		*bFormatAsInt = params.bFormatAsInt;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingMappingIds
// ()
// Parameters:
// int                            ProfileId                      (Parm)
// TArray<int>                    Ids                            (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerStorage::GetProfileSettingMappingIds(int ProfileId, TArray<int>* Ids)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingMappingIds");

	UOnlinePlayerStorage_GetProfileSettingMappingIds_Params params;
	params.ProfileId = ProfileId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Ids != nullptr)
		*Ids = params.Ids;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingMappingType
// ()
// Parameters:
// int                            ProfileId                      (Parm)
// TEnumAsByte<EPropertyValueMappingType> OutType                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerStorage::GetProfileSettingMappingType(int ProfileId, TEnumAsByte<EPropertyValueMappingType>* OutType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingMappingType");

	UOnlinePlayerStorage_GetProfileSettingMappingType_Params params;
	params.ProfileId = ProfileId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutType != nullptr)
		*OutType = params.OutType;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.SetProfileSettingValueFloat
// ()
// Parameters:
// int                            ProfileSettingId               (Parm)
// float                          Value                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerStorage::SetProfileSettingValueFloat(int ProfileSettingId, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetProfileSettingValueFloat");

	UOnlinePlayerStorage_SetProfileSettingValueFloat_Params params;
	params.ProfileSettingId = ProfileSettingId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.SetProfileSettingValueInt
// ()
// Parameters:
// int                            ProfileSettingId               (Parm)
// int                            Value                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerStorage::SetProfileSettingValueInt(int ProfileSettingId, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetProfileSettingValueInt");

	UOnlinePlayerStorage_SetProfileSettingValueInt_Params params;
	params.ProfileSettingId = ProfileSettingId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.SetProfileSettingValueId
// ()
// Parameters:
// int                            ProfileSettingId               (Parm)
// int                            Value                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerStorage::SetProfileSettingValueId(int ProfileSettingId, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetProfileSettingValueId");

	UOnlinePlayerStorage_SetProfileSettingValueId_Params params;
	params.ProfileSettingId = ProfileSettingId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingValueFloat
// ()
// Parameters:
// int                            ProfileSettingId               (Parm)
// float                          Value                          (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerStorage::GetProfileSettingValueFloat(int ProfileSettingId, float* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValueFloat");

	UOnlinePlayerStorage_GetProfileSettingValueFloat_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingValueInt
// ()
// Parameters:
// int                            ProfileSettingId               (Parm)
// int                            Value                          (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerStorage::GetProfileSettingValueInt(int ProfileSettingId, int* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValueInt");

	UOnlinePlayerStorage_GetProfileSettingValueInt_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingValueFromListIndex
// ()
// Parameters:
// int                            ProfileSettingId               (Parm)
// int                            ListIndex                      (Parm)
// int                            Value                          (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerStorage::GetProfileSettingValueFromListIndex(int ProfileSettingId, int ListIndex, int* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValueFromListIndex");

	UOnlinePlayerStorage_GetProfileSettingValueFromListIndex_Params params;
	params.ProfileSettingId = ProfileSettingId;
	params.ListIndex = ListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingValueId
// ()
// Parameters:
// int                            ProfileSettingId               (Parm)
// int                            ValueId                        (Parm, OutParm)
// int                            ListIndex                      (OptionalParm, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerStorage::GetProfileSettingValueId(int ProfileSettingId, int* ValueId, int* ListIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValueId");

	UOnlinePlayerStorage_GetProfileSettingValueId_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ValueId != nullptr)
		*ValueId = params.ValueId;
	if (ListIndex != nullptr)
		*ListIndex = params.ListIndex;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.SetProfileSettingValue
// ()
// Parameters:
// int                            ProfileSettingId               (Parm)
// struct FString                 NewValue                       (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerStorage::SetProfileSettingValue(int ProfileSettingId, struct FString* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetProfileSettingValue");

	UOnlinePlayerStorage_SetProfileSettingValue_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.SetProfileSettingValueByName
// ()
// Parameters:
// struct FName                   ProfileSettingName             (Parm)
// struct FString                 NewValue                       (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerStorage::SetProfileSettingValueByName(const struct FName& ProfileSettingName, struct FString* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetProfileSettingValueByName");

	UOnlinePlayerStorage_SetProfileSettingValueByName_Params params;
	params.ProfileSettingName = ProfileSettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingValueByName
// ()
// Parameters:
// struct FName                   ProfileSettingName             (Parm)
// struct FString                 Value                          (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerStorage::GetProfileSettingValueByName(const struct FName& ProfileSettingName, struct FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValueByName");

	UOnlinePlayerStorage_GetProfileSettingValueByName_Params params;
	params.ProfileSettingName = ProfileSettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingValues
// ()
// Parameters:
// int                            ProfileSettingId               (Parm)
// TArray<struct FName>           Values                         (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerStorage::GetProfileSettingValues(int ProfileSettingId, TArray<struct FName>* Values)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValues");

	UOnlinePlayerStorage_GetProfileSettingValues_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Values != nullptr)
		*Values = params.Values;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingValueName
// ()
// Parameters:
// int                            ProfileSettingId               (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UOnlinePlayerStorage::GetProfileSettingValueName(int ProfileSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValueName");

	UOnlinePlayerStorage_GetProfileSettingValueName_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingValue
// ()
// Parameters:
// int                            ProfileSettingId               (Parm)
// struct FString                 Value                          (Parm, OutParm, NeedCtorLink)
// int                            ValueMapID                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerStorage::GetProfileSettingValue(int ProfileSettingId, int ValueMapID, struct FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValue");

	UOnlinePlayerStorage_GetProfileSettingValue_Params params;
	params.ProfileSettingId = ProfileSettingId;
	params.ValueMapID = ValueMapID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.IsProfileSettingIdMapped
// ()
// Parameters:
// int                            ProfileSettingId               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerStorage::IsProfileSettingIdMapped(int ProfileSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.IsProfileSettingIdMapped");

	UOnlinePlayerStorage_IsProfileSettingIdMapped_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.FindDefaultProfileMappingIndexByName
// ()
// Parameters:
// struct FName                   ProfileSettingName             (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UOnlinePlayerStorage::FindDefaultProfileMappingIndexByName(const struct FName& ProfileSettingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.FindDefaultProfileMappingIndexByName");

	UOnlinePlayerStorage_FindDefaultProfileMappingIndexByName_Params params;
	params.ProfileSettingName = ProfileSettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.FindProfileMappingIndexByName
// ()
// Parameters:
// struct FName                   ProfileSettingName             (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UOnlinePlayerStorage::FindProfileMappingIndexByName(const struct FName& ProfileSettingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.FindProfileMappingIndexByName");

	UOnlinePlayerStorage_FindProfileMappingIndexByName_Params params;
	params.ProfileSettingName = ProfileSettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.FindProfileMappingIndex
// ()
// Parameters:
// int                            ProfileSettingId               (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UOnlinePlayerStorage::FindProfileMappingIndex(int ProfileSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.FindProfileMappingIndex");

	UOnlinePlayerStorage_FindProfileMappingIndex_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.FindProfileSettingIndex
// ()
// Parameters:
// int                            ProfileSettingId               (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UOnlinePlayerStorage::FindProfileSettingIndex(int ProfileSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.FindProfileSettingIndex");

	UOnlinePlayerStorage_FindProfileSettingIndex_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingColumnHeader
// ()
// Parameters:
// int                            ProfileSettingId               (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UOnlinePlayerStorage::GetProfileSettingColumnHeader(int ProfileSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingColumnHeader");

	UOnlinePlayerStorage_GetProfileSettingColumnHeader_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingName
// ()
// Parameters:
// int                            ProfileSettingId               (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UOnlinePlayerStorage::GetProfileSettingName(int ProfileSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingName");

	UOnlinePlayerStorage_GetProfileSettingName_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingId
// ()
// Parameters:
// struct FName                   ProfileSettingName             (Parm)
// int                            ProfileSettingId               (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerStorage::GetProfileSettingId(const struct FName& ProfileSettingName, int* ProfileSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingId");

	UOnlinePlayerStorage_GetProfileSettingId_Params params;
	params.ProfileSettingName = ProfileSettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ProfileSettingId != nullptr)
		*ProfileSettingId = params.ProfileSettingId;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.ModifyAvailableProfileSettings
// ()

void UOnlineProfileSettings::ModifyAvailableProfileSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.ModifyAvailableProfileSettings");

	UOnlineProfileSettings_ModifyAvailableProfileSettings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineProfileSettings.AppendVersionToReadIds
// ()

void UOnlineProfileSettings::AppendVersionToReadIds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.AppendVersionToReadIds");

	UOnlineProfileSettings_AppendVersionToReadIds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineProfileSettings.SetToDefaults
// ()

void UOnlineProfileSettings::SetToDefaults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.SetToDefaults");

	UOnlineProfileSettings_SetToDefaults_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineProfileSettings.GetProfileSettingDefaultFloat
// ()
// Parameters:
// int                            ProfileSettingId               (Parm)
// float                          DefaultFloat                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineProfileSettings::GetProfileSettingDefaultFloat(int ProfileSettingId, float* DefaultFloat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetProfileSettingDefaultFloat");

	UOnlineProfileSettings_GetProfileSettingDefaultFloat_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DefaultFloat != nullptr)
		*DefaultFloat = params.DefaultFloat;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.GetProfileSettingDefaultInt
// ()
// Parameters:
// int                            ProfileSettingId               (Parm)
// int                            DefaultInt                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineProfileSettings::GetProfileSettingDefaultInt(int ProfileSettingId, int* DefaultInt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetProfileSettingDefaultInt");

	UOnlineProfileSettings_GetProfileSettingDefaultInt_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DefaultInt != nullptr)
		*DefaultInt = params.DefaultInt;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.GetProfileSettingDefaultId
// ()
// Parameters:
// int                            ProfileSettingId               (Parm)
// int                            DefaultId                      (Parm, OutParm)
// int                            ListIndex                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineProfileSettings::GetProfileSettingDefaultId(int ProfileSettingId, int* DefaultId, int* ListIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetProfileSettingDefaultId");

	UOnlineProfileSettings_GetProfileSettingDefaultId_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DefaultId != nullptr)
		*DefaultId = params.DefaultId;
	if (ListIndex != nullptr)
		*ListIndex = params.ListIndex;

	return params.ReturnValue;
}


// Function Engine.OnlineStats.GetViewName
// ()
// Parameters:
// int                            ViewId                         (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UOnlineStats::GetViewName(int ViewId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStats.GetViewName");

	UOnlineStats_GetViewName_Params params;
	params.ViewId = ViewId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStats.GetViewId
// ()
// Parameters:
// struct FName                   ViewName                       (Parm)
// int                            ViewId                         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStats::GetViewId(const struct FName& ViewName, int* ViewId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStats.GetViewId");

	UOnlineStats_GetViewId_Params params;
	params.ViewName = ViewName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ViewId != nullptr)
		*ViewId = params.ViewId;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsRead.GetRankForPlayer
// ()
// Parameters:
// struct FUniqueNetId            PlayerID                       (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UOnlineStatsRead::GetRankForPlayer(const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.GetRankForPlayer");

	UOnlineStatsRead_GetRankForPlayer_Params params;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsRead.AddPlayer
// ()
// Parameters:
// struct FString                 PlayerName                     (Parm, NeedCtorLink)
// struct FUniqueNetId            PlayerID                       (Parm)

void UOnlineStatsRead::AddPlayer(const struct FString& PlayerName, const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.AddPlayer");

	UOnlineStatsRead_AddPlayer_Params params;
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsRead.IsStatZero
// ()
// Parameters:
// struct FUniqueNetId            PlayerID                       (Parm)
// int                            StatColumnNo                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsRead::IsStatZero(const struct FUniqueNetId& PlayerID, int StatColumnNo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.IsStatZero");

	UOnlineStatsRead_IsStatZero_Params params;
	params.PlayerID = PlayerID;
	params.StatColumnNo = StatColumnNo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsRead.GetStatValueForPlayerAsString
// ()
// Parameters:
// struct FUniqueNetId            PlayerID                       (Parm)
// int                            StatColumnNo                   (Parm)
// struct FString                 StatValue                      (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsRead::GetStatValueForPlayerAsString(const struct FUniqueNetId& PlayerID, int StatColumnNo, struct FString* StatValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.GetStatValueForPlayerAsString");

	UOnlineStatsRead_GetStatValueForPlayerAsString_Params params;
	params.PlayerID = PlayerID;
	params.StatColumnNo = StatColumnNo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StatValue != nullptr)
		*StatValue = params.StatValue;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsRead.SetFloatStatValueForPlayer
// ()
// Parameters:
// struct FUniqueNetId            PlayerID                       (Parm)
// int                            StatColumnNo                   (Parm)
// float                          StatValue                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsRead::SetFloatStatValueForPlayer(const struct FUniqueNetId& PlayerID, int StatColumnNo, float StatValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.SetFloatStatValueForPlayer");

	UOnlineStatsRead_SetFloatStatValueForPlayer_Params params;
	params.PlayerID = PlayerID;
	params.StatColumnNo = StatColumnNo;
	params.StatValue = StatValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsRead.GetFloatStatValueForPlayer
// ()
// Parameters:
// struct FUniqueNetId            PlayerID                       (Parm)
// int                            StatColumnNo                   (Parm)
// float                          StatValue                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsRead::GetFloatStatValueForPlayer(const struct FUniqueNetId& PlayerID, int StatColumnNo, float* StatValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.GetFloatStatValueForPlayer");

	UOnlineStatsRead_GetFloatStatValueForPlayer_Params params;
	params.PlayerID = PlayerID;
	params.StatColumnNo = StatColumnNo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StatValue != nullptr)
		*StatValue = params.StatValue;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsRead.SetIntStatValueForPlayer
// ()
// Parameters:
// struct FUniqueNetId            PlayerID                       (Parm)
// int                            StatColumnNo                   (Parm)
// int                            StatValue                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsRead::SetIntStatValueForPlayer(const struct FUniqueNetId& PlayerID, int StatColumnNo, int StatValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.SetIntStatValueForPlayer");

	UOnlineStatsRead_SetIntStatValueForPlayer_Params params;
	params.PlayerID = PlayerID;
	params.StatColumnNo = StatColumnNo;
	params.StatValue = StatValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsRead.GetIntStatValueForPlayer
// ()
// Parameters:
// struct FUniqueNetId            PlayerID                       (Parm)
// int                            StatColumnNo                   (Parm)
// int                            StatValue                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsRead::GetIntStatValueForPlayer(const struct FUniqueNetId& PlayerID, int StatColumnNo, int* StatValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.GetIntStatValueForPlayer");

	UOnlineStatsRead_GetIntStatValueForPlayer_Params params;
	params.PlayerID = PlayerID;
	params.StatColumnNo = StatColumnNo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StatValue != nullptr)
		*StatValue = params.StatValue;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsRead.OnReadComplete
// ()

void UOnlineStatsRead::OnReadComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.OnReadComplete");

	UOnlineStatsRead_OnReadComplete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite.DecrementIntStat
// ()
// Parameters:
// int                            StatId                         (Parm)
// int                            DecBy                          (OptionalParm, Parm)

void UOnlineStatsWrite::DecrementIntStat(int StatId, int DecBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.DecrementIntStat");

	UOnlineStatsWrite_DecrementIntStat_Params params;
	params.StatId = StatId;
	params.DecBy = DecBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite.DecrementFloatStat
// ()
// Parameters:
// int                            StatId                         (Parm)
// float                          DecBy                          (OptionalParm, Parm)

void UOnlineStatsWrite::DecrementFloatStat(int StatId, float DecBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.DecrementFloatStat");

	UOnlineStatsWrite_DecrementFloatStat_Params params;
	params.StatId = StatId;
	params.DecBy = DecBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite.IncrementIntStat
// ()
// Parameters:
// int                            StatId                         (Parm)
// int                            IncBy                          (OptionalParm, Parm)

void UOnlineStatsWrite::IncrementIntStat(int StatId, int IncBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.IncrementIntStat");

	UOnlineStatsWrite_IncrementIntStat_Params params;
	params.StatId = StatId;
	params.IncBy = IncBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite.IncrementFloatStat
// ()
// Parameters:
// int                            StatId                         (Parm)
// float                          IncBy                          (OptionalParm, Parm)

void UOnlineStatsWrite::IncrementFloatStat(int StatId, float IncBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.IncrementFloatStat");

	UOnlineStatsWrite_IncrementFloatStat_Params params;
	params.StatId = StatId;
	params.IncBy = IncBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite.SetIntStat
// ()
// Parameters:
// int                            StatId                         (Parm)
// int                            Value                          (Parm)

void UOnlineStatsWrite::SetIntStat(int StatId, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.SetIntStat");

	UOnlineStatsWrite_SetIntStat_Params params;
	params.StatId = StatId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite.SetFloatStat
// ()
// Parameters:
// int                            StatId                         (Parm)
// float                          Value                          (Parm)

void UOnlineStatsWrite::SetFloatStat(int StatId, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.SetFloatStat");

	UOnlineStatsWrite_SetFloatStat_Params params;
	params.StatId = StatId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite.GetStatName
// ()
// Parameters:
// int                            StatId                         (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UOnlineStatsWrite::GetStatName(int StatId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.GetStatName");

	UOnlineStatsWrite_GetStatName_Params params;
	params.StatId = StatId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsWrite.GetStatId
// ()
// Parameters:
// struct FName                   StatName                       (Parm)
// int                            StatId                         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsWrite::GetStatId(const struct FName& StatName, int* StatId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.GetStatId");

	UOnlineStatsWrite_GetStatId_Params params;
	params.StatName = StatName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StatId != nullptr)
		*StatId = params.StatId;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsWrite.OnStatsWriteComplete
// ()

void UOnlineStatsWrite::OnStatsWriteComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.OnStatsWriteComplete");

	UOnlineStatsWrite_OnStatsWriteComplete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Player.SwitchController
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)

void UPlayer::SwitchController(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Player.SwitchController");

	UPlayer_SwitchController_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.GetNickname
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ULocalPlayer::GetNickname()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.GetNickname");

	ULocalPlayer_GetNickname_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.GetUniqueNetId
// ()
// Parameters:
// struct FUniqueNetId            ReturnValue                    (Parm, OutParm, ReturnParm)

struct FUniqueNetId ULocalPlayer::GetUniqueNetId()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.GetUniqueNetId");

	ULocalPlayer_GetUniqueNetId_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.DeProject
// ()
// Parameters:
// struct FVector2D               RelativeScreenPos              (Parm)
// struct FVector                 WorldOrigin                    (Parm, OutParm)
// struct FVector                 WorldDirection                 (Parm, OutParm)

void ULocalPlayer::DeProject(const struct FVector2D& RelativeScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.DeProject");

	ULocalPlayer_DeProject_Params params;
	params.RelativeScreenPos = RelativeScreenPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WorldOrigin != nullptr)
		*WorldOrigin = params.WorldOrigin;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;
}


// Function Engine.LocalPlayer.TouchPlayerPostProcessChain
// ()

void ULocalPlayer::TouchPlayerPostProcessChain()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.TouchPlayerPostProcessChain");

	ULocalPlayer_TouchPlayerPostProcessChain_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.GetPostProcessChain
// ()
// Parameters:
// int                            InIndex                        (Parm)
// class UPostProcessChain*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UPostProcessChain* ULocalPlayer::GetPostProcessChain(int InIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.GetPostProcessChain");

	ULocalPlayer_GetPostProcessChain_Params params;
	params.InIndex = InIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.RemoveAllPostProcessingChains
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ULocalPlayer::RemoveAllPostProcessingChains()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.RemoveAllPostProcessingChains");

	ULocalPlayer_RemoveAllPostProcessingChains_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.RemovePostProcessingChain
// ()
// Parameters:
// int                            InIndex                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ULocalPlayer::RemovePostProcessingChain(int InIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.RemovePostProcessingChain");

	ULocalPlayer_RemovePostProcessingChain_Params params;
	params.InIndex = InIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.InsertPostProcessingChain
// ()
// Parameters:
// class UPostProcessChain*       InChain                        (Parm)
// int                            InIndex                        (Parm)
// bool                           bInClone                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ULocalPlayer::InsertPostProcessingChain(class UPostProcessChain* InChain, int InIndex, bool bInClone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.InsertPostProcessingChain");

	ULocalPlayer_InsertPostProcessingChain_Params params;
	params.InChain = InChain;
	params.InIndex = InIndex;
	params.bInClone = bInClone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.GetTranslationContext
// ()
// Parameters:
// class UTranslationContext*     ReturnValue                    (Parm, OutParm, ReturnParm)

class UTranslationContext* ULocalPlayer::GetTranslationContext()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.GetTranslationContext");

	ULocalPlayer_GetTranslationContext_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.SetControllerId
// ()
// Parameters:
// int                            NewControllerId                (Parm)

void ULocalPlayer::SetControllerId(int NewControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.SetControllerId");

	ULocalPlayer_SetControllerId_Params params;
	params.NewControllerId = NewControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.ClearPostProcessSettingsOverride
// ()
// Parameters:
// float                          BlendOutTime                   (OptionalParm, Parm)

void ULocalPlayer::ClearPostProcessSettingsOverride(float BlendOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.ClearPostProcessSettingsOverride");

	ULocalPlayer_ClearPostProcessSettingsOverride_Params params;
	params.BlendOutTime = BlendOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.OverridePostProcessSettings
// ()
// Parameters:
// struct FPostProcessSettings    OverrideSettings               (Parm, NeedCtorLink)
// float                          BlendInTime                    (OptionalParm, Parm)

void ULocalPlayer::OverridePostProcessSettings(const struct FPostProcessSettings& OverrideSettings, float BlendInTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.OverridePostProcessSettings");

	ULocalPlayer_OverridePostProcessSettings_Params params;
	params.OverrideSettings = OverrideSettings;
	params.BlendInTime = BlendInTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.GetActorVisibility
// ()
// Parameters:
// class AActor*                  TestActor                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ULocalPlayer::GetActorVisibility(class AActor* TestActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.GetActorVisibility");

	ULocalPlayer_GetActorVisibility_Params params;
	params.TestActor = TestActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.SendSplitJoin
// ()

void ULocalPlayer::SendSplitJoin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.SendSplitJoin");

	ULocalPlayer_SendSplitJoin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.SpawnPlayActor
// ()
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)
// struct FString                 OutError                       (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ULocalPlayer::SpawnPlayActor(const struct FString& URL, struct FString* OutError)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.SpawnPlayActor");

	ULocalPlayer_SpawnPlayActor_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutError != nullptr)
		*OutError = params.OutError;

	return params.ReturnValue;
}


// Function Engine.PostProcessChain.FindPostProcessEffect
// ()
// Parameters:
// struct FName                   EffectName                     (Parm)
// class UPostProcessEffect*      ReturnValue                    (Parm, OutParm, ReturnParm)

class UPostProcessEffect* UPostProcessChain::FindPostProcessEffect(const struct FName& EffectName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PostProcessChain.FindPostProcessEffect");

	UPostProcessChain_FindPostProcessEffect_Params params;
	params.EffectName = EffectName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ReachSpec.IsBlockedFor
// ()
// Parameters:
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UReachSpec::IsBlockedFor(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ReachSpec.IsBlockedFor");

	UReachSpec_IsBlockedFor_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ReachSpec.GetDirection
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UReachSpec::GetDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ReachSpec.GetDirection");

	UReachSpec_GetDirection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ReachSpec.GetEnd
// ()
// Parameters:
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* UReachSpec::GetEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ReachSpec.GetEnd");

	UReachSpec_GetEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ReachSpec.CostFor
// ()
// Parameters:
// class APawn*                   P                              (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UReachSpec::CostFor(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ReachSpec.CostFor");

	UReachSpec_CostFor_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.GetDebugString
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString USavedMove::GetDebugString()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.GetDebugString");

	USavedMove_GetDebugString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.SetFlags
// ()
// Parameters:
// unsigned char                  Flags                          (Parm)
// class APlayerController*       PC                             (Parm)
// TEnumAsByte<EDoubleClickDir>   ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EDoubleClickDir> USavedMove::SetFlags(unsigned char Flags, class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.SetFlags");

	USavedMove_SetFlags_Params params;
	params.Flags = Flags;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.CompressedFlags
// ()
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char USavedMove::CompressedFlags()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.CompressedFlags");

	USavedMove_CompressedFlags_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.ResetMoveFor
// ()
// Parameters:
// class APawn*                   P                              (Parm)

void USavedMove::ResetMoveFor(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.ResetMoveFor");

	USavedMove_ResetMoveFor_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SavedMove.PrepMoveFor
// ()
// Parameters:
// class APawn*                   P                              (Parm)

void USavedMove::PrepMoveFor(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.PrepMoveFor");

	USavedMove_PrepMoveFor_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SavedMove.SetMoveFor
// ()
// Parameters:
// class APlayerController*       P                              (Parm)
// float                          DeltaTime                      (Parm)
// struct FVector                 newAccel                       (Parm)
// TEnumAsByte<EDoubleClickDir>   InDoubleClick                  (Parm)

void USavedMove::SetMoveFor(class APlayerController* P, float DeltaTime, const struct FVector& newAccel, TEnumAsByte<EDoubleClickDir> InDoubleClick)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.SetMoveFor");

	USavedMove_SetMoveFor_Params params;
	params.P = P;
	params.DeltaTime = DeltaTime;
	params.newAccel = newAccel;
	params.InDoubleClick = InDoubleClick;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SavedMove.CanCombineWith
// ()
// Parameters:
// class USavedMove*              NewMove                        (Parm)
// class APawn*                   inPawn                         (Parm)
// float                          MaxDelta                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USavedMove::CanCombineWith(class USavedMove* NewMove, class APawn* inPawn, float MaxDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.CanCombineWith");

	USavedMove_CanCombineWith_Params params;
	params.NewMove = NewMove;
	params.inPawn = inPawn;
	params.MaxDelta = MaxDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.SetInitialPosition
// ()
// Parameters:
// class APawn*                   P                              (Parm)

void USavedMove::SetInitialPosition(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.SetInitialPosition");

	USavedMove_SetInitialPosition_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SavedMove.GetStartLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector USavedMove::GetStartLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.GetStartLocation");

	USavedMove_GetStartLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.IsImportantMove
// ()
// Parameters:
// struct FVector                 CompareAccel                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USavedMove::IsImportantMove(const struct FVector& CompareAccel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.IsImportantMove");

	USavedMove_IsImportantMove_Params params;
	params.CompareAccel = CompareAccel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.PostUpdate
// ()
// Parameters:
// class APlayerController*       P                              (Parm)

void USavedMove::PostUpdate(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.PostUpdate");

	USavedMove_PostUpdate_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SavedMove.Clear
// ()

void USavedMove::Clear()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.Clear");

	USavedMove_Clear_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SoundCue.GetCueDuration
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USoundCue::GetCueDuration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundCue.GetCueDuration");

	USoundCue_GetCueDuration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystem.SetLODDistance
// ()
// Parameters:
// int                            LODLevelIndex                  (Parm)
// float                          InDistance                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UParticleSystem::SetLODDistance(int LODLevelIndex, float InDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.SetLODDistance");

	UParticleSystem_SetLODDistance_Params params;
	params.LODLevelIndex = LODLevelIndex;
	params.InDistance = InDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystem.SetCurrentLODMethod
// ()
// Parameters:
// TEnumAsByte<EParticleSystemLODMethod> InMethod                       (Parm)

void UParticleSystem::SetCurrentLODMethod(TEnumAsByte<EParticleSystemLODMethod> InMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.SetCurrentLODMethod");

	UParticleSystem_SetCurrentLODMethod_Params params;
	params.InMethod = InMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystem.GetLODDistance
// ()
// Parameters:
// int                            LODLevelIndex                  (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UParticleSystem::GetLODDistance(int LODLevelIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.GetLODDistance");

	UParticleSystem_GetLODDistance_Params params;
	params.LODLevelIndex = LODLevelIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystem.GetLODLevelCount
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UParticleSystem::GetLODLevelCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.GetLODLevelCount");

	UParticleSystem_GetLODLevelCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystem.GetCurrentLODMethod
// ()
// Parameters:
// TEnumAsByte<EParticleSystemLODMethod> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EParticleSystemLODMethod> UParticleSystem::GetCurrentLODMethod()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.GetCurrentLODMethod");

	UParticleSystem_GetCurrentLODMethod_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Texture2D.Create
// ()
// Parameters:
// int                            InSizeX                        (Parm)
// int                            InSizeY                        (Parm)
// TEnumAsByte<EPixelFormat>      InFormat                       (OptionalParm, Parm)
// class UTexture2D*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UTexture2D* UTexture2D::Create(int InSizeX, int InSizeY, TEnumAsByte<EPixelFormat> InFormat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2D.Create");

	UTexture2D_Create_Params params;
	params.InSizeX = InSizeX;
	params.InSizeY = InSizeY;
	params.InFormat = InFormat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Texture2D.SetForceMipLevelsToBeResident
// ()
// Parameters:
// float                          Seconds                        (Parm)
// int                            CinematicTextureGroups         (OptionalParm, Parm)

void UTexture2D::SetForceMipLevelsToBeResident(float Seconds, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2D.SetForceMipLevelsToBeResident");

	UTexture2D_SetForceMipLevelsToBeResident_Params params;
	params.Seconds = Seconds;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TranslationContext.RegisterTranslatorTag
// ()
// Parameters:
// class UTranslatorTag*          InTagHandler                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UTranslationContext::RegisterTranslatorTag(class UTranslatorTag* InTagHandler)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TranslationContext.RegisterTranslatorTag");

	UTranslationContext_RegisterTranslatorTag_Params params;
	params.InTagHandler = InTagHandler;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TranslatorTag.Translate
// ()
// Parameters:
// struct FString                 InArgument                     (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UTranslatorTag::Translate(const struct FString& InArgument)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TranslatorTag.Translate");

	UTranslatorTag_Translate_Params params;
	params.InArgument = InArgument;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StringsTag.Translate
// ()
// Parameters:
// struct FString                 InArgument                     (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStringsTag::Translate(const struct FString& InArgument)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StringsTag.Translate");

	UStringsTag_Translate_Params params;
	params.InArgument = InArgument;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.GetOnlinePlayerInterfaceEx
// ()
// Parameters:
// TScriptInterface<class UOnlinePlayerInterfaceEx> ReturnValue                    (Parm, OutParm, ReturnParm)

TScriptInterface<class UOnlinePlayerInterfaceEx> UUIRoot::GetOnlinePlayerInterfaceEx()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetOnlinePlayerInterfaceEx");

	UUIRoot_GetOnlinePlayerInterfaceEx_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.GetOnlinePlayerInterface
// ()
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> ReturnValue                    (Parm, OutParm, ReturnParm)

TScriptInterface<class UOnlinePlayerInterface> UUIRoot::GetOnlinePlayerInterface()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetOnlinePlayerInterface");

	UUIRoot_GetOnlinePlayerInterface_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.GetOnlineGameInterface
// ()
// Parameters:
// TScriptInterface<class UOnlineGameInterface> ReturnValue                    (Parm, OutParm, ReturnParm)

TScriptInterface<class UOnlineGameInterface> UUIRoot::GetOnlineGameInterface()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetOnlineGameInterface");

	UUIRoot_GetOnlineGameInterface_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.GetDataStoreStringValue
// ()
// Parameters:
// struct FString                 InDataStoreMarkup              (Parm, NeedCtorLink)
// struct FString                 OutStringValue                 (Parm, OutParm, NeedCtorLink)
// class ULocalPlayer*            OwnerPlayer                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIRoot::GetDataStoreStringValue(const struct FString& InDataStoreMarkup, class ULocalPlayer* OwnerPlayer, struct FString* OutStringValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetDataStoreStringValue");

	UUIRoot_GetDataStoreStringValue_Params params;
	params.InDataStoreMarkup = InDataStoreMarkup;
	params.OwnerPlayer = OwnerPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutStringValue != nullptr)
		*OutStringValue = params.OutStringValue;

	return params.ReturnValue;
}


// Function Engine.UIRoot.GetDataStoreFieldValue
// ()
// Parameters:
// struct FString                 InDataStoreMarkup              (Parm, NeedCtorLink)
// struct FUIProviderFieldValue   OutFieldValue                  (Parm, OutParm, NeedCtorLink)
// class ULocalPlayer*            OwnerPlayer                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIRoot::GetDataStoreFieldValue(const struct FString& InDataStoreMarkup, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue* OutFieldValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetDataStoreFieldValue");

	UUIRoot_GetDataStoreFieldValue_Params params;
	params.InDataStoreMarkup = InDataStoreMarkup;
	params.OwnerPlayer = OwnerPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutFieldValue != nullptr)
		*OutFieldValue = params.OutFieldValue;

	return params.ReturnValue;
}


// Function Engine.UIRoot.SetDataStoreStringValue
// ()
// Parameters:
// struct FString                 InDataStoreMarkup              (Parm, NeedCtorLink)
// struct FString                 InStringValue                  (Parm, NeedCtorLink)
// class ULocalPlayer*            OwnerPlayer                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIRoot::SetDataStoreStringValue(const struct FString& InDataStoreMarkup, const struct FString& InStringValue, class ULocalPlayer* OwnerPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.SetDataStoreStringValue");

	UUIRoot_SetDataStoreStringValue_Params params;
	params.InDataStoreMarkup = InDataStoreMarkup;
	params.InStringValue = InStringValue;
	params.OwnerPlayer = OwnerPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.SetDataStoreFieldValue
// ()
// Parameters:
// struct FString                 InDataStoreMarkup              (Parm, NeedCtorLink)
// struct FUIProviderFieldValue   InFieldValue                   (Const, Parm, OutParm, NeedCtorLink)
// class ULocalPlayer*            OwnerPlayer                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIRoot::SetDataStoreFieldValue(const struct FString& InDataStoreMarkup, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue* InFieldValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.SetDataStoreFieldValue");

	UUIRoot_SetDataStoreFieldValue_Params params;
	params.InDataStoreMarkup = InDataStoreMarkup;
	params.OwnerPlayer = OwnerPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InFieldValue != nullptr)
		*InFieldValue = params.InFieldValue;

	return params.ReturnValue;
}


// Function Engine.UIRoot.StaticResolveDataStore
// ()
// Parameters:
// struct FName                   DataStoreTag                   (Parm)
// class ULocalPlayer*            InPlayerOwner                  (OptionalParm, Parm)
// class UUIDataStore*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIDataStore* UUIRoot::StaticResolveDataStore(const struct FName& DataStoreTag, class ULocalPlayer* InPlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.StaticResolveDataStore");

	UUIRoot_StaticResolveDataStore_Params params;
	params.DataStoreTag = DataStoreTag;
	params.InPlayerOwner = InPlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.GetSceneClient
// ()
// Parameters:
// class UGameUISceneClient*      ReturnValue                    (Parm, OutParm, ReturnParm)

class UGameUISceneClient* UUIRoot::GetSceneClient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetSceneClient");

	UUIRoot_GetSceneClient_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.GetCurrentUIController
// ()
// Parameters:
// class UUIInteraction*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIInteraction* UUIRoot::GetCurrentUIController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetCurrentUIController");

	UUIRoot_GetCurrentUIController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.GetInputPlatformType
// ()
// Parameters:
// class ULocalPlayer*            OwningPlayer                   (OptionalParm, Parm)
// TEnumAsByte<EInputPlatformType> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EInputPlatformType> UUIRoot::GetInputPlatformType(class ULocalPlayer* OwningPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetInputPlatformType");

	UUIRoot_GetInputPlatformType_Params params;
	params.OwningPlayer = OwningPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Interaction.NotifyPlayerRemoved
// ()
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            RemovedPlayer                  (Parm)

void UInteraction::NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.NotifyPlayerRemoved");

	UInteraction_NotifyPlayerRemoved_Params params;
	params.PlayerIndex = PlayerIndex;
	params.RemovedPlayer = RemovedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.NotifyPlayerAdded
// ()
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            AddedPlayer                    (Parm)

void UInteraction::NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.NotifyPlayerAdded");

	UInteraction_NotifyPlayerAdded_Params params;
	params.PlayerIndex = PlayerIndex;
	params.AddedPlayer = AddedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.NotifyGameSessionEnded
// ()

void UInteraction::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.NotifyGameSessionEnded");

	UInteraction_NotifyGameSessionEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.Initialized
// ()

void UInteraction::Initialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.Initialized");

	UInteraction_Initialized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.OnInitialize
// ()

void UInteraction::OnInitialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.OnInitialize");

	UInteraction_OnInitialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.Init
// ()

void UInteraction::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.Init");

	UInteraction_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.PostRender
// ()
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void UInteraction::PostRender(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.PostRender");

	UInteraction_PostRender_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.Tick
// ()
// Parameters:
// float                          DeltaTime                      (Parm)

void UInteraction::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.Tick");

	UInteraction_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.OnReceivedNativeInputChar
// ()
// Parameters:
// int                            ControllerId                   (Parm)
// struct FString                 Unicode                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UInteraction::OnReceivedNativeInputChar(int ControllerId, const struct FString& Unicode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.OnReceivedNativeInputChar");

	UInteraction_OnReceivedNativeInputChar_Params params;
	params.ControllerId = ControllerId;
	params.Unicode = Unicode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Interaction.OnReceivedNativeInputAxis
// ()
// Parameters:
// int                            ControllerId                   (Parm)
// struct FName                   Key                            (Parm)
// float                          Delta                          (Parm)
// float                          DeltaTime                      (Parm)
// bool                           bGamepad                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UInteraction::OnReceivedNativeInputAxis(int ControllerId, const struct FName& Key, float Delta, float DeltaTime, bool bGamepad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.OnReceivedNativeInputAxis");

	UInteraction_OnReceivedNativeInputAxis_Params params;
	params.ControllerId = ControllerId;
	params.Key = Key;
	params.Delta = Delta;
	params.DeltaTime = DeltaTime;
	params.bGamepad = bGamepad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Interaction.OnReceivedNativeInputKey
// ()
// Parameters:
// int                            ControllerId                   (Parm)
// struct FName                   Key                            (Parm)
// TEnumAsByte<EInputEvent>       EventType                      (Parm)
// float                          AmountDepressed                (OptionalParm, Parm)
// bool                           bGamepad                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UInteraction::OnReceivedNativeInputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> EventType, float AmountDepressed, bool bGamepad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.OnReceivedNativeInputKey");

	UInteraction_OnReceivedNativeInputKey_Params params;
	params.ControllerId = ControllerId;
	params.Key = Key;
	params.EventType = EventType;
	params.AmountDepressed = AmountDepressed;
	params.bGamepad = bGamepad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.NotifyGameSessionEnded
// ()

void UUIInteraction::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.NotifyGameSessionEnded");

	UUIInteraction_NotifyGameSessionEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIInteraction.GetNATType
// ()
// Parameters:
// TEnumAsByte<ENATType>          ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ENATType> UUIInteraction::GetNATType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetNATType");

	UUIInteraction_GetNATType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetConnectedGamepadCount
// ()
// Parameters:
// TArray<unsigned long>          ControllerConnectionStatusOverrides (OptionalParm, Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIInteraction::GetConnectedGamepadCount(TArray<unsigned long> ControllerConnectionStatusOverrides)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetConnectedGamepadCount");

	UUIInteraction_GetConnectedGamepadCount_Params params;
	params.ControllerConnectionStatusOverrides = ControllerConnectionStatusOverrides;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.IsGamepadConnected
// ()
// Parameters:
// int                            ControllerId                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIInteraction::IsGamepadConnected(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.IsGamepadConnected");

	UUIInteraction_IsGamepadConnected_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetNumGuestsLoggedIn
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIInteraction::GetNumGuestsLoggedIn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetNumGuestsLoggedIn");

	UUIInteraction_GetNumGuestsLoggedIn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetLoggedInPlayerCount
// ()
// Parameters:
// bool                           bRequireOnlineLogin            (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIInteraction::GetLoggedInPlayerCount(bool bRequireOnlineLogin)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetLoggedInPlayerCount");

	UUIInteraction_GetLoggedInPlayerCount_Params params;
	params.bRequireOnlineLogin = bRequireOnlineLogin;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.IsLoggedIn
// ()
// Parameters:
// int                            ControllerId                   (Parm)
// bool                           bRequireOnlineLogin            (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIInteraction::IsLoggedIn(int ControllerId, bool bRequireOnlineLogin)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.IsLoggedIn");

	UUIInteraction_IsLoggedIn_Params params;
	params.ControllerId = ControllerId;
	params.bRequireOnlineLogin = bRequireOnlineLogin;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.HasLinkConnection
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIInteraction::HasLinkConnection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.HasLinkConnection");

	UUIInteraction_HasLinkConnection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetLowestLoginStatusOfControllers
// ()
// Parameters:
// TEnumAsByte<ELoginStatus>      ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ELoginStatus> UUIInteraction::GetLowestLoginStatusOfControllers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetLowestLoginStatusOfControllers");

	UUIInteraction_GetLowestLoginStatusOfControllers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetLoginStatus
// ()
// Parameters:
// int                            ControllerId                   (Parm)
// TEnumAsByte<ELoginStatus>      ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ELoginStatus> UUIInteraction::GetLoginStatus(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetLoginStatus");

	UUIInteraction_GetLoginStatus_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.NotifyPlayerRemoved
// ()
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            RemovedPlayer                  (Parm)

void UUIInteraction::NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.NotifyPlayerRemoved");

	UUIInteraction_NotifyPlayerRemoved_Params params;
	params.PlayerIndex = PlayerIndex;
	params.RemovedPlayer = RemovedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIInteraction.NotifyPlayerAdded
// ()
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            AddedPlayer                    (Parm)

void UUIInteraction::NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.NotifyPlayerAdded");

	UUIInteraction_NotifyPlayerAdded_Params params;
	params.PlayerIndex = PlayerIndex;
	params.AddedPlayer = AddedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIInteraction.GetLocalPlayer
// ()
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            ReturnValue                    (Parm, OutParm, ReturnParm)

class ULocalPlayer* UUIInteraction::GetLocalPlayer(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetLocalPlayer");

	UUIInteraction_GetLocalPlayer_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetDataStoreClient
// ()
// Parameters:
// class UDataStoreClient*        ReturnValue                    (Parm, OutParm, ReturnParm)

class UDataStoreClient* UUIInteraction::GetDataStoreClient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetDataStoreClient");

	UUIInteraction_GetDataStoreClient_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetPlayerControllerId
// ()
// Parameters:
// int                            PlayerIndex                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIInteraction::GetPlayerControllerId(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetPlayerControllerId");

	UUIInteraction_GetPlayerControllerId_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetPlayerIndex
// ()
// Parameters:
// int                            ControllerId                   (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIInteraction::GetPlayerIndex(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetPlayerIndex");

	UUIInteraction_GetPlayerIndex_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetPlayerCount
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIInteraction::GetPlayerCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetPlayerCount");

	UUIInteraction_GetPlayerCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIManager.NotifyPlayerRemoved
// ()
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            RemovedPlayer                  (Parm)

void UUIManager::NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIManager.NotifyPlayerRemoved");

	UUIManager_NotifyPlayerRemoved_Params params;
	params.PlayerIndex = PlayerIndex;
	params.RemovedPlayer = RemovedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIManager.NotifyPlayerAdded
// ()
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            AddedPlayer                    (Parm)

void UUIManager::NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIManager.NotifyPlayerAdded");

	UUIManager_NotifyPlayerAdded_Params params;
	params.PlayerIndex = PlayerIndex;
	params.AddedPlayer = AddedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIManager.PauseGame
// ()
// Parameters:
// bool                           bDesiredPauseState             (Parm)
// int                            PlayerIndex                    (OptionalParm, Parm)

void UUIManager::PauseGame(bool bDesiredPauseState, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIManager.PauseGame");

	UUIManager_PauseGame_Params params;
	params.bDesiredPauseState = bDesiredPauseState;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIManager.CanUnpauseInternalUI
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIManager::CanUnpauseInternalUI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIManager.CanUnpauseInternalUI");

	UUIManager_CanUnpauseInternalUI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIManager.GetUIManager
// ()
// Parameters:
// class UUIManager*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIManager* UUIManager::GetUIManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIManager.GetUIManager");

	UUIManager_GetUIManager_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.EnvironmentVolume.SetSplitNavMesh
// ()
// Parameters:
// bool                           bNewValue                      (Parm)

void AEnvironmentVolume::SetSplitNavMesh(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EnvironmentVolume.SetSplitNavMesh");

	AEnvironmentVolume_SetSplitNavMesh_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.CanFireWeapon
// ()
// Parameters:
// class AWeapon*                 Wpn                            (Parm)
// unsigned char                  FireModeNum                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAIController::CanFireWeapon(class AWeapon* Wpn, unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.CanFireWeapon");

	AAIController_CanFireWeapon_Params params;
	params.Wpn = Wpn;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AIController.NotifyWeaponFinishedFiring
// ()
// Parameters:
// class AWeapon*                 W                              (Parm)
// unsigned char                  FireMode                       (Parm)

void AAIController::NotifyWeaponFinishedFiring(class AWeapon* W, unsigned char FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.NotifyWeaponFinishedFiring");

	AAIController_NotifyWeaponFinishedFiring_Params params;
	params.W = W;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.NotifyWeaponFired
// ()
// Parameters:
// class AWeapon*                 W                              (Parm)
// unsigned char                  FireMode                       (Parm)

void AAIController::NotifyWeaponFired(class AWeapon* W, unsigned char FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.NotifyWeaponFired");

	AAIController_NotifyWeaponFired_Params params;
	params.W = W;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.OnAIMoveToActor
// ()
// Parameters:
// class USeqAct_AIMoveToActor*   Action                         (Parm)

void AAIController::OnAIMoveToActor(class USeqAct_AIMoveToActor* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.OnAIMoveToActor");

	AAIController_OnAIMoveToActor_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.GetPlayerViewPoint
// ()
// Parameters:
// struct FVector                 out_Location                   (Parm, OutParm)
// struct FRotator                out_Rotation                   (Parm, OutParm)

void AAIController::GetPlayerViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.GetPlayerViewPoint");

	AAIController_GetPlayerViewPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;
}


// Function Engine.AIController.SetTeam
// ()
// Parameters:
// int                            inTeamIdx                      (Parm)

void AAIController::SetTeam(int inTeamIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.SetTeam");

	AAIController_SetTeam_Params params;
	params.inTeamIdx = inTeamIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.DisplayDebug
// ()
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void AAIController::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.DisplayDebug");

	AAIController_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.AIController.Reset
// ()

void AAIController::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.Reset");

	AAIController_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.PreBeginPlay
// ()

void AAIController::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.PreBeginPlay");

	AAIController_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CrowdAgentBase.NotifyPathChanged
// ()

void ACrowdAgentBase::NotifyPathChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CrowdAgentBase.NotifyPathChanged");

	ACrowdAgentBase_NotifyPathChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PathTargetPoint.ShouldBeHiddenBySHOW_NavigationNodes
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APathTargetPoint::ShouldBeHiddenBySHOW_NavigationNodes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PathTargetPoint.ShouldBeHiddenBySHOW_NavigationNodes");

	APathTargetPoint_ShouldBeHiddenBySHOW_NavigationNodes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshObstacle.SetEnabled
// ()
// Parameters:
// bool                           bInEnabled                     (Parm)

void ANavMeshObstacle::SetEnabled(bool bInEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.SetEnabled");

	ANavMeshObstacle_SetEnabled_Params params;
	params.bInEnabled = bInEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshObstacle.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void ANavMeshObstacle::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.OnToggle");

	ANavMeshObstacle_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshObstacle.PostBeginPlay
// ()

void ANavMeshObstacle::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.PostBeginPlay");

	ANavMeshObstacle_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshObstacle.UnRegisterObstacle
// ()

void ANavMeshObstacle::UnRegisterObstacle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.UnRegisterObstacle");

	ANavMeshObstacle_UnRegisterObstacle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshObstacle.RegisterObstacle
// ()

void ANavMeshObstacle::RegisterObstacle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.RegisterObstacle");

	ANavMeshObstacle_RegisterObstacle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshObstacle.GetObstacleBoudingShape
// ()
// Parameters:
// TArray<struct FVector>         Shape                          (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavMeshObstacle::GetObstacleBoudingShape(TArray<struct FVector>* Shape)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.GetObstacleBoudingShape");

	ANavMeshObstacle_GetObstacleBoudingShape_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Shape != nullptr)
		*Shape = params.Shape;

	return params.ReturnValue;
}


// Function Engine.MeshComponent.CreateAndSetMaterialInstanceTimeVarying
// ()
// Parameters:
// int                            ElementIndex                   (Parm)
// class UMaterialInstanceTimeVarying* ReturnValue                    (Parm, OutParm, ReturnParm)

class UMaterialInstanceTimeVarying* UMeshComponent::CreateAndSetMaterialInstanceTimeVarying(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.CreateAndSetMaterialInstanceTimeVarying");

	UMeshComponent_CreateAndSetMaterialInstanceTimeVarying_Params params;
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MeshComponent.CreateAndSetMaterialInstanceConstant
// ()
// Parameters:
// int                            ElementIndex                   (Parm)
// class UMaterialInstanceConstant* ReturnValue                    (Parm, OutParm, ReturnParm)

class UMaterialInstanceConstant* UMeshComponent::CreateAndSetMaterialInstanceConstant(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.CreateAndSetMaterialInstanceConstant");

	UMeshComponent_CreateAndSetMaterialInstanceConstant_Params params;
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MeshComponent.PrestreamTextures
// ()
// Parameters:
// float                          Seconds                        (Parm)
// bool                           bPrioritizeCharacterTextures   (Parm)
// int                            CinematicTextureGroups         (OptionalParm, Parm)

void UMeshComponent::PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.PrestreamTextures");

	UMeshComponent_PrestreamTextures_Params params;
	params.Seconds = Seconds;
	params.bPrioritizeCharacterTextures = bPrioritizeCharacterTextures;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MeshComponent.GetNumElements
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UMeshComponent::GetNumElements()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.GetNumElements");

	UMeshComponent_GetNumElements_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MeshComponent.SetMaterial
// ()
// Parameters:
// int                            ElementIndex                   (Parm)
// class UMaterialInterface*      Material                       (Parm)

void UMeshComponent::SetMaterial(int ElementIndex, class UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.SetMaterial");

	UMeshComponent_SetMaterial_Params params;
	params.ElementIndex = ElementIndex;
	params.Material = Material;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MeshComponent.GetMaterial
// ()
// Parameters:
// int                            ElementIndex                   (Parm)
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ReturnParm)

class UMaterialInterface* UMeshComponent::GetMaterial(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.GetMaterial");

	UMeshComponent_GetMaterial_Params params;
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StaticMeshComponent.CanBecomeDynamic
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStaticMeshComponent::CanBecomeDynamic()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.CanBecomeDynamic");

	UStaticMeshComponent_CanBecomeDynamic_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StaticMeshComponent.SetForceStaticDecals
// ()
// Parameters:
// bool                           bInForceStaticDecals           (Parm)

void UStaticMeshComponent::SetForceStaticDecals(bool bInForceStaticDecals)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.SetForceStaticDecals");

	UStaticMeshComponent_SetForceStaticDecals_Params params;
	params.bInForceStaticDecals = bInForceStaticDecals;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StaticMeshComponent.DisableRBCollisionWithSMC
// ()
// Parameters:
// class UPrimitiveComponent*     OtherSMC                       (Parm, EditInline)
// bool                           bDisabled                      (Parm)

void UStaticMeshComponent::DisableRBCollisionWithSMC(class UPrimitiveComponent* OtherSMC, bool bDisabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.DisableRBCollisionWithSMC");

	UStaticMeshComponent_DisableRBCollisionWithSMC_Params params;
	params.OtherSMC = OtherSMC;
	params.bDisabled = bDisabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StaticMeshComponent.SetStaticMesh
// ()
// Parameters:
// class UStaticMesh*             NewMesh                        (Parm)
// bool                           bForce                         (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStaticMeshComponent::SetStaticMesh(class UStaticMesh* NewMesh, bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.SetStaticMesh");

	UStaticMeshComponent_SetStaticMesh_Params params;
	params.NewMesh = NewMesh;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AICommandBase.GetUtility
// ()
// Parameters:
// class AAIController*           InAI                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UAICommandBase::GetUtility(class AAIController* InAI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AICommandBase.GetUtility");

	UAICommandBase_GetUtility_Params params;
	params.InAI = InAI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AITree_DMC_Base.CalculateUtilityRating
// ()
// Parameters:
// class UAICommandNodeBase*      CommandNode                    (Parm)

void UAITree_DMC_Base::CalculateUtilityRating(class UAICommandNodeBase* CommandNode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AITree_DMC_Base.CalculateUtilityRating");

	UAITree_DMC_Base_CalculateUtilityRating_Params params;
	params.CommandNode = CommandNode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AITree_DMC_Base.BreakRot
// ()
// Parameters:
// struct FRotator                InRot                          (Parm)
// float                          Pitch                          (Parm, OutParm)
// float                          Yaw                            (Parm, OutParm)
// float                          Roll                           (Parm, OutParm)

void UAITree_DMC_Base::BreakRot(const struct FRotator& InRot, float* Pitch, float* Yaw, float* Roll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AITree_DMC_Base.BreakRot");

	UAITree_DMC_Base_BreakRot_Params params;
	params.InRot = InRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Pitch != nullptr)
		*Pitch = params.Pitch;
	if (Yaw != nullptr)
		*Yaw = params.Yaw;
	if (Roll != nullptr)
		*Roll = params.Roll;
}


// Function Engine.AITree_DMC_Base.MakeRot
// ()
// Parameters:
// float                          Pitch                          (Parm)
// float                          Yaw                            (Parm)
// float                          Roll                           (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator UAITree_DMC_Base::MakeRot(float Pitch, float Yaw, float Roll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AITree_DMC_Base.MakeRot");

	UAITree_DMC_Base_MakeRot_Params params;
	params.Pitch = Pitch;
	params.Yaw = Yaw;
	params.Roll = Roll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AITree_DMC_Base.BreakVector
// ()
// Parameters:
// struct FVector                 InVec                          (Parm)
// float                          X                              (Parm, OutParm)
// float                          Y                              (Parm, OutParm)
// float                          Z                              (Parm, OutParm)

void UAITree_DMC_Base::BreakVector(const struct FVector& InVec, float* X, float* Y, float* Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AITree_DMC_Base.BreakVector");

	UAITree_DMC_Base_BreakVector_Params params;
	params.InVec = InVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;
}


// Function Engine.AITree_DMC_Base.MakeVector
// ()
// Parameters:
// float                          X                              (Parm)
// float                          Y                              (Parm)
// float                          Z                              (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UAITree_DMC_Base::MakeVector(float X, float Y, float Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AITree_DMC_Base.MakeVector");

	UAITree_DMC_Base_MakeVector_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AITree_DMC_Base.Conv_RotatorToString
// ()
// Parameters:
// struct FRotator                InRot                          (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UAITree_DMC_Base::Conv_RotatorToString(const struct FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AITree_DMC_Base.Conv_RotatorToString");

	UAITree_DMC_Base_Conv_RotatorToString_Params params;
	params.InRot = InRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AITree_DMC_Base.Conv_VectorToString
// ()
// Parameters:
// struct FVector                 InVec                          (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UAITree_DMC_Base::Conv_VectorToString(const struct FVector& InVec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AITree_DMC_Base.Conv_VectorToString");

	UAITree_DMC_Base_Conv_VectorToString_Params params;
	params.InVec = InVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AITree_DMC_Base.Conv_BoolToString
// ()
// Parameters:
// bool                           InBool                         (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UAITree_DMC_Base::Conv_BoolToString(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AITree_DMC_Base.Conv_BoolToString");

	UAITree_DMC_Base_Conv_BoolToString_Params params;
	params.InBool = InBool;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AITree_DMC_Base.Conv_IntToString
// ()
// Parameters:
// int                            InInt                          (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UAITree_DMC_Base::Conv_IntToString(int InInt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AITree_DMC_Base.Conv_IntToString");

	UAITree_DMC_Base_Conv_IntToString_Params params;
	params.InInt = InInt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AITree_DMC_Base.Conv_FloatToString
// ()
// Parameters:
// float                          InFloat                        (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UAITree_DMC_Base::Conv_FloatToString(float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AITree_DMC_Base.Conv_FloatToString");

	UAITree_DMC_Base_Conv_FloatToString_Params params;
	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AITree_DMC_Base.Conv_IntToFloat
// ()
// Parameters:
// int                            InInt                          (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAITree_DMC_Base::Conv_IntToFloat(int InInt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AITree_DMC_Base.Conv_IntToFloat");

	UAITree_DMC_Base_Conv_IntToFloat_Params params;
	params.InInt = InInt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AITree_DMC_Base.GetWorldTime
// ()
// Parameters:
// class AActor*                  inActor                        (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAITree_DMC_Base::GetWorldTime(class AActor* inActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AITree_DMC_Base.GetWorldTime");

	UAITree_DMC_Base_GetWorldTime_Params params;
	params.inActor = inActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AITree_DMC_Base.PrintString
// ()
// Parameters:
// struct FString                 InString                       (Parm, NeedCtorLink)

void UAITree_DMC_Base::PrintString(const struct FString& InString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AITree_DMC_Base.PrintString");

	UAITree_DMC_Base_PrintString_Params params;
	params.InString = InString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interface_NavMeshPathSwitch.AIActivateSwitch
// ()
// Parameters:
// class AAIController*           AI                             (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UInterface_NavMeshPathSwitch::AIActivateSwitch(class AAIController* AI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interface_NavMeshPathSwitch.AIActivateSwitch");

	UInterface_NavMeshPathSwitch_AIActivateSwitch_Params params;
	params.AI = AI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AITree.EvaluateTree
// ()
// Parameters:
// class AAIController*           InAI                           (Parm)
// struct FAITreeHandle           Handle                         (Parm, OutParm, NeedCtorLink)
// TArray<class UClass*>          ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class UClass*> UAITree::EvaluateTree(class AAIController* InAI, struct FAITreeHandle* Handle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AITree.EvaluateTree");

	UAITree_EvaluateTree_Params params;
	params.InAI = InAI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Handle != nullptr)
		*Handle = params.Handle;

	return params.ReturnValue;
}


// Function Engine.AITree.SetActiveRoot
// ()
// Parameters:
// struct FName                   InName                         (Parm)
// struct FAITreeHandle           Handle                         (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UAITree::SetActiveRoot(const struct FName& InName, struct FAITreeHandle* Handle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AITree.SetActiveRoot");

	UAITree_SetActiveRoot_Params params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Handle != nullptr)
		*Handle = params.Handle;

	return params.ReturnValue;
}


// Function Engine.AICommandNodeBase.SelectBestChild
// ()
// Parameters:
// class AAIController*           InAI                           (Parm)
// struct FAITreeHandle           Handle                         (Parm, OutParm, NeedCtorLink)
// class UAICommandNodeBase*      ReturnValue                    (Parm, OutParm, ReturnParm)

class UAICommandNodeBase* UAICommandNodeBase::SelectBestChild(class AAIController* InAI, struct FAITreeHandle* Handle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AICommandNodeBase.SelectBestChild");

	UAICommandNodeBase_SelectBestChild_Params params;
	params.InAI = InAI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Handle != nullptr)
		*Handle = params.Handle;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.GetValidatedAnchorPosition
// ()
// Parameters:
// struct FVector                 out_NewAnchorLoc               (Parm, OutParm)
// struct FVector                 OverrideStartLoc               (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavigationHandle::GetValidatedAnchorPosition(const struct FVector& OverrideStartLoc, struct FVector* out_NewAnchorLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetValidatedAnchorPosition");

	UNavigationHandle_GetValidatedAnchorPosition_Params params;
	params.OverrideStartLoc = OverrideStartLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_NewAnchorLoc != nullptr)
		*out_NewAnchorLoc = params.out_NewAnchorLoc;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.GetAllCoverSlotsInRadius
// ()
// Parameters:
// struct FVector                 FromLoc                        (Parm)
// float                          Radius                         (Parm)
// TArray<struct FCoverInfo>      out_CoverList                  (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavigationHandle::GetAllCoverSlotsInRadius(const struct FVector& FromLoc, float Radius, TArray<struct FCoverInfo>* out_CoverList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetAllCoverSlotsInRadius");

	UNavigationHandle_GetAllCoverSlotsInRadius_Params params;
	params.FromLoc = FromLoc;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_CoverList != nullptr)
		*out_CoverList = params.out_CoverList;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.PopulatePathfindingParamCache
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavigationHandle::PopulatePathfindingParamCache()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.PopulatePathfindingParamCache");

	UNavigationHandle_PopulatePathfindingParamCache_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.MoveToDesiredHeightAboveMesh
// ()
// Parameters:
// struct FVector                 Point                          (Parm)
// float                          Height                         (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UNavigationHandle::MoveToDesiredHeightAboveMesh(const struct FVector& Point, float Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.MoveToDesiredHeightAboveMesh");

	UNavigationHandle_MoveToDesiredHeightAboveMesh_Params params;
	params.Point = Point;
	params.Height = Height;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.CalculatePathDistance
// ()
// Parameters:
// struct FVector                 FinalDest                      (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UNavigationHandle::CalculatePathDistance(const struct FVector& FinalDest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.CalculatePathDistance");

	UNavigationHandle_CalculatePathDistance_Params params;
	params.FinalDest = FinalDest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.GetFirstMoveLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UNavigationHandle::GetFirstMoveLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetFirstMoveLocation");

	UNavigationHandle_GetFirstMoveLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.IsAnchorInescapable
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavigationHandle::IsAnchorInescapable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.IsAnchorInescapable");

	UNavigationHandle_IsAnchorInescapable_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.LimitPathCacheDistance
// ()
// Parameters:
// float                          MaxDist                        (Parm)

void UNavigationHandle::LimitPathCacheDistance(float MaxDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.LimitPathCacheDistance");

	UNavigationHandle_LimitPathCacheDistance_Params params;
	params.MaxDist = MaxDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationHandle.GetValidPositionsForBox
// ()
// Parameters:
// struct FVector                 pos                            (Parm)
// float                          Radius                         (Parm)
// struct FVector                 Extent                         (Parm)
// bool                           bMustBeReachableFromStartPos   (Parm)
// TArray<struct FVector>         out_ValidPositions             (Parm, OutParm, NeedCtorLink)
// int                            MaxPositions                   (OptionalParm, Parm)
// float                          MinRadius                      (OptionalParm, Parm)
// struct FVector                 ValidBoxAroundStartPos         (OptionalParm, Parm)

void UNavigationHandle::GetValidPositionsForBox(const struct FVector& pos, float Radius, const struct FVector& Extent, bool bMustBeReachableFromStartPos, int MaxPositions, float MinRadius, const struct FVector& ValidBoxAroundStartPos, TArray<struct FVector>* out_ValidPositions)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetValidPositionsForBox");

	UNavigationHandle_GetValidPositionsForBox_Params params;
	params.pos = pos;
	params.Radius = Radius;
	params.Extent = Extent;
	params.bMustBeReachableFromStartPos = bMustBeReachableFromStartPos;
	params.MaxPositions = MaxPositions;
	params.MinRadius = MinRadius;
	params.ValidBoxAroundStartPos = ValidBoxAroundStartPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ValidPositions != nullptr)
		*out_ValidPositions = params.out_ValidPositions;
}


// Function Engine.NavigationHandle.GetAllPolyCentersWithinBounds
// ()
// Parameters:
// struct FVector                 pos                            (Parm)
// struct FVector                 Extent                         (Parm)
// TArray<struct FVector>         out_PolyCtrs                   (Parm, OutParm, NeedCtorLink)

void UNavigationHandle::GetAllPolyCentersWithinBounds(const struct FVector& pos, const struct FVector& Extent, TArray<struct FVector>* out_PolyCtrs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetAllPolyCentersWithinBounds");

	UNavigationHandle_GetAllPolyCentersWithinBounds_Params params;
	params.pos = pos;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_PolyCtrs != nullptr)
		*out_PolyCtrs = params.out_PolyCtrs;
}


// Function Engine.NavigationHandle.GetCurrentEdgeType
// ()
// Parameters:
// TEnumAsByte<ENavMeshEdgeType>  ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ENavMeshEdgeType> UNavigationHandle::GetCurrentEdgeType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetCurrentEdgeType");

	UNavigationHandle_GetCurrentEdgeType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.ClearCurrentEdge
// ()

void UNavigationHandle::ClearCurrentEdge()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.ClearCurrentEdge");

	UNavigationHandle_ClearCurrentEdge_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationHandle.GetCurrentEdgeDebugText
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UNavigationHandle::GetCurrentEdgeDebugText()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetCurrentEdgeDebugText");

	UNavigationHandle_GetCurrentEdgeDebugText_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.GetPathCacheDebugText
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UNavigationHandle::GetPathCacheDebugText()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetPathCacheDebugText");

	UNavigationHandle_GetPathCacheDebugText_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.DrawPathCache
// ()
// Parameters:
// struct FVector                 DrawOffset                     (OptionalParm, Parm)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FColor                  DrawColor                      (OptionalParm, Parm)

void UNavigationHandle::DrawPathCache(const struct FVector& DrawOffset, bool bPersistent, const struct FColor& DrawColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.DrawPathCache");

	UNavigationHandle_DrawPathCache_Params params;
	params.DrawOffset = DrawOffset;
	params.bPersistent = bPersistent;
	params.DrawColor = DrawColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationHandle.ActorReachable
// ()
// Parameters:
// class AActor*                  A                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavigationHandle::ActorReachable(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.ActorReachable");

	UNavigationHandle_ActorReachable_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.PointReachable
// ()
// Parameters:
// struct FVector                 Point                          (Parm)
// struct FVector                 OverrideStartPoint             (OptionalParm, Parm)
// bool                           bAllowHitsInEndCollisionBox    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavigationHandle::PointReachable(const struct FVector& Point, const struct FVector& OverrideStartPoint, bool bAllowHitsInEndCollisionBox)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.PointReachable");

	UNavigationHandle_PointReachable_Params params;
	params.Point = Point;
	params.OverrideStartPoint = OverrideStartPoint;
	params.bAllowHitsInEndCollisionBox = bAllowHitsInEndCollisionBox;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.PointCheck
// ()
// Parameters:
// struct FVector                 Pt                             (Parm)
// struct FVector                 Extent                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavigationHandle::PointCheck(const struct FVector& Pt, const struct FVector& Extent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.PointCheck");

	UNavigationHandle_PointCheck_Params params;
	params.Pt = Pt;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.LineCheck
// ()
// Parameters:
// struct FVector                 Start                          (Parm)
// struct FVector                 End                            (Parm)
// struct FVector                 Extent                         (Parm)
// struct FVector                 out_HitLocation                (OptionalParm, Parm, OutParm)
// struct FVector                 out_HitNormal                  (OptionalParm, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavigationHandle::LineCheck(const struct FVector& Start, const struct FVector& End, const struct FVector& Extent, struct FVector* out_HitLocation, struct FVector* out_HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.LineCheck");

	UNavigationHandle_LineCheck_Params params;
	params.Start = Start;
	params.End = End;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_HitLocation != nullptr)
		*out_HitLocation = params.out_HitLocation;
	if (out_HitNormal != nullptr)
		*out_HitNormal = params.out_HitNormal;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.ObstaclePointCheck
// ()
// Parameters:
// struct FVector                 Pt                             (Parm)
// struct FVector                 Extent                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavigationHandle::ObstaclePointCheck(const struct FVector& Pt, const struct FVector& Extent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.ObstaclePointCheck");

	UNavigationHandle_ObstaclePointCheck_Params params;
	params.Pt = Pt;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.ObstacleLineCheck
// ()
// Parameters:
// struct FVector                 Start                          (Parm)
// struct FVector                 End                            (Parm)
// struct FVector                 Extent                         (Parm)
// struct FVector                 out_HitLoc                     (OptionalParm, Parm, OutParm)
// struct FVector                 out_HitNorm                    (OptionalParm, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavigationHandle::ObstacleLineCheck(const struct FVector& Start, const struct FVector& End, const struct FVector& Extent, struct FVector* out_HitLoc, struct FVector* out_HitNorm)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.ObstacleLineCheck");

	UNavigationHandle_ObstacleLineCheck_Params params;
	params.Start = Start;
	params.End = End;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_HitLoc != nullptr)
		*out_HitLoc = params.out_HitLoc;
	if (out_HitNorm != nullptr)
		*out_HitNorm = params.out_HitNorm;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.SuggestMovePreparation
// ()
// Parameters:
// struct FVector                 MovePt                         (Parm, OutParm)
// class AController*             C                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavigationHandle::SuggestMovePreparation(class AController* C, struct FVector* MovePt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.SuggestMovePreparation");

	UNavigationHandle_SuggestMovePreparation_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MovePt != nullptr)
		*MovePt = params.MovePt;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.FindPath
// ()
// Parameters:
// class AActor*                  out_DestActor                  (OptionalParm, Parm, OutParm)
// int                            out_DestItem                   (OptionalParm, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavigationHandle::FindPath(class AActor** out_DestActor, int* out_DestItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.FindPath");

	UNavigationHandle_FindPath_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_DestActor != nullptr)
		*out_DestActor = params.out_DestActor;
	if (out_DestItem != nullptr)
		*out_DestItem = params.out_DestItem;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.ComputeValidFinalDestination
// ()
// Parameters:
// struct FVector                 out_ComputedPosition           (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavigationHandle::ComputeValidFinalDestination(struct FVector* out_ComputedPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.ComputeValidFinalDestination");

	UNavigationHandle_ComputeValidFinalDestination_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ComputedPosition != nullptr)
		*out_ComputedPosition = params.out_ComputedPosition;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.SetFinalDestination
// ()
// Parameters:
// struct FVector                 FinalDest                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavigationHandle::SetFinalDestination(const struct FVector& FinalDest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.SetFinalDestination");

	UNavigationHandle_SetFinalDestination_Params params;
	params.FinalDest = FinalDest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.GetNextMoveLocation
// ()
// Parameters:
// struct FVector                 out_MoveDest                   (Parm, OutParm)
// float                          ArrivalDistance                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavigationHandle::GetNextMoveLocation(float ArrivalDistance, struct FVector* out_MoveDest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetNextMoveLocation");

	UNavigationHandle_GetNextMoveLocation_Params params;
	params.ArrivalDistance = ArrivalDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_MoveDest != nullptr)
		*out_MoveDest = params.out_MoveDest;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.GetPylonFromPos
// ()
// Parameters:
// struct FVector                 Position                       (Parm)
// class APylon*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class APylon* UNavigationHandle::GetPylonFromPos(const struct FVector& Position)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetPylonFromPos");

	UNavigationHandle_GetPylonFromPos_Params params;
	params.Position = Position;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.FindPylon
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavigationHandle::FindPylon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.FindPylon");

	UNavigationHandle_FindPylon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.GetBestUnfinishedPathPoint
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UNavigationHandle::GetBestUnfinishedPathPoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetBestUnfinishedPathPoint");

	UNavigationHandle_GetBestUnfinishedPathPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.PathCache_RemoveIndex
// ()
// Parameters:
// int                            InIdx                          (Parm)
// int                            Count                          (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavigationHandle::PathCache_RemoveIndex(int InIdx, int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.PathCache_RemoveIndex");

	UNavigationHandle_PathCache_RemoveIndex_Params params;
	params.InIdx = InIdx;
	params.Count = Count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.PathCache_GetGoalPoint
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UNavigationHandle::PathCache_GetGoalPoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.PathCache_GetGoalPoint");

	UNavigationHandle_PathCache_GetGoalPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.PathCache_Empty
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavigationHandle::PathCache_Empty()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.PathCache_Empty");

	UNavigationHandle_PathCache_Empty_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.GetPathCacheLength
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UNavigationHandle::GetPathCacheLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetPathCacheLength");

	UNavigationHandle_GetPathCacheLength_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.CreatePathGoalEvaluator
// ()
// Parameters:
// class UClass*                  GoalEvalClass                  (Parm)
// class UNavMeshPathGoalEvaluator* ReturnValue                    (Parm, OutParm, ReturnParm)

class UNavMeshPathGoalEvaluator* UNavigationHandle::CreatePathGoalEvaluator(class UClass* GoalEvalClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.CreatePathGoalEvaluator");

	UNavigationHandle_CreatePathGoalEvaluator_Params params;
	params.GoalEvalClass = GoalEvalClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.CreatePathConstraint
// ()
// Parameters:
// class UClass*                  ConstraintClass                (Parm)
// class UNavMeshPathConstraint*  ReturnValue                    (Parm, OutParm, ReturnParm)

class UNavMeshPathConstraint* UNavigationHandle::CreatePathConstraint(class UClass* ConstraintClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.CreatePathConstraint");

	UNavigationHandle_CreatePathConstraint_Params params;
	params.ConstraintClass = ConstraintClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.AddGoalEvaluator
// ()
// Parameters:
// class UNavMeshPathGoalEvaluator* Evaluator                      (Parm)

void UNavigationHandle::AddGoalEvaluator(class UNavMeshPathGoalEvaluator* Evaluator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.AddGoalEvaluator");

	UNavigationHandle_AddGoalEvaluator_Params params;
	params.Evaluator = Evaluator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationHandle.AddPathConstraint
// ()
// Parameters:
// class UNavMeshPathConstraint*  Constraint                     (Parm)

void UNavigationHandle::AddPathConstraint(class UNavMeshPathConstraint* Constraint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.AddPathConstraint");

	UNavigationHandle_AddPathConstraint_Params params;
	params.Constraint = Constraint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationHandle.ClearConstraints
// ()

void UNavigationHandle::ClearConstraints()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.ClearConstraints");

	UNavigationHandle_ClearConstraints_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_Filter.GetDumpString
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UNavMeshGoal_Filter::GetDumpString()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_Filter.GetDumpString");

	UNavMeshGoal_Filter_GetDumpString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoalFilter_MinPathDistance.MustBeLongerPathThan
// ()
// Parameters:
// class UNavMeshGoal_GenericFilterContainer* FilterContainer                (Parm)
// int                            InMinDistancePathShouldBe      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavMeshGoalFilter_MinPathDistance::MustBeLongerPathThan(class UNavMeshGoal_GenericFilterContainer* FilterContainer, int InMinDistancePathShouldBe)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoalFilter_MinPathDistance.MustBeLongerPathThan");

	UNavMeshGoalFilter_MinPathDistance_MustBeLongerPathThan_Params params;
	params.FilterContainer = FilterContainer;
	params.InMinDistancePathShouldBe = InMinDistancePathShouldBe;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoalFilter_NotNearOtherAI.NotNearOtherAI
// ()
// Parameters:
// class UNavMeshGoal_GenericFilterContainer* FilterContainer                (Parm)
// float                          InDistanceToCheck              (Const, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavMeshGoalFilter_NotNearOtherAI::NotNearOtherAI(class UNavMeshGoal_GenericFilterContainer* FilterContainer, float InDistanceToCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoalFilter_NotNearOtherAI.NotNearOtherAI");

	UNavMeshGoalFilter_NotNearOtherAI_NotNearOtherAI_Params params;
	params.FilterContainer = FilterContainer;
	params.InDistanceToCheck = InDistanceToCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoalFilter_OutOfViewFrom.MustBeHiddenFromThisPoint
// ()
// Parameters:
// class UNavMeshGoal_GenericFilterContainer* FilterContainer                (Parm)
// struct FVector                 InOutOfViewLocation            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavMeshGoalFilter_OutOfViewFrom::MustBeHiddenFromThisPoint(class UNavMeshGoal_GenericFilterContainer* FilterContainer, const struct FVector& InOutOfViewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoalFilter_OutOfViewFrom.MustBeHiddenFromThisPoint");

	UNavMeshGoalFilter_OutOfViewFrom_MustBeHiddenFromThisPoint_Params params;
	params.FilterContainer = FilterContainer;
	params.InOutOfViewLocation = InOutOfViewLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoalFilter_OutSideOfDotProductWedge.OutsideOfDotProductWedge
// ()
// Parameters:
// class UNavMeshGoal_GenericFilterContainer* FilterContainer                (Parm)
// struct FVector                 InLocation                     (Parm)
// struct FRotator                InRotation                     (Parm)
// float                          InEpsilon                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavMeshGoalFilter_OutSideOfDotProductWedge::OutsideOfDotProductWedge(class UNavMeshGoal_GenericFilterContainer* FilterContainer, const struct FVector& InLocation, const struct FRotator& InRotation, float InEpsilon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoalFilter_OutSideOfDotProductWedge.OutsideOfDotProductWedge");

	UNavMeshGoalFilter_OutSideOfDotProductWedge_OutsideOfDotProductWedge_Params params;
	params.FilterContainer = FilterContainer;
	params.InLocation = InLocation;
	params.InRotation = InRotation;
	params.InEpsilon = InEpsilon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoalFilter_PolyEncompassesAI.MakeSureAIFits
// ()
// Parameters:
// class UNavMeshGoal_GenericFilterContainer* FilterContainer                (Parm)
// struct FVector                 InOverrideExtentToCheck        (Const, OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavMeshGoalFilter_PolyEncompassesAI::MakeSureAIFits(class UNavMeshGoal_GenericFilterContainer* FilterContainer, const struct FVector& InOverrideExtentToCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoalFilter_PolyEncompassesAI.MakeSureAIFits");

	UNavMeshGoalFilter_PolyEncompassesAI_MakeSureAIFits_Params params;
	params.FilterContainer = FilterContainer;
	params.InOverrideExtentToCheck = InOverrideExtentToCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshPathConstraint.GetDumpString
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UNavMeshPathConstraint::GetDumpString()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPathConstraint.GetDumpString");

	UNavMeshPathConstraint_GetDumpString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshPathConstraint.Recycle
// ()

void UNavMeshPathConstraint::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPathConstraint.Recycle");

	UNavMeshPathConstraint_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshPath_AlongLine.Recycle
// ()

void UNavMeshPath_AlongLine::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_AlongLine.Recycle");

	UNavMeshPath_AlongLine_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshPath_AlongLine.AlongLine
// ()
// Parameters:
// class UNavigationHandle*       NavHandle                      (Parm)
// struct FVector                 Dir                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavMeshPath_AlongLine::AlongLine(class UNavigationHandle* NavHandle, const struct FVector& Dir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_AlongLine.AlongLine");

	UNavMeshPath_AlongLine_AlongLine_Params params;
	params.NavHandle = NavHandle;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshPath_EnforceTwoWayEdges.EnforceTwoWayEdges
// ()
// Parameters:
// class UNavigationHandle*       NavHandle                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavMeshPath_EnforceTwoWayEdges::EnforceTwoWayEdges(class UNavigationHandle* NavHandle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_EnforceTwoWayEdges.EnforceTwoWayEdges");

	UNavMeshPath_EnforceTwoWayEdges_EnforceTwoWayEdges_Params params;
	params.NavHandle = NavHandle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshPath_MinDistBetweenSpecsOfType.Recycle
// ()

void UNavMeshPath_MinDistBetweenSpecsOfType::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_MinDistBetweenSpecsOfType.Recycle");

	UNavMeshPath_MinDistBetweenSpecsOfType_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshPath_MinDistBetweenSpecsOfType.EnforceMinDist
// ()
// Parameters:
// class UNavigationHandle*       NavHandle                      (Parm)
// float                          InMinDist                      (Parm)
// TEnumAsByte<ENavMeshEdgeType>  InEdgeType                     (Parm)
// struct FVector                 LastLocation                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavMeshPath_MinDistBetweenSpecsOfType::EnforceMinDist(class UNavigationHandle* NavHandle, float InMinDist, TEnumAsByte<ENavMeshEdgeType> InEdgeType, const struct FVector& LastLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_MinDistBetweenSpecsOfType.EnforceMinDist");

	UNavMeshPath_MinDistBetweenSpecsOfType_EnforceMinDist_Params params;
	params.NavHandle = NavHandle;
	params.InMinDist = InMinDist;
	params.InEdgeType = InEdgeType;
	params.LastLocation = LastLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshPath_SameCoverLink.Recycle
// ()

void UNavMeshPath_SameCoverLink::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_SameCoverLink.Recycle");

	UNavMeshPath_SameCoverLink_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshPath_SameCoverLink.SameCoverLink
// ()
// Parameters:
// class UNavigationHandle*       NavHandle                      (Parm)
// class ACoverLink*              InLink                         (Parm)

void UNavMeshPath_SameCoverLink::SameCoverLink(class UNavigationHandle* NavHandle, class ACoverLink* InLink)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_SameCoverLink.SameCoverLink");

	UNavMeshPath_SameCoverLink_SameCoverLink_Params params;
	params.NavHandle = NavHandle;
	params.InLink = InLink;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshPath_Toward.Recycle
// ()

void UNavMeshPath_Toward::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_Toward.Recycle");

	UNavMeshPath_Toward_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshPath_Toward.TowardPoint
// ()
// Parameters:
// class UNavigationHandle*       NavHandle                      (Parm)
// struct FVector                 Point                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavMeshPath_Toward::TowardPoint(class UNavigationHandle* NavHandle, const struct FVector& Point)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_Toward.TowardPoint");

	UNavMeshPath_Toward_TowardPoint_Params params;
	params.NavHandle = NavHandle;
	params.Point = Point;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshPath_Toward.TowardGoal
// ()
// Parameters:
// class UNavigationHandle*       NavHandle                      (Parm)
// class AActor*                  Goal                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavMeshPath_Toward::TowardGoal(class UNavigationHandle* NavHandle, class AActor* Goal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_Toward.TowardGoal");

	UNavMeshPath_Toward_TowardGoal_Params params;
	params.NavHandle = NavHandle;
	params.Goal = Goal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshPath_WithinDistanceEnvelope.Recycle
// ()

void UNavMeshPath_WithinDistanceEnvelope::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_WithinDistanceEnvelope.Recycle");

	UNavMeshPath_WithinDistanceEnvelope_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshPath_WithinDistanceEnvelope.StayWithinEnvelopeToLoc
// ()
// Parameters:
// class UNavigationHandle*       NavHandle                      (Parm)
// struct FVector                 InEnvelopeTestPoint            (Parm)
// float                          InMaxDistance                  (Parm)
// float                          InMinDistance                  (Parm)
// bool                           bInSoft                        (OptionalParm, Parm)
// float                          InSoftStartPenalty             (OptionalParm, Parm)
// bool                           bOnlyTossOutSpecsThatLeave     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavMeshPath_WithinDistanceEnvelope::StayWithinEnvelopeToLoc(class UNavigationHandle* NavHandle, const struct FVector& InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, bool bInSoft, float InSoftStartPenalty, bool bOnlyTossOutSpecsThatLeave)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_WithinDistanceEnvelope.StayWithinEnvelopeToLoc");

	UNavMeshPath_WithinDistanceEnvelope_StayWithinEnvelopeToLoc_Params params;
	params.NavHandle = NavHandle;
	params.InEnvelopeTestPoint = InEnvelopeTestPoint;
	params.InMaxDistance = InMaxDistance;
	params.InMinDistance = InMinDistance;
	params.bInSoft = bInSoft;
	params.InSoftStartPenalty = InSoftStartPenalty;
	params.bOnlyTossOutSpecsThatLeave = bOnlyTossOutSpecsThatLeave;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshPath_WithinTraversalDist.Recycle
// ()

void UNavMeshPath_WithinTraversalDist::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_WithinTraversalDist.Recycle");

	UNavMeshPath_WithinTraversalDist_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshPath_WithinTraversalDist.DontExceedMaxDist
// ()
// Parameters:
// class UNavigationHandle*       NavHandle                      (Parm)
// float                          InMaxTraversalDist             (Parm)
// bool                           bInSoft                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavMeshPath_WithinTraversalDist::DontExceedMaxDist(class UNavigationHandle* NavHandle, float InMaxTraversalDist, bool bInSoft)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_WithinTraversalDist.DontExceedMaxDist");

	UNavMeshPath_WithinTraversalDist_DontExceedMaxDist_Params params;
	params.NavHandle = NavHandle;
	params.InMaxTraversalDist = InMaxTraversalDist;
	params.bInSoft = bInSoft;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshPathGoalEvaluator.GetDumpString
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UNavMeshPathGoalEvaluator::GetDumpString()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPathGoalEvaluator.GetDumpString");

	UNavMeshPathGoalEvaluator_GetDumpString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshPathGoalEvaluator.Recycle
// ()

void UNavMeshPathGoalEvaluator::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPathGoalEvaluator.Recycle");

	UNavMeshPathGoalEvaluator_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_At.Recycle
// ()

void UNavMeshGoal_At::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_At.Recycle");

	UNavMeshGoal_At_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_At.AtLocation
// ()
// Parameters:
// class UNavigationHandle*       NavHandle                      (Parm)
// struct FVector                 GoalLocation                   (Parm)
// float                          Dist                           (OptionalParm, Parm)
// bool                           bReturnPartial                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavMeshGoal_At::AtLocation(class UNavigationHandle* NavHandle, const struct FVector& GoalLocation, float Dist, bool bReturnPartial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_At.AtLocation");

	UNavMeshGoal_At_AtLocation_Params params;
	params.NavHandle = NavHandle;
	params.GoalLocation = GoalLocation;
	params.Dist = Dist;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoal_At.AtActor
// ()
// Parameters:
// class UNavigationHandle*       NavHandle                      (Parm)
// class AActor*                  GoalActor                      (Parm)
// float                          Dist                           (OptionalParm, Parm)
// bool                           bReturnPartial                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavMeshGoal_At::AtActor(class UNavigationHandle* NavHandle, class AActor* GoalActor, float Dist, bool bReturnPartial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_At.AtActor");

	UNavMeshGoal_At_AtActor_Params params;
	params.NavHandle = NavHandle;
	params.GoalActor = GoalActor;
	params.Dist = Dist;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoal_At.RecycleNative
// ()

void UNavMeshGoal_At::RecycleNative()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_At.RecycleNative");

	UNavMeshGoal_At_RecycleNative_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_ClosestActorInList.RecycleInternal
// ()

void UNavMeshGoal_ClosestActorInList::RecycleInternal()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_ClosestActorInList.RecycleInternal");

	UNavMeshGoal_ClosestActorInList_RecycleInternal_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_ClosestActorInList.Recycle
// ()

void UNavMeshGoal_ClosestActorInList::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_ClosestActorInList.Recycle");

	UNavMeshGoal_ClosestActorInList_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_ClosestActorInList.ClosestActorInList
// ()
// Parameters:
// class UNavigationHandle*       NavHandle                      (Parm)
// TArray<struct FBiasedGoalActor> InGoalList                     (Const, Parm, OutParm, NeedCtorLink)
// class UNavMeshGoal_ClosestActorInList* ReturnValue                    (Parm, OutParm, ReturnParm)

class UNavMeshGoal_ClosestActorInList* UNavMeshGoal_ClosestActorInList::ClosestActorInList(class UNavigationHandle* NavHandle, TArray<struct FBiasedGoalActor>* InGoalList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_ClosestActorInList.ClosestActorInList");

	UNavMeshGoal_ClosestActorInList_ClosestActorInList_Params params;
	params.NavHandle = NavHandle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InGoalList != nullptr)
		*InGoalList = params.InGoalList;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoal_GenericFilterContainer.Recycle
// ()

void UNavMeshGoal_GenericFilterContainer::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_GenericFilterContainer.Recycle");

	UNavMeshGoal_GenericFilterContainer_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_GenericFilterContainer.GetGoalPoint
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UNavMeshGoal_GenericFilterContainer::GetGoalPoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_GenericFilterContainer.GetGoalPoint");

	UNavMeshGoal_GenericFilterContainer_GetGoalPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoal_GenericFilterContainer.GetFilterOfType
// ()
// Parameters:
// class UClass*                  Filter_Class                   (Parm)
// class UNavMeshGoal_Filter*     ReturnValue                    (Parm, OutParm, ReturnParm)

class UNavMeshGoal_Filter* UNavMeshGoal_GenericFilterContainer::GetFilterOfType(class UClass* Filter_Class)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_GenericFilterContainer.GetFilterOfType");

	UNavMeshGoal_GenericFilterContainer_GetFilterOfType_Params params;
	params.Filter_Class = Filter_Class;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoal_GenericFilterContainer.CreateAndAddFilterToNavHandle
// ()
// Parameters:
// class UNavigationHandle*       NavHandle                      (Parm)
// int                            InMaxPathVisits                (OptionalParm, Parm)
// class UNavMeshGoal_GenericFilterContainer* ReturnValue                    (Parm, OutParm, ReturnParm)

class UNavMeshGoal_GenericFilterContainer* UNavMeshGoal_GenericFilterContainer::CreateAndAddFilterToNavHandle(class UNavigationHandle* NavHandle, int InMaxPathVisits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_GenericFilterContainer.CreateAndAddFilterToNavHandle");

	UNavMeshGoal_GenericFilterContainer_CreateAndAddFilterToNavHandle_Params params;
	params.NavHandle = NavHandle;
	params.InMaxPathVisits = InMaxPathVisits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoal_Null.Recycle
// ()

void UNavMeshGoal_Null::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_Null.Recycle");

	UNavMeshGoal_Null_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_Null.RecycleNative
// ()

void UNavMeshGoal_Null::RecycleNative()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_Null.RecycleNative");

	UNavMeshGoal_Null_RecycleNative_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_Null.GoUntilBust
// ()
// Parameters:
// class UNavigationHandle*       NavHandle                      (Parm)
// int                            InMaxPathVisits                (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavMeshGoal_Null::GoUntilBust(class UNavigationHandle* NavHandle, int InMaxPathVisits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_Null.GoUntilBust");

	UNavMeshGoal_Null_GoUntilBust_Params params;
	params.NavHandle = NavHandle;
	params.InMaxPathVisits = InMaxPathVisits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoal_PolyEncompassesAI.Recycle
// ()

void UNavMeshGoal_PolyEncompassesAI::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_PolyEncompassesAI.Recycle");

	UNavMeshGoal_PolyEncompassesAI_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_PolyEncompassesAI.MakeSureAIFits
// ()
// Parameters:
// class UNavigationHandle*       NavHandle                      (Parm)
// struct FVector                 InOverrideExtentToCheck        (Const, OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavMeshGoal_PolyEncompassesAI::MakeSureAIFits(class UNavigationHandle* NavHandle, const struct FVector& InOverrideExtentToCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_PolyEncompassesAI.MakeSureAIFits");

	UNavMeshGoal_PolyEncompassesAI_MakeSureAIFits_Params params;
	params.NavHandle = NavHandle;
	params.InOverrideExtentToCheck = InOverrideExtentToCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoal_Random.Recycle
// ()

void UNavMeshGoal_Random::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_Random.Recycle");

	UNavMeshGoal_Random_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_Random.RecycleNative
// ()

void UNavMeshGoal_Random::RecycleNative()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_Random.RecycleNative");

	UNavMeshGoal_Random_RecycleNative_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_Random.FindRandom
// ()
// Parameters:
// class UNavigationHandle*       NavHandle                      (Parm)
// int                            InMinDist                      (OptionalParm, Parm)
// int                            InMaxPathVisits                (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavMeshGoal_Random::FindRandom(class UNavigationHandle* NavHandle, int InMinDist, int InMaxPathVisits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_Random.FindRandom");

	UNavMeshGoal_Random_FindRandom_Params params;
	params.NavHandle = NavHandle;
	params.InMinDist = InMinDist;
	params.InMaxPathVisits = InMaxPathVisits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoal_WithinDistanceEnvelope.Recycle
// ()

void UNavMeshGoal_WithinDistanceEnvelope::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_WithinDistanceEnvelope.Recycle");

	UNavMeshGoal_WithinDistanceEnvelope_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_WithinDistanceEnvelope.GoalWithinEnvelopeToLoc
// ()
// Parameters:
// class UNavigationHandle*       NavHandle                      (Parm)
// struct FVector                 InEnvelopeTestPoint            (Parm)
// float                          InMaxDistance                  (Parm)
// float                          InMinDistance                  (Parm)
// float                          InMinTraversalDist             (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UNavMeshGoal_WithinDistanceEnvelope::GoalWithinEnvelopeToLoc(class UNavigationHandle* NavHandle, const struct FVector& InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, float InMinTraversalDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_WithinDistanceEnvelope.GoalWithinEnvelopeToLoc");

	UNavMeshGoal_WithinDistanceEnvelope_GoalWithinEnvelopeToLoc_Params params;
	params.NavHandle = NavHandle;
	params.InEnvelopeTestPoint = InEnvelopeTestPoint;
	params.InMaxDistance = InMaxDistance;
	params.InMinDistance = InMinDistance;
	params.InMinTraversalDist = InMinTraversalDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PathConstraint.GetDumpString
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UPathConstraint::GetDumpString()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PathConstraint.GetDumpString");

	UPathConstraint_GetDumpString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PathConstraint.Recycle
// ()

void UPathConstraint::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PathConstraint.Recycle");

	UPathConstraint_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Path_AlongLine.Recycle
// ()

void UPath_AlongLine::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_AlongLine.Recycle");

	UPath_AlongLine_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Path_AlongLine.AlongLine
// ()
// Parameters:
// class APawn*                   P                              (Parm)
// struct FVector                 Dir                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPath_AlongLine::AlongLine(class APawn* P, const struct FVector& Dir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_AlongLine.AlongLine");

	UPath_AlongLine_AlongLine_Params params;
	params.P = P;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Path_AvoidInEscapableNodes.Recycle
// ()

void UPath_AvoidInEscapableNodes::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_AvoidInEscapableNodes.Recycle");

	UPath_AvoidInEscapableNodes_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Path_AvoidInEscapableNodes.DontGetStuck
// ()
// Parameters:
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPath_AvoidInEscapableNodes::DontGetStuck(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_AvoidInEscapableNodes.DontGetStuck");

	UPath_AvoidInEscapableNodes_DontGetStuck_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Path_AvoidInEscapableNodes.CachePawnReacFlags
// ()
// Parameters:
// class APawn*                   P                              (Parm)

void UPath_AvoidInEscapableNodes::CachePawnReacFlags(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_AvoidInEscapableNodes.CachePawnReacFlags");

	UPath_AvoidInEscapableNodes_CachePawnReacFlags_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Path_MinDistBetweenSpecsOfType.Recycle
// ()

void UPath_MinDistBetweenSpecsOfType::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_MinDistBetweenSpecsOfType.Recycle");

	UPath_MinDistBetweenSpecsOfType_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Path_MinDistBetweenSpecsOfType.EnforceMinDist
// ()
// Parameters:
// class APawn*                   P                              (Parm)
// float                          InMinDist                      (Parm)
// class UClass*                  InSpecClass                    (Parm)
// struct FVector                 LastLocation                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPath_MinDistBetweenSpecsOfType::EnforceMinDist(class APawn* P, float InMinDist, class UClass* InSpecClass, const struct FVector& LastLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_MinDistBetweenSpecsOfType.EnforceMinDist");

	UPath_MinDistBetweenSpecsOfType_EnforceMinDist_Params params;
	params.P = P;
	params.InMinDist = InMinDist;
	params.InSpecClass = InSpecClass;
	params.LastLocation = LastLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Path_TowardGoal.Recycle
// ()

void UPath_TowardGoal::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_TowardGoal.Recycle");

	UPath_TowardGoal_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Path_TowardGoal.TowardGoal
// ()
// Parameters:
// class APawn*                   P                              (Parm)
// class AActor*                  Goal                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPath_TowardGoal::TowardGoal(class APawn* P, class AActor* Goal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_TowardGoal.TowardGoal");

	UPath_TowardGoal_TowardGoal_Params params;
	params.P = P;
	params.Goal = Goal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Path_TowardPoint.Recycle
// ()

void UPath_TowardPoint::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_TowardPoint.Recycle");

	UPath_TowardPoint_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Path_TowardPoint.TowardPoint
// ()
// Parameters:
// class APawn*                   P                              (Parm)
// struct FVector                 Point                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPath_TowardPoint::TowardPoint(class APawn* P, const struct FVector& Point)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_TowardPoint.TowardPoint");

	UPath_TowardPoint_TowardPoint_Params params;
	params.P = P;
	params.Point = Point;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Path_WithinDistanceEnvelope.Recycle
// ()

void UPath_WithinDistanceEnvelope::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_WithinDistanceEnvelope.Recycle");

	UPath_WithinDistanceEnvelope_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Path_WithinDistanceEnvelope.StayWithinEnvelopeToLoc
// ()
// Parameters:
// class APawn*                   P                              (Parm)
// struct FVector                 InEnvelopeTestPoint            (Parm)
// float                          InMaxDistance                  (Parm)
// float                          InMinDistance                  (Parm)
// bool                           bInSoft                        (OptionalParm, Parm)
// float                          InSoftStartPenalty             (OptionalParm, Parm)
// bool                           bOnlyTossOutSpecsThatLeave     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPath_WithinDistanceEnvelope::StayWithinEnvelopeToLoc(class APawn* P, const struct FVector& InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, bool bInSoft, float InSoftStartPenalty, bool bOnlyTossOutSpecsThatLeave)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_WithinDistanceEnvelope.StayWithinEnvelopeToLoc");

	UPath_WithinDistanceEnvelope_StayWithinEnvelopeToLoc_Params params;
	params.P = P;
	params.InEnvelopeTestPoint = InEnvelopeTestPoint;
	params.InMaxDistance = InMaxDistance;
	params.InMinDistance = InMinDistance;
	params.bInSoft = bInSoft;
	params.InSoftStartPenalty = InSoftStartPenalty;
	params.bOnlyTossOutSpecsThatLeave = bOnlyTossOutSpecsThatLeave;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Path_WithinTraversalDist.Recycle
// ()

void UPath_WithinTraversalDist::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_WithinTraversalDist.Recycle");

	UPath_WithinTraversalDist_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Path_WithinTraversalDist.DontExceedMaxDist
// ()
// Parameters:
// class APawn*                   P                              (Parm)
// float                          InMaxTraversalDist             (Parm)
// bool                           bInSoft                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPath_WithinTraversalDist::DontExceedMaxDist(class APawn* P, float InMaxTraversalDist, bool bInSoft)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_WithinTraversalDist.DontExceedMaxDist");

	UPath_WithinTraversalDist_DontExceedMaxDist_Params params;
	params.P = P;
	params.InMaxTraversalDist = InMaxTraversalDist;
	params.bInSoft = bInSoft;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PathGoalEvaluator.GetDumpString
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UPathGoalEvaluator::GetDumpString()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PathGoalEvaluator.GetDumpString");

	UPathGoalEvaluator_GetDumpString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PathGoalEvaluator.Recycle
// ()

void UPathGoalEvaluator::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PathGoalEvaluator.Recycle");

	UPathGoalEvaluator_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Goal_AtActor.Recycle
// ()

void UGoal_AtActor::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Goal_AtActor.Recycle");

	UGoal_AtActor_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Goal_AtActor.AtActor
// ()
// Parameters:
// class APawn*                   P                              (Parm)
// class AActor*                  Goal                           (Parm)
// float                          Dist                           (OptionalParm, Parm)
// bool                           bReturnPartial                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGoal_AtActor::AtActor(class APawn* P, class AActor* Goal, float Dist, bool bReturnPartial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Goal_AtActor.AtActor");

	UGoal_AtActor_AtActor_Params params;
	params.P = P;
	params.Goal = Goal;
	params.Dist = Dist;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Goal_Null.Recycle
// ()

void UGoal_Null::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Goal_Null.Recycle");

	UGoal_Null_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Goal_Null.GoUntilBust
// ()
// Parameters:
// class APawn*                   P                              (Parm)
// int                            InMaxPathVisits                (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGoal_Null::GoUntilBust(class APawn* P, int InMaxPathVisits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Goal_Null.GoUntilBust");

	UGoal_Null_GoUntilBust_Params params;
	params.P = P;
	params.InMaxPathVisits = InMaxPathVisits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshActor.CreateForceField
// ()
// Parameters:
// class UAnimNotify_ForceField*  AnimNotifyData                 (Const, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ASkeletalMeshActor::CreateForceField(class UAnimNotify_ForceField* AnimNotifyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.CreateForceField");

	ASkeletalMeshActor_CreateForceField_Params params;
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshActor.SkelMeshActorOnParticleSystemFinished
// ()
// Parameters:
// class UParticleSystemComponent* PSC                            (Parm, EditInline)

void ASkeletalMeshActor::SkelMeshActorOnParticleSystemFinished(class UParticleSystemComponent* PSC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.SkelMeshActorOnParticleSystemFinished");

	ASkeletalMeshActor_SkelMeshActorOnParticleSystemFinished_Params params;
	params.PSC = PSC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.PlayParticleEffect
// ()
// Parameters:
// class UAnimNotify_PlayParticleEffect* AnimNotifyData                 (Const, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ASkeletalMeshActor::PlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.PlayParticleEffect");

	ASkeletalMeshActor_PlayParticleEffect_Params params;
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshActor.ApplyCheckpointRecord
// ()
// Parameters:
// struct ASkeletalMeshActor_FCheckpointRecord Record                         (Const, Parm, OutParm)

void ASkeletalMeshActor::ApplyCheckpointRecord(struct ASkeletalMeshActor_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.ApplyCheckpointRecord");

	ASkeletalMeshActor_ApplyCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.SkeletalMeshActor.CreateCheckpointRecord
// ()
// Parameters:
// struct ASkeletalMeshActor_FCheckpointRecord Record                         (Parm, OutParm)

void ASkeletalMeshActor::CreateCheckpointRecord(struct ASkeletalMeshActor_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.CreateCheckpointRecord");

	ASkeletalMeshActor_CreateCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.SkeletalMeshActor.ShouldSaveForCheckpoint
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ASkeletalMeshActor::ShouldSaveForCheckpoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.ShouldSaveForCheckpoint");

	ASkeletalMeshActor_ShouldSaveForCheckpoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshActor.TakeDamage
// ()
// Parameters:
// int                            Damage                         (Parm)
// class AController*             EventInstigator                (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)

void ASkeletalMeshActor::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.TakeDamage");

	ASkeletalMeshActor_TakeDamage_Params params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.DoKismetAttachment
// ()
// Parameters:
// class AActor*                  Attachment                     (Parm)
// class USeqAct_AttachToActor*   Action                         (Parm)

void ASkeletalMeshActor::DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.DoKismetAttachment");

	ASkeletalMeshActor_DoKismetAttachment_Params params;
	params.Attachment = Attachment;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.OnSetSkelControlTarget
// ()
// Parameters:
// class USeqAct_SetSkelControlTarget* Action                         (Parm)

void ASkeletalMeshActor::OnSetSkelControlTarget(class USeqAct_SetSkelControlTarget* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnSetSkelControlTarget");

	ASkeletalMeshActor_OnSetSkelControlTarget_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.OnUpdatePhysBonesFromAnim
// ()
// Parameters:
// class USeqAct_UpdatePhysBonesFromAnim* Action                         (Parm)

void ASkeletalMeshActor::OnUpdatePhysBonesFromAnim(class USeqAct_UpdatePhysBonesFromAnim* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnUpdatePhysBonesFromAnim");

	ASkeletalMeshActor_OnUpdatePhysBonesFromAnim_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.OnSetMesh
// ()
// Parameters:
// class USeqAct_SetMesh*         Action                         (Parm)

void ASkeletalMeshActor::OnSetMesh(class USeqAct_SetMesh* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnSetMesh");

	ASkeletalMeshActor_OnSetMesh_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.IsActorPlayingFaceFXAnim
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ASkeletalMeshActor::IsActorPlayingFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.IsActorPlayingFaceFXAnim");

	ASkeletalMeshActor_IsActorPlayingFaceFXAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshActor.GetActorFaceFXAsset
// ()
// Parameters:
// class UFaceFXAsset*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UFaceFXAsset* ASkeletalMeshActor::GetActorFaceFXAsset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.GetActorFaceFXAsset");

	ASkeletalMeshActor_GetActorFaceFXAsset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshActor.OnPlayFaceFXAnim
// ()
// Parameters:
// class USeqAct_PlayFaceFXAnim*  inAction                       (Parm)

void ASkeletalMeshActor::OnPlayFaceFXAnim(class USeqAct_PlayFaceFXAnim* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnPlayFaceFXAnim");

	ASkeletalMeshActor_OnPlayFaceFXAnim_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.GetFaceFXAudioComponent
// ()
// Parameters:
// class UAudioComponent*         ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UAudioComponent* ASkeletalMeshActor::GetFaceFXAudioComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.GetFaceFXAudioComponent");

	ASkeletalMeshActor_GetFaceFXAudioComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshActor.StopActorFaceFXAnim
// ()

void ASkeletalMeshActor::StopActorFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.StopActorFaceFXAnim");

	ASkeletalMeshActor_StopActorFaceFXAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.PlayActorFaceFXAnim
// ()
// Parameters:
// class UFaceFXAnimSet*          AnimSet                        (Parm)
// struct FString                 GroupName                      (Parm, NeedCtorLink)
// struct FString                 SeqName                        (Parm, NeedCtorLink)
// class USoundCue*               SoundCueToPlay                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ASkeletalMeshActor::PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName, class USoundCue* SoundCueToPlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.PlayActorFaceFXAnim");

	ASkeletalMeshActor_PlayActorFaceFXAnim_Params params;
	params.AnimSet = AnimSet;
	params.GroupName = GroupName;
	params.SeqName = SeqName;
	params.SoundCueToPlay = SoundCueToPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshActor.MAT_FinishAnimControl
// ()
// Parameters:
// class UInterpGroup*            InInterpGroup                  (Parm)

void ASkeletalMeshActor::MAT_FinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.MAT_FinishAnimControl");

	ASkeletalMeshActor_MAT_FinishAnimControl_Params params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.FinishAnimControl
// ()
// Parameters:
// class UInterpGroup*            InInterpGroup                  (Parm)

void ASkeletalMeshActor::FinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.FinishAnimControl");

	ASkeletalMeshActor_FinishAnimControl_Params params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.SetAnimPosition
// ()
// Parameters:
// struct FName                   SlotName                       (Parm)
// int                            ChannelIndex                   (Parm)
// struct FName                   InAnimSeqName                  (Parm)
// float                          InPosition                     (Parm)
// bool                           bFireNotifies                  (Parm)
// bool                           bLooping                       (Parm)
// bool                           bEnableRootMotion              (Parm)

void ASkeletalMeshActor::SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.SetAnimPosition");

	ASkeletalMeshActor_SetAnimPosition_Params params;
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.MAT_BeginAnimControl
// ()
// Parameters:
// class UInterpGroup*            InInterpGroup                  (Parm)

void ASkeletalMeshActor::MAT_BeginAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.MAT_BeginAnimControl");

	ASkeletalMeshActor_MAT_BeginAnimControl_Params params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.BeginAnimControl
// ()
// Parameters:
// class UInterpGroup*            InInterpGroup                  (Parm)

void ASkeletalMeshActor::BeginAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.BeginAnimControl");

	ASkeletalMeshActor_BeginAnimControl_Params params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.OnSetMaterial
// ()
// Parameters:
// class USeqAct_SetMaterial*     Action                         (Parm)

void ASkeletalMeshActor::OnSetMaterial(class USeqAct_SetMaterial* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnSetMaterial");

	ASkeletalMeshActor_OnSetMaterial_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void ASkeletalMeshActor::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnToggle");

	ASkeletalMeshActor_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void ASkeletalMeshActor::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.ReplicatedEvent");

	ASkeletalMeshActor_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.UpdateAnimSetList
// ()

void ASkeletalMeshActor::UpdateAnimSetList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.UpdateAnimSetList");

	ASkeletalMeshActor_UpdateAnimSetList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.Destroyed
// ()

void ASkeletalMeshActor::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.Destroyed");

	ASkeletalMeshActor_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.PostBeginPlay
// ()

void ASkeletalMeshActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.PostBeginPlay");

	ASkeletalMeshActor_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorBasedOnExtremeContent.SetMaterialBasedOnExtremeContent
// ()

void ASkeletalMeshActorBasedOnExtremeContent::SetMaterialBasedOnExtremeContent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorBasedOnExtremeContent.SetMaterialBasedOnExtremeContent");

	ASkeletalMeshActorBasedOnExtremeContent_SetMaterialBasedOnExtremeContent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorBasedOnExtremeContent.PostBeginPlay
// ()

void ASkeletalMeshActorBasedOnExtremeContent::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorBasedOnExtremeContent.PostBeginPlay");

	ASkeletalMeshActorBasedOnExtremeContent_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.SetSkelControlScale
// ()
// Parameters:
// struct FName                   SkelControlName                (Parm)
// float                          Scale                          (Parm)

void ASkeletalMeshActorMAT::SetSkelControlScale(const struct FName& SkelControlName, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.SetSkelControlScale");

	ASkeletalMeshActorMAT_SetSkelControlScale_Params params;
	params.SkelControlName = SkelControlName;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.SetMorphWeight
// ()
// Parameters:
// struct FName                   MorphNodeName                  (Parm)
// float                          MorphWeight                    (Parm)

void ASkeletalMeshActorMAT::SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.SetMorphWeight");

	ASkeletalMeshActorMAT_SetMorphWeight_Params params;
	params.MorphNodeName = MorphNodeName;
	params.MorphWeight = MorphWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.FinishAnimControl
// ()
// Parameters:
// class UInterpGroup*            InInterpGroup                  (Parm)

void ASkeletalMeshActorMAT::FinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.FinishAnimControl");

	ASkeletalMeshActorMAT_FinishAnimControl_Params params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.MAT_SetAnimPosition
// ()
// Parameters:
// struct FName                   SlotName                       (Parm)
// int                            ChannelIndex                   (Parm)
// struct FName                   InAnimSeqName                  (Parm)
// float                          InPosition                     (Parm)
// bool                           bFireNotifies                  (Parm)
// bool                           bLooping                       (Parm)
// bool                           bEnableRootMotion              (Parm)

void ASkeletalMeshActorMAT::MAT_SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.MAT_SetAnimPosition");

	ASkeletalMeshActorMAT_MAT_SetAnimPosition_Params params;
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.SetAnimPosition
// ()
// Parameters:
// struct FName                   SlotName                       (Parm)
// int                            ChannelIndex                   (Parm)
// struct FName                   InAnimSeqName                  (Parm)
// float                          InPosition                     (Parm)
// bool                           bFireNotifies                  (Parm)
// bool                           bLooping                       (Parm)
// bool                           bEnableRootMotion              (Parm)

void ASkeletalMeshActorMAT::SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.SetAnimPosition");

	ASkeletalMeshActorMAT_SetAnimPosition_Params params;
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.ClearAnimNodes
// ()

void ASkeletalMeshActorMAT::ClearAnimNodes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.ClearAnimNodes");

	ASkeletalMeshActorMAT_ClearAnimNodes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.CacheAnimNodes
// ()

void ASkeletalMeshActorMAT::CacheAnimNodes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.CacheAnimNodes");

	ASkeletalMeshActorMAT_CacheAnimNodes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.PostInitAnimTree
// ()
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (Parm, EditInline)

void ASkeletalMeshActorMAT::PostInitAnimTree(class USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.PostInitAnimTree");

	ASkeletalMeshActorMAT_PostInitAnimTree_Params params;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.Destroyed
// ()

void ASkeletalMeshActorMAT::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.Destroyed");

	ASkeletalMeshActorMAT_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.MAT_SetSkelControlScale
// ()
// Parameters:
// struct FName                   SkelControlName                (Parm)
// float                          Scale                          (Parm)

void ASkeletalMeshActorMAT::MAT_SetSkelControlScale(const struct FName& SkelControlName, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.MAT_SetSkelControlScale");

	ASkeletalMeshActorMAT_MAT_SetSkelControlScale_Params params;
	params.SkelControlName = SkelControlName;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.MAT_SetMorphWeight
// ()
// Parameters:
// struct FName                   MorphNodeName                  (Parm)
// float                          MorphWeight                    (Parm)

void ASkeletalMeshActorMAT::MAT_SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.MAT_SetMorphWeight");

	ASkeletalMeshActorMAT_MAT_SetMorphWeight_Params params;
	params.MorphNodeName = MorphNodeName;
	params.MorphWeight = MorphWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.MAT_SetAnimWeights
// ()
// Parameters:
// TArray<struct FAnimSlotInfo>   SlotInfos                      (Parm, NeedCtorLink)

void ASkeletalMeshActorMAT::MAT_SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.MAT_SetAnimWeights");

	ASkeletalMeshActorMAT_MAT_SetAnimWeights_Params params;
	params.SlotInfos = SlotInfos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimSequence.GetNotifyTimeByClass
// ()
// Parameters:
// class UClass*                  NotifyClass                    (Parm)
// float                          PlayRate                       (OptionalParm, Parm)
// float                          StartPosition                  (OptionalParm, Parm)
// class UAnimNotify*             out_Notify                     (OptionalParm, Parm, OutParm)
// float                          out_Duration                   (OptionalParm, Parm, OutParm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimSequence::GetNotifyTimeByClass(class UClass* NotifyClass, float PlayRate, float StartPosition, class UAnimNotify** out_Notify, float* out_Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSequence.GetNotifyTimeByClass");

	UAnimSequence_GetNotifyTimeByClass_Params params;
	params.NotifyClass = NotifyClass;
	params.PlayRate = PlayRate;
	params.StartPosition = StartPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Notify != nullptr)
		*out_Notify = params.out_Notify;
	if (out_Duration != nullptr)
		*out_Duration = params.out_Duration;

	return params.ReturnValue;
}


// Function Engine.AnimNotify.FindNextNotifyOfClass
// ()
// Parameters:
// class UAnimNodeSequence*       AnimSeqInstigator              (Parm)
// class UClass*                  NotifyClass                    (Parm)
// struct FAnimNotifyEvent        OutEvent                       (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UAnimNotify::FindNextNotifyOfClass(class UAnimNodeSequence* AnimSeqInstigator, class UClass* NotifyClass, struct FAnimNotifyEvent* OutEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify.FindNextNotifyOfClass");

	UAnimNotify_FindNextNotifyOfClass_Params params;
	params.AnimSeqInstigator = AnimSeqInstigator;
	params.NotifyClass = NotifyClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutEvent != nullptr)
		*OutEvent = params.OutEvent;

	return params.ReturnValue;
}


// Function Engine.AnimNotify_Scripted.NotifyEnd
// ()
// Parameters:
// class AActor*                  Owner                          (Parm)
// class UAnimNodeSequence*       AnimSeqInstigator              (Parm)

void UAnimNotify_Scripted::NotifyEnd(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_Scripted.NotifyEnd");

	UAnimNotify_Scripted_NotifyEnd_Params params;
	params.Owner = Owner;
	params.AnimSeqInstigator = AnimSeqInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNotify_Scripted.Notify
// ()
// Parameters:
// class AActor*                  Owner                          (Parm)
// class UAnimNodeSequence*       AnimSeqInstigator              (Parm)

void UAnimNotify_Scripted::Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_Scripted.Notify");

	UAnimNotify_Scripted_Notify_Params params;
	params.Owner = Owner;
	params.AnimSeqInstigator = AnimSeqInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.OnSetVelocity
// ()
// Parameters:
// class USeqAct_SetVelocity*     Action                         (Parm)

void APawn::OnSetVelocity(class USeqAct_SetVelocity* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnSetVelocity");

	APawn_OnSetVelocity_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Speak
// ()
// Parameters:
// class USoundCue*               Cue                            (Parm)

void APawn::Speak(class USoundCue* Cue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Speak");

	APawn_Speak_Params params;
	params.Cue = Cue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetScalarParameterInterp
// ()
// Parameters:
// struct FScalarParameterInterpStruct ScalarParameterInterp          (Const, Parm, OutParm)

void APawn::SetScalarParameterInterp(struct FScalarParameterInterpStruct* ScalarParameterInterp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetScalarParameterInterp");

	APawn_SetScalarParameterInterp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ScalarParameterInterp != nullptr)
		*ScalarParameterInterp = params.ScalarParameterInterp;
}


// Function Engine.Pawn.SetRootMotionInterpCurrentTime
// ()
// Parameters:
// float                          inTime                         (Parm)
// float                          DeltaTime                      (OptionalParm, Parm)
// bool                           bUpdateSkelPose                (OptionalParm, Parm)

void APawn::SetRootMotionInterpCurrentTime(float inTime, float DeltaTime, bool bUpdateSkelPose)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetRootMotionInterpCurrentTime");

	APawn_SetRootMotionInterpCurrentTime_Params params;
	params.inTime = inTime;
	params.DeltaTime = DeltaTime;
	params.bUpdateSkelPose = bUpdateSkelPose;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetCinematicMode
// ()
// Parameters:
// bool                           bInCinematicMode               (Parm)

void APawn::SetCinematicMode(bool bInCinematicMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetCinematicMode");

	APawn_SetCinematicMode_Params params;
	params.bInCinematicMode = bInCinematicMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ZeroMovementVariables
// ()

void APawn::ZeroMovementVariables()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ZeroMovementVariables");

	APawn_ZeroMovementVariables_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClearPathStep
// ()

void APawn::ClearPathStep()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClearPathStep");

	APawn_ClearPathStep_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.DrawPathStep
// ()
// Parameters:
// class UCanvas*                 C                              (Parm)

void APawn::DrawPathStep(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DrawPathStep");

	APawn_DrawPathStep_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IncrementPathChild
// ()
// Parameters:
// int                            Cnt                            (Parm)
// class UCanvas*                 C                              (Parm)

void APawn::IncrementPathChild(int Cnt, class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IncrementPathChild");

	APawn_IncrementPathChild_Params params;
	params.Cnt = Cnt;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IncrementPathStep
// ()
// Parameters:
// int                            Cnt                            (Parm)
// class UCanvas*                 C                              (Parm)

void APawn::IncrementPathStep(int Cnt, class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IncrementPathStep");

	APawn_IncrementPathStep_Params params;
	params.Cnt = Cnt;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CreatePathGoalEvaluator
// ()
// Parameters:
// class UClass*                  GoalEvalClass                  (Parm)
// class UPathGoalEvaluator*      ReturnValue                    (Parm, OutParm, ReturnParm)

class UPathGoalEvaluator* APawn::CreatePathGoalEvaluator(class UClass* GoalEvalClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CreatePathGoalEvaluator");

	APawn_CreatePathGoalEvaluator_Params params;
	params.GoalEvalClass = GoalEvalClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CreatePathConstraint
// ()
// Parameters:
// class UClass*                  ConstraintClass                (Parm)
// class UPathConstraint*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UPathConstraint* APawn::CreatePathConstraint(class UClass* ConstraintClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CreatePathConstraint");

	APawn_CreatePathConstraint_Params params;
	params.ConstraintClass = ConstraintClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.AddGoalEvaluator
// ()
// Parameters:
// class UPathGoalEvaluator*      Evaluator                      (Parm)

void APawn::AddGoalEvaluator(class UPathGoalEvaluator* Evaluator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddGoalEvaluator");

	APawn_AddGoalEvaluator_Params params;
	params.Evaluator = Evaluator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AddPathConstraint
// ()
// Parameters:
// class UPathConstraint*         Constraint                     (Parm)

void APawn::AddPathConstraint(class UPathConstraint* Constraint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddPathConstraint");

	APawn_AddPathConstraint_Params params;
	params.Constraint = Constraint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClearConstraints
// ()

void APawn::ClearConstraints()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClearConstraints");

	APawn_ClearConstraints_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SoakPause
// ()

void APawn::SoakPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SoakPause");

	APawn_SoakPause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.BecomeViewTarget
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)

void APawn::BecomeViewTarget(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BecomeViewTarget");

	APawn_BecomeViewTarget_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MessagePlayer
// ()
// Parameters:
// struct FString                 msg                            (Parm, CoerceParm, NeedCtorLink)

void APawn::MessagePlayer(const struct FString& msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MessagePlayer");

	APawn_MessagePlayer_Params params;
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.HandleTeleport
// ()
// Parameters:
// TArray<class UObject*>         DestList                       (Parm, NeedCtorLink)
// bool                           bUpdateRotation                (Parm)
// bool                           bCheckOverlap                  (Parm)
// float                          TeleportDistance               (OptionalParm, Parm)
// TArray<class AVolume*>         TeleportVolumes                (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::HandleTeleport(TArray<class UObject*> DestList, bool bUpdateRotation, bool bCheckOverlap, float TeleportDistance, TArray<class AVolume*> TeleportVolumes)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HandleTeleport");

	APawn_HandleTeleport_Params params;
	params.DestList = DestList;
	params.bUpdateRotation = bUpdateRotation;
	params.bCheckOverlap = bCheckOverlap;
	params.TeleportDistance = TeleportDistance;
	params.TeleportVolumes = TeleportVolumes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.OnTeleport
// ()
// Parameters:
// class USeqAct_Teleport*        Action                         (Parm)

void APawn::OnTeleport(class USeqAct_Teleport* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnTeleport");

	APawn_OnTeleport_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.OnSetMaterial
// ()
// Parameters:
// class USeqAct_SetMaterial*     Action                         (Parm)

void APawn::OnSetMaterial(class USeqAct_SetMaterial* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnSetMaterial");

	APawn_OnSetMaterial_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetDamageScaling
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::GetDamageScaling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetDamageScaling");

	APawn_GetDamageScaling_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.DoKismetAttachment
// ()
// Parameters:
// class AActor*                  Attachment                     (Parm)
// class USeqAct_AttachToActor*   Action                         (Parm)

void APawn::DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DoKismetAttachment");

	APawn_DoKismetAttachment_Params params;
	params.Attachment = Attachment;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SpawnedByKismet
// ()

void APawn::SpawnedByKismet()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpawnedByKismet");

	APawn_SpawnedByKismet_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IsStationary
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsStationary()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsStationary");

	APawn_IsStationary_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetCollisionExtent
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector APawn::GetCollisionExtent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetCollisionExtent");

	APawn_GetCollisionExtent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetCollisionHeight
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::GetCollisionHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetCollisionHeight");

	APawn_GetCollisionHeight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetCollisionRadius
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::GetCollisionRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetCollisionRadius");

	APawn_GetCollisionRadius_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CheatFly
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CheatFly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheatFly");

	APawn_CheatFly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CheatGhost
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CheatGhost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheatGhost");

	APawn_CheatGhost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CheatWalk
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CheatWalk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheatWalk");

	APawn_CheatWalk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.PlayWeaponSwitch
// ()
// Parameters:
// class AWeapon*                 OldWeapon                      (Parm)
// class AWeapon*                 NewWeapon                      (Parm)

void APawn::PlayWeaponSwitch(class AWeapon* OldWeapon, class AWeapon* NewWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayWeaponSwitch");

	APawn_PlayWeaponSwitch_Params params;
	params.OldWeapon = OldWeapon;
	params.NewWeapon = NewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetActiveWeapon
// ()
// Parameters:
// class AWeapon*                 NewWeapon                      (Parm)

void APawn::SetActiveWeapon(class AWeapon* NewWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetActiveWeapon");

	APawn_SetActiveWeapon_Params params;
	params.NewWeapon = NewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TossInventory
// ()
// Parameters:
// class AInventory*              Inv                            (Parm)
// struct FVector                 ForceVelocity                  (OptionalParm, Parm)

void APawn::TossInventory(class AInventory* Inv, const struct FVector& ForceVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TossInventory");

	APawn_TossInventory_Params params;
	params.Inv = Inv;
	params.ForceVelocity = ForceVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ThrowActiveWeapon
// ()
// Parameters:
// bool                           bDestroyWeap                   (OptionalParm, Parm)

void APawn::ThrowActiveWeapon(bool bDestroyWeap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ThrowActiveWeapon");

	APawn_ThrowActiveWeapon_Params params;
	params.bDestroyWeap = bDestroyWeap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.DrawHUD
// ()
// Parameters:
// class AHUD*                    H                              (Parm)

void APawn::DrawHUD(class AHUD* H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DrawHUD");

	APawn_DrawHUD_Params params;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FindInventoryType
// ()
// Parameters:
// class UClass*                  DesiredClass                   (Parm)
// bool                           bAllowSubclass                 (OptionalParm, Parm)
// class AInventory*              ReturnValue                    (Parm, OutParm, ReturnParm)

class AInventory* APawn::FindInventoryType(class UClass* DesiredClass, bool bAllowSubclass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FindInventoryType");

	APawn_FindInventoryType_Params params;
	params.DesiredClass = DesiredClass;
	params.bAllowSubclass = bAllowSubclass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CreateInventory
// ()
// Parameters:
// class UClass*                  NewInvClass                    (Parm)
// bool                           bDoNotActivate                 (OptionalParm, Parm)
// class AInventory*              ReturnValue                    (Parm, OutParm, ReturnParm)

class AInventory* APawn::CreateInventory(class UClass* NewInvClass, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CreateInventory");

	APawn_CreateInventory_Params params;
	params.NewInvClass = NewInvClass;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.AddDefaultInventory
// ()

void APawn::AddDefaultInventory()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddDefaultInventory");

	APawn_AddDefaultInventory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StopDriving
// ()
// Parameters:
// class AVehicle*                V                              (Parm)

void APawn::StopDriving(class AVehicle* V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StopDriving");

	APawn_StopDriving_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StartDriving
// ()
// Parameters:
// class AVehicle*                V                              (Parm)

void APawn::StartDriving(class AVehicle* V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StartDriving");

	APawn_StartDriving_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CanThrowWeapon
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CanThrowWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanThrowWeapon");

	APawn_CanThrowWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.Suicide
// ()

void APawn::Suicide()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Suicide");

	APawn_Suicide_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetVehicleBase
// ()
// Parameters:
// class AVehicle*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AVehicle* APawn::GetVehicleBase()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetVehicleBase");

	APawn_GetVehicleBase_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.PlayLanded
// ()
// Parameters:
// float                          ImpactVel                      (Parm)

void APawn::PlayLanded(float ImpactVel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayLanded");

	APawn_PlayLanded_Params params;
	params.ImpactVel = ImpactVel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CannotJumpNow
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CannotJumpNow()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CannotJumpNow");

	APawn_CannotJumpNow_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.PlayFootStepSound
// ()
// Parameters:
// int                            FootDown                       (Parm)

void APawn::PlayFootStepSound(int FootDown)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayFootStepSound");

	APawn_PlayFootStepSound_Params params;
	params.FootDown = FootDown;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TornOff
// ()

void APawn::TornOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TornOff");

	APawn_TornOff_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayDying
// ()
// Parameters:
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLoc                         (Parm)

void APawn::PlayDying(class UClass* DamageType, const struct FVector& HitLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayDying");

	APawn_PlayDying_Params params;
	params.DamageType = DamageType;
	params.HitLoc = HitLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetDyingPhysics
// ()

void APawn::SetDyingPhysics()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetDyingPhysics");

	APawn_SetDyingPhysics_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TurnOff
// ()

void APawn::TurnOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TurnOff");

	APawn_TurnOff_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayHit
// ()
// Parameters:
// float                          Damage                         (Parm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 Momentum                       (Parm)
// struct FTraceHitInfo           HitInfo                        (Parm)

void APawn::PlayHit(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayHit");

	APawn_PlayHit_Params params;
	params.Damage = Damage;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayDyingSound
// ()

void APawn::PlayDyingSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayDyingSound");

	APawn_PlayDyingSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.DoJump
// ()
// Parameters:
// bool                           bUpdating                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::DoJump(bool bUpdating)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DoJump");

	APawn_DoJump_Params params;
	params.bUpdating = bUpdating;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CheckWaterJump
// ()
// Parameters:
// struct FVector                 WallNormal                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CheckWaterJump(struct FVector* WallNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheckWaterJump");

	APawn_CheckWaterJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WallNormal != nullptr)
		*WallNormal = params.WallNormal;

	return params.ReturnValue;
}


// Function Engine.Pawn.TakeDrowningDamage
// ()

void APawn::TakeDrowningDamage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TakeDrowningDamage");

	APawn_TakeDrowningDamage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.BreathTimer
// ()

void APawn::BreathTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BreathTimer");

	APawn_BreathTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TouchingWaterVolume
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::TouchingWaterVolume()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TouchingWaterVolume");

	APawn_TouchingWaterVolume_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.HeadVolumeChange
// ()
// Parameters:
// class APhysicsVolume*          newHeadVolume                  (Parm)

void APawn::HeadVolumeChange(class APhysicsVolume* newHeadVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HeadVolumeChange");

	APawn_HeadVolumeChange_Params params;
	params.newHeadVolume = newHeadVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TickSpecial
// ()
// Parameters:
// float                          DeltaTime                      (Parm)

void APawn::TickSpecial(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TickSpecial");

	APawn_TickSpecial_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Landed
// ()
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  FloorActor                     (Parm)

void APawn::Landed(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Landed");

	APawn_Landed_Params params;
	params.HitNormal = HitNormal;
	params.FloorActor = FloorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Falling
// ()

void APawn::Falling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Falling");

	APawn_Falling_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.DelayTriggerDeath
// ()

void APawn::DelayTriggerDeath()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DelayTriggerDeath");

	APawn_DelayTriggerDeath_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Died
// ()
// Parameters:
// class AController*             Killer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Died");

	APawn_Died_Params params;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.ThrowWeaponOnDeath
// ()

void APawn::ThrowWeaponOnDeath()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ThrowWeaponOnDeath");

	APawn_ThrowWeaponOnDeath_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IsSameTeam
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsSameTeam(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsSameTeam");

	APawn_IsSameTeam_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetTeam
// ()
// Parameters:
// class ATeamInfo*               ReturnValue                    (Parm, OutParm, ReturnParm)

class ATeamInfo* APawn::GetTeam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetTeam");

	APawn_GetTeam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetTeamNum
// ()
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char APawn::GetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetTeamNum");

	APawn_GetTeamNum_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.TakeDamage
// ()
// Parameters:
// int                            Damage                         (Parm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)

void APawn::TakeDamage(int Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TakeDamage");

	APawn_TakeDamage_Params params;
	params.Damage = Damage;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetKillInstigator
// ()
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// class UClass*                  DamageType                     (Parm)
// class AController*             ReturnValue                    (Parm, OutParm, ReturnParm)

class AController* APawn::SetKillInstigator(class AController* InstigatedBy, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetKillInstigator");

	APawn_SetKillInstigator_Params params;
	params.InstigatedBy = InstigatedBy;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.NotifyTakeHit
// ()
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// int                            Damage                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 Momentum                       (Parm)

void APawn::NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.NotifyTakeHit");

	APawn_NotifyTakeHit_Params params;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.Momentum = Momentum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TakeRadiusDamageOnBones
// ()
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// float                          BaseDamage                     (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HurtOrigin                     (Parm)
// bool                           bFullDamage                    (Parm)
// class AActor*                  DamageCauser                   (Parm)
// TArray<struct FName>           Bones                          (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::TakeRadiusDamageOnBones(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, TArray<struct FName> Bones)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TakeRadiusDamageOnBones");

	APawn_TakeRadiusDamageOnBones_Params params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.Bones = Bones;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.PruneDamagedBoneList
// ()
// Parameters:
// TArray<struct FName>           Bones                          (Parm, OutParm, NeedCtorLink)

void APawn::PruneDamagedBoneList(TArray<struct FName>* Bones)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PruneDamagedBoneList");

	APawn_PruneDamagedBoneList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Bones != nullptr)
		*Bones = params.Bones;
}


// Function Engine.Pawn.HealDamage
// ()
// Parameters:
// int                            Amount                         (Parm)
// class AController*             Healer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::HealDamage(int Amount, class AController* Healer, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HealDamage");

	APawn_HealDamage_Params params;
	params.Amount = Amount;
	params.Healer = Healer;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.AdjustDamage
// ()
// Parameters:
// int                            InDamage                       (Parm, OutParm)
// struct FVector                 Momentum                       (Parm, OutParm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (Parm)
// class AActor*                  DamageCauser                   (Parm)

void APawn::AdjustDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, int* InDamage, struct FVector* Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AdjustDamage");

	APawn_AdjustDamage_Params params;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InDamage != nullptr)
		*InDamage = params.InDamage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;
}


// Function Engine.Pawn.SetMovementPhysics
// ()

void APawn::SetMovementPhysics()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetMovementPhysics");

	APawn_SetMovementPhysics_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Gasp
// ()

void APawn::Gasp()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Gasp");

	APawn_Gasp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.OnGiveInventory
// ()
// Parameters:
// class USeqAct_GiveInventory*   inAction                       (Parm)

void APawn::OnGiveInventory(class USeqAct_GiveInventory* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnGiveInventory");

	APawn_OnGiveInventory_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.OnAssignController
// ()
// Parameters:
// class USeqAct_AssignController* inAction                       (Parm)

void APawn::OnAssignController(class USeqAct_AssignController* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnAssignController");

	APawn_OnAssignController_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ReceivedNewEvent
// ()
// Parameters:
// class USequenceEvent*          Evt                            (Parm)

void APawn::ReceivedNewEvent(class USequenceEvent* Evt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReceivedNewEvent");

	APawn_ReceivedNewEvent_Params params;
	params.Evt = Evt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SpawnDefaultController
// ()

void APawn::SpawnDefaultController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpawnDefaultController");

	APawn_SpawnDefaultController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PostBeginPlay
// ()

void APawn::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PostBeginPlay");

	APawn_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PreBeginPlay
// ()

void APawn::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PreBeginPlay");

	APawn_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Destroyed
// ()

void APawn::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Destroyed");

	APawn_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.DetachFromController
// ()
// Parameters:
// bool                           bDestroyController             (OptionalParm, Parm)

void APawn::DetachFromController(bool bDestroyController)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DetachFromController");

	APawn_DetachFromController_Params params;
	params.bDestroyController = bDestroyController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CrushedBy
// ()
// Parameters:
// class APawn*                   OtherPawn                      (Parm)

void APawn::CrushedBy(class APawn* OtherPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CrushedBy");

	APawn_CrushedBy_Params params;
	params.OtherPawn = OtherPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CanBeBaseForPawn
// ()
// Parameters:
// class APawn*                   aPawn                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CanBeBaseForPawn(class APawn* aPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanBeBaseForPawn");

	APawn_CanBeBaseForPawn_Params params;
	params.aPawn = aPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.BaseChange
// ()

void APawn::BaseChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BaseChange");

	APawn_BaseChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StuckOnPawn
// ()
// Parameters:
// class APawn*                   OtherPawn                      (Parm)

void APawn::StuckOnPawn(class APawn* OtherPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StuckOnPawn");

	APawn_StuckOnPawn_Params params;
	params.OtherPawn = OtherPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.JumpOffPawn
// ()

void APawn::JumpOffPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.JumpOffPawn");

	APawn_JumpOffPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.gibbedBy
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void APawn::gibbedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.gibbedBy");

	APawn_gibbedBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.EncroachedBy
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void APawn::EncroachedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EncroachedBy");

	APawn_EncroachedBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.EncroachingOn
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::EncroachingOn(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EncroachingOn");

	APawn_EncroachingOn_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.FaceRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (Parm)
// float                          DeltaTime                      (Parm)

void APawn::FaceRotation(const struct FRotator& NewRotation, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FaceRotation");

	APawn_FaceRotation_Params params;
	params.NewRotation = NewRotation;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.UpdatePawnRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (Parm)

void APawn::UpdatePawnRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UpdatePawnRotation");

	APawn_UpdatePawnRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientSetRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (Parm)

void APawn::ClientSetRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientSetRotation");

	APawn_ClientSetRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientRestart
// ()

void APawn::ClientRestart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientRestart");

	APawn_ClientRestart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Restart
// ()

void APawn::Restart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Restart");

	APawn_Restart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TakeFallingDamage
// ()

void APawn::TakeFallingDamage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TakeFallingDamage");

	APawn_TakeFallingDamage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.KilledBy
// ()
// Parameters:
// class APawn*                   EventInstigator                (Parm)

void APawn::KilledBy(class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.KilledBy");

	APawn_KilledBy_Params params;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AddVelocity
// ()
// Parameters:
// struct FVector                 NewVelocity                    (Parm)
// struct FVector                 HitLocation                    (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)

void APawn::AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddVelocity");

	APawn_AddVelocity_Params params;
	params.NewVelocity = NewVelocity;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.HandleMomentum
// ()
// Parameters:
// struct FVector                 Momentum                       (Parm)
// struct FVector                 HitLocation                    (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)

void APawn::HandleMomentum(const struct FVector& Momentum, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HandleMomentum");

	APawn_HandleMomentum_Params params;
	params.Momentum = Momentum;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StartCrouch
// ()
// Parameters:
// float                          HeightAdjust                   (Parm)

void APawn::StartCrouch(float HeightAdjust)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StartCrouch");

	APawn_StartCrouch_Params params;
	params.HeightAdjust = HeightAdjust;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.EndCrouch
// ()
// Parameters:
// float                          HeightAdjust                   (Parm)

void APawn::EndCrouch(float HeightAdjust)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EndCrouch");

	APawn_EndCrouch_Params params;
	params.HeightAdjust = HeightAdjust;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ShouldCrouch
// ()
// Parameters:
// bool                           bCrouch                        (Parm)

void APawn::ShouldCrouch(bool bCrouch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ShouldCrouch");

	APawn_ShouldCrouch_Params params;
	params.bCrouch = bCrouch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.UnCrouch
// ()

void APawn::UnCrouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UnCrouch");

	APawn_UnCrouch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.OutsideWorldBounds
// ()

void APawn::OutsideWorldBounds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OutsideWorldBounds");

	APawn_OutsideWorldBounds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FellOutOfWorld
// ()
// Parameters:
// class UClass*                  dmgType                        (Parm)

void APawn::FellOutOfWorld(class UClass* dmgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FellOutOfWorld");

	APawn_FellOutOfWorld_Params params;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientMessage
// ()
// Parameters:
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)

void APawn::ClientMessage(const struct FString& S, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientMessage");

	APawn_ClientMessage_Params params;
	params.S = S;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.HandlePickup
// ()
// Parameters:
// class AInventory*              Inv                            (Parm)

void APawn::HandlePickup(class AInventory* Inv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HandlePickup");

	APawn_HandlePickup_Params params;
	params.Inv = Inv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.LineOfSightTo
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::LineOfSightTo(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.LineOfSightTo");

	APawn_LineOfSightTo_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetMoveTarget
// ()
// Parameters:
// class AActor*                  NewTarget                      (Parm)

void APawn::SetMoveTarget(class AActor* NewTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetMoveTarget");

	APawn_SetMoveTarget_Params params;
	params.NewTarget = NewTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.InGodMode
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::InGodMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InGodMode");

	APawn_InGodMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetViewRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (Parm)

void APawn::SetViewRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetViewRotation");

	APawn_SetViewRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetAdjustedAimFor
// ()
// Parameters:
// class AWeapon*                 W                              (Parm)
// struct FVector                 StartFireLoc                   (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator APawn::GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetAdjustedAimFor");

	APawn_GetAdjustedAimFor_Params params;
	params.W = W;
	params.StartFireLoc = StartFireLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.InFreeCam
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::InFreeCam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InFreeCam");

	APawn_InFreeCam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetBaseAimRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator APawn::GetBaseAimRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetBaseAimRotation");

	APawn_GetBaseAimRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetWeaponStartTraceLocation
// ()
// Parameters:
// class AWeapon*                 CurrentWeapon                  (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector APawn::GetWeaponStartTraceLocation(class AWeapon* CurrentWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetWeaponStartTraceLocation");

	APawn_GetWeaponStartTraceLocation_Params params;
	params.CurrentWeapon = CurrentWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetPawnViewLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector APawn::GetPawnViewLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetPawnViewLocation");

	APawn_GetPawnViewLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetViewRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator APawn::GetViewRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetViewRotation");

	APawn_GetViewRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetActorEyesViewPoint
// ()
// Parameters:
// struct FVector                 out_Location                   (Parm, OutParm)
// struct FRotator                out_Rotation                   (Parm, OutParm)

void APawn::GetActorEyesViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetActorEyesViewPoint");

	APawn_GetActorEyesViewPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;
}


// Function Engine.Pawn.ProcessViewRotation
// ()
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FRotator                out_ViewRotation               (Parm, OutParm)
// struct FRotator                out_DeltaRot                   (Parm, OutParm)

void APawn::ProcessViewRotation(float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ProcessViewRotation");

	APawn_ProcessViewRotation_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ViewRotation != nullptr)
		*out_ViewRotation = params.out_ViewRotation;
	if (out_DeltaRot != nullptr)
		*out_DeltaRot = params.out_DeltaRot;
}


// Function Engine.Pawn.IsFirstPerson
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsFirstPerson()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsFirstPerson");

	APawn_IsFirstPerson_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsPlayerPawn
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsPlayerPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsPlayerPawn");

	APawn_IsPlayerPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsLocallyControlled
// ()
// Parameters:
// class AController*             PawnController                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsLocallyControlled(class AController* PawnController)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsLocallyControlled");

	APawn_IsLocallyControlled_Params params;
	params.PawnController = PawnController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsHumanControlled
// ()
// Parameters:
// class AController*             PawnController                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsHumanControlled(class AController* PawnController)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsHumanControlled");

	APawn_IsHumanControlled_Params params;
	params.PawnController = PawnController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.DisplayDebug
// ()
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void APawn::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DisplayDebug");

	APawn_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.Pawn.ClimbLadder
// ()
// Parameters:
// class ALadderVolume*           L                              (Parm)

void APawn::ClimbLadder(class ALadderVolume* L)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClimbLadder");

	APawn_ClimbLadder_Params params;
	params.L = L;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.EndClimbLadder
// ()
// Parameters:
// class ALadderVolume*           OldLadder                      (Parm)

void APawn::EndClimbLadder(class ALadderVolume* OldLadder)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EndClimbLadder");

	APawn_EndClimbLadder_Params params;
	params.OldLadder = OldLadder;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CanSplash
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CanSplash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanSplash");

	APawn_CanSplash_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetWalking
// ()
// Parameters:
// bool                           bNewIsWalking                  (Parm)

void APawn::SetWalking(bool bNewIsWalking)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetWalking");

	APawn_SetWalking_Params params;
	params.bNewIsWalking = bNewIsWalking;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.RangedAttackTime
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::RangedAttackTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.RangedAttackTime");

	APawn_RangedAttackTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.RecommendLongRangedAttack
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::RecommendLongRangedAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.RecommendLongRangedAttack");

	APawn_RecommendLongRangedAttack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CanGrabLadder
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CanGrabLadder()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanGrabLadder");

	APawn_CanGrabLadder_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.DropToGround
// ()

void APawn::DropToGround()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DropToGround");

	APawn_DropToGround_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetDefaultCameraMode
// ()
// Parameters:
// class APlayerController*       RequestedBy                    (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName APawn::GetDefaultCameraMode(class APlayerController* RequestedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetDefaultCameraMode");

	APawn_GetDefaultCameraMode_Params params;
	params.RequestedBy = RequestedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.UnPossessed
// ()

void APawn::UnPossessed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UnPossessed");

	APawn_UnPossessed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.UpdateControllerOnPossess
// ()
// Parameters:
// bool                           bVehicleTransition             (Parm)

void APawn::UpdateControllerOnPossess(bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UpdateControllerOnPossess");

	APawn_UpdateControllerOnPossess_Params params;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PossessedBy
// ()
// Parameters:
// class AController*             C                              (Parm)
// bool                           bVehicleTransition             (Parm)

void APawn::PossessedBy(class AController* C, bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PossessedBy");

	APawn_PossessedBy_Params params;
	params.C = C;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.NotifyTeamChanged
// ()

void APawn::NotifyTeamChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.NotifyTeamChanged");

	APawn_NotifyTeamChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayTeleportEffect
// ()
// Parameters:
// bool                           bOut                           (Parm)
// bool                           bSound                         (Parm)

void APawn::PlayTeleportEffect(bool bOut, bool bSound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayTeleportEffect");

	APawn_PlayTeleportEffect_Params params;
	params.bOut = bOut;
	params.bSound = bSound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetHumanReadableName
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APawn::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetHumanReadableName");

	APawn_GetHumanReadableName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.NeedToTurn
// ()
// Parameters:
// struct FVector                 targ                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::NeedToTurn(const struct FVector& targ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.NeedToTurn");

	APawn_NeedToTurn_Params params;
	params.targ = targ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsFiring
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsFiring");

	APawn_IsFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.HasRangedAttack
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::HasRangedAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HasRangedAttack");

	APawn_HasRangedAttack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.FireOnRelease
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::FireOnRelease()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FireOnRelease");

	APawn_FireOnRelease_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.TooCloseToAttack
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::TooCloseToAttack(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TooCloseToAttack");

	APawn_TooCloseToAttack_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CanAttack
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CanAttack(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanAttack");

	APawn_CanAttack_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.BotFire
// ()
// Parameters:
// bool                           bFinished                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::BotFire(bool bFinished)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BotFire");

	APawn_BotFire_Params params;
	params.bFinished = bFinished;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.WeaponStoppedFiring
// ()
// Parameters:
// class AWeapon*                 InWeapon                       (Parm)
// bool                           bViaReplication                (Parm)

void APawn::WeaponStoppedFiring(class AWeapon* InWeapon, bool bViaReplication)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.WeaponStoppedFiring");

	APawn_WeaponStoppedFiring_Params params;
	params.InWeapon = InWeapon;
	params.bViaReplication = bViaReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.WeaponFired
// ()
// Parameters:
// class AWeapon*                 InWeapon                       (Parm)
// bool                           bViaReplication                (Parm)
// struct FVector                 HitLocation                    (OptionalParm, Parm)

void APawn::WeaponFired(class AWeapon* InWeapon, bool bViaReplication, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.WeaponFired");

	APawn_WeaponFired_Params params;
	params.InWeapon = InWeapon;
	params.bViaReplication = bViaReplication;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FlashLocationUpdated
// ()
// Parameters:
// class AWeapon*                 InWeapon                       (Parm)
// struct FVector                 InFlashLocation                (Parm)
// bool                           bViaReplication                (Parm)

void APawn::FlashLocationUpdated(class AWeapon* InWeapon, const struct FVector& InFlashLocation, bool bViaReplication)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FlashLocationUpdated");

	APawn_FlashLocationUpdated_Params params;
	params.InWeapon = InWeapon;
	params.InFlashLocation = InFlashLocation;
	params.bViaReplication = bViaReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClearFlashLocation
// ()
// Parameters:
// class AWeapon*                 InWeapon                       (Parm)

void APawn::ClearFlashLocation(class AWeapon* InWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClearFlashLocation");

	APawn_ClearFlashLocation_Params params;
	params.InWeapon = InWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetFlashLocation
// ()
// Parameters:
// class AWeapon*                 InWeapon                       (Parm)
// unsigned char                  InFiringMode                   (Parm)
// struct FVector                 NewLoc                         (Parm)

void APawn::SetFlashLocation(class AWeapon* InWeapon, unsigned char InFiringMode, const struct FVector& NewLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetFlashLocation");

	APawn_SetFlashLocation_Params params;
	params.InWeapon = InWeapon;
	params.InFiringMode = InFiringMode;
	params.NewLoc = NewLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClearFlashCount
// ()
// Parameters:
// class AWeapon*                 InWeapon                       (Parm)

void APawn::ClearFlashCount(class AWeapon* InWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClearFlashCount");

	APawn_ClearFlashCount_Params params;
	params.InWeapon = InWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FlashCountUpdated
// ()
// Parameters:
// class AWeapon*                 InWeapon                       (Parm)
// unsigned char                  InFlashCount                   (Parm)
// bool                           bViaReplication                (Parm)

void APawn::FlashCountUpdated(class AWeapon* InWeapon, unsigned char InFlashCount, bool bViaReplication)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FlashCountUpdated");

	APawn_FlashCountUpdated_Params params;
	params.InWeapon = InWeapon;
	params.InFlashCount = InFlashCount;
	params.bViaReplication = bViaReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IncrementFlashCount
// ()
// Parameters:
// class AWeapon*                 InWeapon                       (Parm)
// unsigned char                  InFiringMode                   (Parm)

void APawn::IncrementFlashCount(class AWeapon* InWeapon, unsigned char InFiringMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IncrementFlashCount");

	APawn_IncrementFlashCount_Params params;
	params.InWeapon = InWeapon;
	params.InFiringMode = InFiringMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FiringModeUpdated
// ()
// Parameters:
// class AWeapon*                 InWeapon                       (Parm)
// unsigned char                  InFiringMode                   (Parm)
// bool                           bViaReplication                (Parm)

void APawn::FiringModeUpdated(class AWeapon* InWeapon, unsigned char InFiringMode, bool bViaReplication)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FiringModeUpdated");

	APawn_FiringModeUpdated_Params params;
	params.InWeapon = InWeapon;
	params.InFiringMode = InFiringMode;
	params.bViaReplication = bViaReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetFiringMode
// ()
// Parameters:
// class AWeapon*                 InWeapon                       (Parm)
// unsigned char                  InFiringMode                   (Parm)

void APawn::SetFiringMode(class AWeapon* InWeapon, unsigned char InFiringMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetFiringMode");

	APawn_SetFiringMode_Params params;
	params.InWeapon = InWeapon;
	params.InFiringMode = InFiringMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetWeaponFiringMode
// ()
// Parameters:
// class AWeapon*                 InWeapon                       (Parm)
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char APawn::GetWeaponFiringMode(class AWeapon* InWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetWeaponFiringMode");

	APawn_GetWeaponFiringMode_Params params;
	params.InWeapon = InWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.StopFire
// ()
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void APawn::StopFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StopFire");

	APawn_StopFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StartFire
// ()
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void APawn::StartFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StartFire");

	APawn_StartFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StopFiring
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::StopFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StopFiring");

	APawn_StopFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.Reset
// ()

void APawn::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Reset");

	APawn_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayerChangedTeam
// ()

void APawn::PlayerChangedTeam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayerChangedTeam");

	APawn_PlayerChangedTeam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetBaseEyeheight
// ()

void APawn::SetBaseEyeheight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetBaseEyeheight");

	APawn_SetBaseEyeheight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SpecialMoveThruEdge
// ()
// Parameters:
// TEnumAsByte<ENavMeshEdgeType>  Type                           (Parm)
// int                            Dir                            (Parm)
// struct FVector                 MoveStart                      (Parm)
// struct FVector                 MoveDest                       (Parm)
// class AActor*                  RelActor                       (OptionalParm, Parm)
// int                            RelItem                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::SpecialMoveThruEdge(TEnumAsByte<ENavMeshEdgeType> Type, int Dir, const struct FVector& MoveStart, const struct FVector& MoveDest, class AActor* RelActor, int RelItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpecialMoveThruEdge");

	APawn_SpecialMoveThruEdge_Params params;
	params.Type = Type;
	params.Dir = Dir;
	params.MoveStart = MoveStart;
	params.MoveDest = MoveDest;
	params.RelActor = RelActor;
	params.RelItem = RelItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SpecialMoveTo
// ()
// Parameters:
// class ANavigationPoint*        Start                          (Parm)
// class ANavigationPoint*        End                            (Parm)
// class AActor*                  Next                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::SpecialMoveTo(class ANavigationPoint* Start, class ANavigationPoint* End, class AActor* Next)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpecialMoveTo");

	APawn_SpecialMoveTo_Params params;
	params.Start = Start;
	params.End = End;
	params.Next = Next;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.TermRagdoll
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::TermRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TermRagdoll");

	APawn_TermRagdoll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.InitRagdoll
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::InitRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InitRagdoll");

	APawn_InitRagdoll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetBoundingCylinder
// ()
// Parameters:
// float                          CollisionRadius                (Parm, OutParm)
// float                          CollisionHeight                (Parm, OutParm)

void APawn::GetBoundingCylinder(float* CollisionRadius, float* CollisionHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetBoundingCylinder");

	APawn_GetBoundingCylinder_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CollisionRadius != nullptr)
		*CollisionRadius = params.CollisionRadius;
	if (CollisionHeight != nullptr)
		*CollisionHeight = params.CollisionHeight;
}


// Function Engine.Pawn.ReachedDesiredRotation
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::ReachedDesiredRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReachedDesiredRotation");

	APawn_ReachedDesiredRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetPushesRigidBodies
// ()
// Parameters:
// bool                           NewPush                        (Parm)

void APawn::SetPushesRigidBodies(bool NewPush)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetPushesRigidBodies");

	APawn_SetPushesRigidBodies_Params params;
	params.NewPush = NewPush;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ForceCrouch
// ()

void APawn::ForceCrouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ForceCrouch");

	APawn_ForceCrouch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ReachedPoint
// ()
// Parameters:
// struct FVector                 Point                          (Parm)
// class AActor*                  NewAnchor                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::ReachedPoint(const struct FVector& Point, class AActor* NewAnchor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReachedPoint");

	APawn_ReachedPoint_Params params;
	params.Point = Point;
	params.NewAnchor = NewAnchor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.ReachedDestination
// ()
// Parameters:
// class AActor*                  Goal                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::ReachedDestination(class AActor* Goal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReachedDestination");

	APawn_ReachedDestination_Params params;
	params.Goal = Goal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetBestAnchor
// ()
// Parameters:
// class AActor*                  TestActor                      (Parm)
// struct FVector                 TestLocation                   (Parm)
// bool                           bStartPoint                    (Parm)
// bool                           bOnlyCheckVisible              (Parm)
// float                          out_Dist                       (Parm, OutParm)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* APawn::GetBestAnchor(class AActor* TestActor, const struct FVector& TestLocation, bool bStartPoint, bool bOnlyCheckVisible, float* out_Dist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetBestAnchor");

	APawn_GetBestAnchor_Params params;
	params.TestActor = TestActor;
	params.TestLocation = TestLocation;
	params.bStartPoint = bStartPoint;
	params.bOnlyCheckVisible = bOnlyCheckVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Dist != nullptr)
		*out_Dist = params.out_Dist;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetAnchor
// ()
// Parameters:
// class ANavigationPoint*        NewAnchor                      (Parm)

void APawn::SetAnchor(class ANavigationPoint* NewAnchor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetAnchor");

	APawn_SetAnchor_Params params;
	params.NewAnchor = NewAnchor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetRemoteViewPitch
// ()
// Parameters:
// int                            NewRemoteViewPitch             (Parm)

void APawn::SetRemoteViewPitch(int NewRemoteViewPitch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetRemoteViewPitch");

	APawn_SetRemoteViewPitch_Params params;
	params.NewRemoteViewPitch = NewRemoteViewPitch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IsInvisible
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsInvisible()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsInvisible");

	APawn_IsInvisible_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsValidEnemyTargetFor
// ()
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Const, Parm)
// bool                           bNoPRIisEnemy                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsValidEnemyTargetFor(class APlayerReplicationInfo* PRI, bool bNoPRIisEnemy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsValidEnemyTargetFor");

	APawn_IsValidEnemyTargetFor_Params params;
	params.PRI = PRI;
	params.bNoPRIisEnemy = bNoPRIisEnemy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetFallDuration
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::GetFallDuration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetFallDuration");

	APawn_GetFallDuration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SuggestJumpVelocity
// ()
// Parameters:
// struct FVector                 JumpVelocity                   (Parm, OutParm)
// struct FVector                 Destination                    (Parm)
// struct FVector                 Start                          (Parm)
// bool                           bRequireFallLanding            (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::SuggestJumpVelocity(const struct FVector& Destination, const struct FVector& Start, bool bRequireFallLanding, struct FVector* JumpVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SuggestJumpVelocity");

	APawn_SuggestJumpVelocity_Params params;
	params.Destination = Destination;
	params.Start = Start;
	params.bRequireFallLanding = bRequireFallLanding;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (JumpVelocity != nullptr)
		*JumpVelocity = params.JumpVelocity;

	return params.ReturnValue;
}


// Function Engine.Pawn.ValidAnchor
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::ValidAnchor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ValidAnchor");

	APawn_ValidAnchor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.AdjustDestination
// ()
// Parameters:
// class AActor*                  GoalActor                      (Parm)
// struct FVector                 Dest                           (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector APawn::AdjustDestination(class AActor* GoalActor, const struct FVector& Dest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AdjustDestination");

	APawn_AdjustDestination_Params params;
	params.GoalActor = GoalActor;
	params.Dest = Dest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsAliveAndWell
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsAliveAndWell()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsAliveAndWell");

	APawn_IsAliveAndWell_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void APawn::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReplicatedEvent");

	APawn_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetSkelControlScale
// ()
// Parameters:
// struct FName                   SkelControlName                (Parm)
// float                          Scale                          (Parm)

void APawn::SetSkelControlScale(const struct FName& SkelControlName, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetSkelControlScale");

	APawn_SetSkelControlScale_Params params;
	params.SkelControlName = SkelControlName;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetMorphWeight
// ()
// Parameters:
// struct FName                   MorphNodeName                  (Parm)
// float                          MorphWeight                    (Parm)

void APawn::SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetMorphWeight");

	APawn_SetMorphWeight_Params params;
	params.MorphNodeName = MorphNodeName;
	params.MorphWeight = MorphWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetActorFaceFXAsset
// ()
// Parameters:
// class UFaceFXAsset*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UFaceFXAsset* APawn::GetActorFaceFXAsset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetActorFaceFXAsset");

	APawn_GetActorFaceFXAsset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.FaceFXAudioFinished
// ()
// Parameters:
// class UAudioComponent*         AC                             (Parm, EditInline)

void APawn::FaceFXAudioFinished(class UAudioComponent* AC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FaceFXAudioFinished");

	APawn_FaceFXAudioFinished_Params params;
	params.AC = AC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.OnPlayFaceFXAnim
// ()
// Parameters:
// class USeqAct_PlayFaceFXAnim*  inAction                       (Parm)

void APawn::OnPlayFaceFXAnim(class USeqAct_PlayFaceFXAnim* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnPlayFaceFXAnim");

	APawn_OnPlayFaceFXAnim_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CanActorPlayFaceFXAnim
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CanActorPlayFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanActorPlayFaceFXAnim");

	APawn_CanActorPlayFaceFXAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsActorPlayingFaceFXAnim
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsActorPlayingFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsActorPlayingFaceFXAnim");

	APawn_IsActorPlayingFaceFXAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetFaceFXAudioComponent
// ()
// Parameters:
// class UAudioComponent*         ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UAudioComponent* APawn::GetFaceFXAudioComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetFaceFXAudioComponent");

	APawn_GetFaceFXAudioComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.StopActorFaceFXAnim
// ()

void APawn::StopActorFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StopActorFaceFXAnim");

	APawn_StopActorFaceFXAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayActorFaceFXAnim
// ()
// Parameters:
// class UFaceFXAnimSet*          AnimSet                        (Parm)
// struct FString                 GroupName                      (Parm, NeedCtorLink)
// struct FString                 SeqName                        (Parm, NeedCtorLink)
// class USoundCue*               SoundCueToPlay                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName, class USoundCue* SoundCueToPlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayActorFaceFXAnim");

	APawn_PlayActorFaceFXAnim_Params params;
	params.AnimSet = AnimSet;
	params.GroupName = GroupName;
	params.SeqName = SeqName;
	params.SoundCueToPlay = SoundCueToPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.MAT_FinishAIGroup
// ()

void APawn::MAT_FinishAIGroup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_FinishAIGroup");

	APawn_MAT_FinishAIGroup_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MAT_BeginAIGroup
// ()
// Parameters:
// struct FVector                 StartLoc                       (Parm)
// struct FRotator                StartRot                       (Parm)

void APawn::MAT_BeginAIGroup(const struct FVector& StartLoc, const struct FRotator& StartRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_BeginAIGroup");

	APawn_MAT_BeginAIGroup_Params params;
	params.StartLoc = StartLoc;
	params.StartRot = StartRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.InterpolationFinished
// ()
// Parameters:
// class USeqAct_Interp*          InterpAction                   (Parm)

void APawn::InterpolationFinished(class USeqAct_Interp* InterpAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InterpolationFinished");

	APawn_InterpolationFinished_Params params;
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.InterpolationStarted
// ()
// Parameters:
// class USeqAct_Interp*          InterpAction                   (Parm)
// class UInterpGroupInst*        GroupInst                      (Parm)

void APawn::InterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InterpolationStarted");

	APawn_InterpolationStarted_Params params;
	params.InterpAction = InterpAction;
	params.GroupInst = GroupInst;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MAT_SetSkelControlScale
// ()
// Parameters:
// struct FName                   SkelControlName                (Parm)
// float                          Scale                          (Parm)

void APawn::MAT_SetSkelControlScale(const struct FName& SkelControlName, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_SetSkelControlScale");

	APawn_MAT_SetSkelControlScale_Params params;
	params.SkelControlName = SkelControlName;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MAT_SetMorphWeight
// ()
// Parameters:
// struct FName                   MorphNodeName                  (Parm)
// float                          MorphWeight                    (Parm)

void APawn::MAT_SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_SetMorphWeight");

	APawn_MAT_SetMorphWeight_Params params;
	params.MorphNodeName = MorphNodeName;
	params.MorphWeight = MorphWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MAT_SetAnimWeights
// ()
// Parameters:
// TArray<struct FAnimSlotInfo>   SlotInfos                      (Parm, NeedCtorLink)

void APawn::MAT_SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_SetAnimWeights");

	APawn_MAT_SetAnimWeights_Params params;
	params.SlotInfos = SlotInfos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MAT_SetAnimPosition
// ()
// Parameters:
// struct FName                   SlotName                       (Parm)
// int                            ChannelIndex                   (Parm)
// struct FName                   InAnimSeqName                  (Parm)
// float                          InPosition                     (Parm)
// bool                           bFireNotifies                  (Parm)
// bool                           bLooping                       (Parm)
// bool                           bEnableRootMotion              (Parm)

void APawn::MAT_SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_SetAnimPosition");

	APawn_MAT_SetAnimPosition_Params params;
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetAnimPosition
// ()
// Parameters:
// struct FName                   SlotName                       (Parm)
// int                            ChannelIndex                   (Parm)
// struct FName                   InAnimSeqName                  (Parm)
// float                          InPosition                     (Parm)
// bool                           bFireNotifies                  (Parm)
// bool                           bLooping                       (Parm)
// bool                           bEnableRootMotion              (Parm)

void APawn::SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetAnimPosition");

	APawn_SetAnimPosition_Params params;
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MAT_FinishAnimControl
// ()
// Parameters:
// class UInterpGroup*            InInterpGroup                  (Parm)

void APawn::MAT_FinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_FinishAnimControl");

	APawn_MAT_FinishAnimControl_Params params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FinishAnimControl
// ()
// Parameters:
// class UInterpGroup*            InInterpGroup                  (Parm)

void APawn::FinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FinishAnimControl");

	APawn_FinishAnimControl_Params params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MAT_BeginAnimControl
// ()
// Parameters:
// class UInterpGroup*            InInterpGroup                  (Parm)

void APawn::MAT_BeginAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_BeginAnimControl");

	APawn_MAT_BeginAnimControl_Params params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.BeginAnimControl
// ()
// Parameters:
// class UInterpGroup*            InInterpGroup                  (Parm)

void APawn::BeginAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BeginAnimControl");

	APawn_BeginAnimControl_Params params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.RestoreAnimSetsToDefault
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::RestoreAnimSetsToDefault()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.RestoreAnimSetsToDefault");

	APawn_RestoreAnimSetsToDefault_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.AnimSetListUpdated
// ()

void APawn::AnimSetListUpdated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AnimSetListUpdated");

	APawn_AnimSetListUpdated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AddAnimSets
// ()
// Parameters:
// TArray<class UAnimSet*>        CustomAnimSets                 (Const, Parm, OutParm, NeedCtorLink)

void APawn::AddAnimSets(TArray<class UAnimSet*>* CustomAnimSets)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddAnimSets");

	APawn_AddAnimSets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CustomAnimSets != nullptr)
		*CustomAnimSets = params.CustomAnimSets;
}


// Function Engine.Pawn.BuildScriptAnimSetList
// ()

void APawn::BuildScriptAnimSetList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BuildScriptAnimSetList");

	APawn_BuildScriptAnimSetList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.UpdateAnimSetList
// ()

void APawn::UpdateAnimSetList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UpdateAnimSetList");

	APawn_UpdateAnimSetList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClearAnimNodes
// ()

void APawn::ClearAnimNodes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClearAnimNodes");

	APawn_ClearAnimNodes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CacheAnimNodes
// ()

void APawn::CacheAnimNodes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CacheAnimNodes");

	APawn_CacheAnimNodes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PostInitAnimTree
// ()
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (Parm, EditInline)

void APawn::PostInitAnimTree(class USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PostInitAnimTree");

	APawn_PostInitAnimTree_Params params;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IsDesiredRotationLocked
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsDesiredRotationLocked()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsDesiredRotationLocked");

	APawn_IsDesiredRotationLocked_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsDesiredRotationInUse
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsDesiredRotationInUse()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsDesiredRotationInUse");

	APawn_IsDesiredRotationInUse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CheckDesiredRotation
// ()

void APawn::CheckDesiredRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheckDesiredRotation");

	APawn_CheckDesiredRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ResetDesiredRotation
// ()

void APawn::ResetDesiredRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ResetDesiredRotation");

	APawn_ResetDesiredRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.LockDesiredRotation
// ()
// Parameters:
// bool                           Lock                           (Parm)
// bool                           InUnlockWhenReached            (OptionalParm, Parm)

void APawn::LockDesiredRotation(bool Lock, bool InUnlockWhenReached)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.LockDesiredRotation");

	APawn_LockDesiredRotation_Params params;
	params.Lock = Lock;
	params.InUnlockWhenReached = InUnlockWhenReached;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetDesiredRotation
// ()
// Parameters:
// struct FRotator                TargetDesiredRotation          (Parm)
// bool                           InLockDesiredRotation          (OptionalParm, Parm)
// bool                           InUnlockWhenReached            (OptionalParm, Parm)
// float                          InterpolationTime              (OptionalParm, Parm)
// bool                           bResetRotationRate             (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::SetDesiredRotation(const struct FRotator& TargetDesiredRotation, bool InLockDesiredRotation, bool InUnlockWhenReached, float InterpolationTime, bool bResetRotationRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetDesiredRotation");

	APawn_SetDesiredRotation_Params params;
	params.TargetDesiredRotation = TargetDesiredRotation;
	params.InLockDesiredRotation = InLockDesiredRotation;
	params.InUnlockWhenReached = InUnlockWhenReached;
	params.InterpolationTime = InterpolationTime;
	params.bResetRotationRate = bResetRotationRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.PickWallAdjust
// ()
// Parameters:
// struct FVector                 WallHitNormal                  (Parm)
// class AActor*                  HitActor                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::PickWallAdjust(const struct FVector& WallHitNormal, class AActor* HitActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PickWallAdjust");

	APawn_PickWallAdjust_Params params;
	params.WallHitNormal = WallHitNormal;
	params.HitActor = HitActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNotify_PawnMaterialParam.Notify
// ()
// Parameters:
// class AActor*                  Owner                          (Parm)
// class UAnimNodeSequence*       AnimSeqInstigator              (Parm)

void UAnimNotify_PawnMaterialParam::Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_PawnMaterialParam.Notify");

	UAnimNotify_PawnMaterialParam_Notify_Params params;
	params.Owner = Owner;
	params.AnimSeqInstigator = AnimSeqInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNotify_ViewShake.Notify
// ()
// Parameters:
// class AActor*                  Owner                          (Parm)
// class UAnimNodeSequence*       AnimSeqInstigator              (Parm)

void UAnimNotify_ViewShake::Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_ViewShake.Notify");

	UAnimNotify_ViewShake_Notify_Params params;
	params.Owner = Owner;
	params.AnimSeqInstigator = AnimSeqInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNotify_Trails.GetNumSteps
// ()
// Parameters:
// int                            InLastTrailIndex               (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UAnimNotify_Trails::GetNumSteps(int InLastTrailIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_Trails.GetNumSteps");

	UAnimNotify_Trails_GetNumSteps_Params params;
	params.InLastTrailIndex = InLastTrailIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNode.ReplayAnim
// ()

void UAnimNode::ReplayAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.ReplayAnim");

	UAnimNode_ReplayAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNode.StopAnim
// ()

void UAnimNode::StopAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.StopAnim");

	UAnimNode_StopAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNode.PlayAnim
// ()
// Parameters:
// bool                           bLoop                          (OptionalParm, Parm)
// float                          Rate                           (OptionalParm, Parm)
// float                          StartTime                      (OptionalParm, Parm)

void UAnimNode::PlayAnim(bool bLoop, float Rate, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.PlayAnim");

	UAnimNode_PlayAnim_Params params;
	params.bLoop = bLoop;
	params.Rate = Rate;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNode.FindAnimNode
// ()
// Parameters:
// struct FName                   InNodeName                     (Parm)
// class UAnimNode*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimNode* UAnimNode::FindAnimNode(const struct FName& InNodeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.FindAnimNode");

	UAnimNode_FindAnimNode_Params params;
	params.InNodeName = InNodeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNode.OnCeaseRelevant
// ()

void UAnimNode::OnCeaseRelevant()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.OnCeaseRelevant");

	UAnimNode_OnCeaseRelevant_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNode.OnBecomeRelevant
// ()

void UAnimNode::OnBecomeRelevant()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.OnBecomeRelevant");

	UAnimNode_OnBecomeRelevant_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNode.OnInit
// ()

void UAnimNode::OnInit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.OnInit");

	UAnimNode_OnInit_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeBlendBase.ReplayAnim
// ()

void UAnimNodeBlendBase::ReplayAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendBase.ReplayAnim");

	UAnimNodeBlendBase_ReplayAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeBlendBase.StopAnim
// ()

void UAnimNodeBlendBase::StopAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendBase.StopAnim");

	UAnimNodeBlendBase_StopAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeBlendBase.PlayAnim
// ()
// Parameters:
// bool                           bLoop                          (OptionalParm, Parm)
// float                          Rate                           (OptionalParm, Parm)
// float                          StartTime                      (OptionalParm, Parm)

void UAnimNodeBlendBase::PlayAnim(bool bLoop, float Rate, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendBase.PlayAnim");

	UAnimNodeBlendBase_PlayAnim_Params params;
	params.bLoop = bLoop;
	params.Rate = Rate;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNode_MultiBlendPerBone.SetMaskWeight
// ()
// Parameters:
// int                            MaskIndex                      (Parm)
// float                          DesiredWeight                  (Parm)
// float                          BlendTime                      (Parm)

void UAnimNode_MultiBlendPerBone::SetMaskWeight(int MaskIndex, float DesiredWeight, float BlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode_MultiBlendPerBone.SetMaskWeight");

	UAnimNode_MultiBlendPerBone_SetMaskWeight_Params params;
	params.MaskIndex = MaskIndex;
	params.DesiredWeight = DesiredWeight;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeAimOffset.SetActiveProfileByIndex
// ()
// Parameters:
// int                            ProfileIndex                   (Parm)

void UAnimNodeAimOffset::SetActiveProfileByIndex(int ProfileIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeAimOffset.SetActiveProfileByIndex");

	UAnimNodeAimOffset_SetActiveProfileByIndex_Params params;
	params.ProfileIndex = ProfileIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeAimOffset.SetActiveProfileByName
// ()
// Parameters:
// struct FName                   ProfileName                    (Parm)

void UAnimNodeAimOffset::SetActiveProfileByName(const struct FName& ProfileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeAimOffset.SetActiveProfileByName");

	UAnimNodeAimOffset_SetActiveProfileByName_Params params;
	params.ProfileName = ProfileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeBlend.SetBlendTarget
// ()
// Parameters:
// float                          BlendTarget                    (Parm)
// float                          BlendTime                      (Parm)

void UAnimNodeBlend::SetBlendTarget(float BlendTarget, float BlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlend.SetBlendTarget");

	UAnimNodeBlend_SetBlendTarget_Params params;
	params.BlendTarget = BlendTarget;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeAdditiveBlending.SetBlendTarget
// ()
// Parameters:
// float                          BlendTarget                    (Parm)
// float                          BlendTime                      (Parm)

void UAnimNodeAdditiveBlending::SetBlendTarget(float BlendTarget, float BlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeAdditiveBlending.SetBlendTarget");

	UAnimNodeAdditiveBlending_SetBlendTarget_Params params;
	params.BlendTarget = BlendTarget;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeBlendPerBone.SetBlendTarget
// ()
// Parameters:
// float                          BlendTarget                    (Parm)
// float                          BlendTime                      (Parm)

void UAnimNodeBlendPerBone::SetBlendTarget(float BlendTarget, float BlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendPerBone.SetBlendTarget");

	UAnimNodeBlendPerBone_SetBlendTarget_Params params;
	params.BlendTarget = BlendTarget;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeCrossfader.GetActiveChild
// ()
// Parameters:
// class UAnimNodeSequence*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimNodeSequence* UAnimNodeCrossfader::GetActiveChild()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeCrossfader.GetActiveChild");

	UAnimNodeCrossfader_GetActiveChild_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeCrossfader.GetAnimName
// ()
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UAnimNodeCrossfader::GetAnimName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeCrossfader.GetAnimName");

	UAnimNodeCrossfader_GetAnimName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeCrossfader.BlendToLoopingAnim
// ()
// Parameters:
// struct FName                   AnimSeqName                    (Parm)
// float                          BlendInTime                    (OptionalParm, Parm)
// float                          Rate                           (OptionalParm, Parm)

void UAnimNodeCrossfader::BlendToLoopingAnim(const struct FName& AnimSeqName, float BlendInTime, float Rate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeCrossfader.BlendToLoopingAnim");

	UAnimNodeCrossfader_BlendToLoopingAnim_Params params;
	params.AnimSeqName = AnimSeqName;
	params.BlendInTime = BlendInTime;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeCrossfader.PlayOneShotAnim
// ()
// Parameters:
// struct FName                   AnimSeqName                    (Parm)
// float                          BlendInTime                    (OptionalParm, Parm)
// float                          BlendOutTime                   (OptionalParm, Parm)
// bool                           bDontBlendOut                  (OptionalParm, Parm)
// float                          Rate                           (OptionalParm, Parm)

void UAnimNodeCrossfader::PlayOneShotAnim(const struct FName& AnimSeqName, float BlendInTime, float BlendOutTime, bool bDontBlendOut, float Rate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeCrossfader.PlayOneShotAnim");

	UAnimNodeCrossfader_PlayOneShotAnim_Params params;
	params.AnimSeqName = AnimSeqName;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bDontBlendOut = bDontBlendOut;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodePlayCustomAnim.SetRootBoneAxisOption
// ()
// Parameters:
// TEnumAsByte<ERootBoneAxis>     AxisX                          (OptionalParm, Parm)
// TEnumAsByte<ERootBoneAxis>     AxisY                          (OptionalParm, Parm)
// TEnumAsByte<ERootBoneAxis>     AxisZ                          (OptionalParm, Parm)

void UAnimNodePlayCustomAnim::SetRootBoneAxisOption(TEnumAsByte<ERootBoneAxis> AxisX, TEnumAsByte<ERootBoneAxis> AxisY, TEnumAsByte<ERootBoneAxis> AxisZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.SetRootBoneAxisOption");

	UAnimNodePlayCustomAnim_SetRootBoneAxisOption_Params params;
	params.AxisX = AxisX;
	params.AxisY = AxisY;
	params.AxisZ = AxisZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodePlayCustomAnim.GetCustomAnimNodeSeq
// ()
// Parameters:
// class UAnimNodeSequence*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimNodeSequence* UAnimNodePlayCustomAnim::GetCustomAnimNodeSeq()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.GetCustomAnimNodeSeq");

	UAnimNodePlayCustomAnim_GetCustomAnimNodeSeq_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodePlayCustomAnim.SetActorAnimEndNotification
// ()
// Parameters:
// bool                           bNewStatus                     (Parm)

void UAnimNodePlayCustomAnim::SetActorAnimEndNotification(bool bNewStatus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.SetActorAnimEndNotification");

	UAnimNodePlayCustomAnim_SetActorAnimEndNotification_Params params;
	params.bNewStatus = bNewStatus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodePlayCustomAnim.SetCustomAnim
// ()
// Parameters:
// struct FName                   AnimName                       (Parm)

void UAnimNodePlayCustomAnim::SetCustomAnim(const struct FName& AnimName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.SetCustomAnim");

	UAnimNodePlayCustomAnim_SetCustomAnim_Params params;
	params.AnimName = AnimName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodePlayCustomAnim.StopCustomAnim
// ()
// Parameters:
// float                          BlendOutTime                   (Parm)

void UAnimNodePlayCustomAnim::StopCustomAnim(float BlendOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.StopCustomAnim");

	UAnimNodePlayCustomAnim_StopCustomAnim_Params params;
	params.BlendOutTime = BlendOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodePlayCustomAnim.PlayCustomAnimByDuration
// ()
// Parameters:
// struct FName                   AnimName                       (Parm)
// float                          Duration                       (Parm)
// float                          BlendInTime                    (OptionalParm, Parm)
// float                          BlendOutTime                   (OptionalParm, Parm)
// bool                           bLooping                       (OptionalParm, Parm)
// bool                           bOverride                      (OptionalParm, Parm)

void UAnimNodePlayCustomAnim::PlayCustomAnimByDuration(const struct FName& AnimName, float Duration, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.PlayCustomAnimByDuration");

	UAnimNodePlayCustomAnim_PlayCustomAnimByDuration_Params params;
	params.AnimName = AnimName;
	params.Duration = Duration;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLooping = bLooping;
	params.bOverride = bOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodePlayCustomAnim.PlayCustomAnim
// ()
// Parameters:
// struct FName                   AnimName                       (Parm)
// float                          Rate                           (Parm)
// float                          BlendInTime                    (OptionalParm, Parm)
// float                          BlendOutTime                   (OptionalParm, Parm)
// bool                           bLooping                       (OptionalParm, Parm)
// bool                           bOverride                      (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimNodePlayCustomAnim::PlayCustomAnim(const struct FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.PlayCustomAnim");

	UAnimNodePlayCustomAnim_PlayCustomAnim_Params params;
	params.AnimName = AnimName;
	params.Rate = Rate;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLooping = bLooping;
	params.bOverride = bOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeBlendList.SetActiveChild
// ()
// Parameters:
// int                            ChildIndex                     (Parm)
// float                          BlendTime                      (Parm)

void UAnimNodeBlendList::SetActiveChild(int ChildIndex, float BlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendList.SetActiveChild");

	UAnimNodeBlendList_SetActiveChild_Params params;
	params.ChildIndex = ChildIndex;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeBlendMultiBone.SetTargetStartBone
// ()
// Parameters:
// int                            TargetIdx                      (Parm)
// struct FName                   StartBoneName                  (Parm)
// float                          PerBoneIncrease                (OptionalParm, Parm)

void UAnimNodeBlendMultiBone::SetTargetStartBone(int TargetIdx, const struct FName& StartBoneName, float PerBoneIncrease)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendMultiBone.SetTargetStartBone");

	UAnimNodeBlendMultiBone_SetTargetStartBone_Params params;
	params.TargetIdx = TargetIdx;
	params.StartBoneName = StartBoneName;
	params.PerBoneIncrease = PerBoneIncrease;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.AddToSynchGroup
// ()
// Parameters:
// struct FName                   GroupName                      (Parm)

void UAnimNodeSlot::AddToSynchGroup(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.AddToSynchGroup");

	UAnimNodeSlot_AddToSynchGroup_Params params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.SetRootBoneRotationOption
// ()
// Parameters:
// TEnumAsByte<ERootRotationOption> AxisX                          (OptionalParm, Parm)
// TEnumAsByte<ERootRotationOption> AxisY                          (OptionalParm, Parm)
// TEnumAsByte<ERootRotationOption> AxisZ                          (OptionalParm, Parm)

void UAnimNodeSlot::SetRootBoneRotationOption(TEnumAsByte<ERootRotationOption> AxisX, TEnumAsByte<ERootRotationOption> AxisY, TEnumAsByte<ERootRotationOption> AxisZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.SetRootBoneRotationOption");

	UAnimNodeSlot_SetRootBoneRotationOption_Params params;
	params.AxisX = AxisX;
	params.AxisY = AxisY;
	params.AxisZ = AxisZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.SetRootBoneAxisOption
// ()
// Parameters:
// TEnumAsByte<ERootBoneAxis>     AxisX                          (OptionalParm, Parm)
// TEnumAsByte<ERootBoneAxis>     AxisY                          (OptionalParm, Parm)
// TEnumAsByte<ERootBoneAxis>     AxisZ                          (OptionalParm, Parm)

void UAnimNodeSlot::SetRootBoneAxisOption(TEnumAsByte<ERootBoneAxis> AxisX, TEnumAsByte<ERootBoneAxis> AxisY, TEnumAsByte<ERootBoneAxis> AxisZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.SetRootBoneAxisOption");

	UAnimNodeSlot_SetRootBoneAxisOption_Params params;
	params.AxisX = AxisX;
	params.AxisY = AxisY;
	params.AxisZ = AxisZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.GetCustomAnimNodeSeq
// ()
// Parameters:
// class UAnimNodeSequence*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimNodeSequence* UAnimNodeSlot::GetCustomAnimNodeSeq()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.GetCustomAnimNodeSeq");

	UAnimNodeSlot_GetCustomAnimNodeSeq_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSlot.SetActorAnimEndNotification
// ()
// Parameters:
// bool                           bNewStatus                     (Parm)

void UAnimNodeSlot::SetActorAnimEndNotification(bool bNewStatus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.SetActorAnimEndNotification");

	UAnimNodeSlot_SetActorAnimEndNotification_Params params;
	params.bNewStatus = bNewStatus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.SetCustomAnim
// ()
// Parameters:
// struct FName                   AnimName                       (Parm)

void UAnimNodeSlot::SetCustomAnim(const struct FName& AnimName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.SetCustomAnim");

	UAnimNodeSlot_SetCustomAnim_Params params;
	params.AnimName = AnimName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.StopCustomAnim
// ()
// Parameters:
// float                          BlendOutTime                   (Parm)

void UAnimNodeSlot::StopCustomAnim(float BlendOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.StopCustomAnim");

	UAnimNodeSlot_StopCustomAnim_Params params;
	params.BlendOutTime = BlendOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.GetPlayedAnimation
// ()
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UAnimNodeSlot::GetPlayedAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.GetPlayedAnimation");

	UAnimNodeSlot_GetPlayedAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSlot.PlayCustomAnimByDuration
// ()
// Parameters:
// struct FName                   AnimName                       (Parm)
// float                          Duration                       (Parm)
// float                          BlendInTime                    (OptionalParm, Parm)
// float                          BlendOutTime                   (OptionalParm, Parm)
// bool                           bLooping                       (OptionalParm, Parm)
// bool                           bOverride                      (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UAnimNodeSlot::PlayCustomAnimByDuration(const struct FName& AnimName, float Duration, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.PlayCustomAnimByDuration");

	UAnimNodeSlot_PlayCustomAnimByDuration_Params params;
	params.AnimName = AnimName;
	params.Duration = Duration;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLooping = bLooping;
	params.bOverride = bOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSlot.PlayCustomAnim
// ()
// Parameters:
// struct FName                   AnimName                       (Parm)
// float                          Rate                           (Parm)
// float                          BlendInTime                    (OptionalParm, Parm)
// float                          BlendOutTime                   (OptionalParm, Parm)
// bool                           bLooping                       (OptionalParm, Parm)
// bool                           bOverride                      (OptionalParm, Parm)
// float                          StartTime                      (OptionalParm, Parm)
// float                          EndTime                        (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimNodeSlot::PlayCustomAnim(const struct FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride, float StartTime, float EndTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.PlayCustomAnim");

	UAnimNodeSlot_PlayCustomAnim_Params params;
	params.AnimName = AnimName;
	params.Rate = Rate;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLooping = bLooping;
	params.bOverride = bOverride;
	params.StartTime = StartTime;
	params.EndTime = EndTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSynch.SetGroupRateScale
// ()
// Parameters:
// struct FName                   GroupName                      (Parm)
// float                          NewRateScale                   (Parm)

void UAnimNodeSynch::SetGroupRateScale(const struct FName& GroupName, float NewRateScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.SetGroupRateScale");

	UAnimNodeSynch_SetGroupRateScale_Params params;
	params.GroupName = GroupName;
	params.NewRateScale = NewRateScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSynch.GetRelativePosition
// ()
// Parameters:
// struct FName                   GroupName                      (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimNodeSynch::GetRelativePosition(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.GetRelativePosition");

	UAnimNodeSynch_GetRelativePosition_Params params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSynch.ForceRelativePosition
// ()
// Parameters:
// struct FName                   GroupName                      (Parm)
// float                          RelativePosition               (Parm)

void UAnimNodeSynch::ForceRelativePosition(const struct FName& GroupName, float RelativePosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.ForceRelativePosition");

	UAnimNodeSynch_ForceRelativePosition_Params params;
	params.GroupName = GroupName;
	params.RelativePosition = RelativePosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSynch.GetMasterNodeOfGroup
// ()
// Parameters:
// struct FName                   GroupName                      (Parm)
// class UAnimNodeSequence*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimNodeSequence* UAnimNodeSynch::GetMasterNodeOfGroup(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.GetMasterNodeOfGroup");

	UAnimNodeSynch_GetMasterNodeOfGroup_Params params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSynch.RemoveNodeFromGroup
// ()
// Parameters:
// class UAnimNodeSequence*       SeqNode                        (Parm)
// struct FName                   GroupName                      (Parm)

void UAnimNodeSynch::RemoveNodeFromGroup(class UAnimNodeSequence* SeqNode, const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.RemoveNodeFromGroup");

	UAnimNodeSynch_RemoveNodeFromGroup_Params params;
	params.SeqNode = SeqNode;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSynch.AddNodeToGroup
// ()
// Parameters:
// class UAnimNodeSequence*       SeqNode                        (Parm)
// struct FName                   GroupName                      (Parm)

void UAnimNodeSynch::AddNodeToGroup(class UAnimNodeSequence* SeqNode, const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.AddNodeToGroup");

	UAnimNodeSynch_AddNodeToGroup_Params params;
	params.SeqNode = SeqNode;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimTree.GetGroupIndex
// ()
// Parameters:
// struct FName                   GroupName                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UAnimTree::GetGroupIndex(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.GetGroupIndex");

	UAnimTree_GetGroupIndex_Params params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimTree.GetGroupRateScale
// ()
// Parameters:
// struct FName                   GroupName                      (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimTree::GetGroupRateScale(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.GetGroupRateScale");

	UAnimTree_GetGroupRateScale_Params params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimTree.SetGroupRateScale
// ()
// Parameters:
// struct FName                   GroupName                      (Parm)
// float                          NewRateScale                   (Parm)

void UAnimTree::SetGroupRateScale(const struct FName& GroupName, float NewRateScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.SetGroupRateScale");

	UAnimTree_SetGroupRateScale_Params params;
	params.GroupName = GroupName;
	params.NewRateScale = NewRateScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimTree.GetGroupRelativePosition
// ()
// Parameters:
// struct FName                   GroupName                      (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimTree::GetGroupRelativePosition(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.GetGroupRelativePosition");

	UAnimTree_GetGroupRelativePosition_Params params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimTree.ForceGroupRelativePosition
// ()
// Parameters:
// struct FName                   GroupName                      (Parm)
// float                          RelativePosition               (Parm)

void UAnimTree::ForceGroupRelativePosition(const struct FName& GroupName, float RelativePosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.ForceGroupRelativePosition");

	UAnimTree_ForceGroupRelativePosition_Params params;
	params.GroupName = GroupName;
	params.RelativePosition = RelativePosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimTree.GetGroupNotifyMaster
// ()
// Parameters:
// struct FName                   GroupName                      (Parm)
// class UAnimNodeSequence*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimNodeSequence* UAnimTree::GetGroupNotifyMaster(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.GetGroupNotifyMaster");

	UAnimTree_GetGroupNotifyMaster_Params params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimTree.GetGroupSynchMaster
// ()
// Parameters:
// struct FName                   GroupName                      (Parm)
// class UAnimNodeSequence*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimNodeSequence* UAnimTree::GetGroupSynchMaster(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.GetGroupSynchMaster");

	UAnimTree_GetGroupSynchMaster_Params params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimTree.SetAnimGroupForNode
// ()
// Parameters:
// class UAnimNodeSequence*       SeqNode                        (Parm)
// struct FName                   GroupName                      (Parm)
// bool                           bCreateIfNotFound              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UAnimTree::SetAnimGroupForNode(class UAnimNodeSequence* SeqNode, const struct FName& GroupName, bool bCreateIfNotFound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.SetAnimGroupForNode");

	UAnimTree_SetAnimGroupForNode_Params params;
	params.SeqNode = SeqNode;
	params.GroupName = GroupName;
	params.bCreateIfNotFound = bCreateIfNotFound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimTree.SetUseSavedPose
// ()
// Parameters:
// bool                           bUseSaved                      (Parm)

void UAnimTree::SetUseSavedPose(bool bUseSaved)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.SetUseSavedPose");

	UAnimTree_SetUseSavedPose_Params params;
	params.bUseSaved = bUseSaved;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimTree.FindMorphNode
// ()
// Parameters:
// struct FName                   InNodeName                     (Parm)
// class UMorphNodeBase*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UMorphNodeBase* UAnimTree::FindMorphNode(const struct FName& InNodeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.FindMorphNode");

	UAnimTree_FindMorphNode_Params params;
	params.InNodeName = InNodeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimTree.FindSkelControl
// ()
// Parameters:
// struct FName                   InControlName                  (Parm)
// class USkelControlBase*        ReturnValue                    (Parm, OutParm, ReturnParm)

class USkelControlBase* UAnimTree::FindSkelControl(const struct FName& InControlName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.FindSkelControl");

	UAnimTree_FindSkelControl_Params params;
	params.InControlName = InControlName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.SetRootBoneRotationOption
// ()
// Parameters:
// TEnumAsByte<ERootRotationOption> AxisX                          (OptionalParm, Parm)
// TEnumAsByte<ERootRotationOption> AxisY                          (OptionalParm, Parm)
// TEnumAsByte<ERootRotationOption> AxisZ                          (OptionalParm, Parm)

void UAnimNodeSequence::SetRootBoneRotationOption(TEnumAsByte<ERootRotationOption> AxisX, TEnumAsByte<ERootRotationOption> AxisY, TEnumAsByte<ERootRotationOption> AxisZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.SetRootBoneRotationOption");

	UAnimNodeSequence_SetRootBoneRotationOption_Params params;
	params.AxisX = AxisX;
	params.AxisY = AxisY;
	params.AxisZ = AxisZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSequence.SetRootBoneAxisOption
// ()
// Parameters:
// TEnumAsByte<ERootBoneAxis>     AxisX                          (OptionalParm, Parm)
// TEnumAsByte<ERootBoneAxis>     AxisY                          (OptionalParm, Parm)
// TEnumAsByte<ERootBoneAxis>     AxisZ                          (OptionalParm, Parm)

void UAnimNodeSequence::SetRootBoneAxisOption(TEnumAsByte<ERootBoneAxis> AxisX, TEnumAsByte<ERootBoneAxis> AxisY, TEnumAsByte<ERootBoneAxis> AxisZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.SetRootBoneAxisOption");

	UAnimNodeSequence_SetRootBoneAxisOption_Params params;
	params.AxisX = AxisX;
	params.AxisY = AxisY;
	params.AxisZ = AxisZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSequence.GetTimeLeft
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimNodeSequence::GetTimeLeft()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.GetTimeLeft");

	UAnimNodeSequence_GetTimeLeft_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.GetAnimPlaybackLength
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimNodeSequence::GetAnimPlaybackLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.GetAnimPlaybackLength");

	UAnimNodeSequence_GetAnimPlaybackLength_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.GetGlobalPlayRate
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimNodeSequence::GetGlobalPlayRate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.GetGlobalPlayRate");

	UAnimNodeSequence_GetGlobalPlayRate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.GetGroupRelativePosition
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimNodeSequence::GetGroupRelativePosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.GetGroupRelativePosition");

	UAnimNodeSequence_GetGroupRelativePosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.FindGroupPosition
// ()
// Parameters:
// float                          GroupRelativePosition          (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimNodeSequence::FindGroupPosition(float GroupRelativePosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.FindGroupPosition");

	UAnimNodeSequence_FindGroupPosition_Params params;
	params.GroupRelativePosition = GroupRelativePosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.FindGroupRelativePosition
// ()
// Parameters:
// float                          GroupRelativePosition          (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimNodeSequence::FindGroupRelativePosition(float GroupRelativePosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.FindGroupRelativePosition");

	UAnimNodeSequence_FindGroupRelativePosition_Params params;
	params.GroupRelativePosition = GroupRelativePosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.GetNormalizedPosition
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimNodeSequence::GetNormalizedPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.GetNormalizedPosition");

	UAnimNodeSequence_GetNormalizedPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.SetPosition
// ()
// Parameters:
// float                          NewTime                        (Parm)
// bool                           bFireNotifies                  (Parm)

void UAnimNodeSequence::SetPosition(float NewTime, bool bFireNotifies)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.SetPosition");

	UAnimNodeSequence_SetPosition_Params params;
	params.NewTime = NewTime;
	params.bFireNotifies = bFireNotifies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSequence.ReplayAnim
// ()

void UAnimNodeSequence::ReplayAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.ReplayAnim");

	UAnimNodeSequence_ReplayAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSequence.StopAnim
// ()

void UAnimNodeSequence::StopAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.StopAnim");

	UAnimNodeSequence_StopAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSequence.PlayAnim
// ()
// Parameters:
// bool                           bLoop                          (OptionalParm, Parm)
// float                          InRate                         (OptionalParm, Parm)
// float                          StartTime                      (OptionalParm, Parm)

void UAnimNodeSequence::PlayAnim(bool bLoop, float InRate, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.PlayAnim");

	UAnimNodeSequence_PlayAnim_Params params;
	params.bLoop = bLoop;
	params.InRate = InRate;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSequence.SetAnim
// ()
// Parameters:
// struct FName                   Sequence                       (Parm)

void UAnimNodeSequence::SetAnim(const struct FName& Sequence)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.SetAnim");

	UAnimNodeSequence_SetAnim_Params params;
	params.Sequence = Sequence;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSequenceBlendByAim.CheckAnimsUpToDate
// ()

void UAnimNodeSequenceBlendByAim::CheckAnimsUpToDate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequenceBlendByAim.CheckAnimsUpToDate");

	UAnimNodeSequenceBlendByAim_CheckAnimsUpToDate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MorphNodeMultiPose.UpdateMorphTarget
// ()
// Parameters:
// class UMorphTarget*            Target                         (Parm)
// float                          InWeight                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMorphNodeMultiPose::UpdateMorphTarget(class UMorphTarget* Target, float InWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MorphNodeMultiPose.UpdateMorphTarget");

	UMorphNodeMultiPose_UpdateMorphTarget_Params params;
	params.Target = Target;
	params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MorphNodeMultiPose.RemoveMorphTarget
// ()
// Parameters:
// struct FName                   MorphTargetName                (Parm)

void UMorphNodeMultiPose::RemoveMorphTarget(const struct FName& MorphTargetName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MorphNodeMultiPose.RemoveMorphTarget");

	UMorphNodeMultiPose_RemoveMorphTarget_Params params;
	params.MorphTargetName = MorphTargetName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MorphNodeMultiPose.AddMorphTarget
// ()
// Parameters:
// struct FName                   MorphTargetName                (Parm)
// float                          InWeight                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMorphNodeMultiPose::AddMorphTarget(const struct FName& MorphTargetName, float InWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MorphNodeMultiPose.AddMorphTarget");

	UMorphNodeMultiPose_AddMorphTarget_Params params;
	params.MorphTargetName = MorphTargetName;
	params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MorphNodePose.SetMorphTarget
// ()
// Parameters:
// struct FName                   MorphTargetName                (Parm)

void UMorphNodePose::SetMorphTarget(const struct FName& MorphTargetName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MorphNodePose.SetMorphTarget");

	UMorphNodePose_SetMorphTarget_Params params;
	params.MorphTargetName = MorphTargetName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MorphNodeWeight.SetNodeWeight
// ()
// Parameters:
// float                          NewWeight                      (Parm)

void UMorphNodeWeight::SetNodeWeight(float NewWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MorphNodeWeight.SetNodeWeight");

	UMorphNodeWeight_SetNodeWeight_Params params;
	params.NewWeight = NewWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkelControlBase.GetControlMetadataWeight
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkelControlBase::GetControlMetadataWeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlBase.GetControlMetadataWeight");

	USkelControlBase_GetControlMetadataWeight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkelControlBase.TickSkelControl
// ()
// Parameters:
// float                          DeltaTime                      (Parm)
// class USkeletalMeshComponent*  SkelComp                       (Parm, EditInline)

void USkelControlBase::TickSkelControl(float DeltaTime, class USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlBase.TickSkelControl");

	USkelControlBase_TickSkelControl_Params params;
	params.DeltaTime = DeltaTime;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkelControlBase.SetSkelControlStrength
// ()
// Parameters:
// float                          NewStrength                    (Parm)
// float                          InBlendTime                    (Parm)

void USkelControlBase::SetSkelControlStrength(float NewStrength, float InBlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlBase.SetSkelControlStrength");

	USkelControlBase_SetSkelControlStrength_Params params;
	params.NewStrength = NewStrength;
	params.InBlendTime = InBlendTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkelControlBase.SetSkelControlActive
// ()
// Parameters:
// bool                           bInActive                      (Parm)

void USkelControlBase::SetSkelControlActive(bool bInActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlBase.SetSkelControlActive");

	USkelControlBase_SetSkelControlActive_Params params;
	params.bInActive = bInActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkelControlLookAt.CanLookAtPoint
// ()
// Parameters:
// struct FVector                 PointLoc                       (Parm)
// bool                           bDrawDebugInfo                 (OptionalParm, Parm)
// bool                           bDebugUsePersistentLines       (OptionalParm, Parm)
// bool                           bDebugFlushLinesFirst          (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USkelControlLookAt::CanLookAtPoint(const struct FVector& PointLoc, bool bDrawDebugInfo, bool bDebugUsePersistentLines, bool bDebugFlushLinesFirst)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlLookAt.CanLookAtPoint");

	USkelControlLookAt_CanLookAtPoint_Params params;
	params.PointLoc = PointLoc;
	params.bDrawDebugInfo = bDrawDebugInfo;
	params.bDebugUsePersistentLines = bDebugUsePersistentLines;
	params.bDebugFlushLinesFirst = bDebugFlushLinesFirst;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkelControlLookAt.SetLookAtAlpha
// ()
// Parameters:
// float                          DesiredAlpha                   (Parm)
// float                          DesiredBlendTime               (Parm)

void USkelControlLookAt::SetLookAtAlpha(float DesiredAlpha, float DesiredBlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlLookAt.SetLookAtAlpha");

	USkelControlLookAt_SetLookAtAlpha_Params params;
	params.DesiredAlpha = DesiredAlpha;
	params.DesiredBlendTime = DesiredBlendTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkelControlLookAt.InterpolateTargetLocation
// ()
// Parameters:
// float                          DeltaTime                      (Parm)

void USkelControlLookAt::InterpolateTargetLocation(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlLookAt.InterpolateTargetLocation");

	USkelControlLookAt_InterpolateTargetLocation_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkelControlLookAt.SetTargetLocation
// ()
// Parameters:
// struct FVector                 NewTargetLocation              (Parm)

void USkelControlLookAt::SetTargetLocation(const struct FVector& NewTargetLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlLookAt.SetTargetLocation");

	USkelControlLookAt_SetTargetLocation_Params params;
	params.NewTargetLocation = NewTargetLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MorphTargetSet.FindMorphTarget
// ()
// Parameters:
// struct FName                   MorphTargetName                (Parm)
// class UMorphTarget*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UMorphTarget* UMorphTargetSet::FindMorphTarget(const struct FName& MorphTargetName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MorphTargetSet.FindMorphTarget");

	UMorphTargetSet_FindMorphTarget_Params params;
	params.MorphTargetName = MorphTargetName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DecalManager.SpawnDecal
// ()
// Parameters:
// class UMaterialInterface*      DecalMaterial                  (Parm)
// struct FVector                 DecalLocation                  (Parm)
// struct FRotator                DecalOrientation               (Parm)
// float                          Width                          (Parm)
// float                          Height                         (Parm)
// float                          Thickness                      (Parm)
// bool                           bNoClip                        (Parm)
// float                          DecalRotation                  (OptionalParm, Parm)
// class UPrimitiveComponent*     HitComponent                   (OptionalParm, Parm, EditInline)
// bool                           bProjectOnTerrain              (OptionalParm, Parm)
// bool                           bProjectOnSkeletalMeshes       (OptionalParm, Parm)
// struct FName                   HitBone                        (OptionalParm, Parm)
// int                            HitNodeIndex                   (OptionalParm, Parm)
// int                            HitLevelIndex                  (OptionalParm, Parm)
// float                          InDecalLifeSpan                (OptionalParm, Parm)
// int                            InFracturedStaticMeshComponentIndex (OptionalParm, Parm)
// float                          InDepthBias                    (OptionalParm, Parm)
// struct FVector2D               InBlendRange                   (OptionalParm, Parm)
// class UDecalComponent*         ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UDecalComponent* ADecalManager::SpawnDecal(class UMaterialInterface* DecalMaterial, const struct FVector& DecalLocation, const struct FRotator& DecalOrientation, float Width, float Height, float Thickness, bool bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, bool bProjectOnTerrain, bool bProjectOnSkeletalMeshes, const struct FName& HitBone, int HitNodeIndex, int HitLevelIndex, float InDecalLifeSpan, int InFracturedStaticMeshComponentIndex, float InDepthBias, const struct FVector2D& InBlendRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.SpawnDecal");

	ADecalManager_SpawnDecal_Params params;
	params.DecalMaterial = DecalMaterial;
	params.DecalLocation = DecalLocation;
	params.DecalOrientation = DecalOrientation;
	params.Width = Width;
	params.Height = Height;
	params.Thickness = Thickness;
	params.bNoClip = bNoClip;
	params.DecalRotation = DecalRotation;
	params.HitComponent = HitComponent;
	params.bProjectOnTerrain = bProjectOnTerrain;
	params.bProjectOnSkeletalMeshes = bProjectOnSkeletalMeshes;
	params.HitBone = HitBone;
	params.HitNodeIndex = HitNodeIndex;
	params.HitLevelIndex = HitLevelIndex;
	params.InDecalLifeSpan = InDecalLifeSpan;
	params.InFracturedStaticMeshComponentIndex = InFracturedStaticMeshComponentIndex;
	params.InDepthBias = InDepthBias;
	params.InBlendRange = InBlendRange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DecalManager.GetPooledComponent
// ()
// Parameters:
// class UDecalComponent*         ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UDecalComponent* ADecalManager::GetPooledComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.GetPooledComponent");

	ADecalManager_GetPooledComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DecalManager.SetDecalParameters
// ()
// Parameters:
// class UDecalComponent*         TheDecal                       (Parm, EditInline)
// class UMaterialInterface*      DecalMaterial                  (Parm)
// struct FVector                 DecalLocation                  (Parm)
// struct FRotator                DecalOrientation               (Parm)
// float                          Width                          (Parm)
// float                          Height                         (Parm)
// float                          Thickness                      (Parm)
// bool                           bNoClip                        (Parm)
// float                          DecalRotation                  (Parm)
// class UPrimitiveComponent*     HitComponent                   (Parm, EditInline)
// bool                           bProjectOnTerrain              (Parm)
// bool                           bProjectOnSkeletalMeshes       (Parm)
// struct FName                   HitBone                        (Parm)
// int                            HitNodeIndex                   (Parm)
// int                            HitLevelIndex                  (Parm)
// int                            InFracturedStaticMeshComponentIndex (Parm)
// float                          DepthBias                      (Parm)
// struct FVector2D               BlendRange                     (Parm)

void ADecalManager::SetDecalParameters(class UDecalComponent* TheDecal, class UMaterialInterface* DecalMaterial, const struct FVector& DecalLocation, const struct FRotator& DecalOrientation, float Width, float Height, float Thickness, bool bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, bool bProjectOnTerrain, bool bProjectOnSkeletalMeshes, const struct FName& HitBone, int HitNodeIndex, int HitLevelIndex, int InFracturedStaticMeshComponentIndex, float DepthBias, const struct FVector2D& BlendRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.SetDecalParameters");

	ADecalManager_SetDecalParameters_Params params;
	params.TheDecal = TheDecal;
	params.DecalMaterial = DecalMaterial;
	params.DecalLocation = DecalLocation;
	params.DecalOrientation = DecalOrientation;
	params.Width = Width;
	params.Height = Height;
	params.Thickness = Thickness;
	params.bNoClip = bNoClip;
	params.DecalRotation = DecalRotation;
	params.HitComponent = HitComponent;
	params.bProjectOnTerrain = bProjectOnTerrain;
	params.bProjectOnSkeletalMeshes = bProjectOnSkeletalMeshes;
	params.HitBone = HitBone;
	params.HitNodeIndex = HitNodeIndex;
	params.HitLevelIndex = HitLevelIndex;
	params.InFracturedStaticMeshComponentIndex = InFracturedStaticMeshComponentIndex;
	params.DepthBias = DepthBias;
	params.BlendRange = BlendRange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalManager.CanSpawnDecals
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ADecalManager::CanSpawnDecals()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.CanSpawnDecals");

	ADecalManager_CanSpawnDecals_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DecalManager.DecalFinished
// ()
// Parameters:
// class UDecalComponent*         Decal                          (Parm, EditInline)

void ADecalManager::DecalFinished(class UDecalComponent* Decal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.DecalFinished");

	ADecalManager_DecalFinished_Params params;
	params.Decal = Decal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalManager.AreDynamicDecalsEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ADecalManager::AreDynamicDecalsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.AreDynamicDecalsEnabled");

	ADecalManager_AreDynamicDecalsEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DecalComponent.GetDecalMaterial
// ()
// Parameters:
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ReturnParm)

class UMaterialInterface* UDecalComponent::GetDecalMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.GetDecalMaterial");

	UDecalComponent_GetDecalMaterial_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DecalComponent.SetDecalMaterial
// ()
// Parameters:
// class UMaterialInterface*      NewDecalMaterial               (Parm)

void UDecalComponent::SetDecalMaterial(class UMaterialInterface* NewDecalMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetDecalMaterial");

	UDecalComponent_SetDecalMaterial_Params params;
	params.NewDecalMaterial = NewDecalMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalComponent.ResetToDefaults
// ()

void UDecalComponent::ResetToDefaults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.ResetToDefaults");

	UDecalComponent_ResetToDefaults_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FogVolumeDensityInfo.ApplyCheckpointRecord
// ()
// Parameters:
// struct AFogVolumeDensityInfo_FCheckpointRecord Record                         (Const, Parm, OutParm)

void AFogVolumeDensityInfo::ApplyCheckpointRecord(struct AFogVolumeDensityInfo_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityInfo.ApplyCheckpointRecord");

	AFogVolumeDensityInfo_ApplyCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.FogVolumeDensityInfo.CreateCheckpointRecord
// ()
// Parameters:
// struct AFogVolumeDensityInfo_FCheckpointRecord Record                         (Parm, OutParm)

void AFogVolumeDensityInfo::CreateCheckpointRecord(struct AFogVolumeDensityInfo_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityInfo.CreateCheckpointRecord");

	AFogVolumeDensityInfo_CreateCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.FogVolumeDensityInfo.ShouldSaveForCheckpoint
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AFogVolumeDensityInfo::ShouldSaveForCheckpoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityInfo.ShouldSaveForCheckpoint");

	AFogVolumeDensityInfo_ShouldSaveForCheckpoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FogVolumeDensityInfo.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void AFogVolumeDensityInfo::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityInfo.OnToggle");

	AFogVolumeDensityInfo_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FogVolumeDensityInfo.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void AFogVolumeDensityInfo::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityInfo.ReplicatedEvent");

	AFogVolumeDensityInfo_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FogVolumeDensityInfo.PostBeginPlay
// ()

void AFogVolumeDensityInfo::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityInfo.PostBeginPlay");

	AFogVolumeDensityInfo_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ExponentialHeightFogComponent.SetEnabled
// ()
// Parameters:
// bool                           bSetEnabled                    (Parm)

void UExponentialHeightFogComponent::SetEnabled(bool bSetEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetEnabled");

	UExponentialHeightFogComponent_SetEnabled_Params params;
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FogVolumeDensityComponent.SetEnabled
// ()
// Parameters:
// bool                           bSetEnabled                    (Parm)

void UFogVolumeDensityComponent::SetEnabled(bool bSetEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityComponent.SetEnabled");

	UFogVolumeDensityComponent_SetEnabled_Params params;
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ApexDestructibleActor.TakeRadiusDamage
// ()
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// float                          BaseDamage                     (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HurtOrigin                     (Parm)
// bool                           bFullDamage                    (Parm)
// class AActor*                  DamageCauser                   (Parm)
// float                          DamageFalloffExponent          (OptionalParm, Parm)

void AApexDestructibleActor::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ApexDestructibleActor.TakeRadiusDamage");

	AApexDestructibleActor_TakeRadiusDamage_Params params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ApexDestructibleActor.TakeDamage
// ()
// Parameters:
// int                            Damage                         (Parm)
// class AController*             EventInstigator                (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)

void AApexDestructibleActor::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ApexDestructibleActor.TakeDamage");

	AApexDestructibleActor_TakeDamage_Params params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ApexDestructibleActor.PostBeginPlay
// ()

void AApexDestructibleActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ApexDestructibleActor.PostBeginPlay");

	AApexDestructibleActor_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ApexDestructibleActor.CacheFractureEffects
// ()

void AApexDestructibleActor::CacheFractureEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ApexDestructibleActor.CacheFractureEffects");

	AApexDestructibleActor_CacheFractureEffects_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ApexDestructibleActor.SpawnFractureEmitter
// ()
// Parameters:
// class UParticleSystem*         EmitterTemplate                (Parm)
// struct FVector                 SpawnLocation                  (Parm)
// struct FVector                 SpawnDirection                 (Parm)

void AApexDestructibleActor::SpawnFractureEmitter(class UParticleSystem* EmitterTemplate, const struct FVector& SpawnLocation, const struct FVector& SpawnDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ApexDestructibleActor.SpawnFractureEmitter");

	AApexDestructibleActor_SpawnFractureEmitter_Params params;
	params.EmitterTemplate = EmitterTemplate;
	params.SpawnLocation = SpawnLocation;
	params.SpawnDirection = SpawnDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.NotifyHitByExplosion
// ()
// Parameters:
// class AController*             InstigatorController           (Parm)
// float                          DamageAmount                   (Parm)
// class UClass*                  dmgType                        (Parm)

void AFracturedStaticMeshActor::NotifyHitByExplosion(class AController* InstigatorController, float DamageAmount, class UClass* dmgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.NotifyHitByExplosion");

	AFracturedStaticMeshActor_NotifyHitByExplosion_Params params;
	params.InstigatorController = InstigatorController;
	params.DamageAmount = DamageAmount;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.SetLoseChunkReplacementMaterial
// ()

void AFracturedStaticMeshActor::SetLoseChunkReplacementMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.SetLoseChunkReplacementMaterial");

	AFracturedStaticMeshActor_SetLoseChunkReplacementMaterial_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.HideFragmentsToMaximizeMemoryUsage
// ()

void AFracturedStaticMeshActor::HideFragmentsToMaximizeMemoryUsage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.HideFragmentsToMaximizeMemoryUsage");

	AFracturedStaticMeshActor_HideFragmentsToMaximizeMemoryUsage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.HideOneFragment
// ()

void AFracturedStaticMeshActor::HideOneFragment()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.HideOneFragment");

	AFracturedStaticMeshActor_HideOneFragment_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.ResetVisibility
// ()

void AFracturedStaticMeshActor::ResetVisibility()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.ResetVisibility");

	AFracturedStaticMeshActor_ResetVisibility_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.BreakOffPartsInRadius
// ()
// Parameters:
// struct FVector                 Origin                         (Parm)
// float                          Radius                         (Parm)
// float                          RBStrength                     (Parm)
// bool                           bWantPhysChunksAndParticles    (Parm)

void AFracturedStaticMeshActor::BreakOffPartsInRadius(const struct FVector& Origin, float Radius, float RBStrength, bool bWantPhysChunksAndParticles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.BreakOffPartsInRadius");

	AFracturedStaticMeshActor_BreakOffPartsInRadius_Params params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.RBStrength = RBStrength;
	params.bWantPhysChunksAndParticles = bWantPhysChunksAndParticles;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.Explode
// ()

void AFracturedStaticMeshActor::Explode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.Explode");

	AFracturedStaticMeshActor_Explode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.TakeDamage
// ()
// Parameters:
// int                            Damage                         (Parm)
// class AController*             EventInstigator                (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)

void AFracturedStaticMeshActor::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.TakeDamage");

	AFracturedStaticMeshActor_TakeDamage_Params params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.RemoveDecals
// ()
// Parameters:
// int                            IndexToRemoveDecalsFrom        (Parm)

void AFracturedStaticMeshActor::RemoveDecals(int IndexToRemoveDecalsFrom)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.RemoveDecals");

	AFracturedStaticMeshActor_RemoveDecals_Params params;
	params.IndexToRemoveDecalsFrom = IndexToRemoveDecalsFrom;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.FractureEffectIsRelevant
// ()
// Parameters:
// bool                           bForceDedicated                (Parm)
// class APawn*                   EffectInstigator               (Parm)
// unsigned char                  bWantPhysChunksAndParticles    (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AFracturedStaticMeshActor::FractureEffectIsRelevant(bool bForceDedicated, class APawn* EffectInstigator, unsigned char* bWantPhysChunksAndParticles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.FractureEffectIsRelevant");

	AFracturedStaticMeshActor_FractureEffectIsRelevant_Params params;
	params.bForceDedicated = bForceDedicated;
	params.EffectInstigator = EffectInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bWantPhysChunksAndParticles != nullptr)
		*bWantPhysChunksAndParticles = params.bWantPhysChunksAndParticles;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshActor.IsFracturedByDamageType
// ()
// Parameters:
// class UClass*                  dmgType                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AFracturedStaticMeshActor::IsFracturedByDamageType(class UClass* dmgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.IsFracturedByDamageType");

	AFracturedStaticMeshActor_IsFracturedByDamageType_Params params;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshActor.SpawnDeferredParts
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AFracturedStaticMeshActor::SpawnDeferredParts()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.SpawnDeferredParts");

	AFracturedStaticMeshActor_SpawnDeferredParts_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshActor.BreakOffIsolatedIslands
// ()
// Parameters:
// TArray<unsigned char>          FragmentVis                    (Parm, OutParm, NeedCtorLink)
// TArray<int>                    IgnoreFrags                    (Parm, NeedCtorLink)
// struct FVector                 ChunkDir                       (Parm)
// TArray<class AFracturedStaticMeshPart*> DisableCollWithPart            (Parm, NeedCtorLink)
// bool                           bWantPhysChunks                (Parm)

void AFracturedStaticMeshActor::BreakOffIsolatedIslands(TArray<int> IgnoreFrags, const struct FVector& ChunkDir, TArray<class AFracturedStaticMeshPart*> DisableCollWithPart, bool bWantPhysChunks, TArray<unsigned char>* FragmentVis)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.BreakOffIsolatedIslands");

	AFracturedStaticMeshActor_BreakOffIsolatedIslands_Params params;
	params.IgnoreFrags = IgnoreFrags;
	params.ChunkDir = ChunkDir;
	params.DisableCollWithPart = DisableCollWithPart;
	params.bWantPhysChunks = bWantPhysChunks;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FragmentVis != nullptr)
		*FragmentVis = params.FragmentVis;
}


// Function Engine.FracturedStaticMeshActor.ResetHealth
// ()

void AFracturedStaticMeshActor::ResetHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.ResetHealth");

	AFracturedStaticMeshActor_ResetHealth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.PostBeginPlay
// ()

void AFracturedStaticMeshActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.PostBeginPlay");

	AFracturedStaticMeshActor_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.SpawnPartMulti
// ()
// Parameters:
// TArray<int>                    ChunkIndices                   (Parm, NeedCtorLink)
// struct FVector                 InitialVel                     (Parm)
// struct FVector                 InitialAngVel                  (Parm)
// float                          RelativeScale                  (Parm)
// bool                           bExplosion                     (Parm)
// class AFracturedStaticMeshPart* ReturnValue                    (Parm, OutParm, ReturnParm)

class AFracturedStaticMeshPart* AFracturedStaticMeshActor::SpawnPartMulti(TArray<int> ChunkIndices, const struct FVector& InitialVel, const struct FVector& InitialAngVel, float RelativeScale, bool bExplosion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.SpawnPartMulti");

	AFracturedStaticMeshActor_SpawnPartMulti_Params params;
	params.ChunkIndices = ChunkIndices;
	params.InitialVel = InitialVel;
	params.InitialAngVel = InitialAngVel;
	params.RelativeScale = RelativeScale;
	params.bExplosion = bExplosion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshActor.SpawnPart
// ()
// Parameters:
// int                            ChunkIndex                     (Parm)
// struct FVector                 InitialVel                     (Parm)
// struct FVector                 InitialAngVel                  (Parm)
// float                          RelativeScale                  (Parm)
// bool                           bExplosion                     (Parm)
// class AFracturedStaticMeshPart* ReturnValue                    (Parm, OutParm, ReturnParm)

class AFracturedStaticMeshPart* AFracturedStaticMeshActor::SpawnPart(int ChunkIndex, const struct FVector& InitialVel, const struct FVector& InitialAngVel, float RelativeScale, bool bExplosion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.SpawnPart");

	AFracturedStaticMeshActor_SpawnPart_Params params;
	params.ChunkIndex = ChunkIndex;
	params.InitialVel = InitialVel;
	params.InitialAngVel = InitialAngVel;
	params.RelativeScale = RelativeScale;
	params.bExplosion = bExplosion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshPart.BreakOffPartsInRadius
// ()
// Parameters:
// struct FVector                 Origin                         (Parm)
// float                          Radius                         (Parm)
// float                          RBStrength                     (Parm)
// bool                           bWantPhysChunksAndParticles    (Parm)

void AFracturedStaticMeshPart::BreakOffPartsInRadius(const struct FVector& Origin, float Radius, float RBStrength, bool bWantPhysChunksAndParticles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.BreakOffPartsInRadius");

	AFracturedStaticMeshPart_BreakOffPartsInRadius_Params params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.RBStrength = RBStrength;
	params.bWantPhysChunksAndParticles = bWantPhysChunksAndParticles;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshPart.Explode
// ()

void AFracturedStaticMeshPart::Explode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.Explode");

	AFracturedStaticMeshPart_Explode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshPart.FellOutOfWorld
// ()
// Parameters:
// class UClass*                  dmgType                        (Parm)

void AFracturedStaticMeshPart::FellOutOfWorld(class UClass* dmgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.FellOutOfWorld");

	AFracturedStaticMeshPart_FellOutOfWorld_Params params;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshPart.TryToCleanUp
// ()

void AFracturedStaticMeshPart::TryToCleanUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.TryToCleanUp");

	AFracturedStaticMeshPart_TryToCleanUp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshPart.TakeDamage
// ()
// Parameters:
// int                            Damage                         (Parm)
// class AController*             EventInstigator                (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)

void AFracturedStaticMeshPart::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.TakeDamage");

	AFracturedStaticMeshPart_TakeDamage_Params params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshPart.RecyclePart
// ()
// Parameters:
// bool                           bAddToFreePool                 (Parm)

void AFracturedStaticMeshPart::RecyclePart(bool bAddToFreePool)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.RecyclePart");

	AFracturedStaticMeshPart_RecyclePart_Params params;
	params.bAddToFreePool = bAddToFreePool;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshPart.Initialize
// ()

void AFracturedStaticMeshPart::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.Initialize");

	AFracturedStaticMeshPart_Initialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FractureManager.Tick
// ()
// Parameters:
// float                          DeltaTime                      (Parm)

void AFractureManager::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.Tick");

	AFractureManager_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FractureManager.ReturnPartActor
// ()
// Parameters:
// class AFracturedStaticMeshPart* Part                           (Parm)

void AFractureManager::ReturnPartActor(class AFracturedStaticMeshPart* Part)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.ReturnPartActor");

	AFractureManager_ReturnPartActor_Params params;
	params.Part = Part;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FractureManager.SpawnPartActor
// ()
// Parameters:
// class AFracturedStaticMeshActor* Parent                         (Parm)
// struct FVector                 SpawnLocation                  (Parm)
// struct FRotator                SpawnRotation                  (Parm)
// class AFracturedStaticMeshPart* ReturnValue                    (Parm, OutParm, ReturnParm)

class AFracturedStaticMeshPart* AFractureManager::SpawnPartActor(class AFracturedStaticMeshActor* Parent, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.SpawnPartActor");

	AFractureManager_SpawnPartActor_Params params;
	params.Parent = Parent;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FractureManager.GetFSMPart
// ()
// Parameters:
// class AFracturedStaticMeshActor* Parent                         (Parm)
// struct FVector                 SpawnLocation                  (Parm)
// struct FRotator                SpawnRotation                  (Parm)
// class AFracturedStaticMeshPart* ReturnValue                    (Parm, OutParm, ReturnParm)

class AFracturedStaticMeshPart* AFractureManager::GetFSMPart(class AFracturedStaticMeshActor* Parent, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.GetFSMPart");

	AFractureManager_GetFSMPart_Params params;
	params.Parent = Parent;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FractureManager.ResetPoolVisibility
// ()

void AFractureManager::ResetPoolVisibility()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.ResetPoolVisibility");

	AFractureManager_ResetPoolVisibility_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FractureManager.CreateFSMParts
// ()

void AFractureManager::CreateFSMParts()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.CreateFSMParts");

	AFractureManager_CreateFSMParts_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FractureManager.CleanUpFSMParts
// ()

void AFractureManager::CleanUpFSMParts()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.CleanUpFSMParts");

	AFractureManager_CleanUpFSMParts_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FractureManager.Destroyed
// ()

void AFractureManager::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.Destroyed");

	AFractureManager_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FractureManager.PreBeginPlay
// ()

void AFractureManager::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.PreBeginPlay");

	AFractureManager_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FractureManager.GetFSMFractureCullDistanceScale
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AFractureManager::GetFSMFractureCullDistanceScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.GetFSMFractureCullDistanceScale");

	AFractureManager_GetFSMFractureCullDistanceScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FractureManager.GetFSMRadialSpawnChanceScale
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AFractureManager::GetFSMRadialSpawnChanceScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.GetFSMRadialSpawnChanceScale");

	AFractureManager_GetFSMRadialSpawnChanceScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FractureManager.GetFSMDirectSpawnChanceScale
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AFractureManager::GetFSMDirectSpawnChanceScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.GetFSMDirectSpawnChanceScale");

	AFractureManager_GetFSMDirectSpawnChanceScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FractureManager.GetNumFSMPartsScale
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AFractureManager::GetNumFSMPartsScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.GetNumFSMPartsScale");

	AFractureManager_GetNumFSMPartsScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FractureManager.SpawnChunkDestroyEffect
// ()
// Parameters:
// class UParticleSystem*         Effect                         (Parm)
// struct FBox                    ChunkBox                       (Parm)
// struct FVector                 ChunkDir                       (Parm)
// float                          Scale                          (Parm)

void AFractureManager::SpawnChunkDestroyEffect(class UParticleSystem* Effect, const struct FBox& ChunkBox, const struct FVector& ChunkDir, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.SpawnChunkDestroyEffect");

	AFractureManager_SpawnChunkDestroyEffect_Params params;
	params.Effect = Effect;
	params.ChunkBox = ChunkBox;
	params.ChunkDir = ChunkDir;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ImageReflection.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void AImageReflection::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ImageReflection.OnToggle");

	AImageReflection_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ImageReflection.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void AImageReflection::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ImageReflection.ReplicatedEvent");

	AImageReflection_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ImageReflection.PostBeginPlay
// ()

void AImageReflection::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ImageReflection.PostBeginPlay");

	AImageReflection_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ImageReflectionShadowPlane.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void AImageReflectionShadowPlane::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ImageReflectionShadowPlane.OnToggle");

	AImageReflectionShadowPlane_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ImageReflectionShadowPlane.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void AImageReflectionShadowPlane::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ImageReflectionShadowPlane.ReplicatedEvent");

	AImageReflectionShadowPlane_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ImageReflectionShadowPlane.PostBeginPlay
// ()

void AImageReflectionShadowPlane::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ImageReflectionShadowPlane.PostBeginPlay");

	AImageReflectionShadowPlane_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ImageReflectionShadowPlaneComponent.SetEnabled
// ()
// Parameters:
// bool                           bSetEnabled                    (Parm)

void UImageReflectionShadowPlaneComponent::SetEnabled(bool bSetEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ImageReflectionShadowPlaneComponent.SetEnabled");

	UImageReflectionShadowPlaneComponent_SetEnabled_Params params;
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedBaseComponent.GetNumVisibleFragments
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UFracturedBaseComponent::GetNumVisibleFragments()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedBaseComponent.GetNumVisibleFragments");

	UFracturedBaseComponent_GetNumVisibleFragments_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedBaseComponent.GetNumFragments
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UFracturedBaseComponent::GetNumFragments()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedBaseComponent.GetNumFragments");

	UFracturedBaseComponent_GetNumFragments_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedBaseComponent.IsFragmentVisible
// ()
// Parameters:
// int                            FragmentIndex                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UFracturedBaseComponent::IsFragmentVisible(int FragmentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedBaseComponent.IsFragmentVisible");

	UFracturedBaseComponent_IsFragmentVisible_Params params;
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedBaseComponent.GetVisibleFragments
// ()
// Parameters:
// TArray<unsigned char>          ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<unsigned char> UFracturedBaseComponent::GetVisibleFragments()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedBaseComponent.GetVisibleFragments");

	UFracturedBaseComponent_GetVisibleFragments_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedBaseComponent.SetStaticMesh
// ()
// Parameters:
// class UStaticMesh*             NewMesh                        (Parm)
// bool                           bForce                         (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UFracturedBaseComponent::SetStaticMesh(class UStaticMesh* NewMesh, bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedBaseComponent.SetStaticMesh");

	UFracturedBaseComponent_SetStaticMesh_Params params;
	params.NewMesh = NewMesh;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.GetFracturedMeshPhysMaterial
// ()
// Parameters:
// class UPhysicalMaterial*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UPhysicalMaterial* UFracturedStaticMeshComponent::GetFracturedMeshPhysMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetFracturedMeshPhysMaterial");

	UFracturedStaticMeshComponent_GetFracturedMeshPhysMaterial_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.RecreatePhysState
// ()

void UFracturedStaticMeshComponent::RecreatePhysState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.RecreatePhysState");

	UFracturedStaticMeshComponent_RecreatePhysState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshComponent.GetBoundaryHiddenFragments
// ()
// Parameters:
// TArray<int>                    AdditionalVisibleFragments     (Parm, NeedCtorLink)
// TArray<int>                    ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<int> UFracturedStaticMeshComponent::GetBoundaryHiddenFragments(TArray<int> AdditionalVisibleFragments)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetBoundaryHiddenFragments");

	UFracturedStaticMeshComponent_GetBoundaryHiddenFragments_Params params;
	params.AdditionalVisibleFragments = AdditionalVisibleFragments;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.GetFragmentGroups
// ()
// Parameters:
// TArray<int>                    IgnoreFragments                (Parm, NeedCtorLink)
// float                          MinConnectionArea              (Parm)
// TArray<struct FFragmentGroup>  ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FFragmentGroup> UFracturedStaticMeshComponent::GetFragmentGroups(TArray<int> IgnoreFragments, float MinConnectionArea)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetFragmentGroups");

	UFracturedStaticMeshComponent_GetFragmentGroups_Params params;
	params.IgnoreFragments = IgnoreFragments;
	params.MinConnectionArea = MinConnectionArea;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.GetCoreFragmentIndex
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UFracturedStaticMeshComponent::GetCoreFragmentIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetCoreFragmentIndex");

	UFracturedStaticMeshComponent_GetCoreFragmentIndex_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.GetFragmentAverageExteriorNormal
// ()
// Parameters:
// int                            FragmentIndex                  (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UFracturedStaticMeshComponent::GetFragmentAverageExteriorNormal(int FragmentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetFragmentAverageExteriorNormal");

	UFracturedStaticMeshComponent_GetFragmentAverageExteriorNormal_Params params;
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.GetFragmentBox
// ()
// Parameters:
// int                            FragmentIndex                  (Parm)
// struct FBox                    ReturnValue                    (Parm, OutParm, ReturnParm)

struct FBox UFracturedStaticMeshComponent::GetFragmentBox(int FragmentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetFragmentBox");

	UFracturedStaticMeshComponent_GetFragmentBox_Params params;
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.IsNoPhysFragment
// ()
// Parameters:
// int                            FragmentIndex                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UFracturedStaticMeshComponent::IsNoPhysFragment(int FragmentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.IsNoPhysFragment");

	UFracturedStaticMeshComponent_IsNoPhysFragment_Params params;
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.IsRootFragment
// ()
// Parameters:
// int                            FragmentIndex                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UFracturedStaticMeshComponent::IsRootFragment(int FragmentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.IsRootFragment");

	UFracturedStaticMeshComponent_IsRootFragment_Params params;
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.IsFragmentDestroyable
// ()
// Parameters:
// int                            FragmentIndex                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UFracturedStaticMeshComponent::IsFragmentDestroyable(int FragmentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.IsFragmentDestroyable");

	UFracturedStaticMeshComponent_IsFragmentDestroyable_Params params;
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.SetVisibleFragments
// ()
// Parameters:
// TArray<unsigned char>          VisibilityFactors              (Parm, NeedCtorLink)

void UFracturedStaticMeshComponent::SetVisibleFragments(TArray<unsigned char> VisibilityFactors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.SetVisibleFragments");

	UFracturedStaticMeshComponent_SetVisibleFragments_Params params;
	params.VisibilityFactors = VisibilityFactors;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ImageBasedReflectionComponent.OnUpdatePropertyReflectionColor
// ()

void UImageBasedReflectionComponent::OnUpdatePropertyReflectionColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ImageBasedReflectionComponent.OnUpdatePropertyReflectionColor");

	UImageBasedReflectionComponent_OnUpdatePropertyReflectionColor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ImageBasedReflectionComponent.UpdateImageReflectionParameters
// ()

void UImageBasedReflectionComponent::UpdateImageReflectionParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ImageBasedReflectionComponent.UpdateImageReflectionParameters");

	UImageBasedReflectionComponent_UpdateImageReflectionParameters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ImageBasedReflectionComponent.SetEnabled
// ()
// Parameters:
// bool                           bSetEnabled                    (Parm)

void UImageBasedReflectionComponent::SetEnabled(bool bSetEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ImageBasedReflectionComponent.SetEnabled");

	UImageBasedReflectionComponent_SetEnabled_Params params;
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstance.IsInMapOrTransientPackage
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaterialInstance::IsInMapOrTransientPackage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.IsInMapOrTransientPackage");

	UMaterialInstance_IsInMapOrTransientPackage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaterialInstance.ClearParameterValues
// ()

void UMaterialInstance::ClearParameterValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.ClearParameterValues");

	UMaterialInstance_ClearParameterValues_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstance.SetFontParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class UFont*                   FontValue                      (Parm)
// int                            FontPage                       (Parm)

void UMaterialInstance::SetFontParameterValue(const struct FName& ParameterName, class UFont* FontValue, int FontPage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetFontParameterValue");

	UMaterialInstance_SetFontParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.FontValue = FontValue;
	params.FontPage = FontPage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstance.SetTextureParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class UTexture*                Value                          (Parm)

void UMaterialInstance::SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetTextureParameterValue");

	UMaterialInstance_SetTextureParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstance.SetScalarCurveParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FInterpCurveFloat       Value                          (Const, Parm, OutParm, NeedCtorLink)

void UMaterialInstance::SetScalarCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveFloat* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetScalarCurveParameterValue");

	UMaterialInstance_SetScalarCurveParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.MaterialInstance.SetScalarParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          Value                          (Parm)

void UMaterialInstance::SetScalarParameterValue(const struct FName& ParameterName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetScalarParameterValue");

	UMaterialInstance_SetScalarParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstance.SetVectorParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FLinearColor            Value                          (Const, Parm, OutParm)

void UMaterialInstance::SetVectorParameterValue(const struct FName& ParameterName, struct FLinearColor* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetVectorParameterValue");

	UMaterialInstance_SetVectorParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.MaterialInstance.SetParent
// ()
// Parameters:
// class UMaterialInterface*      NewParent                      (Parm)

void UMaterialInstance::SetParent(class UMaterialInterface* NewParent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetParent");

	UMaterialInstance_SetParent_Params params;
	params.NewParent = NewParent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceConstant.ClearParameterValues
// ()

void UMaterialInstanceConstant::ClearParameterValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.ClearParameterValues");

	UMaterialInstanceConstant_ClearParameterValues_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceConstant.SetFontParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class UFont*                   FontValue                      (Parm)
// int                            FontPage                       (Parm)

void UMaterialInstanceConstant::SetFontParameterValue(const struct FName& ParameterName, class UFont* FontValue, int FontPage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.SetFontParameterValue");

	UMaterialInstanceConstant_SetFontParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.FontValue = FontValue;
	params.FontPage = FontPage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceConstant.SetVectorParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FLinearColor            Value                          (Const, Parm, OutParm)

void UMaterialInstanceConstant::SetVectorParameterValue(const struct FName& ParameterName, struct FLinearColor* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.SetVectorParameterValue");

	UMaterialInstanceConstant_SetVectorParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.MaterialInstanceConstant.SetTextureParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class UTexture*                Value                          (Parm)

void UMaterialInstanceConstant::SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.SetTextureParameterValue");

	UMaterialInstanceConstant_SetTextureParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceConstant.SetScalarParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          Value                          (Parm)

void UMaterialInstanceConstant::SetScalarParameterValue(const struct FName& ParameterName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.SetScalarParameterValue");

	UMaterialInstanceConstant_SetScalarParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceConstant.SetParent
// ()
// Parameters:
// class UMaterialInterface*      NewParent                      (Parm)

void UMaterialInstanceConstant::SetParent(class UMaterialInterface* NewParent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.SetParent");

	UMaterialInstanceConstant_SetParent_Params params;
	params.NewParent = NewParent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.GetMaxDurationFromAllParameters
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UMaterialInstanceTimeVarying::GetMaxDurationFromAllParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.GetMaxDurationFromAllParameters");

	UMaterialInstanceTimeVarying_GetMaxDurationFromAllParameters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaterialInstanceTimeVarying.ClearParameterValues
// ()

void UMaterialInstanceTimeVarying::ClearParameterValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.ClearParameterValues");

	UMaterialInstanceTimeVarying_ClearParameterValues_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetFontParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class UFont*                   FontValue                      (Parm)
// int                            FontPage                       (Parm)

void UMaterialInstanceTimeVarying::SetFontParameterValue(const struct FName& ParameterName, class UFont* FontValue, int FontPage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetFontParameterValue");

	UMaterialInstanceTimeVarying_SetFontParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.FontValue = FontValue;
	params.FontPage = FontPage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetVectorStartTime
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          Value                          (Parm)

void UMaterialInstanceTimeVarying::SetVectorStartTime(const struct FName& ParameterName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetVectorStartTime");

	UMaterialInstanceTimeVarying_SetVectorStartTime_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetVectorCurveParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FInterpCurveVector      Value                          (Const, Parm, OutParm, NeedCtorLink)

void UMaterialInstanceTimeVarying::SetVectorCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveVector* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetVectorCurveParameterValue");

	UMaterialInstanceTimeVarying_SetVectorCurveParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.MaterialInstanceTimeVarying.SetVectorParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FLinearColor            Value                          (Const, Parm, OutParm)

void UMaterialInstanceTimeVarying::SetVectorParameterValue(const struct FName& ParameterName, struct FLinearColor* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetVectorParameterValue");

	UMaterialInstanceTimeVarying_SetVectorParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.MaterialInstanceTimeVarying.SetTextureParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class UTexture*                Value                          (Parm)

void UMaterialInstanceTimeVarying::SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetTextureParameterValue");

	UMaterialInstanceTimeVarying_SetTextureParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetDuration
// ()
// Parameters:
// float                          Value                          (Parm)

void UMaterialInstanceTimeVarying::SetDuration(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetDuration");

	UMaterialInstanceTimeVarying_SetDuration_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetScalarStartTime
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          Value                          (Parm)

void UMaterialInstanceTimeVarying::SetScalarStartTime(const struct FName& ParameterName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetScalarStartTime");

	UMaterialInstanceTimeVarying_SetScalarStartTime_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetScalarCurveParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FInterpCurveFloat       Value                          (Const, Parm, OutParm, NeedCtorLink)

void UMaterialInstanceTimeVarying::SetScalarCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveFloat* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetScalarCurveParameterValue");

	UMaterialInstanceTimeVarying_SetScalarCurveParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.MaterialInstanceTimeVarying.SetScalarParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          Value                          (Parm)

void UMaterialInstanceTimeVarying::SetScalarParameterValue(const struct FName& ParameterName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetScalarParameterValue");

	UMaterialInstanceTimeVarying_SetScalarParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetParent
// ()
// Parameters:
// class UMaterialInterface*      NewParent                      (Parm)

void UMaterialInstanceTimeVarying::SetParent(class UMaterialInterface* NewParent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetParent");

	UMaterialInstanceTimeVarying_SetParent_Params params;
	params.NewParent = NewParent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterCameraLensEffectBase.UpdateLocation
// ()
// Parameters:
// struct FVector                 CamLoc                         (Const, Parm, OutParm)
// struct FRotator                CamRot                         (Const, Parm, OutParm)
// float                          CamFOVDeg                      (Parm)

void AEmitterCameraLensEffectBase::UpdateLocation(float CamFOVDeg, struct FVector* CamLoc, struct FRotator* CamRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterCameraLensEffectBase.UpdateLocation");

	AEmitterCameraLensEffectBase_UpdateLocation_Params params;
	params.CamFOVDeg = CamFOVDeg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CamLoc != nullptr)
		*CamLoc = params.CamLoc;
	if (CamRot != nullptr)
		*CamRot = params.CamRot;
}


// Function Engine.EmitterCameraLensEffectBase.ActivateLensEffect
// ()

void AEmitterCameraLensEffectBase::ActivateLensEffect()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterCameraLensEffectBase.ActivateLensEffect");

	AEmitterCameraLensEffectBase_ActivateLensEffect_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterCameraLensEffectBase.PostBeginPlay
// ()

void AEmitterCameraLensEffectBase::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterCameraLensEffectBase.PostBeginPlay");

	AEmitterCameraLensEffectBase_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterCameraLensEffectBase.NotifyRetriggered
// ()

void AEmitterCameraLensEffectBase::NotifyRetriggered()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterCameraLensEffectBase.NotifyRetriggered");

	AEmitterCameraLensEffectBase_NotifyRetriggered_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterCameraLensEffectBase.RegisterCamera
// ()
// Parameters:
// class ACamera*                 C                              (Parm)

void AEmitterCameraLensEffectBase::RegisterCamera(class ACamera* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterCameraLensEffectBase.RegisterCamera");

	AEmitterCameraLensEffectBase_RegisterCamera_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterCameraLensEffectBase.Destroyed
// ()

void AEmitterCameraLensEffectBase::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterCameraLensEffectBase.Destroyed");

	AEmitterCameraLensEffectBase_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleEventManager.HandleParticleModuleEventSendToGame
// ()
// Parameters:
// class UParticleModuleEventSendToGame* InEvent                        (Parm)
// struct FVector                 InCollideDirection             (Const, Parm, OutParm)
// struct FVector                 InHitLocation                  (Const, Parm, OutParm)
// struct FVector                 InHitNormal                    (Const, Parm, OutParm)
// struct FName                   InBoneName                     (Const, Parm, OutParm)

void AParticleEventManager::HandleParticleModuleEventSendToGame(class UParticleModuleEventSendToGame* InEvent, struct FVector* InCollideDirection, struct FVector* InHitLocation, struct FVector* InHitNormal, struct FName* InBoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleEventManager.HandleParticleModuleEventSendToGame");

	AParticleEventManager_HandleParticleModuleEventSendToGame_Params params;
	params.InEvent = InEvent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InCollideDirection != nullptr)
		*InCollideDirection = params.InCollideDirection;
	if (InHitLocation != nullptr)
		*InHitLocation = params.InHitLocation;
	if (InHitNormal != nullptr)
		*InHitNormal = params.InHitNormal;
	if (InBoneName != nullptr)
		*InBoneName = params.InBoneName;
}


// Function Engine.ParticleSystemComponent.SetStopSpawning
// ()
// Parameters:
// int                            InEmitterIndex                 (Parm)
// bool                           bInStopSpawning                (Parm)

void UParticleSystemComponent::SetStopSpawning(int InEmitterIndex, bool bInStopSpawning)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetStopSpawning");

	UParticleSystemComponent_SetStopSpawning_Params params;
	params.InEmitterIndex = InEmitterIndex;
	params.bInStopSpawning = bInStopSpawning;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.ResetToDefaults
// ()

void UParticleSystemComponent::ResetToDefaults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.ResetToDefaults");

	UParticleSystemComponent_ResetToDefaults_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetActive
// ()
// Parameters:
// bool                           bNowActive                     (Parm)
// bool                           bFlagAsJustAttached            (OptionalParm, Parm)

void UParticleSystemComponent::SetActive(bool bNowActive, bool bFlagAsJustAttached)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetActive");

	UParticleSystemComponent_SetActive_Params params;
	params.bNowActive = bNowActive;
	params.bFlagAsJustAttached = bFlagAsJustAttached;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.ClearParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// TEnumAsByte<EParticleSysParamType> ParameterType                  (OptionalParm, Parm)

void UParticleSystemComponent::ClearParameter(const struct FName& ParameterName, TEnumAsByte<EParticleSysParamType> ParameterType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.ClearParameter");

	UParticleSystemComponent_ClearParameter_Params params;
	params.ParameterName = ParameterName;
	params.ParameterType = ParameterType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.GetMaterialParameter
// ()
// Parameters:
// struct FName                   InName                         (Const, Parm)
// class UMaterialInterface*      OutMaterial                    (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UParticleSystemComponent::GetMaterialParameter(const struct FName& InName, class UMaterialInterface** OutMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetMaterialParameter");

	UParticleSystemComponent_GetMaterialParameter_Params params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutMaterial != nullptr)
		*OutMaterial = params.OutMaterial;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetActorParameter
// ()
// Parameters:
// struct FName                   InName                         (Const, Parm)
// class AActor*                  OutActor                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UParticleSystemComponent::GetActorParameter(const struct FName& InName, class AActor** OutActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetActorParameter");

	UParticleSystemComponent_GetActorParameter_Params params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActor != nullptr)
		*OutActor = params.OutActor;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetColorParameter
// ()
// Parameters:
// struct FName                   InName                         (Const, Parm)
// struct FColor                  OutColor                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UParticleSystemComponent::GetColorParameter(const struct FName& InName, struct FColor* OutColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetColorParameter");

	UParticleSystemComponent_GetColorParameter_Params params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutColor != nullptr)
		*OutColor = params.OutColor;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetVectorParameter
// ()
// Parameters:
// struct FName                   InName                         (Const, Parm)
// struct FVector                 OutVector                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UParticleSystemComponent::GetVectorParameter(const struct FName& InName, struct FVector* OutVector)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetVectorParameter");

	UParticleSystemComponent_GetVectorParameter_Params params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutVector != nullptr)
		*OutVector = params.OutVector;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetFloatParameter
// ()
// Parameters:
// struct FName                   InName                         (Const, Parm)
// float                          OutFloat                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UParticleSystemComponent::GetFloatParameter(const struct FName& InName, float* OutFloat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetFloatParameter");

	UParticleSystemComponent_GetFloatParameter_Params params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutFloat != nullptr)
		*OutFloat = params.OutFloat;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.SetMaterialParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class UMaterialInterface*      Param                          (Parm)

void UParticleSystemComponent::SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetMaterialParameter");

	UParticleSystemComponent_SetMaterialParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetActorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class AActor*                  Param                          (Parm)

void UParticleSystemComponent::SetActorParameter(const struct FName& ParameterName, class AActor* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetActorParameter");

	UParticleSystemComponent_SetActorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetColorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FColor                  Param                          (Parm)

void UParticleSystemComponent::SetColorParameter(const struct FName& ParameterName, const struct FColor& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetColorParameter");

	UParticleSystemComponent_SetColorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetVectorRandParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FVector                 Param                          (Const, Parm, OutParm)
// struct FVector                 ParamLow                       (Const, Parm, OutParm)

void UParticleSystemComponent::SetVectorRandParameter(const struct FName& ParameterName, struct FVector* Param, struct FVector* ParamLow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetVectorRandParameter");

	UParticleSystemComponent_SetVectorRandParameter_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Param != nullptr)
		*Param = params.Param;
	if (ParamLow != nullptr)
		*ParamLow = params.ParamLow;
}


// Function Engine.ParticleSystemComponent.SetVectorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FVector                 Param                          (Parm)

void UParticleSystemComponent::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetVectorParameter");

	UParticleSystemComponent_SetVectorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetFloatRandParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          Param                          (Parm)
// float                          ParamLow                       (Parm)

void UParticleSystemComponent::SetFloatRandParameter(const struct FName& ParameterName, float Param, float ParamLow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetFloatRandParameter");

	UParticleSystemComponent_SetFloatRandParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;
	params.ParamLow = ParamLow;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetFloatParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          Param                          (Parm)

void UParticleSystemComponent::SetFloatParameter(const struct FName& ParameterName, float Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetFloatParameter");

	UParticleSystemComponent_SetFloatParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.GetEditorLODLevel
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UParticleSystemComponent::GetEditorLODLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetEditorLODLevel");

	UParticleSystemComponent_GetEditorLODLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetLODLevel
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UParticleSystemComponent::GetLODLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetLODLevel");

	UParticleSystemComponent_GetLODLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.SetEditorLODLevel
// ()
// Parameters:
// int                            InLODLevel                     (Parm)

void UParticleSystemComponent::SetEditorLODLevel(int InLODLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetEditorLODLevel");

	UParticleSystemComponent_SetEditorLODLevel_Params params;
	params.InLODLevel = InLODLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetLODLevel
// ()
// Parameters:
// int                            InLODLevel                     (Parm)

void UParticleSystemComponent::SetLODLevel(int InLODLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetLODLevel");

	UParticleSystemComponent_SetLODLevel_Params params;
	params.InLODLevel = InLODLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.DetermineLODLevelForLocation
// ()
// Parameters:
// struct FVector                 EffectLocation                 (Const, Parm, OutParm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UParticleSystemComponent::DetermineLODLevelForLocation(struct FVector* EffectLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.DetermineLODLevelForLocation");

	UParticleSystemComponent_DetermineLODLevelForLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (EffectLocation != nullptr)
		*EffectLocation = params.EffectLocation;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.SetBeamTargetStrength
// ()
// Parameters:
// int                            EmitterIndex                   (Parm)
// float                          NewTargetStrength              (Parm)
// int                            TargetIndex                    (Parm)

void UParticleSystemComponent::SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetStrength");

	UParticleSystemComponent_SetBeamTargetStrength_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewTargetStrength = NewTargetStrength;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamTargetTangent
// ()
// Parameters:
// int                            EmitterIndex                   (Parm)
// struct FVector                 NewTangentPoint                (Parm)
// int                            TargetIndex                    (Parm)

void UParticleSystemComponent::SetBeamTargetTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int TargetIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetTangent");

	UParticleSystemComponent_SetBeamTargetTangent_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewTangentPoint = NewTangentPoint;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamTargetPoint
// ()
// Parameters:
// int                            EmitterIndex                   (Parm)
// struct FVector                 NewTargetPoint                 (Parm)
// int                            TargetIndex                    (Parm)

void UParticleSystemComponent::SetBeamTargetPoint(int EmitterIndex, const struct FVector& NewTargetPoint, int TargetIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetPoint");

	UParticleSystemComponent_SetBeamTargetPoint_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewTargetPoint = NewTargetPoint;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamSourceStrength
// ()
// Parameters:
// int                            EmitterIndex                   (Parm)
// float                          NewSourceStrength              (Parm)
// int                            SourceIndex                    (Parm)

void UParticleSystemComponent::SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourceStrength");

	UParticleSystemComponent_SetBeamSourceStrength_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewSourceStrength = NewSourceStrength;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamSourceTangent
// ()
// Parameters:
// int                            EmitterIndex                   (Parm)
// struct FVector                 NewTangentPoint                (Parm)
// int                            SourceIndex                    (Parm)

void UParticleSystemComponent::SetBeamSourceTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int SourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourceTangent");

	UParticleSystemComponent_SetBeamSourceTangent_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewTangentPoint = NewTangentPoint;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamSourcePoint
// ()
// Parameters:
// int                            EmitterIndex                   (Parm)
// struct FVector                 NewSourcePoint                 (Parm)
// int                            SourceIndex                    (Parm)

void UParticleSystemComponent::SetBeamSourcePoint(int EmitterIndex, const struct FVector& NewSourcePoint, int SourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourcePoint");

	UParticleSystemComponent_SetBeamSourcePoint_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewSourcePoint = NewSourcePoint;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamDistance
// ()
// Parameters:
// int                            EmitterIndex                   (Parm)
// float                          Distance                       (Parm)

void UParticleSystemComponent::SetBeamDistance(int EmitterIndex, float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamDistance");

	UParticleSystemComponent_SetBeamDistance_Params params;
	params.EmitterIndex = EmitterIndex;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamEndPoint
// ()
// Parameters:
// int                            EmitterIndex                   (Parm)
// struct FVector                 NewEndPoint                    (Parm)

void UParticleSystemComponent::SetBeamEndPoint(int EmitterIndex, const struct FVector& NewEndPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamEndPoint");

	UParticleSystemComponent_SetBeamEndPoint_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewEndPoint = NewEndPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamTessellationFactor
// ()
// Parameters:
// int                            EmitterIndex                   (Parm)
// float                          NewFactor                      (Parm)

void UParticleSystemComponent::SetBeamTessellationFactor(int EmitterIndex, float NewFactor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTessellationFactor");

	UParticleSystemComponent_SetBeamTessellationFactor_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewFactor = NewFactor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamType
// ()
// Parameters:
// int                            EmitterIndex                   (Parm)
// int                            NewMethod                      (Parm)

void UParticleSystemComponent::SetBeamType(int EmitterIndex, int NewMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamType");

	UParticleSystemComponent_SetBeamType_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewMethod = NewMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.RewindEmitterInstances
// ()

void UParticleSystemComponent::RewindEmitterInstances()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.RewindEmitterInstances");

	UParticleSystemComponent_RewindEmitterInstances_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.RewindEmitterInstance
// ()
// Parameters:
// int                            EmitterIndex                   (Parm)

void UParticleSystemComponent::RewindEmitterInstance(int EmitterIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.RewindEmitterInstance");

	UParticleSystemComponent_RewindEmitterInstance_Params params;
	params.EmitterIndex = EmitterIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetKillOnCompleted
// ()
// Parameters:
// int                            EmitterIndex                   (Parm)
// bool                           bKill                          (Parm)

void UParticleSystemComponent::SetKillOnCompleted(int EmitterIndex, bool bKill)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetKillOnCompleted");

	UParticleSystemComponent_SetKillOnCompleted_Params params;
	params.EmitterIndex = EmitterIndex;
	params.bKill = bKill;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetKillOnDeactivate
// ()
// Parameters:
// int                            EmitterIndex                   (Parm)
// bool                           bKill                          (Parm)

void UParticleSystemComponent::SetKillOnDeactivate(int EmitterIndex, bool bKill)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetKillOnDeactivate");

	UParticleSystemComponent_SetKillOnDeactivate_Params params;
	params.EmitterIndex = EmitterIndex;
	params.bKill = bKill;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.GetSkipBoundsUpdate
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UParticleSystemComponent::GetSkipBoundsUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetSkipBoundsUpdate");

	UParticleSystemComponent_GetSkipBoundsUpdate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.SetSkipBoundsUpdate
// ()
// Parameters:
// bool                           bInSkipBoundsUpdate            (Parm)

void UParticleSystemComponent::SetSkipBoundsUpdate(bool bInSkipBoundsUpdate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetSkipBoundsUpdate");

	UParticleSystemComponent_SetSkipBoundsUpdate_Params params;
	params.bInSkipBoundsUpdate = bInSkipBoundsUpdate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.GetSkipUpdateDynamicDataDuringTick
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UParticleSystemComponent::GetSkipUpdateDynamicDataDuringTick()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetSkipUpdateDynamicDataDuringTick");

	UParticleSystemComponent_GetSkipUpdateDynamicDataDuringTick_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.SetSkipUpdateDynamicDataDuringTick
// ()
// Parameters:
// bool                           bInSkipUpdateDynamicDataDuringTick (Parm)

void UParticleSystemComponent::SetSkipUpdateDynamicDataDuringTick(bool bInSkipUpdateDynamicDataDuringTick)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetSkipUpdateDynamicDataDuringTick");

	UParticleSystemComponent_SetSkipUpdateDynamicDataDuringTick_Params params;
	params.bInSkipUpdateDynamicDataDuringTick = bInSkipUpdateDynamicDataDuringTick;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.KillParticlesInEmitter
// ()
// Parameters:
// struct FName                   InEmitterName                  (Parm)

void UParticleSystemComponent::KillParticlesInEmitter(const struct FName& InEmitterName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.KillParticlesInEmitter");

	UParticleSystemComponent_KillParticlesInEmitter_Params params;
	params.InEmitterName = InEmitterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.KillParticlesForced
// ()

void UParticleSystemComponent::KillParticlesForced()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.KillParticlesForced");

	UParticleSystemComponent_KillParticlesForced_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.DeactivateSystem
// ()

void UParticleSystemComponent::DeactivateSystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.DeactivateSystem");

	UParticleSystemComponent_DeactivateSystem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.ActivateSystem
// ()
// Parameters:
// bool                           bFlagAsJustAttached            (OptionalParm, Parm)

void UParticleSystemComponent::ActivateSystem(bool bFlagAsJustAttached)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.ActivateSystem");

	UParticleSystemComponent_ActivateSystem_Params params;
	params.bFlagAsJustAttached = bFlagAsJustAttached;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetTemplate
// ()
// Parameters:
// class UParticleSystem*         NewTemplate                    (Parm)

void UParticleSystemComponent::SetTemplate(class UParticleSystem* NewTemplate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetTemplate");

	UParticleSystemComponent_SetTemplate_Params params;
	params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.OnSystemFinished
// ()
// Parameters:
// class UParticleSystemComponent* PSystem                        (Parm, EditInline)

void UParticleSystemComponent::OnSystemFinished(class UParticleSystemComponent* PSystem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.OnSystemFinished");

	UParticleSystemComponent_OnSystemFinished_Params params;
	params.PSystem = PSystem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleModuleEventSendToGame.DoEvent
// ()
// Parameters:
// struct FVector                 InCollideDirection             (Const, Parm, OutParm)
// struct FVector                 InHitLocation                  (Const, Parm, OutParm)
// struct FVector                 InHitNormal                    (Const, Parm, OutParm)
// struct FName                   InBoneName                     (Const, Parm, OutParm)

void UParticleModuleEventSendToGame::DoEvent(struct FVector* InCollideDirection, struct FVector* InHitLocation, struct FVector* InHitNormal, struct FName* InBoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleModuleEventSendToGame.DoEvent");

	UParticleModuleEventSendToGame_DoEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InCollideDirection != nullptr)
		*InCollideDirection = params.InCollideDirection;
	if (InHitLocation != nullptr)
		*InHitLocation = params.InHitLocation;
	if (InHitNormal != nullptr)
		*InHitNormal = params.InHitNormal;
	if (InBoneName != nullptr)
		*InBoneName = params.InBoneName;
}


// Function Engine.KActor.Reset
// ()

void AKActor::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.Reset");

	AKActor_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.OnTeleport
// ()
// Parameters:
// class USeqAct_Teleport*        inAction                       (Parm)

void AKActor::OnTeleport(class USeqAct_Teleport* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.OnTeleport");

	AKActor_OnTeleport_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void AKActor::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.OnToggle");

	AKActor_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.TakeRadiusDamage
// ()
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// float                          BaseDamage                     (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HurtOrigin                     (Parm)
// bool                           bFullDamage                    (Parm)
// class AActor*                  DamageCauser                   (Parm)
// float                          DamageFalloffExponent          (OptionalParm, Parm)

void AKActor::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.TakeRadiusDamage");

	AKActor_TakeRadiusDamage_Params params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.TakeDamage
// ()
// Parameters:
// int                            Damage                         (Parm)
// class AController*             EventInstigator                (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)

void AKActor::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.TakeDamage");

	AKActor_TakeDamage_Params params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.ApplyImpulse
// ()
// Parameters:
// struct FVector                 ImpulseDir                     (Parm)
// float                          ImpulseMag                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class UClass*                  DamageType                     (OptionalParm, Parm)

void AKActor::ApplyImpulse(const struct FVector& ImpulseDir, float ImpulseMag, const struct FVector& HitLocation, const struct FTraceHitInfo& HitInfo, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.ApplyImpulse");

	AKActor_ApplyImpulse_Params params;
	params.ImpulseDir = ImpulseDir;
	params.ImpulseMag = ImpulseMag;
	params.HitLocation = HitLocation;
	params.HitInfo = HitInfo;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void AKActor::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.ReplicatedEvent");

	AKActor_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.SpawnedByKismet
// ()

void AKActor::SpawnedByKismet()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.SpawnedByKismet");

	AKActor_SpawnedByKismet_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.SetPhysicalCollisionProperties
// ()

void AKActor::SetPhysicalCollisionProperties()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.SetPhysicalCollisionProperties");

	AKActor_SetPhysicalCollisionProperties_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.Destroyed
// ()

void AKActor::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.Destroyed");

	AKActor_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.FellOutOfWorld
// ()
// Parameters:
// class UClass*                  dmgType                        (Parm)

void AKActor::FellOutOfWorld(class UClass* dmgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.FellOutOfWorld");

	AKActor_FellOutOfWorld_Params params;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.PostBeginPlay
// ()

void AKActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.PostBeginPlay");

	AKActor_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.ResolveRBState
// ()

void AKActor::ResolveRBState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.ResolveRBState");

	AKActor_ResolveRBState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.GetKActorPhysMaterial
// ()
// Parameters:
// class UPhysicalMaterial*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UPhysicalMaterial* AKActor::GetKActorPhysMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.GetKActorPhysMaterial");

	AKActor_GetKActorPhysMaterial_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KActorFromStatic.TakeRadiusDamage
// ()
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// float                          BaseDamage                     (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HurtOrigin                     (Parm)
// bool                           bFullDamage                    (Parm)
// class AActor*                  DamageCauser                   (Parm)
// float                          DamageFalloffExponent          (OptionalParm, Parm)

void AKActorFromStatic::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.TakeRadiusDamage");

	AKActorFromStatic_TakeRadiusDamage_Params params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorFromStatic.Touch
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void AKActorFromStatic::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.Touch");

	AKActorFromStatic_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorFromStatic.Bump
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitNormal                      (Parm)

void AKActorFromStatic::Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.Bump");

	AKActorFromStatic_Bump_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorFromStatic.ReceiveImpulse
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void AKActorFromStatic::ReceiveImpulse(class APawn* Other, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.ReceiveImpulse");

	AKActorFromStatic_ReceiveImpulse_Params params;
	params.Other = Other;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorFromStatic.ApplyImpulse
// ()
// Parameters:
// struct FVector                 ImpulseDir                     (Parm)
// float                          ImpulseMag                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class UClass*                  DamageType                     (OptionalParm, Parm)

void AKActorFromStatic::ApplyImpulse(const struct FVector& ImpulseDir, float ImpulseMag, const struct FVector& HitLocation, const struct FTraceHitInfo& HitInfo, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.ApplyImpulse");

	AKActorFromStatic_ApplyImpulse_Params params;
	params.ImpulseDir = ImpulseDir;
	params.ImpulseMag = ImpulseMag;
	params.HitLocation = HitLocation;
	params.HitInfo = HitInfo;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorFromStatic.MakeDynamic
// ()
// Parameters:
// class UStaticMeshComponent*    MovableMesh                    (Parm, EditInline)
// class AKActorFromStatic*       ReturnValue                    (Parm, OutParm, ReturnParm)

class AKActorFromStatic* AKActorFromStatic::MakeDynamic(class UStaticMeshComponent* MovableMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.MakeDynamic");

	AKActorFromStatic_MakeDynamic_Params params;
	params.MovableMesh = MovableMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KActorFromStatic.MakeStatic
// ()

void AKActorFromStatic::MakeStatic()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.MakeStatic");

	AKActorFromStatic_MakeStatic_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorFromStatic.BecomeStatic
// ()

void AKActorFromStatic::BecomeStatic()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.BecomeStatic");

	AKActorFromStatic_BecomeStatic_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorFromStatic.OnWakeRBPhysics
// ()

void AKActorFromStatic::OnWakeRBPhysics()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.OnWakeRBPhysics");

	AKActorFromStatic_OnWakeRBPhysics_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorFromStatic.OnSleepRBPhysics
// ()

void AKActorFromStatic::OnSleepRBPhysics()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.OnSleepRBPhysics");

	AKActorFromStatic_OnSleepRBPhysics_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorFromStatic.DisablePrecomputedLighting
// ()

void AKActorFromStatic::DisablePrecomputedLighting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.DisablePrecomputedLighting");

	AKActorFromStatic_DisablePrecomputedLighting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorSpawnable.ResetComponents
// ()

void AKActorSpawnable::ResetComponents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorSpawnable.ResetComponents");

	AKActorSpawnable_ResetComponents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorSpawnable.RecycleInternal
// ()

void AKActorSpawnable::RecycleInternal()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorSpawnable.RecycleInternal");

	AKActorSpawnable_RecycleInternal_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorSpawnable.Recycle
// ()

void AKActorSpawnable::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorSpawnable.Recycle");

	AKActorSpawnable_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorSpawnable.Initialize
// ()

void AKActorSpawnable::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorSpawnable.Initialize");

	AKActorSpawnable_Initialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.DoKismetAttachment
// ()
// Parameters:
// class AActor*                  Attachment                     (Parm)
// class USeqAct_AttachToActor*   Action                         (Parm)

void AKAsset::DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.DoKismetAttachment");

	AKAsset_DoKismetAttachment_Params params;
	params.Attachment = Attachment;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.OnTeleport
// ()
// Parameters:
// class USeqAct_Teleport*        inAction                       (Parm)

void AKAsset::OnTeleport(class USeqAct_Teleport* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.OnTeleport");

	AKAsset_OnTeleport_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void AKAsset::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.OnToggle");

	AKAsset_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.TakeRadiusDamage
// ()
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// float                          BaseDamage                     (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HurtOrigin                     (Parm)
// bool                           bFullDamage                    (Parm)
// class AActor*                  DamageCauser                   (Parm)
// float                          DamageFalloffExponent          (OptionalParm, Parm)

void AKAsset::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.TakeRadiusDamage");

	AKAsset_TakeRadiusDamage_Params params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.TakeDamage
// ()
// Parameters:
// int                            Damage                         (Parm)
// class AController*             EventInstigator                (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)

void AKAsset::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.TakeDamage");

	AKAsset_TakeDamage_Params params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void AKAsset::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.ReplicatedEvent");

	AKAsset_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.SetMeshAndPhysAsset
// ()
// Parameters:
// class USkeletalMesh*           NewMesh                        (Parm)
// class UPhysicsAsset*           NewPhysAsset                   (Parm)

void AKAsset::SetMeshAndPhysAsset(class USkeletalMesh* NewMesh, class UPhysicsAsset* NewPhysAsset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.SetMeshAndPhysAsset");

	AKAsset_SetMeshAndPhysAsset_Params params;
	params.NewMesh = NewMesh;
	params.NewPhysAsset = NewPhysAsset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.PostBeginPlay
// ()

void AKAsset::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.PostBeginPlay");

	AKAsset_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.ZeroMovementVariables
// ()

void AVehicle::ZeroMovementVariables()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ZeroMovementVariables");

	AVehicle_ZeroMovementVariables_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.NotifyDriverTakeHit
// ()
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// int                            Damage                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 Momentum                       (Parm)

void AVehicle::NotifyDriverTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.NotifyDriverTakeHit");

	AVehicle_NotifyDriverTakeHit_Params params;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.Momentum = Momentum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void AVehicle::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ReplicatedEvent");

	AVehicle_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DrivingStatusChanged
// ()

void AVehicle::DrivingStatusChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DrivingStatusChanged");

	AVehicle_DrivingStatusChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.SetDriving
// ()
// Parameters:
// bool                           B                              (Parm)

void AVehicle::SetDriving(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetDriving");

	AVehicle_SetDriving_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.GetEntryLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AVehicle::GetEntryLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetEntryLocation");

	AVehicle_GetEntryLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.CrushedBy
// ()
// Parameters:
// class APawn*                   OtherPawn                      (Parm)

void AVehicle::CrushedBy(class APawn* OtherPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CrushedBy");

	AVehicle_CrushedBy_Params params;
	params.OtherPawn = OtherPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.PancakeOther
// ()
// Parameters:
// class APawn*                   Other                          (Parm)

void AVehicle::PancakeOther(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PancakeOther");

	AVehicle_PancakeOther_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.EncroachingOn
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::EncroachingOn(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.EncroachingOn");

	AVehicle_EncroachingOn_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.GetCollisionDamageInstigator
// ()
// Parameters:
// class AController*             ReturnValue                    (Parm, OutParm, ReturnParm)

class AController* AVehicle::GetCollisionDamageInstigator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetCollisionDamageInstigator");

	AVehicle_GetCollisionDamageInstigator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.EncroachedBy
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void AVehicle::EncroachedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.EncroachedBy");

	AVehicle_EncroachedBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.FaceRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (Parm)
// float                          DeltaTime                      (Parm)

void AVehicle::FaceRotation(const struct FRotator& NewRotation, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.FaceRotation");

	AVehicle_FaceRotation_Params params;
	params.NewRotation = NewRotation;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.GetDefaultCameraMode
// ()
// Parameters:
// class APlayerController*       RequestedBy                    (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName AVehicle::GetDefaultCameraMode(class APlayerController* RequestedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetDefaultCameraMode");

	AVehicle_GetDefaultCameraMode_Params params;
	params.RequestedBy = RequestedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.PlayDying
// ()
// Parameters:
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLoc                         (Parm)

void AVehicle::PlayDying(class UClass* DamageType, const struct FVector& HitLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PlayDying");

	AVehicle_PlayDying_Params params;
	params.DamageType = DamageType;
	params.HitLoc = HitLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DriverDied
// ()
// Parameters:
// class UClass*                  DamageType                     (Parm)

void AVehicle::DriverDied(class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverDied");

	AVehicle_DriverDied_Params params;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.Died
// ()
// Parameters:
// class AController*             Killer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Died");

	AVehicle_Died_Params params;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.ThrowActiveWeapon
// ()
// Parameters:
// bool                           bDestroyWeap                   (OptionalParm, Parm)

void AVehicle::ThrowActiveWeapon(bool bDestroyWeap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ThrowActiveWeapon");

	AVehicle_ThrowActiveWeapon_Params params;
	params.bDestroyWeap = bDestroyWeap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.AdjustDriverDamage
// ()
// Parameters:
// int                            Damage                         (Parm, OutParm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm, OutParm)
// class UClass*                  DamageType                     (Parm)

void AVehicle::AdjustDriverDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.AdjustDriverDamage");

	AVehicle_AdjustDriverDamage_Params params;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Damage != nullptr)
		*Damage = params.Damage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;
}


// Function Engine.Vehicle.TakeDamage
// ()
// Parameters:
// int                            Damage                         (Parm)
// class AController*             EventInstigator                (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)

void AVehicle::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.TakeDamage");

	AVehicle_TakeDamage_Params params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.SetKillInstigator
// ()
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// class UClass*                  DamageType                     (Parm)
// class AController*             ReturnValue                    (Parm, OutParm, ReturnParm)

class AController* AVehicle::SetKillInstigator(class AController* InstigatedBy, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetKillInstigator");

	AVehicle_SetKillInstigator_Params params;
	params.InstigatedBy = InstigatedBy;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.UnPossessed
// ()

void AVehicle::UnPossessed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.UnPossessed");

	AVehicle_UnPossessed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.TryExitPos
// ()
// Parameters:
// class APawn*                   ExitingDriver                  (Parm)
// struct FVector                 ExitPos                        (Parm)
// bool                           bMustFindGround                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::TryExitPos(class APawn* ExitingDriver, const struct FVector& ExitPos, bool bMustFindGround)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.TryExitPos");

	AVehicle_TryExitPos_Params params;
	params.ExitingDriver = ExitingDriver;
	params.ExitPos = ExitPos;
	params.bMustFindGround = bMustFindGround;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.FindAutoExit
// ()
// Parameters:
// class APawn*                   ExitingDriver                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::FindAutoExit(class APawn* ExitingDriver)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.FindAutoExit");

	AVehicle_FindAutoExit_Params params;
	params.ExitingDriver = ExitingDriver;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.PlaceExitingDriver
// ()
// Parameters:
// class APawn*                   ExitingDriver                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::PlaceExitingDriver(class APawn* ExitingDriver)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PlaceExitingDriver");

	AVehicle_PlaceExitingDriver_Params params;
	params.ExitingDriver = ExitingDriver;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.DriverLeft
// ()

void AVehicle::DriverLeft()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverLeft");

	AVehicle_DriverLeft_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.SetInputs
// ()
// Parameters:
// float                          InForward                      (Parm)
// float                          InStrafe                       (Parm)
// float                          InUp                           (Parm)

void AVehicle::SetInputs(float InForward, float InStrafe, float InUp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetInputs");

	AVehicle_SetInputs_Params params;
	params.InForward = InForward;
	params.InStrafe = InStrafe;
	params.InUp = InUp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DriverLeave
// ()
// Parameters:
// bool                           bForceLeave                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::DriverLeave(bool bForceLeave)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverLeave");

	AVehicle_DriverLeave_Params params;
	params.bForceLeave = bForceLeave;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.GetExitRotation
// ()
// Parameters:
// class AController*             C                              (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator AVehicle::GetExitRotation(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetExitRotation");

	AVehicle_GetExitRotation_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.ContinueOnFoot
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::ContinueOnFoot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ContinueOnFoot");

	AVehicle_ContinueOnFoot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.DetachDriver
// ()
// Parameters:
// class APawn*                   P                              (Parm)

void AVehicle::DetachDriver(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DetachDriver");

	AVehicle_DetachDriver_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.AttachDriver
// ()
// Parameters:
// class APawn*                   P                              (Parm)

void AVehicle::AttachDriver(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.AttachDriver");

	AVehicle_AttachDriver_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.EntryAnnouncement
// ()
// Parameters:
// class AController*             C                              (Parm)

void AVehicle::EntryAnnouncement(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.EntryAnnouncement");

	AVehicle_EntryAnnouncement_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.PossessedBy
// ()
// Parameters:
// class AController*             C                              (Parm)
// bool                           bVehicleTransition             (Parm)

void AVehicle::PossessedBy(class AController* C, bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PossessedBy");

	AVehicle_PossessedBy_Params params;
	params.C = C;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DriverEnter
// ()
// Parameters:
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::DriverEnter(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverEnter");

	AVehicle_DriverEnter_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.TryToDrive
// ()
// Parameters:
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::TryToDrive(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.TryToDrive");

	AVehicle_TryToDrive_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.AnySeatAvailable
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::AnySeatAvailable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.AnySeatAvailable");

	AVehicle_AnySeatAvailable_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.CanEnterVehicle
// ()
// Parameters:
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::CanEnterVehicle(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CanEnterVehicle");

	AVehicle_CanEnterVehicle_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.Destroyed_HandleDriver
// ()

void AVehicle::Destroyed_HandleDriver()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Destroyed_HandleDriver");

	AVehicle_Destroyed_HandleDriver_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.Destroyed
// ()

void AVehicle::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Destroyed");

	AVehicle_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.CheatFly
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::CheatFly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CheatFly");

	AVehicle_CheatFly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.CheatGhost
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::CheatGhost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CheatGhost");

	AVehicle_CheatGhost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.CheatWalk
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::CheatWalk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CheatWalk");

	AVehicle_CheatWalk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.PostBeginPlay
// ()

void AVehicle::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PostBeginPlay");

	AVehicle_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.SetBaseEyeheight
// ()

void AVehicle::SetBaseEyeheight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetBaseEyeheight");

	AVehicle_SetBaseEyeheight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.PlayerChangedTeam
// ()

void AVehicle::PlayerChangedTeam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PlayerChangedTeam");

	AVehicle_PlayerChangedTeam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DriverRadiusDamage
// ()
// Parameters:
// float                          DamageAmount                   (Parm)
// float                          DamageRadius                   (Parm)
// class AController*             EventInstigator                (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HitLocation                    (Parm)
// class AActor*                  DamageCauser                   (Parm)
// float                          DamageFalloffExponent          (OptionalParm, Parm)

void AVehicle::DriverRadiusDamage(float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, const struct FVector& HitLocation, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverRadiusDamage");

	AVehicle_DriverRadiusDamage_Params params;
	params.DamageAmount = DamageAmount;
	params.DamageRadius = DamageRadius;
	params.EventInstigator = EventInstigator;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HitLocation = HitLocation;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.TakeRadiusDamage
// ()
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// float                          BaseDamage                     (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HurtOrigin                     (Parm)
// bool                           bFullDamage                    (Parm)
// class AActor*                  DamageCauser                   (Parm)
// float                          DamageFalloffExponent          (OptionalParm, Parm)

void AVehicle::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.TakeRadiusDamage");

	AVehicle_TakeRadiusDamage_Params params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.GetTargetLocation
// ()
// Parameters:
// class AActor*                  RequestedBy                    (OptionalParm, Parm)
// bool                           bRequestAlternateLoc           (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AVehicle::GetTargetLocation(class AActor* RequestedBy, bool bRequestAlternateLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetTargetLocation");

	AVehicle_GetTargetLocation_Params params;
	params.RequestedBy = RequestedBy;
	params.bRequestAlternateLoc = bRequestAlternateLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.GetMaxRiseForce
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AVehicle::GetMaxRiseForce()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetMaxRiseForce");

	AVehicle_GetMaxRiseForce_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.Suicide
// ()

void AVehicle::Suicide()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Suicide");

	AVehicle_Suicide_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DisplayDebug
// ()
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void AVehicle::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DisplayDebug");

	AVehicle_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.Vehicle.NotifyTeamChanged
// ()

void AVehicle::NotifyTeamChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.NotifyTeamChanged");

	AVehicle_NotifyTeamChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.GetSVehicleDebug
// ()
// Parameters:
// TArray<struct FString>         DebugInfo                      (Parm, OutParm, NeedCtorLink)

void ASVehicle::GetSVehicleDebug(TArray<struct FString>* DebugInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.GetSVehicleDebug");

	ASVehicle_GetSVehicleDebug_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DebugInfo != nullptr)
		*DebugInfo = params.DebugInfo;
}


// Function Engine.SVehicle.HermiteEval
// ()
// Parameters:
// float                          Slip                           (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ASVehicle::HermiteEval(float Slip)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.HermiteEval");

	ASVehicle_HermiteEval_Params params;
	params.Slip = Slip;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SVehicle.DisplayWheelsDebug
// ()
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          YL                             (Parm)

void ASVehicle::DisplayWheelsDebug(class AHUD* HUD, float YL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.DisplayWheelsDebug");

	ASVehicle_DisplayWheelsDebug_Params params;
	params.HUD = HUD;
	params.YL = YL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.DisplayDebug
// ()
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void ASVehicle::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.DisplayDebug");

	ASVehicle_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.SVehicle.PostTeleport
// ()
// Parameters:
// class ATeleporter*             OutTeleporter                  (Parm)

void ASVehicle::PostTeleport(class ATeleporter* OutTeleporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.PostTeleport");

	ASVehicle_PostTeleport_Params params;
	params.OutTeleporter = OutTeleporter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.SuspensionHeavyShift
// ()
// Parameters:
// float                          Delta                          (Parm)

void ASVehicle::SuspensionHeavyShift(float Delta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.SuspensionHeavyShift");

	ASVehicle_SuspensionHeavyShift_Params params;
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.RigidBodyCollision
// ()
// Parameters:
// class UPrimitiveComponent*     HitComponent                   (Parm, EditInline)
// class UPrimitiveComponent*     OtherComponent                 (Parm, EditInline)
// struct FCollisionImpactData    RigidCollisionData             (Const, Parm, OutParm, NeedCtorLink)
// int                            ContactIndex                   (Parm)

void ASVehicle::RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.RigidBodyCollision");

	ASVehicle_RigidBodyCollision_Params params;
	params.HitComponent = HitComponent;
	params.OtherComponent = OtherComponent;
	params.ContactIndex = ContactIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RigidCollisionData != nullptr)
		*RigidCollisionData = params.RigidCollisionData;
}


// Function Engine.SVehicle.DrivingStatusChanged
// ()

void ASVehicle::DrivingStatusChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.DrivingStatusChanged");

	ASVehicle_DrivingStatusChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.VehiclePlayExitSound
// ()

void ASVehicle::VehiclePlayExitSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.VehiclePlayExitSound");

	ASVehicle_VehiclePlayExitSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.VehiclePlayEnterSound
// ()

void ASVehicle::VehiclePlayEnterSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.VehiclePlayEnterSound");

	ASVehicle_VehiclePlayEnterSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.StopEngineSoundTimed
// ()

void ASVehicle::StopEngineSoundTimed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.StopEngineSoundTimed");

	ASVehicle_StopEngineSoundTimed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.StopEngineSound
// ()

void ASVehicle::StopEngineSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.StopEngineSound");

	ASVehicle_StopEngineSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.StartEngineSoundTimed
// ()

void ASVehicle::StartEngineSoundTimed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.StartEngineSoundTimed");

	ASVehicle_StartEngineSoundTimed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.StartEngineSound
// ()

void ASVehicle::StartEngineSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.StartEngineSound");

	ASVehicle_StartEngineSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.HasWheelsOnGround
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ASVehicle::HasWheelsOnGround()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.HasWheelsOnGround");

	ASVehicle_HasWheelsOnGround_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SVehicle.TryToDrive
// ()
// Parameters:
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ASVehicle::TryToDrive(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.TryToDrive");

	ASVehicle_TryToDrive_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SVehicle.GetDefaultCameraMode
// ()
// Parameters:
// class APlayerController*       RequestedBy                    (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName ASVehicle::GetDefaultCameraMode(class APlayerController* RequestedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.GetDefaultCameraMode");

	ASVehicle_GetDefaultCameraMode_Params params;
	params.RequestedBy = RequestedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SVehicle.CalcCamera
// ()
// Parameters:
// float                          fDeltaTime                     (Parm)
// struct FVector                 out_CamLoc                     (Parm, OutParm)
// struct FRotator                out_CamRot                     (Parm, OutParm)
// float                          out_FOV                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ASVehicle::CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.CalcCamera");

	ASVehicle_CalcCamera_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_CamLoc != nullptr)
		*out_CamLoc = params.out_CamLoc;
	if (out_CamRot != nullptr)
		*out_CamRot = params.out_CamRot;
	if (out_FOV != nullptr)
		*out_FOV = params.out_FOV;

	return params.ReturnValue;
}


// Function Engine.SVehicle.Died
// ()
// Parameters:
// class AController*             Killer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ASVehicle::Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.Died");

	ASVehicle_Died_Params params;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SVehicle.AddVelocity
// ()
// Parameters:
// struct FVector                 NewVelocity                    (Parm)
// struct FVector                 HitLocation                    (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)

void ASVehicle::AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.AddVelocity");

	ASVehicle_AddVelocity_Params params;
	params.NewVelocity = NewVelocity;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.InitVehicleRagdoll
// ()
// Parameters:
// class USkeletalMesh*           RagdollMesh                    (Parm)
// class UPhysicsAsset*           RagdollPhysAsset               (Parm)
// struct FVector                 ActorMove                      (Parm)
// bool                           bClearAnimTree                 (Parm)

void ASVehicle::InitVehicleRagdoll(class USkeletalMesh* RagdollMesh, class UPhysicsAsset* RagdollPhysAsset, const struct FVector& ActorMove, bool bClearAnimTree)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.InitVehicleRagdoll");

	ASVehicle_InitVehicleRagdoll_Params params;
	params.RagdollMesh = RagdollMesh;
	params.RagdollPhysAsset = RagdollPhysAsset;
	params.ActorMove = ActorMove;
	params.bClearAnimTree = bClearAnimTree;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.TakeRadiusDamage
// ()
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// float                          BaseDamage                     (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HurtOrigin                     (Parm)
// bool                           bFullDamage                    (Parm)
// class AActor*                  DamageCauser                   (Parm)
// float                          DamageFalloffExponent          (OptionalParm, Parm)

void ASVehicle::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.TakeRadiusDamage");

	ASVehicle_TakeRadiusDamage_Params params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.StopVehicleSounds
// ()

void ASVehicle::StopVehicleSounds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.StopVehicleSounds");

	ASVehicle_StopVehicleSounds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.TurnOff
// ()

void ASVehicle::TurnOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.TurnOff");

	ASVehicle_TurnOff_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.Destroyed
// ()

void ASVehicle::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.Destroyed");

	ASVehicle_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.PostInitAnimTree
// ()
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (Parm, EditInline)

void ASVehicle::PostInitAnimTree(class USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.PostInitAnimTree");

	ASVehicle_PostInitAnimTree_Params params;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.PostBeginPlay
// ()

void ASVehicle::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.PostBeginPlay");

	ASVehicle_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.SetWheelCollision
// ()
// Parameters:
// int                            WheelNum                       (Parm)
// bool                           bCollision                     (Parm)

void ASVehicle::SetWheelCollision(int WheelNum, bool bCollision)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.SetWheelCollision");

	ASVehicle_SetWheelCollision_Params params;
	params.WheelNum = WheelNum;
	params.bCollision = bCollision;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.IsSleeping
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ASVehicle::IsSleeping()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.IsSleeping");

	ASVehicle_IsSleeping_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SVehicle.AddTorque
// ()
// Parameters:
// struct FVector                 Torque                         (Parm)

void ASVehicle::AddTorque(const struct FVector& Torque)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.AddTorque");

	ASVehicle_AddTorque_Params params;
	params.Torque = Torque;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.AddImpulse
// ()
// Parameters:
// struct FVector                 Impulse                        (Parm)

void ASVehicle::AddImpulse(const struct FVector& Impulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.AddImpulse");

	ASVehicle_AddImpulse_Params params;
	params.Impulse = Impulse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.AddForce
// ()
// Parameters:
// struct FVector                 Force                          (Parm)

void ASVehicle::AddForce(const struct FVector& Force)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.AddForce");

	ASVehicle_AddForce_Params params;
	params.Force = Force;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintActor.OnToggleConstraintDrive
// ()
// Parameters:
// class USeqAct_ToggleConstraintDrive* Action                         (Parm)

void ARB_ConstraintActor::OnToggleConstraintDrive(class USeqAct_ToggleConstraintDrive* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.OnToggleConstraintDrive");

	ARB_ConstraintActor_OnToggleConstraintDrive_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintActor.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void ARB_ConstraintActor::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.OnToggle");

	ARB_ConstraintActor_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintActor.OnDestroy
// ()
// Parameters:
// class USeqAct_Destroy*         Action                         (Parm)

void ARB_ConstraintActor::OnDestroy(class USeqAct_Destroy* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.OnDestroy");

	ARB_ConstraintActor_OnDestroy_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintActor.TermConstraint
// ()

void ARB_ConstraintActor::TermConstraint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.TermConstraint");

	ARB_ConstraintActor_TermConstraint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintActor.InitConstraint
// ()
// Parameters:
// class AActor*                  Actor1                         (Parm)
// class AActor*                  Actor2                         (Parm)
// struct FName                   Actor1Bone                     (OptionalParm, Parm)
// struct FName                   Actor2Bone                     (OptionalParm, Parm)
// float                          BreakThreshold                 (OptionalParm, Parm)

void ARB_ConstraintActor::InitConstraint(class AActor* Actor1, class AActor* Actor2, const struct FName& Actor1Bone, const struct FName& Actor2Bone, float BreakThreshold)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.InitConstraint");

	ARB_ConstraintActor_InitConstraint_Params params;
	params.Actor1 = Actor1;
	params.Actor2 = Actor2;
	params.Actor1Bone = Actor1Bone;
	params.Actor2Bone = Actor2Bone;
	params.BreakThreshold = BreakThreshold;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintActor.SetDisableCollision
// ()
// Parameters:
// bool                           NewDisableCollision            (Parm)

void ARB_ConstraintActor::SetDisableCollision(bool NewDisableCollision)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.SetDisableCollision");

	ARB_ConstraintActor_SetDisableCollision_Params params;
	params.NewDisableCollision = NewDisableCollision;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_LineImpulseActor.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void ARB_LineImpulseActor::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_LineImpulseActor.ReplicatedEvent");

	ARB_LineImpulseActor_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_LineImpulseActor.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          inAction                       (Parm)

void ARB_LineImpulseActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_LineImpulseActor.OnToggle");

	ARB_LineImpulseActor_OnToggle_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_LineImpulseActor.FireLineImpulse
// ()

void ARB_LineImpulseActor::FireLineImpulse()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_LineImpulseActor.FireLineImpulse");

	ARB_LineImpulseActor_FireLineImpulse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_RadialImpulseActor.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void ARB_RadialImpulseActor::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_RadialImpulseActor.ReplicatedEvent");

	ARB_RadialImpulseActor_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_RadialImpulseActor.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          inAction                       (Parm)

void ARB_RadialImpulseActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_RadialImpulseActor.OnToggle");

	ARB_RadialImpulseActor_OnToggle_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Thruster.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void ARB_Thruster::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Thruster.OnToggle");

	ARB_Thruster_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_RadialImpulseComponent.FireImpulse
// ()
// Parameters:
// struct FVector                 Origin                         (Parm)

void URB_RadialImpulseComponent::FireImpulse(const struct FVector& Origin)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_RadialImpulseComponent.FireImpulse");

	URB_RadialImpulseComponent_FireImpulse_Params params;
	params.Origin = Origin;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Handle.GetOrientation
// ()
// Parameters:
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FQuat URB_Handle::GetOrientation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.GetOrientation");

	URB_Handle_GetOrientation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_Handle.SetOrientation
// ()
// Parameters:
// struct FQuat                   NewOrientation                 (Const, Parm, OutParm)

void URB_Handle::SetOrientation(struct FQuat* NewOrientation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.SetOrientation");

	URB_Handle_SetOrientation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewOrientation != nullptr)
		*NewOrientation = params.NewOrientation;
}


// Function Engine.RB_Handle.UpdateSmoothLocation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Const, Parm, OutParm)

void URB_Handle::UpdateSmoothLocation(struct FVector* NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.UpdateSmoothLocation");

	URB_Handle_UpdateSmoothLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewLocation != nullptr)
		*NewLocation = params.NewLocation;
}


// Function Engine.RB_Handle.SetSmoothLocation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm)
// float                          MoveTime                       (Parm)

void URB_Handle::SetSmoothLocation(const struct FVector& NewLocation, float MoveTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.SetSmoothLocation");

	URB_Handle_SetSmoothLocation_Params params;
	params.NewLocation = NewLocation;
	params.MoveTime = MoveTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Handle.SetLocation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm)

void URB_Handle::SetLocation(const struct FVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.SetLocation");

	URB_Handle_SetLocation_Params params;
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Handle.ReleaseComponent
// ()

void URB_Handle::ReleaseComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.ReleaseComponent");

	URB_Handle_ReleaseComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Handle.GrabComponent
// ()
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, EditInline)
// struct FName                   InBoneName                     (Parm)
// struct FVector                 GrabLocation                   (Parm)
// bool                           bConstrainRotation             (Parm)

void URB_Handle::GrabComponent(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.GrabComponent");

	URB_Handle_GrabComponent_Params params;
	params.Component = Component;
	params.InBoneName = InBoneName;
	params.GrabLocation = GrabLocation;
	params.bConstrainRotation = bConstrainRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Spring.Clear
// ()

void URB_Spring::Clear()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Spring.Clear");

	URB_Spring_Clear_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Spring.SetComponents
// ()
// Parameters:
// class UPrimitiveComponent*     InComponent1                   (Parm, EditInline)
// struct FName                   InBoneName1                    (Parm)
// struct FVector                 Position1                      (Parm)
// class UPrimitiveComponent*     InComponent2                   (Parm, EditInline)
// struct FName                   InBoneName2                    (Parm)
// struct FVector                 Position2                      (Parm)

void URB_Spring::SetComponents(class UPrimitiveComponent* InComponent1, const struct FName& InBoneName1, const struct FVector& Position1, class UPrimitiveComponent* InComponent2, const struct FName& InBoneName2, const struct FVector& Position2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Spring.SetComponents");

	URB_Spring_SetComponents_Params params;
	params.InComponent1 = InComponent1;
	params.InBoneName1 = InBoneName1;
	params.Position1 = Position1;
	params.InComponent2 = InComponent2;
	params.InBoneName2 = InBoneName2;
	params.Position2 = Position2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicalMaterial.GetPhysicalMaterialProperty
// ()
// Parameters:
// class UClass*                  DesiredClass                   (Parm)
// class UPhysicalMaterialPropertyBase* ReturnValue                    (Parm, OutParm, ReturnParm)

class UPhysicalMaterialPropertyBase* UPhysicalMaterial::GetPhysicalMaterialProperty(class UClass* DesiredClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalMaterial.GetPhysicalMaterialProperty");

	UPhysicalMaterial_GetPhysicalMaterialProperty_Params params;
	params.DesiredClass = DesiredClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicalMaterial.FindFractureSounds
// ()
// Parameters:
// class USoundCue*               OutSoundExplosion              (Parm, OutParm)
// class USoundCue*               OutSoundSingle                 (Parm, OutParm)

void UPhysicalMaterial::FindFractureSounds(class USoundCue** OutSoundExplosion, class USoundCue** OutSoundSingle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalMaterial.FindFractureSounds");

	UPhysicalMaterial_FindFractureSounds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutSoundExplosion != nullptr)
		*OutSoundExplosion = params.OutSoundExplosion;
	if (OutSoundSingle != nullptr)
		*OutSoundSingle = params.OutSoundSingle;
}


// Function Engine.PhysicalMaterial.FindPhysEffectInfo
// ()
// Parameters:
// TEnumAsByte<EPhysEffectType>   Type                           (Parm)
// struct FPhysEffectInfo         ReturnValue                    (Parm, OutParm, ReturnParm)

struct FPhysEffectInfo UPhysicalMaterial::FindPhysEffectInfo(TEnumAsByte<EPhysEffectType> Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalMaterial.FindPhysEffectInfo");

	UPhysicalMaterial_FindPhysEffectInfo_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicsAsset.FindBodyIndex
// ()
// Parameters:
// struct FName                   BodyName                       (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UPhysicsAsset::FindBodyIndex(const struct FName& BodyName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAsset.FindBodyIndex");

	UPhysicsAsset_FindBodyIndex_Params params;
	params.BodyName = BodyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicsAssetInstance.FindConstraintInstance
// ()
// Parameters:
// struct FName                   ConName                        (Parm)
// class UPhysicsAsset*           InAsset                        (Parm)
// class URB_ConstraintInstance*  ReturnValue                    (Parm, OutParm, ReturnParm)

class URB_ConstraintInstance* UPhysicsAssetInstance::FindConstraintInstance(const struct FName& ConName, class UPhysicsAsset* InAsset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.FindConstraintInstance");

	UPhysicsAssetInstance_FindConstraintInstance_Params params;
	params.ConName = ConName;
	params.InAsset = InAsset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicsAssetInstance.FindBodyInstance
// ()
// Parameters:
// struct FName                   BodyName                       (Parm)
// class UPhysicsAsset*           InAsset                        (Parm)
// class URB_BodyInstance*        ReturnValue                    (Parm, OutParm, ReturnParm)

class URB_BodyInstance* UPhysicsAssetInstance::FindBodyInstance(const struct FName& BodyName, class UPhysicsAsset* InAsset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.FindBodyInstance");

	UPhysicsAssetInstance_FindBodyInstance_Params params;
	params.BodyName = BodyName;
	params.InAsset = InAsset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicsAssetInstance.SetFullAnimWeightBonesFixed
// ()
// Parameters:
// bool                           bNewFixed                      (Parm)
// class USkeletalMeshComponent*  SkelMesh                       (Parm, EditInline)

void UPhysicsAssetInstance::SetFullAnimWeightBonesFixed(bool bNewFixed, class USkeletalMeshComponent* SkelMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetFullAnimWeightBonesFixed");

	UPhysicsAssetInstance_SetFullAnimWeightBonesFixed_Params params;
	params.bNewFixed = bNewFixed;
	params.SkelMesh = SkelMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetFullAnimWeightBlockRigidBody
// ()
// Parameters:
// bool                           bNewBlockRigidBody             (Parm)
// class USkeletalMeshComponent*  SkelMesh                       (Parm, EditInline)

void UPhysicsAssetInstance::SetFullAnimWeightBlockRigidBody(bool bNewBlockRigidBody, class USkeletalMeshComponent* SkelMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetFullAnimWeightBlockRigidBody");

	UPhysicsAssetInstance_SetFullAnimWeightBlockRigidBody_Params params;
	params.bNewBlockRigidBody = bNewBlockRigidBody;
	params.SkelMesh = SkelMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetNamedBodiesBlockRigidBody
// ()
// Parameters:
// bool                           bNewBlockRigidBody             (Parm)
// TArray<struct FName>           BoneNames                      (Parm, NeedCtorLink)
// class USkeletalMeshComponent*  SkelMesh                       (Parm, EditInline)

void UPhysicsAssetInstance::SetNamedBodiesBlockRigidBody(bool bNewBlockRigidBody, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetNamedBodiesBlockRigidBody");

	UPhysicsAssetInstance_SetNamedBodiesBlockRigidBody_Params params;
	params.bNewBlockRigidBody = bNewBlockRigidBody;
	params.BoneNames = BoneNames;
	params.SkelMesh = SkelMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetNamedRBBoneSprings
// ()
// Parameters:
// bool                           bEnable                        (Parm)
// TArray<struct FName>           BoneNames                      (Parm, NeedCtorLink)
// float                          InBoneLinearSpring             (Parm)
// float                          InBoneAngularSpring            (Parm)
// class USkeletalMeshComponent*  SkelMeshComp                   (Parm, EditInline)

void UPhysicsAssetInstance::SetNamedRBBoneSprings(bool bEnable, TArray<struct FName> BoneNames, float InBoneLinearSpring, float InBoneAngularSpring, class USkeletalMeshComponent* SkelMeshComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetNamedRBBoneSprings");

	UPhysicsAssetInstance_SetNamedRBBoneSprings_Params params;
	params.bEnable = bEnable;
	params.BoneNames = BoneNames;
	params.InBoneLinearSpring = InBoneLinearSpring;
	params.InBoneAngularSpring = InBoneAngularSpring;
	params.SkelMeshComp = SkelMeshComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularVelocityDrive
// ()
// Parameters:
// bool                           bEnableSwingDrive              (Parm)
// bool                           bEnableTwistDrive              (Parm)
// TArray<struct FName>           BoneNames                      (Parm, NeedCtorLink)
// class USkeletalMeshComponent*  SkelMeshComp                   (Parm, EditInline)
// bool                           bSetOtherBodiesToComplement    (OptionalParm, Parm)

void UPhysicsAssetInstance::SetNamedMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMeshComp, bool bSetOtherBodiesToComplement)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularVelocityDrive");

	UPhysicsAssetInstance_SetNamedMotorsAngularVelocityDrive_Params params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.BoneNames = BoneNames;
	params.SkelMeshComp = SkelMeshComp;
	params.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularPositionDrive
// ()
// Parameters:
// bool                           bEnableSwingDrive              (Parm)
// bool                           bEnableTwistDrive              (Parm)
// TArray<struct FName>           BoneNames                      (Parm, NeedCtorLink)
// class USkeletalMeshComponent*  SkelMeshComp                   (Parm, EditInline)
// bool                           bSetOtherBodiesToComplement    (OptionalParm, Parm)

void UPhysicsAssetInstance::SetNamedMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMeshComp, bool bSetOtherBodiesToComplement)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularPositionDrive");

	UPhysicsAssetInstance_SetNamedMotorsAngularPositionDrive_Params params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.BoneNames = BoneNames;
	params.SkelMeshComp = SkelMeshComp;
	params.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularDriveParams
// ()
// Parameters:
// float                          InSpring                       (Parm)
// float                          InDamping                      (Parm)
// float                          InForceLimit                   (Parm)
// class USkeletalMeshComponent*  SkelMesh                       (OptionalParm, Parm, EditInline)
// bool                           bSkipFullAnimWeightBodies      (OptionalParm, Parm)

void UPhysicsAssetInstance::SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, class USkeletalMeshComponent* SkelMesh, bool bSkipFullAnimWeightBodies)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetAllMotorsAngularDriveParams");

	UPhysicsAssetInstance_SetAllMotorsAngularDriveParams_Params params;
	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;
	params.SkelMesh = SkelMesh;
	params.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularVelocityDrive
// ()
// Parameters:
// bool                           bEnableSwingDrive              (Parm)
// bool                           bEnableTwistDrive              (Parm)
// class USkeletalMeshComponent*  SkelMeshComp                   (Parm, EditInline)
// bool                           bSkipFullAnimWeightBodies      (OptionalParm, Parm)

void UPhysicsAssetInstance::SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, class USkeletalMeshComponent* SkelMeshComp, bool bSkipFullAnimWeightBodies)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetAllMotorsAngularVelocityDrive");

	UPhysicsAssetInstance_SetAllMotorsAngularVelocityDrive_Params params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.SkelMeshComp = SkelMeshComp;
	params.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularPositionDrive
// ()
// Parameters:
// bool                           bEnableSwingDrive              (Parm)
// bool                           bEnableTwistDrive              (Parm)
// class USkeletalMeshComponent*  SkelMesh                       (OptionalParm, Parm, EditInline)
// bool                           bSkipFullAnimWeightBodies      (OptionalParm, Parm)

void UPhysicsAssetInstance::SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, class USkeletalMeshComponent* SkelMesh, bool bSkipFullAnimWeightBodies)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetAllMotorsAngularPositionDrive");

	UPhysicsAssetInstance_SetAllMotorsAngularPositionDrive_Params params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.SkelMesh = SkelMesh;
	params.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.ForceAllBodiesBelowUnfixed
// ()
// Parameters:
// struct FName                   InBoneName                     (Const, Parm, OutParm)
// class UPhysicsAsset*           InAsset                        (Parm)
// class USkeletalMeshComponent*  InSkelMesh                     (Parm, EditInline)
// bool                           InbInstanceAlwaysFullAnimWeight (Parm)

void UPhysicsAssetInstance::ForceAllBodiesBelowUnfixed(class UPhysicsAsset* InAsset, class USkeletalMeshComponent* InSkelMesh, bool InbInstanceAlwaysFullAnimWeight, struct FName* InBoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.ForceAllBodiesBelowUnfixed");

	UPhysicsAssetInstance_ForceAllBodiesBelowUnfixed_Params params;
	params.InAsset = InAsset;
	params.InSkelMesh = InSkelMesh;
	params.InbInstanceAlwaysFullAnimWeight = InbInstanceAlwaysFullAnimWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InBoneName != nullptr)
		*InBoneName = params.InBoneName;
}


// Function Engine.PhysicsAssetInstance.SetNamedBodiesFixed
// ()
// Parameters:
// bool                           bNewFixed                      (Parm)
// TArray<struct FName>           BoneNames                      (Parm, NeedCtorLink)
// class USkeletalMeshComponent*  SkelMesh                       (Parm, EditInline)
// bool                           bSetOtherBodiesToComplement    (OptionalParm, Parm)
// bool                           bSkipFullAnimWeightBodies      (OptionalParm, Parm)

void UPhysicsAssetInstance::SetNamedBodiesFixed(bool bNewFixed, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMesh, bool bSetOtherBodiesToComplement, bool bSkipFullAnimWeightBodies)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetNamedBodiesFixed");

	UPhysicsAssetInstance_SetNamedBodiesFixed_Params params;
	params.bNewFixed = bNewFixed;
	params.BoneNames = BoneNames;
	params.SkelMesh = SkelMesh;
	params.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;
	params.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetAllBodiesFixed
// ()
// Parameters:
// bool                           bNewFixed                      (Parm)

void UPhysicsAssetInstance::SetAllBodiesFixed(bool bNewFixed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetAllBodiesFixed");

	UPhysicsAssetInstance_SetAllBodiesFixed_Params params;
	params.bNewFixed = bNewFixed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.GetTotalMassBelowBone
// ()
// Parameters:
// struct FName                   InBoneName                     (Parm)
// class UPhysicsAsset*           InAsset                        (Parm)
// class USkeletalMesh*           InSkelMesh                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UPhysicsAssetInstance::GetTotalMassBelowBone(const struct FName& InBoneName, class UPhysicsAsset* InAsset, class USkeletalMesh* InSkelMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.GetTotalMassBelowBone");

	UPhysicsAssetInstance_GetTotalMassBelowBone_Params params;
	params.InBoneName = InBoneName;
	params.InAsset = InAsset;
	params.InSkelMesh = InSkelMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicsAssetInstance.SetAngularDriveScale
// ()
// Parameters:
// float                          InAngularSpringScale           (Parm)
// float                          InAngularDampingScale          (Parm)
// float                          InAngularForceLimitScale       (Parm)

void UPhysicsAssetInstance::SetAngularDriveScale(float InAngularSpringScale, float InAngularDampingScale, float InAngularForceLimitScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetAngularDriveScale");

	UPhysicsAssetInstance_SetAngularDriveScale_Params params;
	params.InAngularSpringScale = InAngularSpringScale;
	params.InAngularDampingScale = InAngularDampingScale;
	params.InAngularForceLimitScale = InAngularForceLimitScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetLinearDriveScale
// ()
// Parameters:
// float                          InLinearSpringScale            (Parm)
// float                          InLinearDampingScale           (Parm)
// float                          InLinearForceLimitScale        (Parm)

void UPhysicsAssetInstance::SetLinearDriveScale(float InLinearSpringScale, float InLinearDampingScale, float InLinearForceLimitScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetLinearDriveScale");

	UPhysicsAssetInstance_SetLinearDriveScale_Params params;
	params.InLinearSpringScale = InLinearSpringScale;
	params.InLinearDampingScale = InLinearDampingScale;
	params.InLinearForceLimitScale = InLinearForceLimitScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.UpdateDampingProperties
// ()

void URB_BodyInstance::UpdateDampingProperties()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.UpdateDampingProperties");

	URB_BodyInstance_UpdateDampingProperties_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.UpdateMassProperties
// ()
// Parameters:
// class URB_BodySetup*           Setup                          (Parm)

void URB_BodyInstance::UpdateMassProperties(class URB_BodySetup* Setup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.UpdateMassProperties");

	URB_BodyInstance_UpdateMassProperties_Params params;
	params.Setup = Setup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.SetContactReportForceThreshold
// ()
// Parameters:
// float                          Threshold                      (Parm)

void URB_BodyInstance::SetContactReportForceThreshold(float Threshold)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetContactReportForceThreshold");

	URB_BodyInstance_SetContactReportForceThreshold_Params params;
	params.Threshold = Threshold;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.EnableCollisionResponse
// ()
// Parameters:
// bool                           bEnableResponse                (Parm)

void URB_BodyInstance::EnableCollisionResponse(bool bEnableResponse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.EnableCollisionResponse");

	URB_BodyInstance_EnableCollisionResponse_Params params;
	params.bEnableResponse = bEnableResponse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.SetPhysMaterialOverride
// ()
// Parameters:
// class UPhysicalMaterial*       NewPhysMaterial                (Parm)

void URB_BodyInstance::SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetPhysMaterialOverride");

	URB_BodyInstance_SetPhysMaterialOverride_Params params;
	params.NewPhysMaterial = NewPhysMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.SetBlockRigidBody
// ()
// Parameters:
// bool                           bNewBlockRigidBody             (Parm)

void URB_BodyInstance::SetBlockRigidBody(bool bNewBlockRigidBody)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetBlockRigidBody");

	URB_BodyInstance_SetBlockRigidBody_Params params;
	params.bNewBlockRigidBody = bNewBlockRigidBody;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.SetBoneSpringTarget
// ()
// Parameters:
// struct FMatrix                 InBoneTarget                   (Const, Parm, OutParm)
// bool                           bTeleport                      (Parm)

void URB_BodyInstance::SetBoneSpringTarget(bool bTeleport, struct FMatrix* InBoneTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetBoneSpringTarget");

	URB_BodyInstance_SetBoneSpringTarget_Params params;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InBoneTarget != nullptr)
		*InBoneTarget = params.InBoneTarget;
}


// Function Engine.RB_BodyInstance.SetBoneSpringParams
// ()
// Parameters:
// float                          InLinearSpring                 (Parm)
// float                          InLinearDamping                (Parm)
// float                          InAngularSpring                (Parm)
// float                          InAngularDamping               (Parm)

void URB_BodyInstance::SetBoneSpringParams(float InLinearSpring, float InLinearDamping, float InAngularSpring, float InAngularDamping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetBoneSpringParams");

	URB_BodyInstance_SetBoneSpringParams_Params params;
	params.InLinearSpring = InLinearSpring;
	params.InLinearDamping = InLinearDamping;
	params.InAngularSpring = InAngularSpring;
	params.InAngularDamping = InAngularDamping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.EnableBoneSpring
// ()
// Parameters:
// bool                           bInEnableLinear                (Parm)
// bool                           bInEnableAngular               (Parm)
// struct FMatrix                 InBoneTarget                   (Const, Parm, OutParm)

void URB_BodyInstance::EnableBoneSpring(bool bInEnableLinear, bool bInEnableAngular, struct FMatrix* InBoneTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.EnableBoneSpring");

	URB_BodyInstance_EnableBoneSpring_Params params;
	params.bInEnableLinear = bInEnableLinear;
	params.bInEnableAngular = bInEnableAngular;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InBoneTarget != nullptr)
		*InBoneTarget = params.InBoneTarget;
}


// Function Engine.RB_BodyInstance.GetUnrealWorldVelocityAtPoint
// ()
// Parameters:
// struct FVector                 Point                          (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector URB_BodyInstance::GetUnrealWorldVelocityAtPoint(const struct FVector& Point)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.GetUnrealWorldVelocityAtPoint");

	URB_BodyInstance_GetUnrealWorldVelocityAtPoint_Params params;
	params.Point = Point;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_BodyInstance.GetUnrealWorldAngularVelocity
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector URB_BodyInstance::GetUnrealWorldAngularVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.GetUnrealWorldAngularVelocity");

	URB_BodyInstance_GetUnrealWorldAngularVelocity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_BodyInstance.GetUnrealWorldVelocity
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector URB_BodyInstance::GetUnrealWorldVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.GetUnrealWorldVelocity");

	URB_BodyInstance_GetUnrealWorldVelocity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_BodyInstance.GetUnrealWorldTM
// ()
// Parameters:
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FMatrix URB_BodyInstance::GetUnrealWorldTM()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.GetUnrealWorldTM");

	URB_BodyInstance_GetUnrealWorldTM_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_BodyInstance.GetPhysicsAssetInstance
// ()
// Parameters:
// class UPhysicsAssetInstance*   ReturnValue                    (Parm, OutParm, ReturnParm)

class UPhysicsAssetInstance* URB_BodyInstance::GetPhysicsAssetInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.GetPhysicsAssetInstance");

	URB_BodyInstance_GetPhysicsAssetInstance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_BodyInstance.IsValidBodyInstance
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool URB_BodyInstance::IsValidBodyInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.IsValidBodyInstance");

	URB_BodyInstance_IsValidBodyInstance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_BodyInstance.IsFixed
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool URB_BodyInstance::IsFixed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.IsFixed");

	URB_BodyInstance_IsFixed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_BodyInstance.SetFixed
// ()
// Parameters:
// bool                           bNewFixed                      (Parm)

void URB_BodyInstance::SetFixed(bool bNewFixed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetFixed");

	URB_BodyInstance_SetFixed_Params params;
	params.bNewFixed = bNewFixed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.GetBodyMass
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float URB_BodyInstance::GetBodyMass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.GetBodyMass");

	URB_BodyInstance_GetBodyMass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_ConstraintInstance.MoveKinActorTransform
// ()
// Parameters:
// struct FMatrix                 NewTM                          (Parm, OutParm)

void URB_ConstraintInstance::MoveKinActorTransform(struct FMatrix* NewTM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.MoveKinActorTransform");

	URB_ConstraintInstance_MoveKinActorTransform_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewTM != nullptr)
		*NewTM = params.NewTM;
}


// Function Engine.RB_ConstraintInstance.SetLinearLimitSize
// ()
// Parameters:
// float                          NewLimitSize                   (Parm)

void URB_ConstraintInstance::SetLinearLimitSize(float NewLimitSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearLimitSize");

	URB_ConstraintInstance_SetLinearLimitSize_Params params;
	params.NewLimitSize = NewLimitSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetAngularDOFLimitScale
// ()
// Parameters:
// float                          InSwing1LimitScale             (Parm)
// float                          InSwing2LimitScale             (Parm)
// float                          InTwistLimitScale              (Parm)
// class URB_ConstraintSetup*     InSetup                        (Parm)

void URB_ConstraintInstance::SetAngularDOFLimitScale(float InSwing1LimitScale, float InSwing2LimitScale, float InTwistLimitScale, class URB_ConstraintSetup* InSetup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularDOFLimitScale");

	URB_ConstraintInstance_SetAngularDOFLimitScale_Params params;
	params.InSwing1LimitScale = InSwing1LimitScale;
	params.InSwing2LimitScale = InSwing2LimitScale;
	params.InTwistLimitScale = InTwistLimitScale;
	params.InSetup = InSetup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetAngularDriveParams
// ()
// Parameters:
// float                          InSpring                       (Parm)
// float                          InDamping                      (Parm)
// float                          InForceLimit                   (Parm)

void URB_ConstraintInstance::SetAngularDriveParams(float InSpring, float InDamping, float InForceLimit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularDriveParams");

	URB_ConstraintInstance_SetAngularDriveParams_Params params;
	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetAngularVelocityTarget
// ()
// Parameters:
// struct FVector                 InVelTarget                    (Parm)

void URB_ConstraintInstance::SetAngularVelocityTarget(const struct FVector& InVelTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularVelocityTarget");

	URB_ConstraintInstance_SetAngularVelocityTarget_Params params;
	params.InVelTarget = InVelTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetAngularPositionTarget
// ()
// Parameters:
// struct FQuat                   InPosTarget                    (Const, Parm, OutParm)

void URB_ConstraintInstance::SetAngularPositionTarget(struct FQuat* InPosTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularPositionTarget");

	URB_ConstraintInstance_SetAngularPositionTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InPosTarget != nullptr)
		*InPosTarget = params.InPosTarget;
}


// Function Engine.RB_ConstraintInstance.SetLinearDriveParams
// ()
// Parameters:
// float                          InSpring                       (Parm)
// float                          InDamping                      (Parm)
// float                          InForceLimit                   (Parm)

void URB_ConstraintInstance::SetLinearDriveParams(float InSpring, float InDamping, float InForceLimit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearDriveParams");

	URB_ConstraintInstance_SetLinearDriveParams_Params params;
	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetLinearVelocityTarget
// ()
// Parameters:
// struct FVector                 InVelTarget                    (Parm)

void URB_ConstraintInstance::SetLinearVelocityTarget(const struct FVector& InVelTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearVelocityTarget");

	URB_ConstraintInstance_SetLinearVelocityTarget_Params params;
	params.InVelTarget = InVelTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetLinearPositionTarget
// ()
// Parameters:
// struct FVector                 InPosTarget                    (Parm)

void URB_ConstraintInstance::SetLinearPositionTarget(const struct FVector& InPosTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearPositionTarget");

	URB_ConstraintInstance_SetLinearPositionTarget_Params params;
	params.InPosTarget = InPosTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetAngularVelocityDrive
// ()
// Parameters:
// bool                           bEnableSwingDrive              (Parm)
// bool                           bEnableTwistDrive              (Parm)

void URB_ConstraintInstance::SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularVelocityDrive");

	URB_ConstraintInstance_SetAngularVelocityDrive_Params params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetAngularPositionDrive
// ()
// Parameters:
// bool                           bEnableSwingDrive              (Parm)
// bool                           bEnableTwistDrive              (Parm)

void URB_ConstraintInstance::SetAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularPositionDrive");

	URB_ConstraintInstance_SetAngularPositionDrive_Params params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetLinearVelocityDrive
// ()
// Parameters:
// bool                           bEnableXDrive                  (Parm)
// bool                           bEnableYDrive                  (Parm)
// bool                           bEnableZDrive                  (Parm)

void URB_ConstraintInstance::SetLinearVelocityDrive(bool bEnableXDrive, bool bEnableYDrive, bool bEnableZDrive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearVelocityDrive");

	URB_ConstraintInstance_SetLinearVelocityDrive_Params params;
	params.bEnableXDrive = bEnableXDrive;
	params.bEnableYDrive = bEnableYDrive;
	params.bEnableZDrive = bEnableZDrive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetLinearPositionDrive
// ()
// Parameters:
// bool                           bEnableXDrive                  (Parm)
// bool                           bEnableYDrive                  (Parm)
// bool                           bEnableZDrive                  (Parm)

void URB_ConstraintInstance::SetLinearPositionDrive(bool bEnableXDrive, bool bEnableYDrive, bool bEnableZDrive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearPositionDrive");

	URB_ConstraintInstance_SetLinearPositionDrive_Params params;
	params.bEnableXDrive = bEnableXDrive;
	params.bEnableYDrive = bEnableYDrive;
	params.bEnableZDrive = bEnableZDrive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.GetConstraintLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector URB_ConstraintInstance::GetConstraintLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.GetConstraintLocation");

	URB_ConstraintInstance_GetConstraintLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_ConstraintInstance.GetPhysicsAssetInstance
// ()
// Parameters:
// class UPhysicsAssetInstance*   ReturnValue                    (Parm, OutParm, ReturnParm)

class UPhysicsAssetInstance* URB_ConstraintInstance::GetPhysicsAssetInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.GetPhysicsAssetInstance");

	URB_ConstraintInstance_GetPhysicsAssetInstance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_ConstraintInstance.TermConstraint
// ()

void URB_ConstraintInstance::TermConstraint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.TermConstraint");

	URB_ConstraintInstance_TermConstraint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.InitConstraint
// ()
// Parameters:
// class UPrimitiveComponent*     PrimComp1                      (Parm, EditInline)
// class UPrimitiveComponent*     PrimComp2                      (Parm, EditInline)
// class URB_ConstraintSetup*     Setup                          (Parm)
// float                          Scale                          (Parm)
// class AActor*                  InOwner                        (Parm)
// class UPrimitiveComponent*     InPrimComp                     (Parm, EditInline)
// bool                           bMakeKinForBody1               (Parm)

void URB_ConstraintInstance::InitConstraint(class UPrimitiveComponent* PrimComp1, class UPrimitiveComponent* PrimComp2, class URB_ConstraintSetup* Setup, float Scale, class AActor* InOwner, class UPrimitiveComponent* InPrimComp, bool bMakeKinForBody1)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.InitConstraint");

	URB_ConstraintInstance_InitConstraint_Params params;
	params.PrimComp1 = PrimComp1;
	params.PrimComp2 = PrimComp2;
	params.Setup = Setup;
	params.Scale = Scale;
	params.InOwner = InOwner;
	params.InPrimComp = InPrimComp;
	params.bMakeKinForBody1 = bMakeKinForBody1;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NxGenericForceFieldBrush.StopsProjectile
// ()
// Parameters:
// class AProjectile*             P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANxGenericForceFieldBrush::StopsProjectile(class AProjectile* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxGenericForceFieldBrush.StopsProjectile");

	ANxGenericForceFieldBrush_StopsProjectile_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NxGenericForceFieldBrush.PostBeginPlay
// ()

void ANxGenericForceFieldBrush::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxGenericForceFieldBrush.PostBeginPlay");

	ANxGenericForceFieldBrush_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NxForceField.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          inAction                       (Parm)

void ANxForceField::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxForceField.OnToggle");

	ANxForceField_OnToggle_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NxForceField.DoInitRBPhys
// ()

void ANxForceField::DoInitRBPhys()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxForceField.DoInitRBPhys");

	ANxForceField_DoInitRBPhys_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NxCylindricalForceFieldCapsule.DoInitRBPhys
// ()

void ANxCylindricalForceFieldCapsule::DoInitRBPhys()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxCylindricalForceFieldCapsule.DoInitRBPhys");

	ANxCylindricalForceFieldCapsule_DoInitRBPhys_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NxForceFieldGeneric.DoInitRBPhys
// ()

void ANxForceFieldGeneric::DoInitRBPhys()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxForceFieldGeneric.DoInitRBPhys");

	ANxForceFieldGeneric_DoInitRBPhys_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NxForceFieldRadial.DoInitRBPhys
// ()

void ANxForceFieldRadial::DoInitRBPhys()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxForceFieldRadial.DoInitRBPhys");

	ANxForceFieldRadial_DoInitRBPhys_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NxForceFieldTornado.DoInitRBPhys
// ()

void ANxForceFieldTornado::DoInitRBPhys()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxForceFieldTornado.DoInitRBPhys");

	ANxForceFieldTornado_DoInitRBPhys_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NxGenericForceFieldBox.DoInitRBPhys
// ()

void ANxGenericForceFieldBox::DoInitRBPhys()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxGenericForceFieldBox.DoInitRBPhys");

	ANxGenericForceFieldBox_DoInitRBPhys_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NxForceFieldSpawnable.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          inAction                       (Parm)

void ANxForceFieldSpawnable::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxForceFieldSpawnable.OnToggle");

	ANxForceFieldSpawnable_OnToggle_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_CylindricalForceActor.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          inAction                       (Parm)

void ARB_CylindricalForceActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_CylindricalForceActor.OnToggle");

	ARB_CylindricalForceActor_OnToggle_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_RadialForceActor.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          inAction                       (Parm)

void ARB_RadialForceActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_RadialForceActor.OnToggle");

	ARB_RadialForceActor_OnToggle_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NxForceFieldComponent.DoInitRBPhys
// ()

void UNxForceFieldComponent::DoInitRBPhys()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxForceFieldComponent.DoInitRBPhys");

	UNxForceFieldComponent_DoInitRBPhys_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShape.GetDrawComponent
// ()
// Parameters:
// class UPrimitiveComponent*     ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UPrimitiveComponent* UForceFieldShape::GetDrawComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShape.GetDrawComponent");

	UForceFieldShape_GetDrawComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ForceFieldShape.FillByCylinder
// ()
// Parameters:
// float                          BottomRadius                   (Parm)
// float                          TopRadius                      (Parm)
// float                          Height                         (Parm)
// float                          HeightOffset                   (Parm)

void UForceFieldShape::FillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShape.FillByCylinder");

	UForceFieldShape_FillByCylinder_Params params;
	params.BottomRadius = BottomRadius;
	params.TopRadius = TopRadius;
	params.Height = Height;
	params.HeightOffset = HeightOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShape.FillByCapsule
// ()
// Parameters:
// float                          Height                         (Parm)
// float                          Radius                         (Parm)

void UForceFieldShape::FillByCapsule(float Height, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShape.FillByCapsule");

	UForceFieldShape_FillByCapsule_Params params;
	params.Height = Height;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShape.FillByBox
// ()
// Parameters:
// struct FVector                 Dimension                      (Parm)

void UForceFieldShape::FillByBox(const struct FVector& Dimension)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShape.FillByBox");

	UForceFieldShape_FillByBox_Params params;
	params.Dimension = Dimension;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShape.FillBySphere
// ()
// Parameters:
// float                          Radius                         (Parm)

void UForceFieldShape::FillBySphere(float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShape.FillBySphere");

	UForceFieldShape_FillBySphere_Params params;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeBox.GetDrawComponent
// ()
// Parameters:
// class UPrimitiveComponent*     ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UPrimitiveComponent* UForceFieldShapeBox::GetDrawComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeBox.GetDrawComponent");

	UForceFieldShapeBox_GetDrawComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ForceFieldShapeBox.FillByCylinder
// ()
// Parameters:
// float                          BottomRadius                   (Parm)
// float                          TopRadius                      (Parm)
// float                          Height                         (Parm)
// float                          HeightOffset                   (Parm)

void UForceFieldShapeBox::FillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeBox.FillByCylinder");

	UForceFieldShapeBox_FillByCylinder_Params params;
	params.BottomRadius = BottomRadius;
	params.TopRadius = TopRadius;
	params.Height = Height;
	params.HeightOffset = HeightOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeBox.FillByCapsule
// ()
// Parameters:
// float                          Height                         (Parm)
// float                          Radius                         (Parm)

void UForceFieldShapeBox::FillByCapsule(float Height, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeBox.FillByCapsule");

	UForceFieldShapeBox_FillByCapsule_Params params;
	params.Height = Height;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeBox.FillByBox
// ()
// Parameters:
// struct FVector                 Extent                         (Parm)

void UForceFieldShapeBox::FillByBox(const struct FVector& Extent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeBox.FillByBox");

	UForceFieldShapeBox_FillByBox_Params params;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeBox.FillBySphere
// ()
// Parameters:
// float                          Radius                         (Parm)

void UForceFieldShapeBox::FillBySphere(float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeBox.FillBySphere");

	UForceFieldShapeBox_FillBySphere_Params params;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeBox.GetRadii
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UForceFieldShapeBox::GetRadii()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeBox.GetRadii");

	UForceFieldShapeBox_GetRadii_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ForceFieldShapeCapsule.GetDrawComponent
// ()
// Parameters:
// class UPrimitiveComponent*     ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UPrimitiveComponent* UForceFieldShapeCapsule::GetDrawComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeCapsule.GetDrawComponent");

	UForceFieldShapeCapsule_GetDrawComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ForceFieldShapeCapsule.FillByCylinder
// ()
// Parameters:
// float                          BottomRadius                   (Parm)
// float                          TopRadius                      (Parm)
// float                          Height                         (Parm)
// float                          HeightOffset                   (Parm)

void UForceFieldShapeCapsule::FillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeCapsule.FillByCylinder");

	UForceFieldShapeCapsule_FillByCylinder_Params params;
	params.BottomRadius = BottomRadius;
	params.TopRadius = TopRadius;
	params.Height = Height;
	params.HeightOffset = HeightOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeCapsule.FillByCapsule
// ()
// Parameters:
// float                          Height                         (Parm)
// float                          Radius                         (Parm)

void UForceFieldShapeCapsule::FillByCapsule(float Height, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeCapsule.FillByCapsule");

	UForceFieldShapeCapsule_FillByCapsule_Params params;
	params.Height = Height;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeCapsule.FillByBox
// ()
// Parameters:
// struct FVector                 Extent                         (Parm)

void UForceFieldShapeCapsule::FillByBox(const struct FVector& Extent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeCapsule.FillByBox");

	UForceFieldShapeCapsule_FillByBox_Params params;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeCapsule.FillBySphere
// ()
// Parameters:
// float                          Radius                         (Parm)

void UForceFieldShapeCapsule::FillBySphere(float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeCapsule.FillBySphere");

	UForceFieldShapeCapsule_FillBySphere_Params params;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeCapsule.GetRadius
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UForceFieldShapeCapsule::GetRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeCapsule.GetRadius");

	UForceFieldShapeCapsule_GetRadius_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ForceFieldShapeCapsule.GetHeight
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UForceFieldShapeCapsule::GetHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeCapsule.GetHeight");

	UForceFieldShapeCapsule_GetHeight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ForceFieldShapeSphere.GetDrawComponent
// ()
// Parameters:
// class UPrimitiveComponent*     ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UPrimitiveComponent* UForceFieldShapeSphere::GetDrawComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeSphere.GetDrawComponent");

	UForceFieldShapeSphere_GetDrawComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ForceFieldShapeSphere.FillByCylinder
// ()
// Parameters:
// float                          BottomRadius                   (Parm)
// float                          TopRadius                      (Parm)
// float                          Height                         (Parm)
// float                          HeightOffset                   (Parm)

void UForceFieldShapeSphere::FillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeSphere.FillByCylinder");

	UForceFieldShapeSphere_FillByCylinder_Params params;
	params.BottomRadius = BottomRadius;
	params.TopRadius = TopRadius;
	params.Height = Height;
	params.HeightOffset = HeightOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeSphere.FillByCapsule
// ()
// Parameters:
// float                          Height                         (Parm)
// float                          Radius                         (Parm)

void UForceFieldShapeSphere::FillByCapsule(float Height, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeSphere.FillByCapsule");

	UForceFieldShapeSphere_FillByCapsule_Params params;
	params.Height = Height;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeSphere.FillByBox
// ()
// Parameters:
// struct FVector                 Extent                         (Parm)

void UForceFieldShapeSphere::FillByBox(const struct FVector& Extent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeSphere.FillByBox");

	UForceFieldShapeSphere_FillByBox_Params params;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeSphere.FillBySphere
// ()
// Parameters:
// float                          Radius                         (Parm)

void UForceFieldShapeSphere::FillBySphere(float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeSphere.FillBySphere");

	UForceFieldShapeSphere_FillBySphere_Params params;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeSphere.GetRadius
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UForceFieldShapeSphere::GetRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeSphere.GetRadius");

	UForceFieldShapeSphere_GetRadius_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DMC_Base.TakeDamage
// ()
// Parameters:
// int                            DamageAmount                   (Parm)
// class AController*             EventInstigator                (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)

void ADMC_Base::TakeDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DMC_Base.TakeDamage");

	ADMC_Base_TakeDamage_Params params;
	params.DamageAmount = DamageAmount;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DMC_Base.DMCTakeDamage
// ()
// Parameters:
// int                            DamageAmount                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)

void ADMC_Base::DMCTakeDamage(int DamageAmount, const struct FVector& HitLocation, const struct FVector& Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DMC_Base.DMCTakeDamage");

	ADMC_Base_DMCTakeDamage_Params params;
	params.DamageAmount = DamageAmount;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DMC_Base.DMCCreate
// ()

void ADMC_Base::DMCCreate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DMC_Base.DMCCreate");

	ADMC_Base_DMCCreate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DMC_Base.AddComponent
// ()
// Parameters:
// class UActorComponent*         Template                       (Parm, EditInline)
// class UActorComponent*         ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UActorComponent* ADMC_Base::AddComponent(class UActorComponent* Template)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DMC_Base.AddComponent");

	ADMC_Base_AddComponent_Params params;
	params.Template = Template;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DMC_Base.BreakRot
// ()
// Parameters:
// struct FRotator                InRot                          (Parm)
// float                          Pitch                          (Parm, OutParm)
// float                          Yaw                            (Parm, OutParm)
// float                          Roll                           (Parm, OutParm)

void ADMC_Base::BreakRot(const struct FRotator& InRot, float* Pitch, float* Yaw, float* Roll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DMC_Base.BreakRot");

	ADMC_Base_BreakRot_Params params;
	params.InRot = InRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Pitch != nullptr)
		*Pitch = params.Pitch;
	if (Yaw != nullptr)
		*Yaw = params.Yaw;
	if (Roll != nullptr)
		*Roll = params.Roll;
}


// Function Engine.DMC_Base.MakeRot
// ()
// Parameters:
// float                          Pitch                          (Parm)
// float                          Yaw                            (Parm)
// float                          Roll                           (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator ADMC_Base::MakeRot(float Pitch, float Yaw, float Roll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DMC_Base.MakeRot");

	ADMC_Base_MakeRot_Params params;
	params.Pitch = Pitch;
	params.Yaw = Yaw;
	params.Roll = Roll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DMC_Base.BreakVector
// ()
// Parameters:
// struct FVector                 InVec                          (Parm)
// float                          X                              (Parm, OutParm)
// float                          Y                              (Parm, OutParm)
// float                          Z                              (Parm, OutParm)

void ADMC_Base::BreakVector(const struct FVector& InVec, float* X, float* Y, float* Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DMC_Base.BreakVector");

	ADMC_Base_BreakVector_Params params;
	params.InVec = InVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;
}


// Function Engine.DMC_Base.MakeVector
// ()
// Parameters:
// float                          X                              (Parm)
// float                          Y                              (Parm)
// float                          Z                              (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ADMC_Base::MakeVector(float X, float Y, float Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DMC_Base.MakeVector");

	ADMC_Base_MakeVector_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DMC_Base.Conv_RotatorToString
// ()
// Parameters:
// struct FRotator                InRot                          (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ADMC_Base::Conv_RotatorToString(const struct FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DMC_Base.Conv_RotatorToString");

	ADMC_Base_Conv_RotatorToString_Params params;
	params.InRot = InRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DMC_Base.Conv_VectorToString
// ()
// Parameters:
// struct FVector                 InVec                          (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ADMC_Base::Conv_VectorToString(const struct FVector& InVec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DMC_Base.Conv_VectorToString");

	ADMC_Base_Conv_VectorToString_Params params;
	params.InVec = InVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DMC_Base.Conv_BoolToString
// ()
// Parameters:
// bool                           InBool                         (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ADMC_Base::Conv_BoolToString(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DMC_Base.Conv_BoolToString");

	ADMC_Base_Conv_BoolToString_Params params;
	params.InBool = InBool;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DMC_Base.Conv_IntToString
// ()
// Parameters:
// int                            InInt                          (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ADMC_Base::Conv_IntToString(int InInt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DMC_Base.Conv_IntToString");

	ADMC_Base_Conv_IntToString_Params params;
	params.InInt = InInt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DMC_Base.Conv_FloatToString
// ()
// Parameters:
// float                          InFloat                        (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ADMC_Base::Conv_FloatToString(float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DMC_Base.Conv_FloatToString");

	ADMC_Base_Conv_FloatToString_Params params;
	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DMC_Base.Conv_IntToFloat
// ()
// Parameters:
// int                            InInt                          (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ADMC_Base::Conv_IntToFloat(int InInt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DMC_Base.Conv_IntToFloat");

	ADMC_Base_Conv_IntToFloat_Params params;
	params.InInt = InInt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DMC_Base.GetWorldTime
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ADMC_Base::GetWorldTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DMC_Base.GetWorldTime");

	ADMC_Base_GetWorldTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DMC_Base.PrintString
// ()
// Parameters:
// struct FString                 InString                       (Parm, NeedCtorLink)

void ADMC_Base::PrintString(const struct FString& InString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DMC_Base.PrintString");

	ADMC_Base_PrintString_Params params;
	params.InString = InString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceObject.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USequenceObject::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceObject.GetObjClassVersion");

	USequenceObject_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceObject.IsPastingIntoLevelSequenceAllowed
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USequenceObject::IsPastingIntoLevelSequenceAllowed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceObject.IsPastingIntoLevelSequenceAllowed");

	USequenceObject_IsPastingIntoLevelSequenceAllowed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceObject.IsValidLevelSequenceObject
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USequenceObject::IsValidLevelSequenceObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceObject.IsValidLevelSequenceObject");

	USequenceObject_IsValidLevelSequenceObject_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceObject.GetWorldInfo
// ()
// Parameters:
// class AWorldInfo*              ReturnValue                    (Parm, OutParm, ReturnParm)

class AWorldInfo* USequenceObject::GetWorldInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceObject.GetWorldInfo");

	USequenceObject_GetWorldInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceObject.ScriptLog
// ()
// Parameters:
// struct FString                 LogText                        (Parm, NeedCtorLink)
// bool                           bWarning                       (OptionalParm, Parm)

void USequenceObject::ScriptLog(const struct FString& LogText, bool bWarning)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceObject.ScriptLog");

	USequenceObject_ScriptLog_Params params;
	params.LogText = LogText;
	params.bWarning = bWarning;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.ForceActivateOutput
// ()
// Parameters:
// int                            OutputIdx                      (Parm)

void USequenceOp::ForceActivateOutput(int OutputIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.ForceActivateOutput");

	USequenceOp_ForceActivateOutput_Params params;
	params.OutputIdx = OutputIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.ForceActivateInput
// ()
// Parameters:
// int                            InputIdx                       (Parm)

void USequenceOp::ForceActivateInput(int InputIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.ForceActivateInput");

	USequenceOp_ForceActivateInput_Params params;
	params.InputIdx = InputIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.GetController
// ()
// Parameters:
// class AActor*                  TheActor                       (Parm)
// class AController*             ReturnValue                    (Parm, OutParm, ReturnParm)

class AController* USequenceOp::GetController(class AActor* TheActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetController");

	USequenceOp_GetController_Params params;
	params.TheActor = TheActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceOp.GetPawn
// ()
// Parameters:
// class AActor*                  TheActor                       (Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* USequenceOp::GetPawn(class AActor* TheActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetPawn");

	USequenceOp_GetPawn_Params params;
	params.TheActor = TheActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceOp.Reset
// ()

void USequenceOp::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.Reset");

	USequenceOp_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.PublishLinkedVariableValues
// ()

void USequenceOp::PublishLinkedVariableValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.PublishLinkedVariableValues");

	USequenceOp_PublishLinkedVariableValues_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.PopulateLinkedVariableValues
// ()

void USequenceOp::PopulateLinkedVariableValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.PopulateLinkedVariableValues");

	USequenceOp_PopulateLinkedVariableValues_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.VersionUpdated
// ()
// Parameters:
// int                            OldVersion                     (Parm)
// int                            NewVersion                     (Parm)

void USequenceOp::VersionUpdated(int OldVersion, int NewVersion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.VersionUpdated");

	USequenceOp_VersionUpdated_Params params;
	params.OldVersion = OldVersion;
	params.NewVersion = NewVersion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.Deactivated
// ()

void USequenceOp::Deactivated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.Deactivated");

	USequenceOp_Deactivated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.Activated
// ()

void USequenceOp::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.Activated");

	USequenceOp_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.ActivateNamedOutputLink
// ()
// Parameters:
// struct FString                 LinkDesc                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USequenceOp::ActivateNamedOutputLink(const struct FString& LinkDesc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.ActivateNamedOutputLink");

	USequenceOp_ActivateNamedOutputLink_Params params;
	params.LinkDesc = LinkDesc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceOp.ActivateOutputLink
// ()
// Parameters:
// int                            OutputIdx                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USequenceOp::ActivateOutputLink(int OutputIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.ActivateOutputLink");

	USequenceOp_ActivateOutputLink_Params params;
	params.OutputIdx = OutputIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceOp.LinkedVariables
// ()
// Parameters:
// class UClass*                  VarClass                       (Parm)
// class USequenceVariable*       OutVariable                    (Parm, OutParm)
// struct FString                 inDesc                         (OptionalParm, Parm, NeedCtorLink)

void USequenceOp::LinkedVariables(class UClass* VarClass, const struct FString& inDesc, class USequenceVariable** OutVariable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.LinkedVariables");

	USequenceOp_LinkedVariables_Params params;
	params.VarClass = VarClass;
	params.inDesc = inDesc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutVariable != nullptr)
		*OutVariable = params.OutVariable;
}


// Function Engine.SequenceOp.GetBoolVars
// ()
// Parameters:
// TArray<unsigned char>          boolVars                       (Parm, OutParm, NeedCtorLink)
// struct FString                 inDesc                         (OptionalParm, Parm, NeedCtorLink)

void USequenceOp::GetBoolVars(const struct FString& inDesc, TArray<unsigned char>* boolVars)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetBoolVars");

	USequenceOp_GetBoolVars_Params params;
	params.inDesc = inDesc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (boolVars != nullptr)
		*boolVars = params.boolVars;
}


// Function Engine.SequenceOp.GetInterpDataVars
// ()
// Parameters:
// TArray<class UInterpData*>     outIData                       (Parm, OutParm, NeedCtorLink)
// struct FString                 inDesc                         (OptionalParm, Parm, NeedCtorLink)

void USequenceOp::GetInterpDataVars(const struct FString& inDesc, TArray<class UInterpData*>* outIData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetInterpDataVars");

	USequenceOp_GetInterpDataVars_Params params;
	params.inDesc = inDesc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (outIData != nullptr)
		*outIData = params.outIData;
}


// Function Engine.SequenceOp.GetObjectVars
// ()
// Parameters:
// TArray<class UObject*>         objVars                        (Parm, OutParm, NeedCtorLink)
// struct FString                 inDesc                         (OptionalParm, Parm, NeedCtorLink)

void USequenceOp::GetObjectVars(const struct FString& inDesc, TArray<class UObject*>* objVars)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetObjectVars");

	USequenceOp_GetObjectVars_Params params;
	params.inDesc = inDesc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (objVars != nullptr)
		*objVars = params.objVars;
}


// Function Engine.SequenceOp.GetLinkedObjects
// ()
// Parameters:
// TArray<class USequenceObject*> out_Objects                    (Parm, OutParm, NeedCtorLink)
// class UClass*                  ObjectType                     (OptionalParm, Parm)
// bool                           bRecurse                       (OptionalParm, Parm)

void USequenceOp::GetLinkedObjects(class UClass* ObjectType, bool bRecurse, TArray<class USequenceObject*>* out_Objects)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetLinkedObjects");

	USequenceOp_GetLinkedObjects_Params params;
	params.ObjectType = ObjectType;
	params.bRecurse = bRecurse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Objects != nullptr)
		*out_Objects = params.out_Objects;
}


// Function Engine.SequenceOp.HasLinkedOps
// ()
// Parameters:
// bool                           bConsiderInputLinks            (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USequenceOp::HasLinkedOps(bool bConsiderInputLinks)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.HasLinkedOps");

	USequenceOp_HasLinkedOps_Params params;
	params.bConsiderInputLinks = bConsiderInputLinks;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Sequence.SetEnabled
// ()
// Parameters:
// bool                           bInEnabled                     (Parm)

void USequence::SetEnabled(bool bInEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Sequence.SetEnabled");

	USequence_SetEnabled_Params params;
	params.bInEnabled = bInEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Sequence.Reset
// ()

void USequence::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Sequence.Reset");

	USequence_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Sequence.FindSeqObjectsByName
// ()
// Parameters:
// struct FString                 SeqObjName                     (Parm, NeedCtorLink)
// bool                           bCheckComment                  (Parm)
// TArray<class USequenceObject*> OutputObjects                  (Parm, OutParm, NeedCtorLink)
// bool                           bRecursive                     (OptionalParm, Parm)

void USequence::FindSeqObjectsByName(const struct FString& SeqObjName, bool bCheckComment, bool bRecursive, TArray<class USequenceObject*>* OutputObjects)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Sequence.FindSeqObjectsByName");

	USequence_FindSeqObjectsByName_Params params;
	params.SeqObjName = SeqObjName;
	params.bCheckComment = bCheckComment;
	params.bRecursive = bRecursive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutputObjects != nullptr)
		*OutputObjects = params.OutputObjects;
}


// Function Engine.Sequence.FindSeqObjectsByClass
// ()
// Parameters:
// class UClass*                  DesiredClass                   (Parm)
// bool                           bRecursive                     (Parm)
// TArray<class USequenceObject*> OutputObjects                  (Parm, OutParm, NeedCtorLink)

void USequence::FindSeqObjectsByClass(class UClass* DesiredClass, bool bRecursive, TArray<class USequenceObject*>* OutputObjects)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Sequence.FindSeqObjectsByClass");

	USequence_FindSeqObjectsByClass_Params params;
	params.DesiredClass = DesiredClass;
	params.bRecursive = bRecursive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutputObjects != nullptr)
		*OutputObjects = params.OutputObjects;
}


// Function Engine.PrefabSequence.GetOwnerPrefab
// ()
// Parameters:
// class APrefabInstance*         ReturnValue                    (Parm, OutParm, ReturnParm)

class APrefabInstance* UPrefabSequence::GetOwnerPrefab()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrefabSequence.GetOwnerPrefab");

	UPrefabSequence_GetOwnerPrefab_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrefabSequence.SetOwnerPrefab
// ()
// Parameters:
// class APrefabInstance*         InOwner                        (Parm)

void UPrefabSequence::SetOwnerPrefab(class APrefabInstance* InOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrefabSequence.SetOwnerPrefab");

	UPrefabSequence_SetOwnerPrefab_Params params;
	params.InOwner = InOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_ActivateRemoteEvent.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_ActivateRemoteEvent::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ActivateRemoteEvent.GetObjClassVersion");

	USeqAct_ActivateRemoteEvent_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_CameraFade.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_CameraFade::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_CameraFade.GetObjClassVersion");

	USeqAct_CameraFade_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_CameraLookAt.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_CameraLookAt::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_CameraLookAt.GetObjClassVersion");

	USeqAct_CameraLookAt_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_CameraShake.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_CameraShake::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_CameraShake.GetObjClassVersion");

	USeqAct_CameraShake_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_ChangeCollision.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_ChangeCollision::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ChangeCollision.GetObjClassVersion");

	USeqAct_ChangeCollision_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_ConvertToString.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_ConvertToString::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ConvertToString.GetObjClassVersion");

	USeqAct_ConvertToString_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_DrawText.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_DrawText::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_DrawText.GetObjClassVersion");

	USeqAct_DrawText_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_GetLocationAndRotation.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_GetLocationAndRotation::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_GetLocationAndRotation.GetObjClassVersion");

	USeqAct_GetLocationAndRotation_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_GetVelocity.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_GetVelocity::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_GetVelocity.GetObjClassVersion");

	USeqAct_GetVelocity_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Latent.Update
// ()
// Parameters:
// float                          DeltaTime                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqAct_Latent::Update(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Latent.Update");

	USeqAct_Latent_Update_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Latent.AbortFor
// ()
// Parameters:
// class AActor*                  latentActor                    (Parm)

void USeqAct_Latent::AbortFor(class AActor* latentActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Latent.AbortFor");

	USeqAct_Latent_AbortFor_Params params;
	params.latentActor = latentActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_ActorFactory.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_ActorFactory::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ActorFactory.GetObjClassVersion");

	USeqAct_ActorFactory_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_ProjectileFactory.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_ProjectileFactory::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ProjectileFactory.GetObjClassVersion");

	USeqAct_ProjectileFactory_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_AIMoveToActor.PickDestination
// ()
// Parameters:
// class AActor*                  Requestor                      (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* USeqAct_AIMoveToActor::PickDestination(class AActor* Requestor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_AIMoveToActor.PickDestination");

	USeqAct_AIMoveToActor_PickDestination_Params params;
	params.Requestor = Requestor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_AIMoveToActor.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_AIMoveToActor::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_AIMoveToActor.GetObjClassVersion");

	USeqAct_AIMoveToActor_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Delay.ResetDelayActive
// ()

void USeqAct_Delay::ResetDelayActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Delay.ResetDelayActive");

	USeqAct_Delay_ResetDelayActive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_Delay.Reset
// ()

void USeqAct_Delay::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Delay.Reset");

	USeqAct_Delay_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_Interp.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_Interp::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Interp.GetObjClassVersion");

	USeqAct_Interp_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Interp.Reset
// ()

void USeqAct_Interp::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Interp.Reset");

	USeqAct_Interp_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_Interp.AddPlayerToDirectorTracks
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)

void USeqAct_Interp::AddPlayerToDirectorTracks(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Interp.AddPlayerToDirectorTracks");

	USeqAct_Interp_AddPlayerToDirectorTracks_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_Interp.Stop
// ()

void USeqAct_Interp::Stop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Interp.Stop");

	USeqAct_Interp_Stop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_Interp.SetPosition
// ()
// Parameters:
// float                          NewPosition                    (Parm)
// bool                           bJump                          (OptionalParm, Parm)

void USeqAct_Interp::SetPosition(float NewPosition, bool bJump)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Interp.SetPosition");

	USeqAct_Interp_SetPosition_Params params;
	params.NewPosition = NewPosition;
	params.bJump = bJump;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_PlaySound.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_PlaySound::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_PlaySound.GetObjClassVersion");

	USeqAct_PlaySound_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_StreamInTextures.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_StreamInTextures::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_StreamInTextures.GetObjClassVersion");

	USeqAct_StreamInTextures_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Log.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_Log::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Log.GetObjClassVersion");

	USeqAct_Log_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_ModifyHealth.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_ModifyHealth::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ModifyHealth.GetObjClassVersion");

	USeqAct_ModifyHealth_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_ParticleEventGenerator.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_ParticleEventGenerator::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ParticleEventGenerator.GetObjClassVersion");

	USeqAct_ParticleEventGenerator_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_PlayCameraAnim.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_PlayCameraAnim::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_PlayCameraAnim.GetObjClassVersion");

	USeqAct_PlayCameraAnim_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_SetCameraTarget.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_SetCameraTarget::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetCameraTarget.GetObjClassVersion");

	USeqAct_SetCameraTarget_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_SetFloat.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_SetFloat::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetFloat.GetObjClassVersion");

	USeqAct_SetFloat_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_SetInt.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_SetInt::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetInt.GetObjClassVersion");

	USeqAct_SetInt_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_SetLocation.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_SetLocation::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetLocation.GetObjClassVersion");

	USeqAct_SetLocation_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_SetObject.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_SetObject::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetObject.GetObjClassVersion");

	USeqAct_SetObject_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_SetString.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_SetString::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetString.GetObjClassVersion");

	USeqAct_SetString_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_RandomSwitch.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_RandomSwitch::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_RandomSwitch.GetObjClassVersion");

	USeqAct_RandomSwitch_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Trace.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_Trace::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Trace.GetObjClassVersion");

	USeqAct_Trace_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_CompareBool.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqCond_CompareBool::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_CompareBool.GetObjClassVersion");

	USeqCond_CompareBool_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_GetServerType.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqCond_GetServerType::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_GetServerType.GetObjClassVersion");

	USeqCond_GetServerType_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_IsBenchmarking.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqCond_IsBenchmarking::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_IsBenchmarking.GetObjClassVersion");

	USeqCond_IsBenchmarking_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_IsLoggedIn.CheckLogins
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqCond_IsLoggedIn::CheckLogins()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_IsLoggedIn.CheckLogins");

	USeqCond_IsLoggedIn_CheckLogins_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_IsPIE.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqCond_IsPIE::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_IsPIE.GetObjClassVersion");

	USeqCond_IsPIE_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_SwitchBase.RemoveValueEntry
// ()
// Parameters:
// int                            RemoveIndex                    (Parm)

void USeqCond_SwitchBase::RemoveValueEntry(int RemoveIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchBase.RemoveValueEntry");

	USeqCond_SwitchBase_RemoveValueEntry_Params params;
	params.RemoveIndex = RemoveIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchBase.InsertValueEntry
// ()
// Parameters:
// int                            InsertIndex                    (Parm)

void USeqCond_SwitchBase::InsertValueEntry(int InsertIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchBase.InsertValueEntry");

	USeqCond_SwitchBase_InsertValueEntry_Params params;
	params.InsertIndex = InsertIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchBase.IsFallThruEnabled
// ()
// Parameters:
// int                            ValueIndex                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqCond_SwitchBase::IsFallThruEnabled(int ValueIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchBase.IsFallThruEnabled");

	USeqCond_SwitchBase_IsFallThruEnabled_Params params;
	params.ValueIndex = ValueIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_SwitchBase.VerifyDefaultCaseValue
// ()

void USeqCond_SwitchBase::VerifyDefaultCaseValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchBase.VerifyDefaultCaseValue");

	USeqCond_SwitchBase_VerifyDefaultCaseValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchClass.RemoveValueEntry
// ()
// Parameters:
// int                            RemoveIndex                    (Parm)

void USeqCond_SwitchClass::RemoveValueEntry(int RemoveIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchClass.RemoveValueEntry");

	USeqCond_SwitchClass_RemoveValueEntry_Params params;
	params.RemoveIndex = RemoveIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchClass.InsertValueEntry
// ()
// Parameters:
// int                            InsertIndex                    (Parm)

void USeqCond_SwitchClass::InsertValueEntry(int InsertIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchClass.InsertValueEntry");

	USeqCond_SwitchClass_InsertValueEntry_Params params;
	params.InsertIndex = InsertIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchClass.IsFallThruEnabled
// ()
// Parameters:
// int                            ValueIndex                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqCond_SwitchClass::IsFallThruEnabled(int ValueIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchClass.IsFallThruEnabled");

	USeqCond_SwitchClass_IsFallThruEnabled_Params params;
	params.ValueIndex = ValueIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_SwitchClass.VerifyDefaultCaseValue
// ()

void USeqCond_SwitchClass::VerifyDefaultCaseValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchClass.VerifyDefaultCaseValue");

	USeqCond_SwitchClass_VerifyDefaultCaseValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchObject.RemoveValueEntry
// ()
// Parameters:
// int                            RemoveIndex                    (Parm)

void USeqCond_SwitchObject::RemoveValueEntry(int RemoveIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchObject.RemoveValueEntry");

	USeqCond_SwitchObject_RemoveValueEntry_Params params;
	params.RemoveIndex = RemoveIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchObject.InsertValueEntry
// ()
// Parameters:
// int                            InsertIndex                    (Parm)

void USeqCond_SwitchObject::InsertValueEntry(int InsertIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchObject.InsertValueEntry");

	USeqCond_SwitchObject_InsertValueEntry_Params params;
	params.InsertIndex = InsertIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchObject.IsFallThruEnabled
// ()
// Parameters:
// int                            ValueIndex                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqCond_SwitchObject::IsFallThruEnabled(int ValueIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchObject.IsFallThruEnabled");

	USeqCond_SwitchObject_IsFallThruEnabled_Params params;
	params.ValueIndex = ValueIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_SwitchObject.VerifyDefaultCaseValue
// ()

void USeqCond_SwitchObject::VerifyDefaultCaseValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchObject.VerifyDefaultCaseValue");

	USeqCond_SwitchObject_VerifyDefaultCaseValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceEvent.Toggled
// ()

void USequenceEvent::Toggled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceEvent.Toggled");

	USequenceEvent_Toggled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceEvent.Reset
// ()

void USequenceEvent::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceEvent.Reset");

	USequenceEvent_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceEvent.CheckActivate
// ()
// Parameters:
// class AActor*                  InOriginator                   (Parm)
// class AActor*                  InInstigator                   (Parm)
// bool                           bTest                          (OptionalParm, Parm)
// TArray<int>                    ActivateIndices                (Const, OptionalParm, Parm, OutParm, NeedCtorLink)
// bool                           bPushTop                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USequenceEvent::CheckActivate(class AActor* InOriginator, class AActor* InInstigator, bool bTest, bool bPushTop, TArray<int>* ActivateIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceEvent.CheckActivate");

	USequenceEvent_CheckActivate_Params params;
	params.InOriginator = InOriginator;
	params.InInstigator = InInstigator;
	params.bTest = bTest;
	params.bPushTop = bPushTop;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ActivateIndices != nullptr)
		*ActivateIndices = params.ActivateIndices;

	return params.ReturnValue;
}


// Function Engine.SequenceEvent.RegisterEvent
// ()

void USequenceEvent::RegisterEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceEvent.RegisterEvent");

	USequenceEvent_RegisterEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_LevelLoaded.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqEvent_LevelLoaded::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_LevelLoaded.GetObjClassVersion");

	USeqEvent_LevelLoaded_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqEvent_Mover.NotifyFinishedOpen
// ()

void USeqEvent_Mover::NotifyFinishedOpen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Mover.NotifyFinishedOpen");

	USeqEvent_Mover_NotifyFinishedOpen_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_Mover.NotifyDetached
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void USeqEvent_Mover::NotifyDetached(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Mover.NotifyDetached");

	USeqEvent_Mover_NotifyDetached_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_Mover.NotifyAttached
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void USeqEvent_Mover::NotifyAttached(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Mover.NotifyAttached");

	USeqEvent_Mover_NotifyAttached_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_Mover.NotifyEncroachingOn
// ()
// Parameters:
// class AActor*                  Hit                            (Parm)

void USeqEvent_Mover::NotifyEncroachingOn(class AActor* Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Mover.NotifyEncroachingOn");

	USeqEvent_Mover_NotifyEncroachingOn_Params params;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_Mover.RegisterEvent
// ()

void USeqEvent_Mover::RegisterEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Mover.RegisterEvent");

	USeqEvent_Mover_RegisterEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_ParticleEvent.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqEvent_ParticleEvent::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_ParticleEvent.GetObjClassVersion");

	USeqEvent_ParticleEvent_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqEvent_RemoteEvent.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqEvent_RemoteEvent::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_RemoteEvent.GetObjClassVersion");

	USeqEvent_RemoteEvent_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqEvent_TakeDamage.Toggled
// ()

void USeqEvent_TakeDamage::Toggled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_TakeDamage.Toggled");

	USeqEvent_TakeDamage_Toggled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_TakeDamage.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqEvent_TakeDamage::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_TakeDamage.GetObjClassVersion");

	USeqEvent_TakeDamage_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqEvent_TakeDamage.Reset
// ()

void USeqEvent_TakeDamage::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_TakeDamage.Reset");

	USeqEvent_TakeDamage_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_TakeDamage.HandleDamage
// ()
// Parameters:
// class AActor*                  InOriginator                   (Parm)
// class AActor*                  InInstigator                   (Parm)
// class UClass*                  inDamageType                   (Parm)
// int                            inAmount                       (Parm)

void USeqEvent_TakeDamage::HandleDamage(class AActor* InOriginator, class AActor* InInstigator, class UClass* inDamageType, int inAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_TakeDamage.HandleDamage");

	USeqEvent_TakeDamage_HandleDamage_Params params;
	params.InOriginator = InOriginator;
	params.InInstigator = InInstigator;
	params.inDamageType = inDamageType;
	params.inAmount = inAmount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_TakeDamage.IsValidDamageType
// ()
// Parameters:
// class UClass*                  inDamageType                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqEvent_TakeDamage::IsValidDamageType(class UClass* inDamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_TakeDamage.IsValidDamageType");

	USeqEvent_TakeDamage_IsValidDamageType_Params params;
	params.inDamageType = inDamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqEvent_Touch.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqEvent_Touch::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Touch.GetObjClassVersion");

	USeqEvent_Touch_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqEvent_Touch.NotifyTouchingPawnDied
// ()
// Parameters:
// class APawn*                   P                              (Parm)

void USeqEvent_Touch::NotifyTouchingPawnDied(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Touch.NotifyTouchingPawnDied");

	USeqEvent_Touch_NotifyTouchingPawnDied_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_Touch.Toggled
// ()

void USeqEvent_Touch::Toggled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Touch.Toggled");

	USeqEvent_Touch_Toggled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_Touch.CheckUnTouchActivate
// ()
// Parameters:
// class AActor*                  InOriginator                   (Parm)
// class AActor*                  InInstigator                   (Parm)
// bool                           bTest                          (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqEvent_Touch::CheckUnTouchActivate(class AActor* InOriginator, class AActor* InInstigator, bool bTest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Touch.CheckUnTouchActivate");

	USeqEvent_Touch_CheckUnTouchActivate_Params params;
	params.InOriginator = InOriginator;
	params.InInstigator = InInstigator;
	params.bTest = bTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqEvent_Touch.CheckTouchActivate
// ()
// Parameters:
// class AActor*                  InOriginator                   (Parm)
// class AActor*                  InInstigator                   (Parm)
// bool                           bTest                          (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqEvent_Touch::CheckTouchActivate(class AActor* InOriginator, class AActor* InInstigator, bool bTest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Touch.CheckTouchActivate");

	USeqEvent_Touch_CheckTouchActivate_Params params;
	params.InOriginator = InOriginator;
	params.InInstigator = InInstigator;
	params.bTest = bTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqVar_Object.SetObjectValue
// ()
// Parameters:
// class UObject*                 NewValue                       (Parm)

void USeqVar_Object::SetObjectValue(class UObject* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_Object.SetObjectValue");

	USeqVar_Object_SetObjectValue_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqVar_Object.GetObjectValue
// ()
// Parameters:
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* USeqVar_Object::GetObjectValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_Object.GetObjectValue");

	USeqVar_Object_GetObjectValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqVar_ObjectList.SetObjectValue
// ()
// Parameters:
// class UObject*                 NewValue                       (Parm)

void USeqVar_ObjectList::SetObjectValue(class UObject* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_ObjectList.SetObjectValue");

	USeqVar_ObjectList_SetObjectValue_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqVar_ObjectList.GetObjectValue
// ()
// Parameters:
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* USeqVar_ObjectList::GetObjectValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_ObjectList.GetObjectValue");

	USeqVar_ObjectList_GetObjectValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqVar_Player.GetObjectValue
// ()
// Parameters:
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* USeqVar_Player::GetObjectValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_Player.GetObjectValue");

	USeqVar_Player_GetObjectValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqVar_Player.UpdatePlayersList
// ()

void USeqVar_Player::UpdatePlayersList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_Player.UpdatePlayersList");

	USeqVar_Player_UpdatePlayersList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AmbientSoundSimpleToggleable.ApplyCheckpointRecord
// ()
// Parameters:
// struct AAmbientSoundSimpleToggleable_FCheckpointRecord Record                         (Const, Parm, OutParm)

void AAmbientSoundSimpleToggleable::ApplyCheckpointRecord(struct AAmbientSoundSimpleToggleable_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.ApplyCheckpointRecord");

	AAmbientSoundSimpleToggleable_ApplyCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.AmbientSoundSimpleToggleable.CreateCheckpointRecord
// ()
// Parameters:
// struct AAmbientSoundSimpleToggleable_FCheckpointRecord Record                         (Parm, OutParm)

void AAmbientSoundSimpleToggleable::CreateCheckpointRecord(struct AAmbientSoundSimpleToggleable_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.CreateCheckpointRecord");

	AAmbientSoundSimpleToggleable_CreateCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.AmbientSoundSimpleToggleable.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void AAmbientSoundSimpleToggleable::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.OnToggle");

	AAmbientSoundSimpleToggleable_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AmbientSoundSimpleToggleable.StopPlaying
// ()

void AAmbientSoundSimpleToggleable::StopPlaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.StopPlaying");

	AAmbientSoundSimpleToggleable_StopPlaying_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AmbientSoundSimpleToggleable.StartPlaying
// ()

void AAmbientSoundSimpleToggleable::StartPlaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.StartPlaying");

	AAmbientSoundSimpleToggleable_StartPlaying_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AmbientSoundSimpleToggleable.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void AAmbientSoundSimpleToggleable::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.ReplicatedEvent");

	AAmbientSoundSimpleToggleable_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AmbientSoundSimpleToggleable.PostBeginPlay
// ()

void AAmbientSoundSimpleToggleable::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.PostBeginPlay");

	AAmbientSoundSimpleToggleable_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SoundNodeWave.GeneratePCMData
// ()
// Parameters:
// TArray<unsigned char>          Buffer                         (Parm, OutParm, NeedCtorLink)
// int                            SamplesNeeded                  (Parm)

void USoundNodeWave::GeneratePCMData(int SamplesNeeded, TArray<unsigned char>* Buffer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundNodeWave.GeneratePCMData");

	USoundNodeWave_GeneratePCMData_Params params;
	params.SamplesNeeded = SamplesNeeded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Buffer != nullptr)
		*Buffer = params.Buffer;
}


// Function Engine.SoundNodeWaveStreaming.GeneratePCMData
// ()
// Parameters:
// TArray<unsigned char>          Buffer                         (Parm, OutParm, NeedCtorLink)
// int                            SamplesNeeded                  (Parm)

void USoundNodeWaveStreaming::GeneratePCMData(int SamplesNeeded, TArray<unsigned char>* Buffer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundNodeWaveStreaming.GeneratePCMData");

	USoundNodeWaveStreaming_GeneratePCMData_Params params;
	params.SamplesNeeded = SamplesNeeded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Buffer != nullptr)
		*Buffer = params.Buffer;
}


// Function Engine.SoundNodeWaveStreaming.AvailableAudioBytes
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USoundNodeWaveStreaming::AvailableAudioBytes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundNodeWaveStreaming.AvailableAudioBytes");

	USoundNodeWaveStreaming_AvailableAudioBytes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SoundNodeWaveStreaming.ResetAudio
// ()

void USoundNodeWaveStreaming::ResetAudio()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundNodeWaveStreaming.ResetAudio");

	USoundNodeWaveStreaming_ResetAudio_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SoundNodeWaveStreaming.QueueAudio
// ()
// Parameters:
// TArray<unsigned char>          Data                           (Parm, NeedCtorLink)

void USoundNodeWaveStreaming::QueueAudio(TArray<unsigned char> Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundNodeWaveStreaming.QueueAudio");

	USoundNodeWaveStreaming_QueueAudio_Params params;
	params.Data = Data;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Terrain.PostBeginPlay
// ()

void ATerrain::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Terrain.PostBeginPlay");

	ATerrain_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Terrain.CalcLayerBounds
// ()

void ATerrain::CalcLayerBounds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Terrain.CalcLayerBounds");

	ATerrain_CalcLayerBounds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TerrainLayerSetup.PostBeginPlay
// ()

void UTerrainLayerSetup::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TerrainLayerSetup.PostBeginPlay");

	UTerrainLayerSetup_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DataStoreClient.DebugDumpDataStoreInfo
// ()
// Parameters:
// bool                           bVerbose                       (Parm)

void UDataStoreClient::DebugDumpDataStoreInfo(bool bVerbose)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.DebugDumpDataStoreInfo");

	UDataStoreClient_DebugDumpDataStoreInfo_Params params;
	params.bVerbose = bVerbose;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DataStoreClient.NotifyGameSessionEnded
// ()

void UDataStoreClient::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.NotifyGameSessionEnded");

	UDataStoreClient_NotifyGameSessionEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DataStoreClient.FindDataStoreClass
// ()
// Parameters:
// class UClass*                  RequiredMetaClass              (Parm)
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* UDataStoreClient::FindDataStoreClass(class UClass* RequiredMetaClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.FindDataStoreClass");

	UDataStoreClient_FindDataStoreClass_Params params;
	params.RequiredMetaClass = RequiredMetaClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DataStoreClient.GetPlayerDataStoreClasses
// ()
// Parameters:
// TArray<class UClass*>          out_DataStoreClasses           (Parm, OutParm, NeedCtorLink)

void UDataStoreClient::GetPlayerDataStoreClasses(TArray<class UClass*>* out_DataStoreClasses)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.GetPlayerDataStoreClasses");

	UDataStoreClient_GetPlayerDataStoreClasses_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_DataStoreClasses != nullptr)
		*out_DataStoreClasses = params.out_DataStoreClasses;
}


// Function Engine.DataStoreClient.FindPlayerDataStoreIndex
// ()
// Parameters:
// class ULocalPlayer*            PlayerOwner                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UDataStoreClient::FindPlayerDataStoreIndex(class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.FindPlayerDataStoreIndex");

	UDataStoreClient_FindPlayerDataStoreIndex_Params params;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DataStoreClient.UnregisterDataStore
// ()
// Parameters:
// class UUIDataStore*            DataStore                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UDataStoreClient::UnregisterDataStore(class UUIDataStore* DataStore)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.UnregisterDataStore");

	UDataStoreClient_UnregisterDataStore_Params params;
	params.DataStore = DataStore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DataStoreClient.RegisterDataStore
// ()
// Parameters:
// class UUIDataStore*            DataStore                      (Parm)
// class ULocalPlayer*            PlayerOwner                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UDataStoreClient::RegisterDataStore(class UUIDataStore* DataStore, class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.RegisterDataStore");

	UDataStoreClient_RegisterDataStore_Params params;
	params.DataStore = DataStore;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DataStoreClient.CreateDataStore
// ()
// Parameters:
// class UClass*                  DataStoreClass                 (Parm)
// class UUIDataStore*            ReturnValue                    (Parm, OutParm, ReturnParm, CoerceParm)

class UUIDataStore* UDataStoreClient::CreateDataStore(class UClass* DataStoreClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.CreateDataStore");

	UDataStoreClient_CreateDataStore_Params params;
	params.DataStoreClass = DataStoreClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DataStoreClient.FindDataStore
// ()
// Parameters:
// struct FName                   DataStoreTag                   (Parm)
// class ULocalPlayer*            PlayerOwner                    (OptionalParm, Parm)
// class UUIDataStore*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIDataStore* UDataStoreClient::FindDataStore(const struct FName& DataStoreTag, class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.FindDataStore");

	UDataStoreClient_FindDataStore_Params params;
	params.DataStoreTag = DataStoreTag;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Console.UpdateCompleteIndices
// ()

void UConsole::UpdateCompleteIndices()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.UpdateCompleteIndices");

	UConsole_UpdateCompleteIndices_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.BuildRuntimeAutoCompleteList
// ()
// Parameters:
// bool                           bForce                         (OptionalParm, Parm)

void UConsole::BuildRuntimeAutoCompleteList(bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.BuildRuntimeAutoCompleteList");

	UConsole_BuildRuntimeAutoCompleteList_Params params;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.AppendInputText
// ()
// Parameters:
// struct FString                 Text                           (Parm, NeedCtorLink)

void UConsole::AppendInputText(const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.AppendInputText");

	UConsole_AppendInputText_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.ProcessControlKey
// ()
// Parameters:
// struct FName                   Key                            (Parm)
// TEnumAsByte<EInputEvent>       Event                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UConsole::ProcessControlKey(const struct FName& Key, TEnumAsByte<EInputEvent> Event)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.ProcessControlKey");

	UConsole_ProcessControlKey_Params params;
	params.Key = Key;
	params.Event = Event;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Console.FlushPlayerInput
// ()

void UConsole::FlushPlayerInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.FlushPlayerInput");

	UConsole_FlushPlayerInput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.InputChar
// ()
// Parameters:
// int                            ControllerId                   (Parm)
// struct FString                 Unicode                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UConsole::InputChar(int ControllerId, const struct FString& Unicode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.InputChar");

	UConsole_InputChar_Params params;
	params.ControllerId = ControllerId;
	params.Unicode = Unicode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Console.InputKey
// ()
// Parameters:
// int                            ControllerId                   (Parm)
// struct FName                   Key                            (Parm)
// TEnumAsByte<EInputEvent>       Event                          (Parm)
// float                          AmountDepressed                (OptionalParm, Parm)
// bool                           bGamepad                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UConsole::InputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> Event, float AmountDepressed, bool bGamepad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.InputKey");

	UConsole_InputKey_Params params;
	params.ControllerId = ControllerId;
	params.Key = Key;
	params.Event = Event;
	params.AmountDepressed = AmountDepressed;
	params.bGamepad = bGamepad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Console.PostRender_Console
// ()
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void UConsole::PostRender_Console(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.PostRender_Console");

	UConsole_PostRender_Console_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.StartTyping
// ()
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)

void UConsole::StartTyping(const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.StartTyping");

	UConsole_StartTyping_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.OutputText
// ()
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)

void UConsole::OutputText(const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.OutputText");

	UConsole_OutputText_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.OutputTextLine
// ()
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)

void UConsole::OutputTextLine(const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.OutputTextLine");

	UConsole_OutputTextLine_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.ClearOutput
// ()

void UConsole::ClearOutput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.ClearOutput");

	UConsole_ClearOutput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.ConsoleCommand
// ()
// Parameters:
// struct FString                 Command                        (Parm, NeedCtorLink)

void UConsole::ConsoleCommand(const struct FString& Command)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.ConsoleCommand");

	UConsole_ConsoleCommand_Params params;
	params.Command = Command;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.PurgeCommandFromHistory
// ()
// Parameters:
// struct FString                 Command                        (Parm, NeedCtorLink)

void UConsole::PurgeCommandFromHistory(const struct FString& Command)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.PurgeCommandFromHistory");

	UConsole_PurgeCommandFromHistory_Params params;
	params.Command = Command;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.SetCursorPos
// ()
// Parameters:
// int                            Position                       (Parm)

void UConsole::SetCursorPos(int Position)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.SetCursorPos");

	UConsole_SetCursorPos_Params params;
	params.Position = Position;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.SetInputText
// ()
// Parameters:
// struct FString                 Text                           (Parm, NeedCtorLink)

void UConsole::SetInputText(const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.SetInputText");

	UConsole_SetInputText_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.Initialized
// ()

void UConsole::Initialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.Initialized");

	UConsole_Initialized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Input.SetBind
// ()
// Parameters:
// struct FName                   BindName                       (Const, Parm, OutParm)
// struct FString                 Command                        (Parm, NeedCtorLink)

void UInput::SetBind(const struct FString& Command, struct FName* BindName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Input.SetBind");

	UInput_SetBind_Params params;
	params.Command = Command;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (BindName != nullptr)
		*BindName = params.BindName;
}


// Function Engine.Input.GetBind
// ()
// Parameters:
// struct FName                   Key                            (Const, Parm, OutParm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UInput::GetBind(struct FName* Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Input.GetBind");

	UInput_GetBind_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Key != nullptr)
		*Key = params.Key;

	return params.ReturnValue;
}


// Function Engine.Input.ResetInput
// ()

void UInput::ResetInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Input.ResetInput");

	UInput_ResetInput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.PreClientTravel
// ()
// Parameters:
// struct FString                 PendingURL                     (Parm, NeedCtorLink)
// TEnumAsByte<ETravelType>       TravelType                     (Parm)
// bool                           bIsSeamlessTravel              (Parm)

void UPlayerInput::PreClientTravel(const struct FString& PendingURL, TEnumAsByte<ETravelType> TravelType, bool bIsSeamlessTravel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.PreClientTravel");

	UPlayerInput_PreClientTravel_Params params;
	params.PendingURL = PendingURL;
	params.TravelType = TravelType;
	params.bIsSeamlessTravel = bIsSeamlessTravel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.ClientInitInputSystem
// ()

void UPlayerInput::ClientInitInputSystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.ClientInitInputSystem");

	UPlayerInput_ClientInitInputSystem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.InitInputSystem
// ()

void UPlayerInput::InitInputSystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InitInputSystem");

	UPlayerInput_InitInputSystem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.SmoothMouse
// ()
// Parameters:
// float                          aMouse                         (Parm)
// float                          DeltaTime                      (Parm)
// unsigned char                  SampleCount                    (Parm, OutParm)
// int                            Index                          (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UPlayerInput::SmoothMouse(float aMouse, float DeltaTime, int Index, unsigned char* SampleCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SmoothMouse");

	UPlayerInput_SmoothMouse_Params params;
	params.aMouse = aMouse;
	params.DeltaTime = DeltaTime;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SampleCount != nullptr)
		*SampleCount = params.SampleCount;

	return params.ReturnValue;
}


// Function Engine.PlayerInput.ClearSmoothing
// ()

void UPlayerInput::ClearSmoothing()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.ClearSmoothing");

	UPlayerInput_ClearSmoothing_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.SmartJump
// ()

void UPlayerInput::SmartJump()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SmartJump");

	UPlayerInput_SmartJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.Jump
// ()

void UPlayerInput::Jump()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.Jump");

	UPlayerInput_Jump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.ProcessInputMatching
// ()
// Parameters:
// float                          DeltaTime                      (Parm)

void UPlayerInput::ProcessInputMatching(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.ProcessInputMatching");

	UPlayerInput_ProcessInputMatching_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.CheckForDoubleClickMove
// ()
// Parameters:
// float                          DeltaTime                      (Parm)
// TEnumAsByte<EDoubleClickDir>   ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EDoubleClickDir> UPlayerInput::CheckForDoubleClickMove(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.CheckForDoubleClickMove");

	UPlayerInput_CheckForDoubleClickMove_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerInput.CatchDoubleClickInput
// ()

void UPlayerInput::CatchDoubleClickInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.CatchDoubleClickInput");

	UPlayerInput_CatchDoubleClickInput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.PlayerInput
// ()
// Parameters:
// float                          DeltaTime                      (Parm)

void UPlayerInput::PlayerInput(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.PlayerInput");

	UPlayerInput_PlayerInput_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.AdjustMouseSensitivity
// ()
// Parameters:
// float                          FOVScale                       (Parm)

void UPlayerInput::AdjustMouseSensitivity(float FOVScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.AdjustMouseSensitivity");

	UPlayerInput_AdjustMouseSensitivity_Params params;
	params.FOVScale = FOVScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.PostProcessInput
// ()
// Parameters:
// float                          DeltaTime                      (Parm)

void UPlayerInput::PostProcessInput(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.PostProcessInput");

	UPlayerInput_PostProcessInput_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.PreProcessInput
// ()
// Parameters:
// float                          DeltaTime                      (Parm)

void UPlayerInput::PreProcessInput(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.PreProcessInput");

	UPlayerInput_PreProcessInput_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.DrawHUD
// ()
// Parameters:
// class AHUD*                    H                              (Parm)

void UPlayerInput::DrawHUD(class AHUD* H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.DrawHUD");

	UPlayerInput_DrawHUD_Params params;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.SetSensitivity
// ()
// Parameters:
// float                          F                              (Parm)

void UPlayerInput::SetSensitivity(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SetSensitivity");

	UPlayerInput_SetSensitivity_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.InvertTurn
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPlayerInput::InvertTurn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InvertTurn");

	UPlayerInput_InvertTurn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerInput.InvertMouse
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPlayerInput::InvertMouse()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InvertMouse");

	UPlayerInput_InvertMouse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISceneClient.InitializeSceneClient
// ()

void UUISceneClient::InitializeSceneClient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.InitializeSceneClient");

	UUISceneClient_InitializeSceneClient_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UISceneClient.GetInverseCanvasToScreen
// ()
// Parameters:
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FMatrix UUISceneClient::GetInverseCanvasToScreen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.GetInverseCanvasToScreen");

	UUISceneClient_GetInverseCanvasToScreen_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISceneClient.GetCanvasToScreen
// ()
// Parameters:
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FMatrix UUISceneClient::GetCanvasToScreen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.GetCanvasToScreen");

	UUISceneClient_GetCanvasToScreen_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISceneClient.IsUIActive
// ()
// Parameters:
// int                            Flags                          (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUISceneClient::IsUIActive(int Flags)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.IsUIActive");

	UUISceneClient_IsUIActive_Params params;
	params.Flags = Flags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISoundTheme.ProcessSoundEvent
// ()
// Parameters:
// struct FName                   SoundEventName                 (Parm)
// class APlayerController*       SoundOwner                     (OptionalParm, Parm)

void UUISoundTheme::ProcessSoundEvent(const struct FName& SoundEventName, class APlayerController* SoundOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISoundTheme.ProcessSoundEvent");

	UUISoundTheme_ProcessSoundEvent_Params params;
	params.SoundEventName = SoundEventName;
	params.SoundOwner = SoundOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStoreSubscriber.ClearBoundDataStores
// ()

void UUIDataStoreSubscriber::ClearBoundDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.ClearBoundDataStores");

	UUIDataStoreSubscriber_ClearBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStoreSubscriber.GetBoundDataStores
// ()
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)

void UUIDataStoreSubscriber::GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.GetBoundDataStores");

	UUIDataStoreSubscriber_GetBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;
}


// Function Engine.UIDataStoreSubscriber.NotifyDataStoreValueUpdated
// ()
// Parameters:
// class UUIDataStore*            SourceDataStore                (Parm)
// bool                           bValuesInvalidated             (Parm)
// struct FName                   PropertyTag                    (Parm)
// class UUIDataProvider*         SourceProvider                 (Parm)
// int                            ArrayIndex                     (Parm)

void UUIDataStoreSubscriber::NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.NotifyDataStoreValueUpdated");

	UUIDataStoreSubscriber_NotifyDataStoreValueUpdated_Params params;
	params.SourceDataStore = SourceDataStore;
	params.bValuesInvalidated = bValuesInvalidated;
	params.PropertyTag = PropertyTag;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStoreSubscriber.RefreshSubscriberValue
// ()
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStoreSubscriber::RefreshSubscriberValue(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.RefreshSubscriberValue");

	UUIDataStoreSubscriber_RefreshSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStoreSubscriber.GetDataStoreBinding
// ()
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIDataStoreSubscriber::GetDataStoreBinding(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.GetDataStoreBinding");

	UUIDataStoreSubscriber_GetDataStoreBinding_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStoreSubscriber.SetDataStoreBinding
// ()
// Parameters:
// struct FString                 MarkupText                     (Parm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)

void UUIDataStoreSubscriber::SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.SetDataStoreBinding");

	UUIDataStoreSubscriber_SetDataStoreBinding_Params params;
	params.MarkupText = MarkupText;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStorePublisher.SaveSubscriberValue
// ()
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStorePublisher::SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStorePublisher.SaveSubscriberValue");

	UUIDataStorePublisher_SaveSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider.ParseTagArrayDelimiter
// ()
// Parameters:
// struct FName                   FieldName                      (Parm, OutParm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDataProvider::ParseTagArrayDelimiter(struct FName* FieldName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.ParseTagArrayDelimiter");

	UUIDataProvider_ParseTagArrayDelimiter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FieldName != nullptr)
		*FieldName = params.FieldName;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider.RemovePropertyNotificationChangeRequest
// ()
// Parameters:
// struct FScriptDelegate         InDelegate                     (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataProvider::RemovePropertyNotificationChangeRequest(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.RemovePropertyNotificationChangeRequest");

	UUIDataProvider_RemovePropertyNotificationChangeRequest_Params params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider.AddPropertyNotificationChangeRequest
// ()
// Parameters:
// struct FScriptDelegate         InDelegate                     (Parm, NeedCtorLink)
// bool                           bAllowDuplicates               (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataProvider::AddPropertyNotificationChangeRequest(const struct FScriptDelegate& InDelegate, bool bAllowDuplicates)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.AddPropertyNotificationChangeRequest");

	UUIDataProvider_AddPropertyNotificationChangeRequest_Params params;
	params.InDelegate = InDelegate;
	params.bAllowDuplicates = bAllowDuplicates;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider.NotifyPropertyChanged
// ()
// Parameters:
// struct FName                   PropTag                        (OptionalParm, Parm)

void UUIDataProvider::NotifyPropertyChanged(const struct FName& PropTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.NotifyPropertyChanged");

	UUIDataProvider_NotifyPropertyChanged_Params params;
	params.PropTag = PropTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider.IsCollectionDataType
// ()
// Parameters:
// TEnumAsByte<EUIDataProviderFieldType> FieldType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataProvider::IsCollectionDataType(TEnumAsByte<EUIDataProviderFieldType> FieldType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.IsCollectionDataType");

	UUIDataProvider_IsCollectionDataType_Params params;
	params.FieldType = FieldType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider.IsProviderDisabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataProvider::IsProviderDisabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.IsProviderDisabled");

	UUIDataProvider_IsProviderDisabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider.GenerateFillerData
// ()
// Parameters:
// struct FString                 DataTag                        (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIDataProvider::GenerateFillerData(const struct FString& DataTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.GenerateFillerData");

	UUIDataProvider_GenerateFillerData_Params params;
	params.DataTag = DataTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider.GenerateScriptMarkupString
// ()
// Parameters:
// struct FName                   DataTag                        (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIDataProvider::GenerateScriptMarkupString(const struct FName& DataTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.GenerateScriptMarkupString");

	UUIDataProvider_GenerateScriptMarkupString_Params params;
	params.DataTag = DataTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider.SetFieldValue
// ()
// Parameters:
// struct FString                 FieldName                      (Parm, NeedCtorLink)
// struct FUIProviderScriptFieldValue FieldValue                     (Const, Parm, OutParm, NeedCtorLink)
// int                            ArrayIndex                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataProvider::SetFieldValue(const struct FString& FieldName, int ArrayIndex, struct FUIProviderScriptFieldValue* FieldValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.SetFieldValue");

	UUIDataProvider_SetFieldValue_Params params;
	params.FieldName = FieldName;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FieldValue != nullptr)
		*FieldValue = params.FieldValue;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider.GetFieldValue
// ()
// Parameters:
// struct FString                 FieldName                      (Parm, NeedCtorLink)
// struct FUIProviderScriptFieldValue FieldValue                     (Parm, OutParm, NeedCtorLink)
// int                            ArrayIndex                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataProvider::GetFieldValue(const struct FString& FieldName, int ArrayIndex, struct FUIProviderScriptFieldValue* FieldValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.GetFieldValue");

	UUIDataProvider_GetFieldValue_Params params;
	params.FieldName = FieldName;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FieldValue != nullptr)
		*FieldValue = params.FieldValue;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider.AllowPublishingToField
// ()
// Parameters:
// struct FString                 FieldName                      (Parm, NeedCtorLink)
// int                            ArrayIndex                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataProvider::AllowPublishingToField(const struct FString& FieldName, int ArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.AllowPublishingToField");

	UUIDataProvider_AllowPublishingToField_Params params;
	params.FieldName = FieldName;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider.GetSupportedScriptFields
// ()
// Parameters:
// TArray<struct FUIDataProviderField> out_Fields                     (Parm, OutParm, NeedCtorLink)

void UUIDataProvider::GetSupportedScriptFields(TArray<struct FUIDataProviderField>* out_Fields)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.GetSupportedScriptFields");

	UUIDataProvider_GetSupportedScriptFields_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Fields != nullptr)
		*out_Fields = params.out_Fields;
}


// Function Engine.UIDataProvider.ParseArrayDelimiter
// ()
// Parameters:
// struct FString                 DataTag                        (Parm, OutParm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDataProvider::ParseArrayDelimiter(struct FString* DataTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.ParseArrayDelimiter");

	UUIDataProvider_ParseArrayDelimiter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DataTag != nullptr)
		*DataTag = params.DataTag;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider.GetProviderFieldType
// ()
// Parameters:
// struct FString                 DataTag                        (Parm, CoerceParm, NeedCtorLink)
// TEnumAsByte<EUIDataProviderFieldType> out_ProviderFieldType          (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataProvider::GetProviderFieldType(const struct FString& DataTag, TEnumAsByte<EUIDataProviderFieldType>* out_ProviderFieldType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.GetProviderFieldType");

	UUIDataProvider_GetProviderFieldType_Params params;
	params.DataTag = DataTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ProviderFieldType != nullptr)
		*out_ProviderFieldType = params.out_ProviderFieldType;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider.OnDataProviderPropertyChange
// ()
// Parameters:
// class UUIDataProvider*         SourceProvider                 (Parm)
// struct FName                   PropTag                        (OptionalParm, Parm)

void UUIDataProvider::OnDataProviderPropertyChange(class UUIDataProvider* SourceProvider, const struct FName& PropTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.OnDataProviderPropertyChange");

	UUIDataProvider_OnDataProviderPropertyChange_Params params;
	params.SourceProvider = SourceProvider;
	params.PropTag = PropTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerDataBase.OnUnregister
// ()

void UUIDataProvider_OnlinePlayerDataBase::OnUnregister()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerDataBase.OnUnregister");

	UUIDataProvider_OnlinePlayerDataBase_OnUnregister_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerDataBase.OnRegister
// ()
// Parameters:
// class ULocalPlayer*            InPlayer                       (Parm)

void UUIDataProvider_OnlinePlayerDataBase::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerDataBase.OnRegister");

	UUIDataProvider_OnlinePlayerDataBase_OnRegister_Params params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriendMessages.OnGameInviteReceived
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 InviterName                    (Parm, NeedCtorLink)

void UUIDataProvider_OnlineFriendMessages::OnGameInviteReceived(unsigned char LocalUserNum, const struct FString& InviterName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnGameInviteReceived");

	UUIDataProvider_OnlineFriendMessages_OnGameInviteReceived_Params params;
	params.LocalUserNum = LocalUserNum;
	params.InviterName = InviterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriendMessages.OnLoginChange
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)

void UUIDataProvider_OnlineFriendMessages::OnLoginChange(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnLoginChange");

	UUIDataProvider_OnlineFriendMessages_OnLoginChange_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendMessageReceived
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            SendingPlayer                  (Parm)
// struct FString                 SendingNick                    (Parm, NeedCtorLink)
// struct FString                 Message                        (Parm, NeedCtorLink)

void UUIDataProvider_OnlineFriendMessages::OnFriendMessageReceived(unsigned char LocalUserNum, const struct FUniqueNetId& SendingPlayer, const struct FString& SendingNick, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendMessageReceived");

	UUIDataProvider_OnlineFriendMessages_OnFriendMessageReceived_Params params;
	params.LocalUserNum = LocalUserNum;
	params.SendingPlayer = SendingPlayer;
	params.SendingNick = SendingNick;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendInviteReceived
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            RequestingPlayer               (Parm)
// struct FString                 RequestingNick                 (Parm, NeedCtorLink)
// struct FString                 Message                        (Parm, NeedCtorLink)

void UUIDataProvider_OnlineFriendMessages::OnFriendInviteReceived(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer, const struct FString& RequestingNick, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendInviteReceived");

	UUIDataProvider_OnlineFriendMessages_OnFriendInviteReceived_Params params;
	params.LocalUserNum = LocalUserNum;
	params.RequestingPlayer = RequestingPlayer;
	params.RequestingNick = RequestingNick;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriendMessages.ReadMessages
// ()

void UUIDataProvider_OnlineFriendMessages::ReadMessages()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.ReadMessages");

	UUIDataProvider_OnlineFriendMessages_ReadMessages_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriendMessages.OnUnregister
// ()

void UUIDataProvider_OnlineFriendMessages::OnUnregister()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnUnregister");

	UUIDataProvider_OnlineFriendMessages_OnUnregister_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriendMessages.OnRegister
// ()
// Parameters:
// class ULocalPlayer*            InPlayer                       (Parm)

void UUIDataProvider_OnlineFriendMessages::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnRegister");

	UUIDataProvider_OnlineFriendMessages_OnRegister_Params params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriends.RefreshFriendsList
// ()

void UUIDataProvider_OnlineFriends::RefreshFriendsList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriends.RefreshFriendsList");

	UUIDataProvider_OnlineFriends_RefreshFriendsList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriends.OnLoginChange
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)

void UUIDataProvider_OnlineFriends::OnLoginChange(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriends.OnLoginChange");

	UUIDataProvider_OnlineFriends_OnLoginChange_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriends.OnFriendsReadComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UUIDataProvider_OnlineFriends::OnFriendsReadComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriends.OnFriendsReadComplete");

	UUIDataProvider_OnlineFriends_OnFriendsReadComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriends.OnUnregister
// ()

void UUIDataProvider_OnlineFriends::OnUnregister()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriends.OnUnregister");

	UUIDataProvider_OnlineFriends_OnUnregister_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriends.OnRegister
// ()
// Parameters:
// class ULocalPlayer*            InPlayer                       (Parm)

void UUIDataProvider_OnlineFriends::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriends.OnRegister");

	UUIDataProvider_OnlineFriends_OnRegister_Params params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePartyChatList.RefreshMembersList
// ()

void UUIDataProvider_OnlinePartyChatList::RefreshMembersList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePartyChatList.RefreshMembersList");

	UUIDataProvider_OnlinePartyChatList_RefreshMembersList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePartyChatList.OnLoginChange
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)

void UUIDataProvider_OnlinePartyChatList::OnLoginChange(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePartyChatList.OnLoginChange");

	UUIDataProvider_OnlinePartyChatList_OnLoginChange_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePartyChatList.OnUnregister
// ()

void UUIDataProvider_OnlinePartyChatList::OnUnregister()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePartyChatList.OnUnregister");

	UUIDataProvider_OnlinePartyChatList_OnUnregister_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePartyChatList.OnRegister
// ()
// Parameters:
// class ULocalPlayer*            InPlayer                       (Parm)

void UUIDataProvider_OnlinePartyChatList::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePartyChatList.OnRegister");

	UUIDataProvider_OnlinePartyChatList_OnRegister_Params params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.OnExternalUIChange
// ()
// Parameters:
// bool                           bIsOpening                     (Parm)

void UUIDataProvider_OnlinePlayerStorage::OnExternalUIChange(bool bIsOpening)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnExternalUIChange");

	UUIDataProvider_OnlinePlayerStorage_OnExternalUIChange_Params params;
	params.bIsOpening = bIsOpening;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.OnStorageDeviceChange
// ()

void UUIDataProvider_OnlinePlayerStorage::OnStorageDeviceChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnStorageDeviceChange");

	UUIDataProvider_OnlinePlayerStorage_OnStorageDeviceChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.OnSettingValueUpdated
// ()
// Parameters:
// struct FName                   SettingName                    (Parm)

void UUIDataProvider_OnlinePlayerStorage::OnSettingValueUpdated(const struct FName& SettingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnSettingValueUpdated");

	UUIDataProvider_OnlinePlayerStorage_OnSettingValueUpdated_Params params;
	params.SettingName = SettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.ArrayProviderPropertyChanged
// ()
// Parameters:
// class UUIDataProvider*         SourceProvider                 (Parm)
// struct FName                   PropTag                        (OptionalParm, Parm)

void UUIDataProvider_OnlinePlayerStorage::ArrayProviderPropertyChanged(class UUIDataProvider* SourceProvider, const struct FName& PropTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.ArrayProviderPropertyChanged");

	UUIDataProvider_OnlinePlayerStorage_ArrayProviderPropertyChanged_Params params;
	params.SourceProvider = SourceProvider;
	params.PropTag = PropTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.OnDeviceSelectionComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UUIDataProvider_OnlinePlayerStorage::OnDeviceSelectionComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnDeviceSelectionComplete");

	UUIDataProvider_OnlinePlayerStorage_OnDeviceSelectionComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.ShowDeviceSelection
// ()

void UUIDataProvider_OnlinePlayerStorage::ShowDeviceSelection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.ShowDeviceSelection");

	UUIDataProvider_OnlinePlayerStorage_ShowDeviceSelection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.RefreshStorageData
// ()

void UUIDataProvider_OnlinePlayerStorage::RefreshStorageData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.RefreshStorageData");

	UUIDataProvider_OnlinePlayerStorage_RefreshStorageData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.OnLoginChange
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)

void UUIDataProvider_OnlinePlayerStorage::OnLoginChange(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnLoginChange");

	UUIDataProvider_OnlinePlayerStorage_OnLoginChange_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.OnReadStorageComplete
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           bWasSuccessful                 (Parm)

void UUIDataProvider_OnlinePlayerStorage::OnReadStorageComplete(unsigned char LocalUserNum, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnReadStorageComplete");

	UUIDataProvider_OnlinePlayerStorage_OnReadStorageComplete_Params params;
	params.LocalUserNum = LocalUserNum;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.OnUnregister
// ()

void UUIDataProvider_OnlinePlayerStorage::OnUnregister()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnUnregister");

	UUIDataProvider_OnlinePlayerStorage_OnUnregister_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.OnRegister
// ()
// Parameters:
// class ULocalPlayer*            InPlayer                       (Parm)

void UUIDataProvider_OnlinePlayerStorage::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnRegister");

	UUIDataProvider_OnlinePlayerStorage_OnRegister_Params params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.ClearReadCompleteDelegate
// ()
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> PlayerInterface                (Parm)
// unsigned char                  LocalUserNum                   (Parm)

void UUIDataProvider_OnlinePlayerStorage::ClearReadCompleteDelegate(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.ClearReadCompleteDelegate");

	UUIDataProvider_OnlinePlayerStorage_ClearReadCompleteDelegate_Params params;
	params.PlayerInterface = PlayerInterface;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.AddReadCompleteDelegate
// ()
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> PlayerInterface                (Parm)
// unsigned char                  LocalUserNum                   (Parm)

void UUIDataProvider_OnlinePlayerStorage::AddReadCompleteDelegate(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.AddReadCompleteDelegate");

	UUIDataProvider_OnlinePlayerStorage_AddReadCompleteDelegate_Params params;
	params.PlayerInterface = PlayerInterface;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.GetData
// ()
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> PlayerInterface                (Parm)
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataProvider_OnlinePlayerStorage::GetData(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.GetData");

	UUIDataProvider_OnlinePlayerStorage_GetData_Params params;
	params.PlayerInterface = PlayerInterface;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.WriteData
// ()
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> PlayerInterface                (Parm)
// unsigned char                  LocalUserNum                   (Parm)
// int                            DeviceID                       (Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataProvider_OnlinePlayerStorage::WriteData(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.WriteData");

	UUIDataProvider_OnlinePlayerStorage_WriteData_Params params;
	params.PlayerInterface = PlayerInterface;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.PlayerStorage = PlayerStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.ReadData
// ()
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> PlayerInterface                (Parm)
// unsigned char                  LocalUserNum                   (Parm)
// int                            DeviceID                       (Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataProvider_OnlinePlayerStorage::ReadData(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.ReadData");

	UUIDataProvider_OnlinePlayerStorage_ReadData_Params params;
	params.PlayerInterface = PlayerInterface;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.PlayerStorage = PlayerStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider_OnlineProfileSettings.RefreshStorageData
// ()

void UUIDataProvider_OnlineProfileSettings::RefreshStorageData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.RefreshStorageData");

	UUIDataProvider_OnlineProfileSettings_RefreshStorageData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineProfileSettings.ClearReadCompleteDelegate
// ()
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> PlayerInterface                (Parm)
// unsigned char                  LocalUserNum                   (Parm)

void UUIDataProvider_OnlineProfileSettings::ClearReadCompleteDelegate(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.ClearReadCompleteDelegate");

	UUIDataProvider_OnlineProfileSettings_ClearReadCompleteDelegate_Params params;
	params.PlayerInterface = PlayerInterface;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineProfileSettings.AddReadCompleteDelegate
// ()
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> PlayerInterface                (Parm)
// unsigned char                  LocalUserNum                   (Parm)

void UUIDataProvider_OnlineProfileSettings::AddReadCompleteDelegate(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.AddReadCompleteDelegate");

	UUIDataProvider_OnlineProfileSettings_AddReadCompleteDelegate_Params params;
	params.PlayerInterface = PlayerInterface;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineProfileSettings.GetData
// ()
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> PlayerInterface                (Parm)
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataProvider_OnlineProfileSettings::GetData(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.GetData");

	UUIDataProvider_OnlineProfileSettings_GetData_Params params;
	params.PlayerInterface = PlayerInterface;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider_OnlineProfileSettings.WriteData
// ()
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> PlayerInterface                (Parm)
// unsigned char                  LocalUserNum                   (Parm)
// int                            DeviceID                       (Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataProvider_OnlineProfileSettings::WriteData(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.WriteData");

	UUIDataProvider_OnlineProfileSettings_WriteData_Params params;
	params.PlayerInterface = PlayerInterface;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.PlayerStorage = PlayerStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider_OnlineProfileSettings.ReadData
// ()
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> PlayerInterface                (Parm)
// unsigned char                  LocalUserNum                   (Parm)
// int                            DeviceID                       (Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataProvider_OnlineProfileSettings::ReadData(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.ReadData");

	UUIDataProvider_OnlineProfileSettings_ReadData_Params params;
	params.PlayerInterface = PlayerInterface;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.PlayerStorage = PlayerStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider_PlayerAchievements.UpdateAchievements
// ()

void UUIDataProvider_PlayerAchievements::UpdateAchievements()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.UpdateAchievements");

	UUIDataProvider_PlayerAchievements_UpdateAchievements_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_PlayerAchievements.OnLoginChange
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)

void UUIDataProvider_PlayerAchievements::OnLoginChange(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.OnLoginChange");

	UUIDataProvider_PlayerAchievements_OnLoginChange_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_PlayerAchievements.OnUnregister
// ()

void UUIDataProvider_PlayerAchievements::OnUnregister()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.OnUnregister");

	UUIDataProvider_PlayerAchievements_OnUnregister_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_PlayerAchievements.OnRegister
// ()
// Parameters:
// class ULocalPlayer*            InPlayer                       (Parm)

void UUIDataProvider_PlayerAchievements::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.OnRegister");

	UUIDataProvider_PlayerAchievements_OnRegister_Params params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_PlayerAchievements.OnPlayerAchievementUnlocked
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UUIDataProvider_PlayerAchievements::OnPlayerAchievementUnlocked(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.OnPlayerAchievementUnlocked");

	UUIDataProvider_PlayerAchievements_OnPlayerAchievementUnlocked_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_PlayerAchievements.OnPlayerAchievementsChanged
// ()
// Parameters:
// int                            TitleId                        (Parm)

void UUIDataProvider_PlayerAchievements::OnPlayerAchievementsChanged(int TitleId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.OnPlayerAchievementsChanged");

	UUIDataProvider_PlayerAchievements_OnPlayerAchievementsChanged_Params params;
	params.TitleId = TitleId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_PlayerAchievements.GetAchievementDetails
// ()
// Parameters:
// int                            AchievementId                  (Const, Parm)
// struct FAchievementDetails     OutAchievementDetails          (Parm, OutParm, NeedCtorLink)

void UUIDataProvider_PlayerAchievements::GetAchievementDetails(int AchievementId, struct FAchievementDetails* OutAchievementDetails)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.GetAchievementDetails");

	UUIDataProvider_PlayerAchievements_GetAchievementDetails_Params params;
	params.AchievementId = AchievementId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutAchievementDetails != nullptr)
		*OutAchievementDetails = params.OutAchievementDetails;
}


// Function Engine.UIDataProvider_PlayerAchievements.GetAchievementIconPathName
// ()
// Parameters:
// int                            AchievementId                  (Parm)
// bool                           bReturnLockedIcon              (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIDataProvider_PlayerAchievements::GetAchievementIconPathName(int AchievementId, bool bReturnLockedIcon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.GetAchievementIconPathName");

	UUIDataProvider_PlayerAchievements_GetAchievementIconPathName_Params params;
	params.AchievementId = AchievementId;
	params.bReturnLockedIcon = bReturnLockedIcon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider_PlayerAchievements.PopulateAchievementIcons
// ()

void UUIDataProvider_PlayerAchievements::PopulateAchievementIcons()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.PopulateAchievementIcons");

	UUIDataProvider_PlayerAchievements_PopulateAchievementIcons_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_PlayerAchievements.GetMaxTotalGamerScore
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDataProvider_PlayerAchievements::GetMaxTotalGamerScore()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.GetMaxTotalGamerScore");

	UUIDataProvider_PlayerAchievements_GetMaxTotalGamerScore_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider_PlayerAchievements.GetTotalGamerScore
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDataProvider_PlayerAchievements::GetTotalGamerScore()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.GetTotalGamerScore");

	UUIDataProvider_PlayerAchievements_GetTotalGamerScore_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore.GetDataStoreClient
// ()
// Parameters:
// class UDataStoreClient*        ReturnValue                    (Parm, OutParm, ReturnParm)

class UDataStoreClient* UUIDataStore::GetDataStoreClient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.GetDataStoreClient");

	UUIDataStore_GetDataStoreClient_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore.OnCommit
// ()

void UUIDataStore::OnCommit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.OnCommit");

	UUIDataStore_OnCommit_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore.RefreshSubscribers
// ()
// Parameters:
// struct FName                   PropertyTag                    (OptionalParm, Parm)
// bool                           bInvalidateValues              (OptionalParm, Parm)
// class UUIDataProvider*         SourceProvider                 (OptionalParm, Parm)
// int                            ArrayIndex                     (OptionalParm, Parm)

void UUIDataStore::RefreshSubscribers(const struct FName& PropertyTag, bool bInvalidateValues, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.RefreshSubscribers");

	UUIDataStore_RefreshSubscribers_Params params;
	params.PropertyTag = PropertyTag;
	params.bInvalidateValues = bInvalidateValues;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore.NotifyGameSessionEnded
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.NotifyGameSessionEnded");

	UUIDataStore_NotifyGameSessionEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore.SubscriberDetached
// ()
// Parameters:
// TScriptInterface<class UUIDataStoreSubscriber> Subscriber                     (Parm)

void UUIDataStore::SubscriberDetached(const TScriptInterface<class UUIDataStoreSubscriber>& Subscriber)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.SubscriberDetached");

	UUIDataStore_SubscriberDetached_Params params;
	params.Subscriber = Subscriber;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore.SubscriberAttached
// ()
// Parameters:
// TScriptInterface<class UUIDataStoreSubscriber> Subscriber                     (Parm)

void UUIDataStore::SubscriberAttached(const TScriptInterface<class UUIDataStoreSubscriber>& Subscriber)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.SubscriberAttached");

	UUIDataStore_SubscriberAttached_Params params;
	params.Subscriber = Subscriber;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore.Unregistered
// ()
// Parameters:
// class ULocalPlayer*            PlayerOwner                    (Parm)

void UUIDataStore::Unregistered(class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.Unregistered");

	UUIDataStore_Unregistered_Params params;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore.Registered
// ()
// Parameters:
// class ULocalPlayer*            PlayerOwner                    (Parm)

void UUIDataStore::Registered(class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.Registered");

	UUIDataStore_Registered_Params params;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore.OnDataStoreValueUpdated
// ()
// Parameters:
// class UUIDataStore*            SourceDataStore                (Parm)
// bool                           bValuesInvalidated             (Parm)
// struct FName                   PropertyTag                    (Parm)
// class UUIDataProvider*         SourceProvider                 (Parm)
// int                            ArrayIndex                     (Parm)

void UUIDataStore::OnDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.OnDataStoreValueUpdated");

	UUIDataStore_OnDataStoreValueUpdated_Params params;
	params.SourceDataStore = SourceDataStore;
	params.bValuesInvalidated = bValuesInvalidated;
	params.PropertyTag = PropertyTag;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_DynamicResource.Unregistered
// ()
// Parameters:
// class ULocalPlayer*            PlayerOwner                    (Parm)

void UUIDataStore_DynamicResource::Unregistered(class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_DynamicResource.Unregistered");

	UUIDataStore_DynamicResource_Unregistered_Params params;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_DynamicResource.Registered
// ()
// Parameters:
// class ULocalPlayer*            PlayerOwner                    (Parm)

void UUIDataStore_DynamicResource::Registered(class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_DynamicResource.Registered");

	UUIDataStore_DynamicResource_Registered_Params params;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_DynamicResource.OnLoginChange
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)

void UUIDataStore_DynamicResource::OnLoginChange(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_DynamicResource.OnLoginChange");

	UUIDataStore_DynamicResource_OnLoginChange_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_DynamicResource.FindProviderIndexByFieldValue
// ()
// Parameters:
// struct FName                   ProviderTag                    (Parm)
// struct FName                   SearchField                    (Parm)
// struct FUIProviderScriptFieldValue ValueToSearchFor               (Const, Parm, OutParm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDataStore_DynamicResource::FindProviderIndexByFieldValue(const struct FName& ProviderTag, const struct FName& SearchField, struct FUIProviderScriptFieldValue* ValueToSearchFor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_DynamicResource.FindProviderIndexByFieldValue");

	UUIDataStore_DynamicResource_FindProviderIndexByFieldValue_Params params;
	params.ProviderTag = ProviderTag;
	params.SearchField = SearchField;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ValueToSearchFor != nullptr)
		*ValueToSearchFor = params.ValueToSearchFor;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_DynamicResource.GetProviderFieldValue
// ()
// Parameters:
// struct FName                   ProviderTag                    (Parm)
// struct FName                   SearchField                    (Parm)
// int                            ProviderIndex                  (Parm)
// struct FUIProviderScriptFieldValue out_FieldValue                 (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_DynamicResource::GetProviderFieldValue(const struct FName& ProviderTag, const struct FName& SearchField, int ProviderIndex, struct FUIProviderScriptFieldValue* out_FieldValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_DynamicResource.GetProviderFieldValue");

	UUIDataStore_DynamicResource_GetProviderFieldValue_Params params;
	params.ProviderTag = ProviderTag;
	params.SearchField = SearchField;
	params.ProviderIndex = ProviderIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_FieldValue != nullptr)
		*out_FieldValue = params.out_FieldValue;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_DynamicResource.GetResourceProviderFields
// ()
// Parameters:
// struct FName                   ProviderTag                    (Parm)
// TArray<struct FName>           ProviderFieldTags              (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_DynamicResource::GetResourceProviderFields(const struct FName& ProviderTag, TArray<struct FName>* ProviderFieldTags)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_DynamicResource.GetResourceProviderFields");

	UUIDataStore_DynamicResource_GetResourceProviderFields_Params params;
	params.ProviderTag = ProviderTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ProviderFieldTags != nullptr)
		*ProviderFieldTags = params.ProviderFieldTags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_DynamicResource.GetResourceProviders
// ()
// Parameters:
// struct FName                   ProviderTag                    (Parm)
// TArray<class UUIResourceCombinationProvider*> out_Providers                  (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_DynamicResource::GetResourceProviders(const struct FName& ProviderTag, TArray<class UUIResourceCombinationProvider*>* out_Providers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_DynamicResource.GetResourceProviders");

	UUIDataStore_DynamicResource_GetResourceProviders_Params params;
	params.ProviderTag = ProviderTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Providers != nullptr)
		*out_Providers = params.out_Providers;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_DynamicResource.GetProviderCount
// ()
// Parameters:
// struct FName                   ProviderTag                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDataStore_DynamicResource::GetProviderCount(const struct FName& ProviderTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_DynamicResource.GetProviderCount");

	UUIDataStore_DynamicResource_GetProviderCount_Params params;
	params.ProviderTag = ProviderTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_DynamicResource.GenerateProviderAccessTag
// ()
// Parameters:
// int                            ProviderIndex                  (Parm)
// int                            InstanceIndex                  (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UUIDataStore_DynamicResource::GenerateProviderAccessTag(int ProviderIndex, int InstanceIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_DynamicResource.GenerateProviderAccessTag");

	UUIDataStore_DynamicResource_GenerateProviderAccessTag_Params params;
	params.ProviderIndex = ProviderIndex;
	params.InstanceIndex = InstanceIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_DynamicResource.FindProviderTypeIndex
// ()
// Parameters:
// struct FName                   ProviderTag                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDataStore_DynamicResource::FindProviderTypeIndex(const struct FName& ProviderTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_DynamicResource.FindProviderTypeIndex");

	UUIDataStore_DynamicResource_FindProviderTypeIndex_Params params;
	params.ProviderTag = ProviderTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_GameResource.FindProviderIndexByFieldValue
// ()
// Parameters:
// struct FName                   ProviderTag                    (Parm)
// struct FName                   SearchField                    (Parm)
// struct FUIProviderScriptFieldValue ValueToSearchFor               (Const, Parm, OutParm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDataStore_GameResource::FindProviderIndexByFieldValue(const struct FName& ProviderTag, const struct FName& SearchField, struct FUIProviderScriptFieldValue* ValueToSearchFor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_GameResource.FindProviderIndexByFieldValue");

	UUIDataStore_GameResource_FindProviderIndexByFieldValue_Params params;
	params.ProviderTag = ProviderTag;
	params.SearchField = SearchField;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ValueToSearchFor != nullptr)
		*ValueToSearchFor = params.ValueToSearchFor;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_GameResource.GetProviderFieldValue
// ()
// Parameters:
// struct FName                   ProviderTag                    (Parm)
// struct FName                   SearchField                    (Parm)
// int                            ProviderIndex                  (Parm)
// struct FUIProviderScriptFieldValue out_FieldValue                 (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_GameResource::GetProviderFieldValue(const struct FName& ProviderTag, const struct FName& SearchField, int ProviderIndex, struct FUIProviderScriptFieldValue* out_FieldValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_GameResource.GetProviderFieldValue");

	UUIDataStore_GameResource_GetProviderFieldValue_Params params;
	params.ProviderTag = ProviderTag;
	params.SearchField = SearchField;
	params.ProviderIndex = ProviderIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_FieldValue != nullptr)
		*out_FieldValue = params.out_FieldValue;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_GameResource.GetResourceProviderFields
// ()
// Parameters:
// struct FName                   ProviderTag                    (Parm)
// TArray<struct FName>           ProviderFieldTags              (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_GameResource::GetResourceProviderFields(const struct FName& ProviderTag, TArray<struct FName>* ProviderFieldTags)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_GameResource.GetResourceProviderFields");

	UUIDataStore_GameResource_GetResourceProviderFields_Params params;
	params.ProviderTag = ProviderTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ProviderFieldTags != nullptr)
		*ProviderFieldTags = params.ProviderFieldTags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_GameResource.GetResourceProviders
// ()
// Parameters:
// struct FName                   ProviderTag                    (Parm)
// TArray<class UUIResourceDataProvider*> out_Providers                  (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_GameResource::GetResourceProviders(const struct FName& ProviderTag, TArray<class UUIResourceDataProvider*>* out_Providers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_GameResource.GetResourceProviders");

	UUIDataStore_GameResource_GetResourceProviders_Params params;
	params.ProviderTag = ProviderTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Providers != nullptr)
		*out_Providers = params.out_Providers;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_GameResource.GetProviderCount
// ()
// Parameters:
// struct FName                   ProviderTag                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDataStore_GameResource::GetProviderCount(const struct FName& ProviderTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_GameResource.GetProviderCount");

	UUIDataStore_GameResource_GetProviderCount_Params params;
	params.ProviderTag = ProviderTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_GameResource.GenerateProviderAccessTag
// ()
// Parameters:
// int                            ProviderIndex                  (Parm)
// int                            InstanceIndex                  (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UUIDataStore_GameResource::GenerateProviderAccessTag(int ProviderIndex, int InstanceIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_GameResource.GenerateProviderAccessTag");

	UUIDataStore_GameResource_GenerateProviderAccessTag_Params params;
	params.ProviderIndex = ProviderIndex;
	params.InstanceIndex = InstanceIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_GameResource.FindProviderTypeIndex
// ()
// Parameters:
// struct FName                   ProviderTag                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDataStore_GameResource::FindProviderTypeIndex(const struct FName& ProviderTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_GameResource.FindProviderTypeIndex");

	UUIDataStore_GameResource_FindProviderTypeIndex_Params params;
	params.ProviderTag = ProviderTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_MenuItems.Unregistered
// ()
// Parameters:
// class ULocalPlayer*            PlayerOwner                    (Parm)

void UUIDataStore_MenuItems::Unregistered(class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_MenuItems.Unregistered");

	UUIDataStore_MenuItems_Unregistered_Params params;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_MenuItems.Registered
// ()
// Parameters:
// class ULocalPlayer*            PlayerOwner                    (Parm)

void UUIDataStore_MenuItems::Registered(class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_MenuItems.Registered");

	UUIDataStore_MenuItems_Registered_Params params;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_MenuItems.OnGameSettingsChanged
// ()
// Parameters:
// class UUIDataProvider*         SourceProvider                 (Parm)
// struct FName                   PropTag                        (OptionalParm, Parm)

void UUIDataStore_MenuItems::OnGameSettingsChanged(class UUIDataProvider* SourceProvider, const struct FName& PropTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_MenuItems.OnGameSettingsChanged");

	UUIDataStore_MenuItems_OnGameSettingsChanged_Params params;
	params.SourceProvider = SourceProvider;
	params.PropTag = PropTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_MenuItems.GetSet
// ()
// Parameters:
// struct FName                   SetName                        (Parm)
// TArray<class UUIDataProvider_MenuItem*> OutProviders                   (Parm, OutParm, NeedCtorLink)

void UUIDataStore_MenuItems::GetSet(const struct FName& SetName, TArray<class UUIDataProvider_MenuItem*>* OutProviders)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_MenuItems.GetSet");

	UUIDataStore_MenuItems_GetSet_Params params;
	params.SetName = SetName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutProviders != nullptr)
		*OutProviders = params.OutProviders;
}


// Function Engine.UIDataStore_MenuItems.AppendToSet
// ()
// Parameters:
// struct FName                   SetName                        (Parm)
// int                            NumOptions                     (Parm)

void UUIDataStore_MenuItems::AppendToSet(const struct FName& SetName, int NumOptions)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_MenuItems.AppendToSet");

	UUIDataStore_MenuItems_AppendToSet_Params params;
	params.SetName = SetName;
	params.NumOptions = NumOptions;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_MenuItems.ClearSet
// ()
// Parameters:
// struct FName                   SetName                        (Parm)

void UUIDataStore_MenuItems::ClearSet(const struct FName& SetName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_MenuItems.ClearSet");

	UUIDataStore_MenuItems_ClearSet_Params params;
	params.SetName = SetName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_GameState.NotifyGameSessionEnded
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_GameState::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_GameState.NotifyGameSessionEnded");

	UUIDataStore_GameState_NotifyGameSessionEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_GameState.OnRefreshDataFieldValue
// ()

void UUIDataStore_GameState::OnRefreshDataFieldValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_GameState.OnRefreshDataFieldValue");

	UUIDataStore_GameState_OnRefreshDataFieldValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlinePlaylists.GetOnlinePlaylistProvider
// ()
// Parameters:
// struct FName                   ProviderTag                    (Parm)
// int                            PlaylistId                     (Parm)
// int                            ProviderIndex                  (OptionalParm, Parm, OutParm)
// class UOnlinePlaylistProvider* ReturnValue                    (Parm, OutParm, ReturnParm)

class UOnlinePlaylistProvider* UUIDataStore_OnlinePlaylists::GetOnlinePlaylistProvider(const struct FName& ProviderTag, int PlaylistId, int* ProviderIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlaylists.GetOnlinePlaylistProvider");

	UUIDataStore_OnlinePlaylists_GetOnlinePlaylistProvider_Params params;
	params.ProviderTag = ProviderTag;
	params.PlaylistId = PlaylistId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ProviderIndex != nullptr)
		*ProviderIndex = params.ProviderIndex;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlinePlaylists.GetPlaylistProvider
// ()
// Parameters:
// struct FName                   ProviderTag                    (Parm)
// int                            ProviderIndex                  (Parm)
// class UUIResourceDataProvider* out_Provider                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_OnlinePlaylists::GetPlaylistProvider(const struct FName& ProviderTag, int ProviderIndex, class UUIResourceDataProvider** out_Provider)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlaylists.GetPlaylistProvider");

	UUIDataStore_OnlinePlaylists_GetPlaylistProvider_Params params;
	params.ProviderTag = ProviderTag;
	params.ProviderIndex = ProviderIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Provider != nullptr)
		*out_Provider = params.out_Provider;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlinePlaylists.FindProviderIndexByFieldValue
// ()
// Parameters:
// struct FName                   ProviderTag                    (Parm)
// struct FName                   SearchField                    (Parm)
// struct FUIProviderScriptFieldValue ValueToSearchFor               (Const, Parm, OutParm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDataStore_OnlinePlaylists::FindProviderIndexByFieldValue(const struct FName& ProviderTag, const struct FName& SearchField, struct FUIProviderScriptFieldValue* ValueToSearchFor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlaylists.FindProviderIndexByFieldValue");

	UUIDataStore_OnlinePlaylists_FindProviderIndexByFieldValue_Params params;
	params.ProviderTag = ProviderTag;
	params.SearchField = SearchField;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ValueToSearchFor != nullptr)
		*ValueToSearchFor = params.ValueToSearchFor;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlinePlaylists.GetProviderFieldValue
// ()
// Parameters:
// struct FName                   ProviderTag                    (Parm)
// struct FName                   SearchField                    (Parm)
// int                            ProviderIndex                  (Parm)
// struct FUIProviderScriptFieldValue out_FieldValue                 (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_OnlinePlaylists::GetProviderFieldValue(const struct FName& ProviderTag, const struct FName& SearchField, int ProviderIndex, struct FUIProviderScriptFieldValue* out_FieldValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlaylists.GetProviderFieldValue");

	UUIDataStore_OnlinePlaylists_GetProviderFieldValue_Params params;
	params.ProviderTag = ProviderTag;
	params.SearchField = SearchField;
	params.ProviderIndex = ProviderIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_FieldValue != nullptr)
		*out_FieldValue = params.out_FieldValue;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlinePlaylists.GetResourceProviderFields
// ()
// Parameters:
// struct FName                   ProviderTag                    (Parm)
// TArray<struct FName>           ProviderFieldTags              (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_OnlinePlaylists::GetResourceProviderFields(const struct FName& ProviderTag, TArray<struct FName>* ProviderFieldTags)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlaylists.GetResourceProviderFields");

	UUIDataStore_OnlinePlaylists_GetResourceProviderFields_Params params;
	params.ProviderTag = ProviderTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ProviderFieldTags != nullptr)
		*ProviderFieldTags = params.ProviderFieldTags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlinePlaylists.GetResourceProviders
// ()
// Parameters:
// struct FName                   ProviderTag                    (Parm)
// TArray<class UUIResourceDataProvider*> out_Providers                  (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_OnlinePlaylists::GetResourceProviders(const struct FName& ProviderTag, TArray<class UUIResourceDataProvider*>* out_Providers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlaylists.GetResourceProviders");

	UUIDataStore_OnlinePlaylists_GetResourceProviders_Params params;
	params.ProviderTag = ProviderTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Providers != nullptr)
		*out_Providers = params.out_Providers;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlinePlaylists.GetProviderCount
// ()
// Parameters:
// struct FName                   ProviderTag                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDataStore_OnlinePlaylists::GetProviderCount(const struct FName& ProviderTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlaylists.GetProviderCount");

	UUIDataStore_OnlinePlaylists_GetProviderCount_Params params;
	params.ProviderTag = ProviderTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_Registry.GetDataProvider
// ()
// Parameters:
// class UUIDynamicFieldProvider* ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIDynamicFieldProvider* UUIDataStore_Registry::GetDataProvider()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_Registry.GetDataProvider");

	UUIDataStore_Registry_GetDataProvider_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.ClearAllSearchResults
// ()

void UUIDataStore_OnlineGameSearch::ClearAllSearchResults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.ClearAllSearchResults");

	UUIDataStore_OnlineGameSearch_ClearAllSearchResults_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSearch.MoveToPrevious
// ()
// Parameters:
// bool                           bInvalidateExistingSearchResults (OptionalParm, Parm)

void UUIDataStore_OnlineGameSearch::MoveToPrevious(bool bInvalidateExistingSearchResults)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.MoveToPrevious");

	UUIDataStore_OnlineGameSearch_MoveToPrevious_Params params;
	params.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSearch.MoveToNext
// ()
// Parameters:
// bool                           bInvalidateExistingSearchResults (OptionalParm, Parm)

void UUIDataStore_OnlineGameSearch::MoveToNext(bool bInvalidateExistingSearchResults)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.MoveToNext");

	UUIDataStore_OnlineGameSearch_MoveToNext_Params params;
	params.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByName
// ()
// Parameters:
// struct FName                   SearchName                     (Parm)
// bool                           bInvalidateExistingSearchResults (OptionalParm, Parm)

void UUIDataStore_OnlineGameSearch::SetCurrentByName(const struct FName& SearchName, bool bInvalidateExistingSearchResults)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByName");

	UUIDataStore_OnlineGameSearch_SetCurrentByName_Params params;
	params.SearchName = SearchName;
	params.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByIndex
// ()
// Parameters:
// int                            NewIndex                       (Parm)
// bool                           bInvalidateExistingSearchResults (OptionalParm, Parm)

void UUIDataStore_OnlineGameSearch::SetCurrentByIndex(int NewIndex, bool bInvalidateExistingSearchResults)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByIndex");

	UUIDataStore_OnlineGameSearch_SetCurrentByIndex_Params params;
	params.NewIndex = NewIndex;
	params.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSearch.FindSearchConfigurationIndex
// ()
// Parameters:
// struct FName                   SearchTag                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDataStore_OnlineGameSearch::FindSearchConfigurationIndex(const struct FName& SearchTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.FindSearchConfigurationIndex");

	UUIDataStore_OnlineGameSearch_FindSearchConfigurationIndex_Params params;
	params.SearchTag = SearchTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.GetActiveGameSearch
// ()
// Parameters:
// class UOnlineGameSearch*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UOnlineGameSearch* UUIDataStore_OnlineGameSearch::GetActiveGameSearch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.GetActiveGameSearch");

	UUIDataStore_OnlineGameSearch_GetActiveGameSearch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.GetCurrentGameSearch
// ()
// Parameters:
// class UOnlineGameSearch*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UOnlineGameSearch* UUIDataStore_OnlineGameSearch::GetCurrentGameSearch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.GetCurrentGameSearch");

	UUIDataStore_OnlineGameSearch_GetCurrentGameSearch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.BuildSearchResults
// ()

void UUIDataStore_OnlineGameSearch::BuildSearchResults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.BuildSearchResults");

	UUIDataStore_OnlineGameSearch_BuildSearchResults_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSearch.ShowHostGamercard
// ()
// Parameters:
// unsigned char                  ControllerIndex                (Parm)
// int                            ListIndex                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_OnlineGameSearch::ShowHostGamercard(unsigned char ControllerIndex, int ListIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.ShowHostGamercard");

	UUIDataStore_OnlineGameSearch_ShowHostGamercard_Params params;
	params.ControllerIndex = ControllerIndex;
	params.ListIndex = ListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.GetSearchResultFromIndex
// ()
// Parameters:
// int                            ListIndex                      (Parm)
// struct FOnlineGameSearchResult Result                         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_OnlineGameSearch::GetSearchResultFromIndex(int ListIndex, struct FOnlineGameSearchResult* Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.GetSearchResultFromIndex");

	UUIDataStore_OnlineGameSearch_GetSearchResultFromIndex_Params params;
	params.ListIndex = ListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.OnSearchComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UUIDataStore_OnlineGameSearch::OnSearchComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.OnSearchComplete");

	UUIDataStore_OnlineGameSearch_OnSearchComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSearch.OverrideQuerySubmission
// ()
// Parameters:
// unsigned char                  ControllerId                   (Parm)
// class UOnlineGameSearch*       Search                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_OnlineGameSearch::OverrideQuerySubmission(unsigned char ControllerId, class UOnlineGameSearch* Search)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.OverrideQuerySubmission");

	UUIDataStore_OnlineGameSearch_OverrideQuerySubmission_Params params;
	params.ControllerId = ControllerId;
	params.Search = Search;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.SubmitGameSearch
// ()
// Parameters:
// unsigned char                  ControllerIndex                (Parm)
// bool                           bInvalidateExistingSearchResults (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_OnlineGameSearch::SubmitGameSearch(unsigned char ControllerIndex, bool bInvalidateExistingSearchResults)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.SubmitGameSearch");

	UUIDataStore_OnlineGameSearch_SubmitGameSearch_Params params;
	params.ControllerIndex = ControllerIndex;
	params.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.InvalidateCurrentSearchResults
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_OnlineGameSearch::InvalidateCurrentSearchResults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.InvalidateCurrentSearchResults");

	UUIDataStore_OnlineGameSearch_InvalidateCurrentSearchResults_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.Init
// ()

void UUIDataStore_OnlineGameSearch::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.Init");

	UUIDataStore_OnlineGameSearch_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlinePlayerData.GetCachedPlayerStorage
// ()
// Parameters:
// int                            ControllerId                   (Parm)
// class UOnlinePlayerStorage*    ReturnValue                    (Parm, OutParm, ReturnParm)

class UOnlinePlayerStorage* UUIDataStore_OnlinePlayerData::GetCachedPlayerStorage(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.GetCachedPlayerStorage");

	UUIDataStore_OnlinePlayerData_GetCachedPlayerStorage_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlinePlayerData.GetCachedPlayerProfile
// ()
// Parameters:
// int                            ControllerId                   (Parm)
// class UOnlineProfileSettings*  ReturnValue                    (Parm, OutParm, ReturnParm)

class UOnlineProfileSettings* UUIDataStore_OnlinePlayerData::GetCachedPlayerProfile(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.GetCachedPlayerProfile");

	UUIDataStore_OnlinePlayerData_GetCachedPlayerProfile_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlinePlayerData.ClearDelegates
// ()

void UUIDataStore_OnlinePlayerData::ClearDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.ClearDelegates");

	UUIDataStore_OnlinePlayerData_ClearDelegates_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlinePlayerData.RegisterDelegates
// ()

void UUIDataStore_OnlinePlayerData::RegisterDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.RegisterDelegates");

	UUIDataStore_OnlinePlayerData_RegisterDelegates_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlinePlayerData.OnPlayerDataChange
// ()

void UUIDataStore_OnlinePlayerData::OnPlayerDataChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.OnPlayerDataChange");

	UUIDataStore_OnlinePlayerData_OnPlayerDataChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlinePlayerData.OnLoginChange
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)

void UUIDataStore_OnlinePlayerData::OnLoginChange(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.OnLoginChange");

	UUIDataStore_OnlinePlayerData_OnLoginChange_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlinePlayerData.OnUnregister
// ()

void UUIDataStore_OnlinePlayerData::OnUnregister()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.OnUnregister");

	UUIDataStore_OnlinePlayerData_OnUnregister_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlinePlayerData.OnRegister
// ()
// Parameters:
// class ULocalPlayer*            InPlayer                       (Parm)

void UUIDataStore_OnlinePlayerData::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.OnRegister");

	UUIDataStore_OnlinePlayerData_OnRegister_Params params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlinePlayerData.OnSettingProviderChanged
// ()
// Parameters:
// class UUIDataProvider*         SourceProvider                 (Parm)
// struct FName                   SettingsName                   (OptionalParm, Parm)

void UUIDataStore_OnlinePlayerData::OnSettingProviderChanged(class UUIDataProvider* SourceProvider, const struct FName& SettingsName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.OnSettingProviderChanged");

	UUIDataStore_OnlinePlayerData_OnSettingProviderChanged_Params params;
	params.SourceProvider = SourceProvider;
	params.SettingsName = SettingsName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineStats.SortResultsByRank
// ()

void UUIDataStore_OnlineStats::SortResultsByRank()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.SortResultsByRank");

	UUIDataStore_OnlineStats_SortResultsByRank_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineStats.OnReadComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UUIDataStore_OnlineStats::OnReadComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.OnReadComplete");

	UUIDataStore_OnlineStats_OnReadComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineStats.ShowGamercard
// ()
// Parameters:
// unsigned char                  ConrollerIndex                 (Parm)
// int                            ListIndex                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_OnlineStats::ShowGamercard(unsigned char ConrollerIndex, int ListIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.ShowGamercard");

	UUIDataStore_OnlineStats_ShowGamercard_Params params;
	params.ConrollerIndex = ConrollerIndex;
	params.ListIndex = ListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineStats.RefreshStats
// ()
// Parameters:
// unsigned char                  ControllerIndex                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_OnlineStats::RefreshStats(unsigned char ControllerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.RefreshStats");

	UUIDataStore_OnlineStats_RefreshStats_Params params;
	params.ControllerIndex = ControllerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineStats.SetStatsReadInfo
// ()

void UUIDataStore_OnlineStats::SetStatsReadInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.SetStatsReadInfo");

	UUIDataStore_OnlineStats_SetStatsReadInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineStats.Init
// ()

void UUIDataStore_OnlineStats::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.Init");

	UUIDataStore_OnlineStats_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSettings.Unregistered
// ()
// Parameters:
// class ULocalPlayer*            PlayerOwner                    (Parm)

void UUIDataStore_OnlineGameSettings::Unregistered(class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.Unregistered");

	UUIDataStore_OnlineGameSettings_Unregistered_Params params;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSettings.Registered
// ()
// Parameters:
// class ULocalPlayer*            PlayerOwner                    (Parm)

void UUIDataStore_OnlineGameSettings::Registered(class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.Registered");

	UUIDataStore_OnlineGameSettings_Registered_Params params;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSettings.MoveToPrevious
// ()

void UUIDataStore_OnlineGameSettings::MoveToPrevious()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.MoveToPrevious");

	UUIDataStore_OnlineGameSettings_MoveToPrevious_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSettings.MoveToNext
// ()

void UUIDataStore_OnlineGameSettings::MoveToNext()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.MoveToNext");

	UUIDataStore_OnlineGameSettings_MoveToNext_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByName
// ()
// Parameters:
// struct FName                   SettingsName                   (Parm)

void UUIDataStore_OnlineGameSettings::SetCurrentByName(const struct FName& SettingsName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByName");

	UUIDataStore_OnlineGameSettings_SetCurrentByName_Params params;
	params.SettingsName = SettingsName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByIndex
// ()
// Parameters:
// int                            NewIndex                       (Parm)

void UUIDataStore_OnlineGameSettings::SetCurrentByIndex(int NewIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByIndex");

	UUIDataStore_OnlineGameSettings_SetCurrentByIndex_Params params;
	params.NewIndex = NewIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSettings.GetCurrentProvider
// ()
// Parameters:
// class UUIDataProvider_Settings* ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIDataProvider_Settings* UUIDataStore_OnlineGameSettings::GetCurrentProvider()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.GetCurrentProvider");

	UUIDataStore_OnlineGameSettings_GetCurrentProvider_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSettings.GetCurrentGameSettings
// ()
// Parameters:
// class UOnlineGameSettings*     ReturnValue                    (Parm, OutParm, ReturnParm)

class UOnlineGameSettings* UUIDataStore_OnlineGameSettings::GetCurrentGameSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.GetCurrentGameSettings");

	UUIDataStore_OnlineGameSettings_GetCurrentGameSettings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSettings.CreateGame
// ()
// Parameters:
// unsigned char                  ControllerIndex                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_OnlineGameSettings::CreateGame(unsigned char ControllerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.CreateGame");

	UUIDataStore_OnlineGameSettings_CreateGame_Params params;
	params.ControllerIndex = ControllerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSettings.OnSettingProviderChanged
// ()
// Parameters:
// class UUIDataProvider*         SourceProvider                 (Parm)
// struct FName                   SettingsName                   (OptionalParm, Parm)

void UUIDataStore_OnlineGameSettings::OnSettingProviderChanged(class UUIDataProvider* SourceProvider, const struct FName& SettingsName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.OnSettingProviderChanged");

	UUIDataStore_OnlineGameSettings_OnSettingProviderChanged_Params params;
	params.SourceProvider = SourceProvider;
	params.SettingsName = SettingsName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_InputAlias.HasAliasMappingForPlatform
// ()
// Parameters:
// struct FName                   DesiredAlias                   (Parm)
// TEnumAsByte<EInputPlatformType> DesiredPlatform                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_InputAlias::HasAliasMappingForPlatform(const struct FName& DesiredAlias, TEnumAsByte<EInputPlatformType> DesiredPlatform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.HasAliasMappingForPlatform");

	UUIDataStore_InputAlias_HasAliasMappingForPlatform_Params params;
	params.DesiredAlias = DesiredAlias;
	params.DesiredPlatform = DesiredPlatform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_InputAlias.FindInputAliasIndex
// ()
// Parameters:
// struct FName                   DesiredAlias                   (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDataStore_InputAlias::FindInputAliasIndex(const struct FName& DesiredAlias)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.FindInputAliasIndex");

	UUIDataStore_InputAlias_FindInputAliasIndex_Params params;
	params.DesiredAlias = DesiredAlias;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyDataByIndex
// ()
// Parameters:
// struct FRawInputKeyEventData   out_InputKeyData               (Parm, OutParm)
// int                            AliasIndex                     (Parm)
// TEnumAsByte<EInputPlatformType> OverridePlatform               (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_InputAlias::GetAliasInputKeyDataByIndex(int AliasIndex, TEnumAsByte<EInputPlatformType> OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.GetAliasInputKeyDataByIndex");

	UUIDataStore_InputAlias_GetAliasInputKeyDataByIndex_Params params;
	params.AliasIndex = AliasIndex;
	params.OverridePlatform = OverridePlatform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_InputKeyData != nullptr)
		*out_InputKeyData = params.out_InputKeyData;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyData
// ()
// Parameters:
// struct FRawInputKeyEventData   out_InputKeyData               (Parm, OutParm)
// struct FName                   DesiredAlias                   (Parm)
// TEnumAsByte<EInputPlatformType> OverridePlatform               (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_InputAlias::GetAliasInputKeyData(const struct FName& DesiredAlias, TEnumAsByte<EInputPlatformType> OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.GetAliasInputKeyData");

	UUIDataStore_InputAlias_GetAliasInputKeyData_Params params;
	params.DesiredAlias = DesiredAlias;
	params.OverridePlatform = OverridePlatform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_InputKeyData != nullptr)
		*out_InputKeyData = params.out_InputKeyData;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyNameByIndex
// ()
// Parameters:
// int                            AliasIndex                     (Parm)
// TEnumAsByte<EInputPlatformType> OverridePlatform               (OptionalParm, Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UUIDataStore_InputAlias::GetAliasInputKeyNameByIndex(int AliasIndex, TEnumAsByte<EInputPlatformType> OverridePlatform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.GetAliasInputKeyNameByIndex");

	UUIDataStore_InputAlias_GetAliasInputKeyNameByIndex_Params params;
	params.AliasIndex = AliasIndex;
	params.OverridePlatform = OverridePlatform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyName
// ()
// Parameters:
// struct FName                   DesiredAlias                   (Parm)
// TEnumAsByte<EInputPlatformType> OverridePlatform               (OptionalParm, Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UUIDataStore_InputAlias::GetAliasInputKeyName(const struct FName& DesiredAlias, TEnumAsByte<EInputPlatformType> OverridePlatform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.GetAliasInputKeyName");

	UUIDataStore_InputAlias_GetAliasInputKeyName_Params params;
	params.DesiredAlias = DesiredAlias;
	params.OverridePlatform = OverridePlatform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_InputAlias.GetAliasFontMarkupByIndex
// ()
// Parameters:
// int                            AliasIndex                     (Parm)
// TEnumAsByte<EInputPlatformType> OverridePlatform               (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIDataStore_InputAlias::GetAliasFontMarkupByIndex(int AliasIndex, TEnumAsByte<EInputPlatformType> OverridePlatform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.GetAliasFontMarkupByIndex");

	UUIDataStore_InputAlias_GetAliasFontMarkupByIndex_Params params;
	params.AliasIndex = AliasIndex;
	params.OverridePlatform = OverridePlatform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_InputAlias.GetAliasFontMarkup
// ()
// Parameters:
// struct FName                   DesiredAlias                   (Parm)
// TEnumAsByte<EInputPlatformType> OverridePlatform               (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIDataStore_InputAlias::GetAliasFontMarkup(const struct FName& DesiredAlias, TEnumAsByte<EInputPlatformType> OverridePlatform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.GetAliasFontMarkup");

	UUIDataStore_InputAlias_GetAliasFontMarkup_Params params;
	params.DesiredAlias = DesiredAlias;
	params.OverridePlatform = OverridePlatform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_StringAliasMap.GetStringWithFieldName
// ()
// Parameters:
// struct FString                 FieldName                      (Parm, NeedCtorLink)
// struct FString                 MappedString                   (Parm, OutParm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDataStore_StringAliasMap::GetStringWithFieldName(const struct FString& FieldName, struct FString* MappedString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_StringAliasMap.GetStringWithFieldName");

	UUIDataStore_StringAliasMap_GetStringWithFieldName_Params params;
	params.FieldName = FieldName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MappedString != nullptr)
		*MappedString = params.MappedString;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_StringAliasMap.FindMappingWithFieldName
// ()
// Parameters:
// struct FString                 FieldName                      (OptionalParm, Parm, NeedCtorLink)
// struct FString                 SetName                        (OptionalParm, Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDataStore_StringAliasMap::FindMappingWithFieldName(const struct FString& FieldName, const struct FString& SetName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_StringAliasMap.FindMappingWithFieldName");

	UUIDataStore_StringAliasMap_FindMappingWithFieldName_Params params;
	params.FieldName = FieldName;
	params.SetName = SetName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_StringAliasMap.GetPlayerOwner
// ()
// Parameters:
// class ULocalPlayer*            ReturnValue                    (Parm, OutParm, ReturnParm)

class ULocalPlayer* UUIDataStore_StringAliasMap::GetPlayerOwner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_StringAliasMap.GetPlayerOwner");

	UUIDataStore_StringAliasMap_GetPlayerOwner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.FindCollectionValueIndex
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// struct FString                 ValueToFind                    (Const, Parm, OutParm, NeedCtorLink)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDynamicFieldProvider::FindCollectionValueIndex(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag, struct FString* ValueToFind)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.FindCollectionValueIndex");

	UUIDynamicFieldProvider_FindCollectionValueIndex_Params params;
	params.FieldName = FieldName;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ValueToFind != nullptr)
		*ValueToFind = params.ValueToFind;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.GetCollectionValue
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// int                            ValueIndex                     (Parm)
// struct FString                 out_Value                      (Parm, OutParm, NeedCtorLink)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::GetCollectionValue(const struct FName& FieldName, int ValueIndex, bool bPersistent, const struct FName& CellTag, struct FString* out_Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.GetCollectionValue");

	UUIDynamicFieldProvider_GetCollectionValue_Params params;
	params.FieldName = FieldName;
	params.ValueIndex = ValueIndex;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Value != nullptr)
		*out_Value = params.out_Value;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.ClearCollectionValueArray
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::ClearCollectionValueArray(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.ClearCollectionValueArray");

	UUIDynamicFieldProvider_ClearCollectionValueArray_Params params;
	params.FieldName = FieldName;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.ReplaceCollectionValueByIndex
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// int                            ValueIndex                     (Parm)
// struct FString                 NewValue                       (Const, Parm, OutParm, NeedCtorLink)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::ReplaceCollectionValueByIndex(const struct FName& FieldName, int ValueIndex, bool bPersistent, const struct FName& CellTag, struct FString* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.ReplaceCollectionValueByIndex");

	UUIDynamicFieldProvider_ReplaceCollectionValueByIndex_Params params;
	params.FieldName = FieldName;
	params.ValueIndex = ValueIndex;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.ReplaceCollectionValue
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// struct FString                 CurrentValue                   (Const, Parm, OutParm, NeedCtorLink)
// struct FString                 NewValue                       (Const, Parm, OutParm, NeedCtorLink)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::ReplaceCollectionValue(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag, struct FString* CurrentValue, struct FString* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.ReplaceCollectionValue");

	UUIDynamicFieldProvider_ReplaceCollectionValue_Params params;
	params.FieldName = FieldName;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CurrentValue != nullptr)
		*CurrentValue = params.CurrentValue;
	if (NewValue != nullptr)
		*NewValue = params.NewValue;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.RemoveCollectionValueByIndex
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// int                            ValueIndex                     (Parm)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::RemoveCollectionValueByIndex(const struct FName& FieldName, int ValueIndex, bool bPersistent, const struct FName& CellTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.RemoveCollectionValueByIndex");

	UUIDynamicFieldProvider_RemoveCollectionValueByIndex_Params params;
	params.FieldName = FieldName;
	params.ValueIndex = ValueIndex;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.RemoveCollectionValue
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// struct FString                 ValueToRemove                  (Const, Parm, OutParm, NeedCtorLink)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::RemoveCollectionValue(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag, struct FString* ValueToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.RemoveCollectionValue");

	UUIDynamicFieldProvider_RemoveCollectionValue_Params params;
	params.FieldName = FieldName;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ValueToRemove != nullptr)
		*ValueToRemove = params.ValueToRemove;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.InsertCollectionValue
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// struct FString                 NewValue                       (Const, Parm, OutParm, NeedCtorLink)
// int                            InsertIndex                    (OptionalParm, Parm)
// bool                           bPersistent                    (OptionalParm, Parm)
// bool                           bAllowDuplicateValues          (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::InsertCollectionValue(const struct FName& FieldName, int InsertIndex, bool bPersistent, bool bAllowDuplicateValues, const struct FName& CellTag, struct FString* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.InsertCollectionValue");

	UUIDynamicFieldProvider_InsertCollectionValue_Params params;
	params.FieldName = FieldName;
	params.InsertIndex = InsertIndex;
	params.bPersistent = bPersistent;
	params.bAllowDuplicateValues = bAllowDuplicateValues;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.SetCollectionValueArray
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// TArray<struct FString>         CollectionValues               (Const, Parm, OutParm, NeedCtorLink)
// bool                           bClearExisting                 (OptionalParm, Parm)
// int                            InsertIndex                    (OptionalParm, Parm)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::SetCollectionValueArray(const struct FName& FieldName, bool bClearExisting, int InsertIndex, bool bPersistent, const struct FName& CellTag, TArray<struct FString>* CollectionValues)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.SetCollectionValueArray");

	UUIDynamicFieldProvider_SetCollectionValueArray_Params params;
	params.FieldName = FieldName;
	params.bClearExisting = bClearExisting;
	params.InsertIndex = InsertIndex;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CollectionValues != nullptr)
		*CollectionValues = params.CollectionValues;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.GetCollectionValueArray
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// TArray<struct FString>         out_DataValueArray             (Parm, OutParm, NeedCtorLink)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::GetCollectionValueArray(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag, TArray<struct FString>* out_DataValueArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.GetCollectionValueArray");

	UUIDynamicFieldProvider_GetCollectionValueArray_Params params;
	params.FieldName = FieldName;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_DataValueArray != nullptr)
		*out_DataValueArray = params.out_DataValueArray;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.GetCollectionValueSchema
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// TArray<struct FName>           out_CellTagArray               (Parm, OutParm, NeedCtorLink)
// bool                           bPersistent                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::GetCollectionValueSchema(const struct FName& FieldName, bool bPersistent, TArray<struct FName>* out_CellTagArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.GetCollectionValueSchema");

	UUIDynamicFieldProvider_GetCollectionValueSchema_Params params;
	params.FieldName = FieldName;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_CellTagArray != nullptr)
		*out_CellTagArray = params.out_CellTagArray;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.SavePersistentProviderData
// ()

void UUIDynamicFieldProvider::SavePersistentProviderData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.SavePersistentProviderData");

	UUIDynamicFieldProvider_SavePersistentProviderData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDynamicFieldProvider.SetField
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// struct FUIProviderScriptFieldValue FieldValue                     (Const, Parm, OutParm, NeedCtorLink)
// bool                           bChangeExistingOnly            (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::SetField(const struct FName& FieldName, bool bChangeExistingOnly, struct FUIProviderScriptFieldValue* FieldValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.SetField");

	UUIDynamicFieldProvider_SetField_Params params;
	params.FieldName = FieldName;
	params.bChangeExistingOnly = bChangeExistingOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FieldValue != nullptr)
		*FieldValue = params.FieldValue;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.GetField
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// struct FUIProviderScriptFieldValue out_Field                      (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::GetField(const struct FName& FieldName, struct FUIProviderScriptFieldValue* out_Field)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.GetField");

	UUIDynamicFieldProvider_GetField_Params params;
	params.FieldName = FieldName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Field != nullptr)
		*out_Field = params.out_Field;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.ClearFields
// ()
// Parameters:
// bool                           bReinitializeRuntimeFields     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::ClearFields(bool bReinitializeRuntimeFields)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.ClearFields");

	UUIDynamicFieldProvider_ClearFields_Params params;
	params.bReinitializeRuntimeFields = bReinitializeRuntimeFields;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.FindFieldIndex
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// bool                           bSearchPersistentFields        (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDynamicFieldProvider::FindFieldIndex(const struct FName& FieldName, bool bSearchPersistentFields)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.FindFieldIndex");

	UUIDynamicFieldProvider_FindFieldIndex_Params params;
	params.FieldName = FieldName;
	params.bSearchPersistentFields = bSearchPersistentFields;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.RemoveField
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::RemoveField(const struct FName& FieldName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.RemoveField");

	UUIDynamicFieldProvider_RemoveField_Params params;
	params.FieldName = FieldName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.AddField
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// TEnumAsByte<EUIDataProviderFieldType> FieldType                      (OptionalParm, Parm)
// bool                           bPersistent                    (OptionalParm, Parm)
// int                            out_InsertPosition             (OptionalParm, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::AddField(const struct FName& FieldName, TEnumAsByte<EUIDataProviderFieldType> FieldType, bool bPersistent, int* out_InsertPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.AddField");

	UUIDynamicFieldProvider_AddField_Params params;
	params.FieldName = FieldName;
	params.FieldType = FieldType;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_InsertPosition != nullptr)
		*out_InsertPosition = params.out_InsertPosition;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.InitializeRuntimeFields
// ()

void UUIDynamicFieldProvider::InitializeRuntimeFields()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.InitializeRuntimeFields");

	UUIDynamicFieldProvider_InitializeRuntimeFields_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIPropertyDataProvider.GetCustomPropertyValue
// ()
// Parameters:
// struct FUIProviderScriptFieldValue PropertyValue                  (Parm, OutParm, NeedCtorLink)
// int                            ArrayIndex                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIPropertyDataProvider::GetCustomPropertyValue(int ArrayIndex, struct FUIProviderScriptFieldValue* PropertyValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIPropertyDataProvider.GetCustomPropertyValue");

	UUIPropertyDataProvider_GetCustomPropertyValue_Params params;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PropertyValue != nullptr)
		*PropertyValue = params.PropertyValue;

	return params.ReturnValue;
}


// Function Engine.UIPropertyDataProvider.CanSupportComplexPropertyType
// ()
// Parameters:
// class UProperty*               UnsupportedProperty            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIPropertyDataProvider::CanSupportComplexPropertyType(class UProperty* UnsupportedProperty)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIPropertyDataProvider.CanSupportComplexPropertyType");

	UUIPropertyDataProvider_CanSupportComplexPropertyType_Params params;
	params.UnsupportedProperty = UnsupportedProperty;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDynamicDataProvider.CleanupDataProvider
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicDataProvider::CleanupDataProvider()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicDataProvider.CleanupDataProvider");

	UUIDynamicDataProvider_CleanupDataProvider_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDynamicDataProvider.GetDataSource
// ()
// Parameters:
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UUIDynamicDataProvider::GetDataSource()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicDataProvider.GetDataSource");

	UUIDynamicDataProvider_GetDataSource_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDynamicDataProvider.IsValidDataSourceClass
// ()
// Parameters:
// class UClass*                  PotentialDataSourceClass       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicDataProvider::IsValidDataSourceClass(class UClass* PotentialDataSourceClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicDataProvider.IsValidDataSourceClass");

	UUIDynamicDataProvider_IsValidDataSourceClass_Params params;
	params.PotentialDataSourceClass = PotentialDataSourceClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDynamicDataProvider.ProviderInstanceUnbound
// ()
// Parameters:
// class UObject*                 DataSourceInstance             (Parm)

void UUIDynamicDataProvider::ProviderInstanceUnbound(class UObject* DataSourceInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicDataProvider.ProviderInstanceUnbound");

	UUIDynamicDataProvider_ProviderInstanceUnbound_Params params;
	params.DataSourceInstance = DataSourceInstance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDynamicDataProvider.ProviderInstanceBound
// ()
// Parameters:
// class UObject*                 DataSourceInstance             (Parm)

void UUIDynamicDataProvider::ProviderInstanceBound(class UObject* DataSourceInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicDataProvider.ProviderInstanceBound");

	UUIDynamicDataProvider_ProviderInstanceBound_Params params;
	params.DataSourceInstance = DataSourceInstance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDynamicDataProvider.UnbindProviderInstance
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicDataProvider::UnbindProviderInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicDataProvider.UnbindProviderInstance");

	UUIDynamicDataProvider_UnbindProviderInstance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDynamicDataProvider.BindProviderInstance
// ()
// Parameters:
// class UObject*                 DataSourceInstance             (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicDataProvider::BindProviderInstance(class UObject* DataSourceInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicDataProvider.BindProviderInstance");

	UUIDynamicDataProvider_BindProviderInstance_Params params;
	params.DataSourceInstance = DataSourceInstance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider_Settings.OnSettingValueUpdated
// ()
// Parameters:
// struct FName                   SettingName                    (Parm)

void UUIDataProvider_Settings::OnSettingValueUpdated(const struct FName& SettingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_Settings.OnSettingValueUpdated");

	UUIDataProvider_Settings_OnSettingValueUpdated_Params params;
	params.SettingName = SettingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_Settings.ArrayProviderPropertyChanged
// ()
// Parameters:
// class UUIDataProvider*         SourceProvider                 (Parm)
// struct FName                   PropTag                        (OptionalParm, Parm)

void UUIDataProvider_Settings::ArrayProviderPropertyChanged(class UUIDataProvider* SourceProvider, const struct FName& PropTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_Settings.ArrayProviderPropertyChanged");

	UUIDataProvider_Settings_ArrayProviderPropertyChanged_Params params;
	params.SourceProvider = SourceProvider;
	params.PropTag = PropTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIResourceDataProvider.InitializeProvider
// ()
// Parameters:
// bool                           bIsEditor                      (Parm)

void UUIResourceDataProvider::InitializeProvider(bool bIsEditor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIResourceDataProvider.InitializeProvider");

	UUIResourceDataProvider_InitializeProvider_Params params;
	params.bIsEditor = bIsEditor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_MenuItem.IsFiltered
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataProvider_MenuItem::IsFiltered()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_MenuItem.IsFiltered");

	UUIDataProvider_MenuItem_IsFiltered_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIResourceCombinationProvider.ReplaceProviderCollection
// ()
// Parameters:
// TArray<struct FUIDataProviderField> out_Fields                     (Parm, OutParm, NeedCtorLink)
// struct FName                   TargetFieldTag                 (Parm)
// TArray<class UUIDataProvider*> ReplacementProviders           (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIResourceCombinationProvider::ReplaceProviderCollection(const struct FName& TargetFieldTag, TArray<struct FUIDataProviderField>* out_Fields, TArray<class UUIDataProvider*>* ReplacementProviders)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIResourceCombinationProvider.ReplaceProviderCollection");

	UUIResourceCombinationProvider_ReplaceProviderCollection_Params params;
	params.TargetFieldTag = TargetFieldTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Fields != nullptr)
		*out_Fields = params.out_Fields;
	if (ReplacementProviders != nullptr)
		*ReplacementProviders = params.ReplacementProviders;

	return params.ReturnValue;
}


// Function Engine.UIResourceCombinationProvider.ReplaceProviderValue
// ()
// Parameters:
// TArray<struct FUIDataProviderField> out_Fields                     (Parm, OutParm, NeedCtorLink)
// struct FName                   TargetFieldTag                 (Parm)
// class UUIDataProvider*         ReplacementProvider            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIResourceCombinationProvider::ReplaceProviderValue(const struct FName& TargetFieldTag, class UUIDataProvider* ReplacementProvider, TArray<struct FUIDataProviderField>* out_Fields)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIResourceCombinationProvider.ReplaceProviderValue");

	UUIResourceCombinationProvider_ReplaceProviderValue_Params params;
	params.TargetFieldTag = TargetFieldTag;
	params.ReplacementProvider = ReplacementProvider;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Fields != nullptr)
		*out_Fields = params.out_Fields;

	return params.ReturnValue;
}


// Function Engine.UIResourceCombinationProvider.ClearProviderReferences
// ()

void UUIResourceCombinationProvider::ClearProviderReferences()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIResourceCombinationProvider.ClearProviderReferences");

	UUIResourceCombinationProvider_ClearProviderReferences_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIResourceCombinationProvider.GetCellFieldValue
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// struct FName                   CellTag                        (Parm)
// int                            ListIndex                      (Parm)
// struct FUIProviderFieldValue   out_FieldValue                 (Parm, OutParm, NeedCtorLink)
// int                            ArrayIndex                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIResourceCombinationProvider::GetCellFieldValue(const struct FName& FieldName, const struct FName& CellTag, int ListIndex, int ArrayIndex, struct FUIProviderFieldValue* out_FieldValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIResourceCombinationProvider.GetCellFieldValue");

	UUIResourceCombinationProvider_GetCellFieldValue_Params params;
	params.FieldName = FieldName;
	params.CellTag = CellTag;
	params.ListIndex = ListIndex;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_FieldValue != nullptr)
		*out_FieldValue = params.out_FieldValue;

	return params.ReturnValue;
}


// Function Engine.UIResourceCombinationProvider.GetCellFieldType
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// struct FName                   CellTag                        (Parm)
// TEnumAsByte<EUIDataProviderFieldType> FieldType                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIResourceCombinationProvider::GetCellFieldType(const struct FName& FieldName, const struct FName& CellTag, TEnumAsByte<EUIDataProviderFieldType>* FieldType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIResourceCombinationProvider.GetCellFieldType");

	UUIResourceCombinationProvider_GetCellFieldType_Params params;
	params.FieldName = FieldName;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FieldType != nullptr)
		*FieldType = params.FieldType;

	return params.ReturnValue;
}


// Function Engine.UIResourceCombinationProvider.GetElementCellTags
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// TArray<struct FName>           CellFieldTags                  (Parm, OutParm, NeedCtorLink)
// TArray<struct FString>         ColumnHeaderDisplayText        (OptionalParm, Parm, OutParm, NeedCtorLink)

void UUIResourceCombinationProvider::GetElementCellTags(const struct FName& FieldName, TArray<struct FName>* CellFieldTags, TArray<struct FString>* ColumnHeaderDisplayText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIResourceCombinationProvider.GetElementCellTags");

	UUIResourceCombinationProvider_GetElementCellTags_Params params;
	params.FieldName = FieldName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CellFieldTags != nullptr)
		*CellFieldTags = params.CellFieldTags;
	if (ColumnHeaderDisplayText != nullptr)
		*ColumnHeaderDisplayText = params.ColumnHeaderDisplayText;
}


// Function Engine.UIResourceCombinationProvider.GetElementCellValueProvider
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// int                            ListIndex                      (Parm)
// TScriptInterface<class UUIListElementCellProvider> out_ValueProvider              (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIResourceCombinationProvider::GetElementCellValueProvider(const struct FName& FieldName, int ListIndex, TScriptInterface<class UUIListElementCellProvider>* out_ValueProvider)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIResourceCombinationProvider.GetElementCellValueProvider");

	UUIResourceCombinationProvider_GetElementCellValueProvider_Params params;
	params.FieldName = FieldName;
	params.ListIndex = ListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ValueProvider != nullptr)
		*out_ValueProvider = params.out_ValueProvider;

	return params.ReturnValue;
}


// Function Engine.UIResourceCombinationProvider.GetElementCellSchemaProvider
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// TScriptInterface<class UUIListElementCellProvider> out_SchemaProvider             (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIResourceCombinationProvider::GetElementCellSchemaProvider(const struct FName& FieldName, TScriptInterface<class UUIListElementCellProvider>* out_SchemaProvider)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIResourceCombinationProvider.GetElementCellSchemaProvider");

	UUIResourceCombinationProvider_GetElementCellSchemaProvider_Params params;
	params.FieldName = FieldName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_SchemaProvider != nullptr)
		*out_SchemaProvider = params.out_SchemaProvider;

	return params.ReturnValue;
}


// Function Engine.UIResourceCombinationProvider.IsElementEnabled
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// int                            CollectionIndex                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIResourceCombinationProvider::IsElementEnabled(const struct FName& FieldName, int CollectionIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIResourceCombinationProvider.IsElementEnabled");

	UUIResourceCombinationProvider_IsElementEnabled_Params params;
	params.FieldName = FieldName;
	params.CollectionIndex = CollectionIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIResourceCombinationProvider.GetListElements
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// TArray<int>                    out_Elements                   (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIResourceCombinationProvider::GetListElements(const struct FName& FieldName, TArray<int>* out_Elements)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIResourceCombinationProvider.GetListElements");

	UUIResourceCombinationProvider_GetListElements_Params params;
	params.FieldName = FieldName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Elements != nullptr)
		*out_Elements = params.out_Elements;

	return params.ReturnValue;
}


// Function Engine.UIResourceCombinationProvider.GetElementCount
// ()
// Parameters:
// struct FName                   FieldName                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIResourceCombinationProvider::GetElementCount(const struct FName& FieldName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIResourceCombinationProvider.GetElementCount");

	UUIResourceCombinationProvider_GetElementCount_Params params;
	params.FieldName = FieldName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIResourceCombinationProvider.GetElementProviderTags
// ()
// Parameters:
// TArray<struct FName>           ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FName> UUIResourceCombinationProvider::GetElementProviderTags()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIResourceCombinationProvider.GetElementProviderTags");

	UUIResourceCombinationProvider_GetElementProviderTags_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIResourceCombinationProvider.InitializeProvider
// ()
// Parameters:
// bool                           bIsEditor                      (Parm)
// class UUIResourceDataProvider* InStaticResourceProvider       (Parm)
// class UUIDataProvider_OnlineProfileSettings* InProfileProvider              (Parm)

void UUIResourceCombinationProvider::InitializeProvider(bool bIsEditor, class UUIResourceDataProvider* InStaticResourceProvider, class UUIDataProvider_OnlineProfileSettings* InProfileProvider)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIResourceCombinationProvider.InitializeProvider");

	UUIResourceCombinationProvider_InitializeProvider_Params params;
	params.bIsEditor = bIsEditor;
	params.InStaticResourceProvider = InStaticResourceProvider;
	params.InProfileProvider = InProfileProvider;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.FindLocalPlayerIndex
// ()
// Parameters:
// class UPlayer*                 P                              (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UGameUISceneClient::FindLocalPlayerIndex(class UPlayer* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.FindLocalPlayerIndex");

	UGameUISceneClient_FindLocalPlayerIndex_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameUISceneClient.NotifyPlayerRemoved
// ()
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            RemovedPlayer                  (Parm)

void UGameUISceneClient::NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.NotifyPlayerRemoved");

	UGameUISceneClient_NotifyPlayerRemoved_Params params;
	params.PlayerIndex = PlayerIndex;
	params.RemovedPlayer = RemovedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.NotifyPlayerAdded
// ()
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            AddedPlayer                    (Parm)

void UGameUISceneClient::NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.NotifyPlayerAdded");

	UGameUISceneClient_NotifyPlayerAdded_Params params;
	params.PlayerIndex = PlayerIndex;
	params.AddedPlayer = AddedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.NotifyGameSessionEnded
// ()

void UGameUISceneClient::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.NotifyGameSessionEnded");

	UGameUISceneClient_NotifyGameSessionEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.NotifyClientTravel
// ()
// Parameters:
// class APlayerController*       TravellingPlayer               (Parm)
// struct FString                 TravelURL                      (Parm, NeedCtorLink)
// TEnumAsByte<ETravelType>       TravelType                     (Parm)
// bool                           bIsSeamlessTravel              (Parm)

void UGameUISceneClient::NotifyClientTravel(class APlayerController* TravellingPlayer, const struct FString& TravelURL, TEnumAsByte<ETravelType> TravelType, bool bIsSeamlessTravel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.NotifyClientTravel");

	UGameUISceneClient_NotifyClientTravel_Params params;
	params.TravellingPlayer = TravellingPlayer;
	params.TravelURL = TravelURL;
	params.TravelType = TravelType;
	params.bIsSeamlessTravel = bIsSeamlessTravel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.PauseGame
// ()
// Parameters:
// bool                           bDesiredPauseState             (Parm)
// int                            PlayerIndex                    (OptionalParm, Parm)

void UGameUISceneClient::PauseGame(bool bDesiredPauseState, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.PauseGame");

	UGameUISceneClient_PauseGame_Params params;
	params.bDesiredPauseState = bDesiredPauseState;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.CanUnpauseInternalUI
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameUISceneClient::CanUnpauseInternalUI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.CanUnpauseInternalUI");

	UGameUISceneClient_CanUnpauseInternalUI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameUISceneClient.RequestInputProcessingUpdate
// ()

void UGameUISceneClient::RequestInputProcessingUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.RequestInputProcessingUpdate");

	UGameUISceneClient_RequestInputProcessingUpdate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.GetCurrentNetMode
// ()
// Parameters:
// TEnumAsByte<ENetMode>          ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ENetMode> UGameUISceneClient::GetCurrentNetMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.GetCurrentNetMode");

	UGameUISceneClient_GetCurrentNetMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InteractiveFoliageActor.Touch
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void AInteractiveFoliageActor::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InteractiveFoliageActor.Touch");

	AInteractiveFoliageActor_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InteractiveFoliageActor.TakeDamage
// ()
// Parameters:
// int                            Damage                         (Parm)
// class AController*             EventInstigator                (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)

void AInteractiveFoliageActor::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InteractiveFoliageActor.TakeDamage");

	AInteractiveFoliageActor_TakeDamage_Params params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FluidInfluenceActor.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void AFluidInfluenceActor::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FluidInfluenceActor.ReplicatedEvent");

	AFluidInfluenceActor_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FluidInfluenceActor.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          inAction                       (Parm)

void AFluidInfluenceActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FluidInfluenceActor.OnToggle");

	AFluidInfluenceActor_OnToggle_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FluidSurfaceActor.Touch
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void AFluidSurfaceActor::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FluidSurfaceActor.Touch");

	AFluidSurfaceActor_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FluidSurfaceActor.TakeDamage
// ()
// Parameters:
// int                            Damage                         (Parm)
// class AController*             EventInstigator                (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)

void AFluidSurfaceActor::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FluidSurfaceActor.TakeDamage");

	AFluidSurfaceActor_TakeDamage_Params params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FluidSurfaceComponent.SetSimulationPosition
// ()
// Parameters:
// struct FVector                 WorldPos                       (Parm)

void UFluidSurfaceComponent::SetSimulationPosition(const struct FVector& WorldPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FluidSurfaceComponent.SetSimulationPosition");

	UFluidSurfaceComponent_SetSimulationPosition_Params params;
	params.WorldPos = WorldPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FluidSurfaceComponent.SetDetailPosition
// ()
// Parameters:
// struct FVector                 WorldPos                       (Parm)

void UFluidSurfaceComponent::SetDetailPosition(const struct FVector& WorldPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FluidSurfaceComponent.SetDetailPosition");

	UFluidSurfaceComponent_SetDetailPosition_Params params;
	params.WorldPos = WorldPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FluidSurfaceComponent.ApplyForce
// ()
// Parameters:
// struct FVector                 WorldPos                       (Parm)
// float                          Strength                       (Parm)
// float                          Radius                         (Parm)
// bool                           bImpulse                       (OptionalParm, Parm)

void UFluidSurfaceComponent::ApplyForce(const struct FVector& WorldPos, float Strength, float Radius, bool bImpulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FluidSurfaceComponent.ApplyForce");

	UFluidSurfaceComponent_ApplyForce_Params params;
	params.WorldPos = WorldPos;
	params.Strength = Strength;
	params.Radius = Radius;
	params.bImpulse = bImpulse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SpeedTreeComponent.SetMaterial
// ()
// Parameters:
// TEnumAsByte<ESpeedTreeMeshType> MeshType                       (Parm)
// class UMaterialInterface*      Material                       (Parm)

void USpeedTreeComponent::SetMaterial(TEnumAsByte<ESpeedTreeMeshType> MeshType, class UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpeedTreeComponent.SetMaterial");

	USpeedTreeComponent_SetMaterial_Params params;
	params.MeshType = MeshType;
	params.Material = Material;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SpeedTreeComponent.GetMaterial
// ()
// Parameters:
// TEnumAsByte<ESpeedTreeMeshType> MeshType                       (Parm)
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ReturnParm)

class UMaterialInterface* USpeedTreeComponent::GetMaterial(TEnumAsByte<ESpeedTreeMeshType> MeshType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpeedTreeComponent.GetMaterial");

	USpeedTreeComponent_GetMaterial_Params params;
	params.MeshType = MeshType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LensFlareSource.SetActorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class AActor*                  Param                          (Parm)

void ALensFlareSource::SetActorParameter(const struct FName& ParameterName, class AActor* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetActorParameter");

	ALensFlareSource_SetActorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.SetExtColorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          Red                            (Parm)
// float                          Green                          (Parm)
// float                          Blue                           (Parm)
// float                          Alpha                          (Parm)

void ALensFlareSource::SetExtColorParameter(const struct FName& ParameterName, float Red, float Green, float Blue, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetExtColorParameter");

	ALensFlareSource_SetExtColorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Red = Red;
	params.Green = Green;
	params.Blue = Blue;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.SetColorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FLinearColor            Param                          (Parm)

void ALensFlareSource::SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetColorParameter");

	ALensFlareSource_SetColorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.SetVectorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FVector                 Param                          (Parm)

void ALensFlareSource::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetVectorParameter");

	ALensFlareSource_SetVectorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.SetFloatParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          Param                          (Parm)

void ALensFlareSource::SetFloatParameter(const struct FName& ParameterName, float Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetFloatParameter");

	ALensFlareSource_SetFloatParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void ALensFlareSource::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.ReplicatedEvent");

	ALensFlareSource_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void ALensFlareSource::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.OnToggle");

	ALensFlareSource_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.PostBeginPlay
// ()

void ALensFlareSource::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.PostBeginPlay");

	ALensFlareSource_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.SetTemplate
// ()
// Parameters:
// class ULensFlare*              NewTemplate                    (Parm)

void ALensFlareSource::SetTemplate(class ULensFlare* NewTemplate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetTemplate");

	ALensFlareSource_SetTemplate_Params params;
	params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareComponent.SetIsActive
// ()
// Parameters:
// bool                           bInIsActive                    (Parm)

void ULensFlareComponent::SetIsActive(bool bInIsActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareComponent.SetIsActive");

	ULensFlareComponent_SetIsActive_Params params;
	params.bInIsActive = bInIsActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareComponent.SetSourceColor
// ()
// Parameters:
// struct FLinearColor            InSourceColor                  (Parm)

void ULensFlareComponent::SetSourceColor(const struct FLinearColor& InSourceColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareComponent.SetSourceColor");

	ULensFlareComponent_SetSourceColor_Params params;
	params.InSourceColor = InSourceColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareComponent.SetTemplate
// ()
// Parameters:
// class ULensFlare*              NewTemplate                    (Parm)
// bool                           bForceSet                      (OptionalParm, Parm)

void ULensFlareComponent::SetTemplate(class ULensFlare* NewTemplate, bool bForceSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareComponent.SetTemplate");

	ULensFlareComponent_SetTemplate_Params params;
	params.NewTemplate = NewTemplate;
	params.bForceSet = bForceSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureFlipBook.SetCurrentFrame
// ()
// Parameters:
// int                            Row                            (Parm)
// int                            Col                            (Parm)

void UTextureFlipBook::SetCurrentFrame(int Row, int Col)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureFlipBook.SetCurrentFrame");

	UTextureFlipBook_SetCurrentFrame_Params params;
	params.Row = Row;
	params.Col = Col;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureFlipBook.Stop
// ()

void UTextureFlipBook::Stop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureFlipBook.Stop");

	UTextureFlipBook_Stop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureFlipBook.Pause
// ()

void UTextureFlipBook::Pause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureFlipBook.Pause");

	UTextureFlipBook_Pause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureFlipBook.Play
// ()

void UTextureFlipBook::Play()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureFlipBook.Play");

	UTextureFlipBook_Play_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Texture2DComposite.ResetSourceRegions
// ()

void UTexture2DComposite::ResetSourceRegions()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2DComposite.ResetSourceRegions");

	UTexture2DComposite_ResetSourceRegions_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Texture2DComposite.UpdateCompositeTexture
// ()
// Parameters:
// int                            NumMipsToGenerate              (Parm)

void UTexture2DComposite::UpdateCompositeTexture(int NumMipsToGenerate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2DComposite.UpdateCompositeTexture");

	UTexture2DComposite_UpdateCompositeTexture_Params params;
	params.NumMipsToGenerate = NumMipsToGenerate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Texture2DComposite.SourceTexturesFullyStreamedIn
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UTexture2DComposite::SourceTexturesFullyStreamedIn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2DComposite.SourceTexturesFullyStreamedIn");

	UTexture2DComposite_SourceTexturesFullyStreamedIn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Texture2DDynamic.Create
// ()
// Parameters:
// int                            InSizeX                        (Parm)
// int                            InSizeY                        (Parm)
// TEnumAsByte<EPixelFormat>      InFormat                       (OptionalParm, Parm)
// bool                           InIsResolveTarget              (OptionalParm, Parm)
// class UTexture2DDynamic*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UTexture2DDynamic* UTexture2DDynamic::Create(int InSizeX, int InSizeY, TEnumAsByte<EPixelFormat> InFormat, bool InIsResolveTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2DDynamic.Create");

	UTexture2DDynamic_Create_Params params;
	params.InSizeX = InSizeX;
	params.InSizeY = InSizeY;
	params.InFormat = InFormat;
	params.InIsResolveTarget = InIsResolveTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Texture2DDynamic.Init
// ()
// Parameters:
// int                            InSizeX                        (Parm)
// int                            InSizeY                        (Parm)
// TEnumAsByte<EPixelFormat>      InFormat                       (OptionalParm, Parm)
// bool                           InIsResolveTarget              (OptionalParm, Parm)

void UTexture2DDynamic::Init(int InSizeX, int InSizeY, TEnumAsByte<EPixelFormat> InFormat, bool InIsResolveTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2DDynamic.Init");

	UTexture2DDynamic_Init_Params params;
	params.InSizeX = InSizeX;
	params.InSizeY = InSizeY;
	params.InFormat = InFormat;
	params.InIsResolveTarget = InIsResolveTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureMovie.Stop
// ()

void UTextureMovie::Stop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureMovie.Stop");

	UTextureMovie_Stop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureMovie.Pause
// ()

void UTextureMovie::Pause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureMovie.Pause");

	UTextureMovie_Pause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureMovie.Play
// ()

void UTextureMovie::Play()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureMovie.Play");

	UTextureMovie_Play_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureRenderTarget2D.Create
// ()
// Parameters:
// int                            InSizeX                        (Parm)
// int                            InSizeY                        (Parm)
// TEnumAsByte<EPixelFormat>      InFormat                       (OptionalParm, Parm)
// struct FLinearColor            InClearColor                   (OptionalParm, Parm)
// bool                           bOnlyRenderOnce                (OptionalParm, Parm)
// class UTextureRenderTarget2D*  ReturnValue                    (Parm, OutParm, ReturnParm)

class UTextureRenderTarget2D* UTextureRenderTarget2D::Create(int InSizeX, int InSizeY, TEnumAsByte<EPixelFormat> InFormat, const struct FLinearColor& InClearColor, bool bOnlyRenderOnce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureRenderTarget2D.Create");

	UTextureRenderTarget2D_Create_Params params;
	params.InSizeX = InSizeX;
	params.InSizeY = InSizeY;
	params.InFormat = InFormat;
	params.InClearColor = InClearColor;
	params.bOnlyRenderOnce = bOnlyRenderOnce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ScriptedTexture.Render
// ()
// Parameters:
// class UCanvas*                 C                              (Parm)

void UScriptedTexture::Render(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScriptedTexture.Render");

	UScriptedTexture_Render_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioDevice.FindSoundClass
// ()
// Parameters:
// struct FName                   SoundClassName                 (Parm)
// class USoundClass*             ReturnValue                    (Parm, OutParm, ReturnParm)

class USoundClass* UAudioDevice::FindSoundClass(const struct FName& SoundClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioDevice.FindSoundClass");

	UAudioDevice_FindSoundClass_Params params;
	params.SoundClassName = SoundClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AudioDevice.SetSoundMode
// ()
// Parameters:
// struct FName                   NewMode                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UAudioDevice::SetSoundMode(const struct FName& NewMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioDevice.SetSoundMode");

	UAudioDevice_SetSoundMode_Params params;
	params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DebugCameraController.ConsoleCommand
// ()
// Parameters:
// struct FString                 Command                        (Parm, NeedCtorLink)
// bool                           bWriteToLog                    (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ADebugCameraController::ConsoleCommand(const struct FString& Command, bool bWriteToLog)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.ConsoleCommand");

	ADebugCameraController_ConsoleCommand_Params params;
	params.Command = Command;
	params.bWriteToLog = bWriteToLog;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DebugCameraController.ShowDebugSelectedInfo
// ()

void ADebugCameraController::ShowDebugSelectedInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.ShowDebugSelectedInfo");

	ADebugCameraController_ShowDebugSelectedInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraController.NativeInputKey
// ()
// Parameters:
// int                            ControllerId                   (Parm)
// struct FName                   Key                            (Parm)
// TEnumAsByte<EInputEvent>       Event                          (Parm)
// float                          AmountDepressed                (OptionalParm, Parm)
// bool                           bGamepad                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ADebugCameraController::NativeInputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> Event, float AmountDepressed, bool bGamepad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.NativeInputKey");

	ADebugCameraController_NativeInputKey_Params params;
	params.ControllerId = ControllerId;
	params.Key = Key;
	params.Event = Event;
	params.AmountDepressed = AmountDepressed;
	params.bGamepad = bGamepad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DebugCameraController.DisableDebugCamera
// ()

void ADebugCameraController::DisableDebugCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.DisableDebugCamera");

	ADebugCameraController_DisableDebugCamera_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraController.NormalSpeed
// ()

void ADebugCameraController::NormalSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.NormalSpeed");

	ADebugCameraController_NormalSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraController.MoreSpeed
// ()

void ADebugCameraController::MoreSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.MoreSpeed");

	ADebugCameraController_MoreSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraController.SetFreezeRendering
// ()

void ADebugCameraController::SetFreezeRendering()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.SetFreezeRendering");

	ADebugCameraController_SetFreezeRendering_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraController.OnDeactivate
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)

void ADebugCameraController::OnDeactivate(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.OnDeactivate");

	ADebugCameraController_OnDeactivate_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraController.OnActivate
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)

void ADebugCameraController::OnActivate(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.OnActivate");

	ADebugCameraController_OnActivate_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraController.PostBeginPlay
// ()

void ADebugCameraController::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.PostBeginPlay");

	ADebugCameraController_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraController.Unselect
// ()

void ADebugCameraController::Unselect()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.Unselect");

	ADebugCameraController_Unselect_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraController.SecondarySelect
// ()
// Parameters:
// struct FVector                 HitLoc                         (Parm)
// struct FVector                 HitNormal                      (Parm)
// struct FTraceHitInfo           HitInfo                        (Parm)

void ADebugCameraController::SecondarySelect(const struct FVector& HitLoc, const struct FVector& HitNormal, const struct FTraceHitInfo& HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.SecondarySelect");

	ADebugCameraController_SecondarySelect_Params params;
	params.HitLoc = HitLoc;
	params.HitNormal = HitNormal;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraController.PrimarySelect
// ()
// Parameters:
// struct FVector                 HitLoc                         (Parm)
// struct FVector                 HitNormal                      (Parm)
// struct FTraceHitInfo           HitInfo                        (Parm)

void ADebugCameraController::PrimarySelect(const struct FVector& HitLoc, const struct FVector& HitNormal, const struct FTraceHitInfo& HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.PrimarySelect");

	ADebugCameraController_PrimarySelect_Params params;
	params.HitLoc = HitLoc;
	params.HitNormal = HitNormal;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Scout.PreBeginPlay
// ()

void AScout::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Scout.PreBeginPlay");

	AScout_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Light.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void ALight::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.OnToggle");

	ALight_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Light.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void ALight::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.ReplicatedEvent");

	ALight_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PointLightToggleable.ApplyCheckpointRecord
// ()
// Parameters:
// struct APointLightToggleable_FCheckpointRecord Record                         (Const, Parm, OutParm)

void APointLightToggleable::ApplyCheckpointRecord(struct APointLightToggleable_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightToggleable.ApplyCheckpointRecord");

	APointLightToggleable_ApplyCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.PointLightToggleable.CreateCheckpointRecord
// ()
// Parameters:
// struct APointLightToggleable_FCheckpointRecord Record                         (Parm, OutParm)

void APointLightToggleable::CreateCheckpointRecord(struct APointLightToggleable_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightToggleable.CreateCheckpointRecord");

	APointLightToggleable_CreateCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.PointLightToggleable.ShouldSaveForCheckpoint
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APointLightToggleable::ShouldSaveForCheckpoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightToggleable.ShouldSaveForCheckpoint");

	APointLightToggleable_ShouldSaveForCheckpoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SpotLightToggleable.ApplyCheckpointRecord
// ()
// Parameters:
// struct ASpotLightToggleable_FCheckpointRecord Record                         (Const, Parm, OutParm)

void ASpotLightToggleable::ApplyCheckpointRecord(struct ASpotLightToggleable_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLightToggleable.ApplyCheckpointRecord");

	ASpotLightToggleable_ApplyCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.SpotLightToggleable.CreateCheckpointRecord
// ()
// Parameters:
// struct ASpotLightToggleable_FCheckpointRecord Record                         (Parm, OutParm)

void ASpotLightToggleable::CreateCheckpointRecord(struct ASpotLightToggleable_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLightToggleable.CreateCheckpointRecord");

	ASpotLightToggleable_CreateCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.SpotLightToggleable.ShouldSaveForCheckpoint
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ASpotLightToggleable::ShouldSaveForCheckpoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLightToggleable.ShouldSaveForCheckpoint");

	ASpotLightToggleable_ShouldSaveForCheckpoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DirectionalLightComponent.OnUpdatePropertyBrightness
// ()

void UDirectionalLightComponent::OnUpdatePropertyBrightness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.OnUpdatePropertyBrightness");

	UDirectionalLightComponent_OnUpdatePropertyBrightness_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DirectionalLightComponent.OnUpdatePropertyLightColor
// ()

void UDirectionalLightComponent::OnUpdatePropertyLightColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.OnUpdatePropertyLightColor");

	UDirectionalLightComponent_OnUpdatePropertyLightColor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PointLightComponent.OnUpdatePropertyBrightness
// ()

void UPointLightComponent::OnUpdatePropertyBrightness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.OnUpdatePropertyBrightness");

	UPointLightComponent_OnUpdatePropertyBrightness_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PointLightComponent.OnUpdatePropertyLightColor
// ()

void UPointLightComponent::OnUpdatePropertyLightColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.OnUpdatePropertyLightColor");

	UPointLightComponent_OnUpdatePropertyLightColor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PointLightComponent.SetTranslation
// ()
// Parameters:
// struct FVector                 NewTranslation                 (Parm)

void UPointLightComponent::SetTranslation(const struct FVector& NewTranslation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.SetTranslation");

	UPointLightComponent_SetTranslation_Params params;
	params.NewTranslation = NewTranslation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SpotLightComponent.SetRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (Parm)

void USpotLightComponent::SetRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLightComponent.SetRotation");

	USpotLightComponent_SetRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightEnvironmentComponent.IsEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ULightEnvironmentComponent::IsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightEnvironmentComponent.IsEnabled");

	ULightEnvironmentComponent_IsEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LightEnvironmentComponent.SetEnabled
// ()
// Parameters:
// bool                           bNewEnabled                    (Parm)

void ULightEnvironmentComponent::SetEnabled(bool bNewEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightEnvironmentComponent.SetEnabled");

	ULightEnvironmentComponent_SetEnabled_Params params;
	params.bNewEnabled = bNewEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicLightEnvironmentComponent.ResetEnvironment
// ()

void UDynamicLightEnvironmentComponent::ResetEnvironment()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicLightEnvironmentComponent.ResetEnvironment");

	UDynamicLightEnvironmentComponent_ResetEnvironment_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.BreakConstraint
// ()
// Parameters:
// struct FVector                 Impulse                        (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FName                   InBoneName                     (Parm)
// bool                           bVelChange                     (OptionalParm, Parm)

void USkeletalMeshComponent::BreakConstraint(const struct FVector& Impulse, const struct FVector& HitLocation, const struct FName& InBoneName, bool bVelChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.BreakConstraint");

	USkeletalMeshComponent_BreakConstraint_Params params;
	params.Impulse = Impulse;
	params.HitLocation = HitLocation;
	params.InBoneName = InBoneName;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SkelMeshCompOnParticleSystemFinished
// ()
// Parameters:
// class UParticleSystemComponent* PSC                            (Parm, EditInline)

void USkeletalMeshComponent::SkelMeshCompOnParticleSystemFinished(class UParticleSystemComponent* PSC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SkelMeshCompOnParticleSystemFinished");

	USkeletalMeshComponent_SkelMeshCompOnParticleSystemFinished_Params params;
	params.PSC = PSC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.PlayParticleEffect
// ()
// Parameters:
// class UAnimNotify_PlayParticleEffect* AnimNotifyData                 (Const, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USkeletalMeshComponent::PlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.PlayParticleEffect");

	USkeletalMeshComponent_PlayParticleEffect_Params params;
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.CreateForceField
// ()
// Parameters:
// class UAnimNotify_ForceField*  AnimNotifyData                 (Const, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USkeletalMeshComponent::CreateForceField(class UAnimNotify_ForceField* AnimNotifyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.CreateForceField");

	USkeletalMeshComponent_CreateForceField_Params params;
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.StopAnim
// ()

void USkeletalMeshComponent::StopAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.StopAnim");

	USkeletalMeshComponent_StopAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.PlayAnim
// ()
// Parameters:
// struct FName                   AnimName                       (Parm)
// float                          Duration                       (OptionalParm, Parm)
// bool                           bLoop                          (OptionalParm, Parm)
// bool                           bRestartIfAlreadyPlaying       (OptionalParm, Parm)
// float                          StartTime                      (OptionalParm, Parm)
// bool                           bPlayBackwards                 (OptionalParm, Parm)

void USkeletalMeshComponent::PlayAnim(const struct FName& AnimName, float Duration, bool bLoop, bool bRestartIfAlreadyPlaying, float StartTime, bool bPlayBackwards)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.PlayAnim");

	USkeletalMeshComponent_PlayAnim_Params params;
	params.AnimName = AnimName;
	params.Duration = Duration;
	params.bLoop = bLoop;
	params.bRestartIfAlreadyPlaying = bRestartIfAlreadyPlaying;
	params.StartTime = StartTime;
	params.bPlayBackwards = bPlayBackwards;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.ShowMaterialSection
// ()
// Parameters:
// int                            MaterialID                     (Parm)
// bool                           bShow                          (Parm)
// int                            LODIndex                       (Parm)

void USkeletalMeshComponent::ShowMaterialSection(int MaterialID, bool bShow, int LODIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ShowMaterialSection");

	USkeletalMeshComponent_ShowMaterialSection_Params params;
	params.MaterialID = MaterialID;
	params.bShow = bShow;
	params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.UpdateMeshForBrokenConstraints
// ()

void USkeletalMeshComponent::UpdateMeshForBrokenConstraints()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateMeshForBrokenConstraints");

	USkeletalMeshComponent_UpdateMeshForBrokenConstraints_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.UnHideBoneByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm)

void USkeletalMeshComponent::UnHideBoneByName(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UnHideBoneByName");

	USkeletalMeshComponent_UnHideBoneByName_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.HideBoneByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm)
// TEnumAsByte<EPhysBodyOp>       PhysBodyOption                 (Parm)

void USkeletalMeshComponent::HideBoneByName(const struct FName& BoneName, TEnumAsByte<EPhysBodyOp> PhysBodyOption)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.HideBoneByName");

	USkeletalMeshComponent_HideBoneByName_Params params;
	params.BoneName = BoneName;
	params.PhysBodyOption = PhysBodyOption;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.IsBoneHidden
// ()
// Parameters:
// int                            BoneIndex                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USkeletalMeshComponent::IsBoneHidden(int BoneIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsBoneHidden");

	USkeletalMeshComponent_IsBoneHidden_Params params;
	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.UnHideBone
// ()
// Parameters:
// int                            BoneIndex                      (Parm)

void USkeletalMeshComponent::UnHideBone(int BoneIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UnHideBone");

	USkeletalMeshComponent_UnHideBone_Params params;
	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.HideBone
// ()
// Parameters:
// int                            BoneIndex                      (Parm)
// TEnumAsByte<EPhysBodyOp>       PhysBodyOption                 (Parm)

void USkeletalMeshComponent::HideBone(int BoneIndex, TEnumAsByte<EPhysBodyOp> PhysBodyOption)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.HideBone");

	USkeletalMeshComponent_HideBone_Params params;
	params.BoneIndex = BoneIndex;
	params.PhysBodyOption = PhysBodyOption;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetFaceFXRegisterEx
// ()
// Parameters:
// struct FString                 RegName                        (Parm, NeedCtorLink)
// TEnumAsByte<EFaceFXRegOp>      RegOp                          (Parm)
// float                          FirstValue                     (Parm)
// float                          FirstInterpDuration            (Parm)
// float                          NextValue                      (Parm)
// float                          NextInterpDuration             (Parm)

void USkeletalMeshComponent::SetFaceFXRegisterEx(const struct FString& RegName, TEnumAsByte<EFaceFXRegOp> RegOp, float FirstValue, float FirstInterpDuration, float NextValue, float NextInterpDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetFaceFXRegisterEx");

	USkeletalMeshComponent_SetFaceFXRegisterEx_Params params;
	params.RegName = RegName;
	params.RegOp = RegOp;
	params.FirstValue = FirstValue;
	params.FirstInterpDuration = FirstInterpDuration;
	params.NextValue = NextValue;
	params.NextInterpDuration = NextInterpDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetFaceFXRegister
// ()
// Parameters:
// struct FString                 RegName                        (Parm, NeedCtorLink)
// float                          RegVal                         (Parm)
// TEnumAsByte<EFaceFXRegOp>      RegOp                          (Parm)
// float                          InterpDuration                 (OptionalParm, Parm)

void USkeletalMeshComponent::SetFaceFXRegister(const struct FString& RegName, float RegVal, TEnumAsByte<EFaceFXRegOp> RegOp, float InterpDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetFaceFXRegister");

	USkeletalMeshComponent_SetFaceFXRegister_Params params;
	params.RegName = RegName;
	params.RegVal = RegVal;
	params.RegOp = RegOp;
	params.InterpDuration = InterpDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.GetFaceFXRegister
// ()
// Parameters:
// struct FString                 RegName                        (Parm, NeedCtorLink)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetFaceFXRegister(const struct FString& RegName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetFaceFXRegister");

	USkeletalMeshComponent_GetFaceFXRegister_Params params;
	params.RegName = RegName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.DeclareFaceFXRegister
// ()
// Parameters:
// struct FString                 RegName                        (Parm, NeedCtorLink)

void USkeletalMeshComponent::DeclareFaceFXRegister(const struct FString& RegName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.DeclareFaceFXRegister");

	USkeletalMeshComponent_DeclareFaceFXRegister_Params params;
	params.RegName = RegName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.IsPlayingFaceFXAnim
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USkeletalMeshComponent::IsPlayingFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsPlayingFaceFXAnim");

	USkeletalMeshComponent_IsPlayingFaceFXAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.StopFaceFXAnim
// ()

void USkeletalMeshComponent::StopFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.StopFaceFXAnim");

	USkeletalMeshComponent_StopFaceFXAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.PlayFaceFXAnim
// ()
// Parameters:
// class UFaceFXAnimSet*          FaceFXAnimSetRef               (Parm)
// struct FString                 AnimName                       (Parm, NeedCtorLink)
// struct FString                 GroupName                      (Parm, NeedCtorLink)
// class USoundCue*               SoundCueToPlay                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USkeletalMeshComponent::PlayFaceFXAnim(class UFaceFXAnimSet* FaceFXAnimSetRef, const struct FString& AnimName, const struct FString& GroupName, class USoundCue* SoundCueToPlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.PlayFaceFXAnim");

	USkeletalMeshComponent_PlayFaceFXAnim_Params params;
	params.FaceFXAnimSetRef = FaceFXAnimSetRef;
	params.AnimName = AnimName;
	params.GroupName = GroupName;
	params.SoundCueToPlay = SoundCueToPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.ToggleInstanceVertexWeights
// ()
// Parameters:
// bool                           bEnable                        (Parm)
// int                            LODIdx                         (Parm)

void USkeletalMeshComponent::ToggleInstanceVertexWeights(bool bEnable, int LODIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ToggleInstanceVertexWeights");

	USkeletalMeshComponent_ToggleInstanceVertexWeights_Params params;
	params.bEnable = bEnable;
	params.LODIdx = LODIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.UpdateInstanceVertexWeightBones
// ()
// Parameters:
// TArray<struct FBonePair>       BonePairs                      (Parm, NeedCtorLink)

void USkeletalMeshComponent::UpdateInstanceVertexWeightBones(TArray<struct FBonePair> BonePairs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateInstanceVertexWeightBones");

	USkeletalMeshComponent_UpdateInstanceVertexWeightBones_Params params;
	params.BonePairs = BonePairs;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.FindInstanceVertexweightBonePair
// ()
// Parameters:
// struct FBonePair               Bones                          (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USkeletalMeshComponent::FindInstanceVertexweightBonePair(const struct FBonePair& Bones)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindInstanceVertexweightBonePair");

	USkeletalMeshComponent_FindInstanceVertexweightBonePair_Params params;
	params.Bones = Bones;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.RemoveInstanceVertexWeightBoneParented
// ()
// Parameters:
// struct FName                   BoneName                       (Parm)

void USkeletalMeshComponent::RemoveInstanceVertexWeightBoneParented(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.RemoveInstanceVertexWeightBoneParented");

	USkeletalMeshComponent_RemoveInstanceVertexWeightBoneParented_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.AddInstanceVertexWeightBoneParented
// ()
// Parameters:
// struct FName                   BoneName                       (Parm)
// bool                           bPairWithParent                (OptionalParm, Parm)

void USkeletalMeshComponent::AddInstanceVertexWeightBoneParented(const struct FName& BoneName, bool bPairWithParent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AddInstanceVertexWeightBoneParented");

	USkeletalMeshComponent_AddInstanceVertexWeightBoneParented_Params params;
	params.BoneName = BoneName;
	params.bPairWithParent = bPairWithParent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.GetBonesWithinRadius
// ()
// Parameters:
// struct FVector                 Origin                         (Parm)
// float                          Radius                         (Parm)
// int                            TraceFlags                     (Parm)
// TArray<struct FName>           out_Bones                      (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USkeletalMeshComponent::GetBonesWithinRadius(const struct FVector& Origin, float Radius, int TraceFlags, TArray<struct FName>* out_Bones)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBonesWithinRadius");

	USkeletalMeshComponent_GetBonesWithinRadius_Params params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.TraceFlags = TraceFlags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Bones != nullptr)
		*out_Bones = params.out_Bones;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.UpdateAnimations
// ()

void USkeletalMeshComponent::UpdateAnimations()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateAnimations");

	USkeletalMeshComponent_UpdateAnimations_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.ForceSkelUpdate
// ()

void USkeletalMeshComponent::ForceSkelUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ForceSkelUpdate");

	USkeletalMeshComponent_ForceSkelUpdate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.UpdateRBBonesFromSpaceBases
// ()
// Parameters:
// bool                           bMoveUnfixedBodies             (Parm)
// bool                           bTeleport                      (Parm)

void USkeletalMeshComponent::UpdateRBBonesFromSpaceBases(bool bMoveUnfixedBodies, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateRBBonesFromSpaceBases");

	USkeletalMeshComponent_UpdateRBBonesFromSpaceBases_Params params;
	params.bMoveUnfixedBodies = bMoveUnfixedBodies;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetHasPhysicsAssetInstance
// ()
// Parameters:
// bool                           bHasInstance                   (Parm)

void USkeletalMeshComponent::SetHasPhysicsAssetInstance(bool bHasInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetHasPhysicsAssetInstance");

	USkeletalMeshComponent_SetHasPhysicsAssetInstance_Params params;
	params.bHasInstance = bHasInstance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.FindBodyInstanceNamed
// ()
// Parameters:
// struct FName                   BoneName                       (Parm)
// class URB_BodyInstance*        ReturnValue                    (Parm, OutParm, ReturnParm)

class URB_BodyInstance* USkeletalMeshComponent::FindBodyInstanceNamed(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindBodyInstanceNamed");

	USkeletalMeshComponent_FindBodyInstanceNamed_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.FindConstraintBoneName
// ()
// Parameters:
// int                            ConstraintIndex                (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName USkeletalMeshComponent::FindConstraintBoneName(int ConstraintIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindConstraintBoneName");

	USkeletalMeshComponent_FindConstraintBoneName_Params params;
	params.ConstraintIndex = ConstraintIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.FindConstraintIndex
// ()
// Parameters:
// struct FName                   ConstraintName                 (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USkeletalMeshComponent::FindConstraintIndex(const struct FName& ConstraintName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindConstraintIndex");

	USkeletalMeshComponent_FindConstraintIndex_Params params;
	params.ConstraintName = ConstraintName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.InitMorphTargets
// ()

void USkeletalMeshComponent::InitMorphTargets()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.InitMorphTargets");

	USkeletalMeshComponent_InitMorphTargets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.InitSkelControls
// ()

void USkeletalMeshComponent::InitSkelControls()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.InitSkelControls");

	USkeletalMeshComponent_InitSkelControls_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.UpdateParentBoneMap
// ()

void USkeletalMeshComponent::UpdateParentBoneMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateParentBoneMap");

	USkeletalMeshComponent_UpdateParentBoneMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetParentAnimComponent
// ()
// Parameters:
// class USkeletalMeshComponent*  NewParentAnimComp              (Parm, EditInline)

void USkeletalMeshComponent::SetParentAnimComponent(class USkeletalMeshComponent* NewParentAnimComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetParentAnimComponent");

	USkeletalMeshComponent_SetParentAnimComponent_Params params;
	params.NewParentAnimComp = NewParentAnimComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetAnimTreeTemplate
// ()
// Parameters:
// class UAnimTree*               NewTemplate                    (Parm)

void USkeletalMeshComponent::SetAnimTreeTemplate(class UAnimTree* NewTemplate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAnimTreeTemplate");

	USkeletalMeshComponent_SetAnimTreeTemplate_Params params;
	params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.GetClosestCollidingBoneLocation
// ()
// Parameters:
// struct FVector                 TestLocation                   (Parm)
// bool                           bCheckZeroExtent               (Parm)
// bool                           bCheckNonZeroExtent            (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector USkeletalMeshComponent::GetClosestCollidingBoneLocation(const struct FVector& TestLocation, bool bCheckZeroExtent, bool bCheckNonZeroExtent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClosestCollidingBoneLocation");

	USkeletalMeshComponent_GetClosestCollidingBoneLocation_Params params;
	params.TestLocation = TestLocation;
	params.bCheckZeroExtent = bCheckZeroExtent;
	params.bCheckNonZeroExtent = bCheckNonZeroExtent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.FindClosestBone
// ()
// Parameters:
// struct FVector                 TestLocation                   (Parm)
// struct FVector                 BoneLocation                   (OptionalParm, Parm, OutParm)
// float                          IgnoreScale                    (OptionalParm, Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName USkeletalMeshComponent::FindClosestBone(const struct FVector& TestLocation, float IgnoreScale, struct FVector* BoneLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindClosestBone");

	USkeletalMeshComponent_FindClosestBone_Params params;
	params.TestLocation = TestLocation;
	params.IgnoreScale = IgnoreScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (BoneLocation != nullptr)
		*BoneLocation = params.BoneLocation;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.TransformFromBoneSpace
// ()
// Parameters:
// struct FName                   BoneName                       (Parm)
// struct FVector                 InPosition                     (Parm)
// struct FRotator                InRotation                     (Parm)
// struct FVector                 OutPosition                    (Parm, OutParm)
// struct FRotator                OutRotation                    (Parm, OutParm)

void USkeletalMeshComponent::TransformFromBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.TransformFromBoneSpace");

	USkeletalMeshComponent_TransformFromBoneSpace_Params params;
	params.BoneName = BoneName;
	params.InPosition = InPosition;
	params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPosition != nullptr)
		*OutPosition = params.OutPosition;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;
}


// Function Engine.SkeletalMeshComponent.TransformToBoneSpace
// ()
// Parameters:
// struct FName                   BoneName                       (Parm)
// struct FVector                 InPosition                     (Parm)
// struct FRotator                InRotation                     (Parm)
// struct FVector                 OutPosition                    (Parm, OutParm)
// struct FRotator                OutRotation                    (Parm, OutParm)

void USkeletalMeshComponent::TransformToBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.TransformToBoneSpace");

	USkeletalMeshComponent_TransformToBoneSpace_Params params;
	params.BoneName = BoneName;
	params.InPosition = InPosition;
	params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPosition != nullptr)
		*OutPosition = params.OutPosition;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;
}


// Function Engine.SkeletalMeshComponent.GetBoneAxis
// ()
// Parameters:
// struct FName                   BoneName                       (Parm)
// TEnumAsByte<EAxis>             Axis                           (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector USkeletalMeshComponent::GetBoneAxis(const struct FName& BoneName, TEnumAsByte<EAxis> Axis)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneAxis");

	USkeletalMeshComponent_GetBoneAxis_Params params;
	params.BoneName = BoneName;
	params.Axis = Axis;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetRefPosePosition
// ()
// Parameters:
// int                            BoneIndex                      (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector USkeletalMeshComponent::GetRefPosePosition(int BoneIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetRefPosePosition");

	USkeletalMeshComponent_GetRefPosePosition_Params params;
	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.BoneIsChildOf
// ()
// Parameters:
// struct FName                   BoneName                       (Parm)
// struct FName                   ParentBoneName                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USkeletalMeshComponent::BoneIsChildOf(const struct FName& BoneName, const struct FName& ParentBoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.BoneIsChildOf");

	USkeletalMeshComponent_BoneIsChildOf_Params params;
	params.BoneName = BoneName;
	params.ParentBoneName = ParentBoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetBoneNames
// ()
// Parameters:
// TArray<struct FName>           BoneNames                      (Parm, OutParm, NeedCtorLink)

void USkeletalMeshComponent::GetBoneNames(TArray<struct FName>* BoneNames)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneNames");

	USkeletalMeshComponent_GetBoneNames_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (BoneNames != nullptr)
		*BoneNames = params.BoneNames;
}


// Function Engine.SkeletalMeshComponent.GetParentBone
// ()
// Parameters:
// struct FName                   BoneName                       (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName USkeletalMeshComponent::GetParentBone(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetParentBone");

	USkeletalMeshComponent_GetParentBone_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetBoneMatrix
// ()
// Parameters:
// int                            BoneIndex                      (Parm)
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FMatrix USkeletalMeshComponent::GetBoneMatrix(int BoneIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneMatrix");

	USkeletalMeshComponent_GetBoneMatrix_Params params;
	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetBoneName
// ()
// Parameters:
// int                            BoneIndex                      (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName USkeletalMeshComponent::GetBoneName(int BoneIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneName");

	USkeletalMeshComponent_GetBoneName_Params params;
	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.MatchRefBone
// ()
// Parameters:
// struct FName                   BoneName                       (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USkeletalMeshComponent::MatchRefBone(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.MatchRefBone");

	USkeletalMeshComponent_MatchRefBone_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetBoneLocation
// ()
// Parameters:
// struct FName                   BoneName                       (Parm)
// int                            Space                          (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector USkeletalMeshComponent::GetBoneLocation(const struct FName& BoneName, int Space)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneLocation");

	USkeletalMeshComponent_GetBoneLocation_Params params;
	params.BoneName = BoneName;
	params.Space = Space;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetBoneQuaternion
// ()
// Parameters:
// struct FName                   BoneName                       (Parm)
// int                            Space                          (OptionalParm, Parm)
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FQuat USkeletalMeshComponent::GetBoneQuaternion(const struct FName& BoneName, int Space)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneQuaternion");

	USkeletalMeshComponent_GetBoneQuaternion_Params params;
	params.BoneName = BoneName;
	params.Space = Space;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.FindMorphNode
// ()
// Parameters:
// struct FName                   InNodeName                     (Parm)
// class UMorphNodeBase*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UMorphNodeBase* USkeletalMeshComponent::FindMorphNode(const struct FName& InNodeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindMorphNode");

	USkeletalMeshComponent_FindMorphNode_Params params;
	params.InNodeName = InNodeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.FindSkelControl
// ()
// Parameters:
// struct FName                   InControlName                  (Parm)
// class USkelControlBase*        ReturnValue                    (Parm, OutParm, ReturnParm)

class USkelControlBase* USkeletalMeshComponent::FindSkelControl(const struct FName& InControlName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindSkelControl");

	USkeletalMeshComponent_FindSkelControl_Params params;
	params.InControlName = InControlName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.AllAnimNodes
// ()
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class UAnimNode*               Node                           (Parm, OutParm)

void USkeletalMeshComponent::AllAnimNodes(class UClass* BaseClass, class UAnimNode** Node)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AllAnimNodes");

	USkeletalMeshComponent_AllAnimNodes_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Node != nullptr)
		*Node = params.Node;
}


// Function Engine.SkeletalMeshComponent.FindAnimNode
// ()
// Parameters:
// struct FName                   InNodeName                     (Parm)
// class UAnimNode*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimNode* USkeletalMeshComponent::FindAnimNode(const struct FName& InNodeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindAnimNode");

	USkeletalMeshComponent_FindAnimNode_Params params;
	params.InNodeName = InNodeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.FindMorphTarget
// ()
// Parameters:
// struct FName                   MorphTargetName                (Parm)
// class UMorphTarget*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UMorphTarget* USkeletalMeshComponent::FindMorphTarget(const struct FName& MorphTargetName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindMorphTarget");

	USkeletalMeshComponent_FindMorphTarget_Params params;
	params.MorphTargetName = MorphTargetName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetAnimLength
// ()
// Parameters:
// struct FName                   AnimSeqName                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetAnimLength(const struct FName& AnimSeqName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAnimLength");

	USkeletalMeshComponent_GetAnimLength_Params params;
	params.AnimSeqName = AnimSeqName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetAnimRateByDuration
// ()
// Parameters:
// struct FName                   AnimSeqName                    (Parm)
// float                          Duration                       (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetAnimRateByDuration(const struct FName& AnimSeqName, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAnimRateByDuration");

	USkeletalMeshComponent_GetAnimRateByDuration_Params params;
	params.AnimSeqName = AnimSeqName;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.RestoreSavedAnimSets
// ()

void USkeletalMeshComponent::RestoreSavedAnimSets()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.RestoreSavedAnimSets");

	USkeletalMeshComponent_RestoreSavedAnimSets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SaveAnimSets
// ()

void USkeletalMeshComponent::SaveAnimSets()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SaveAnimSets");

	USkeletalMeshComponent_SaveAnimSets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.FindAnimSequence
// ()
// Parameters:
// struct FName                   AnimSeqName                    (Parm)
// class UAnimSequence*           ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimSequence* USkeletalMeshComponent::FindAnimSequence(const struct FName& AnimSeqName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindAnimSequence");

	USkeletalMeshComponent_FindAnimSequence_Params params;
	params.AnimSeqName = AnimSeqName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.WakeSoftBody
// ()

void USkeletalMeshComponent::WakeSoftBody()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.WakeSoftBody");

	USkeletalMeshComponent_WakeSoftBody_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetSoftBodyFrozen
// ()
// Parameters:
// bool                           bNewFrozen                     (Parm)

void USkeletalMeshComponent::SetSoftBodyFrozen(bool bNewFrozen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetSoftBodyFrozen");

	USkeletalMeshComponent_SetSoftBodyFrozen_Params params;
	params.bNewFrozen = bNewFrozen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.UpdateSoftBodyParams
// ()

void USkeletalMeshComponent::UpdateSoftBodyParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateSoftBodyParams");

	USkeletalMeshComponent_UpdateSoftBodyParams_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothValidBounds
// ()
// Parameters:
// struct FVector                 ClothValidBoundsMin            (Parm)
// struct FVector                 ClothValidBoundsMax            (Parm)

void USkeletalMeshComponent::SetClothValidBounds(const struct FVector& ClothValidBoundsMin, const struct FVector& ClothValidBoundsMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothValidBounds");

	USkeletalMeshComponent_SetClothValidBounds_Params params;
	params.ClothValidBoundsMin = ClothValidBoundsMin;
	params.ClothValidBoundsMax = ClothValidBoundsMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.EnableClothValidBounds
// ()
// Parameters:
// bool                           IfEnableClothValidBounds       (Parm)

void USkeletalMeshComponent::EnableClothValidBounds(bool IfEnableClothValidBounds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.EnableClothValidBounds");

	USkeletalMeshComponent_EnableClothValidBounds_Params params;
	params.IfEnableClothValidBounds = IfEnableClothValidBounds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.AttachClothToCollidingShapes
// ()
// Parameters:
// bool                           AttatchTwoWay                  (Parm)
// bool                           AttachTearable                 (Parm)

void USkeletalMeshComponent::AttachClothToCollidingShapes(bool AttatchTwoWay, bool AttachTearable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AttachClothToCollidingShapes");

	USkeletalMeshComponent_AttachClothToCollidingShapes_Params params;
	params.AttatchTwoWay = AttatchTwoWay;
	params.AttachTearable = AttachTearable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothVelocity
// ()
// Parameters:
// struct FVector                 VelocityOffSet                 (Parm)

void USkeletalMeshComponent::SetClothVelocity(const struct FVector& VelocityOffSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothVelocity");

	USkeletalMeshComponent_SetClothVelocity_Params params;
	params.VelocityOffSet = VelocityOffSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothPosition
// ()
// Parameters:
// struct FVector                 ClothOffSet                    (Parm)

void USkeletalMeshComponent::SetClothPosition(const struct FVector& ClothOffSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothPosition");

	USkeletalMeshComponent_SetClothPosition_Params params;
	params.ClothOffSet = ClothOffSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothSleep
// ()
// Parameters:
// bool                           IfClothSleep                   (Parm)

void USkeletalMeshComponent::SetClothSleep(bool IfClothSleep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothSleep");

	USkeletalMeshComponent_SetClothSleep_Params params;
	params.IfClothSleep = IfClothSleep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothThickness
// ()
// Parameters:
// float                          ClothThickness                 (Parm)

void USkeletalMeshComponent::SetClothThickness(float ClothThickness)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothThickness");

	USkeletalMeshComponent_SetClothThickness_Params params;
	params.ClothThickness = ClothThickness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothTearFactor
// ()
// Parameters:
// float                          ClothTearFactor                (Parm)

void USkeletalMeshComponent::SetClothTearFactor(float ClothTearFactor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothTearFactor");

	USkeletalMeshComponent_SetClothTearFactor_Params params;
	params.ClothTearFactor = ClothTearFactor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothStretchingStiffness
// ()
// Parameters:
// float                          ClothStretchingStiffness       (Parm)

void USkeletalMeshComponent::SetClothStretchingStiffness(float ClothStretchingStiffness)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothStretchingStiffness");

	USkeletalMeshComponent_SetClothStretchingStiffness_Params params;
	params.ClothStretchingStiffness = ClothStretchingStiffness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothSolverIterations
// ()
// Parameters:
// int                            ClothSolverIterations          (Parm)

void USkeletalMeshComponent::SetClothSolverIterations(int ClothSolverIterations)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothSolverIterations");

	USkeletalMeshComponent_SetClothSolverIterations_Params params;
	params.ClothSolverIterations = ClothSolverIterations;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothSleepLinearVelocity
// ()
// Parameters:
// float                          ClothSleepLinearVelocity       (Parm)

void USkeletalMeshComponent::SetClothSleepLinearVelocity(float ClothSleepLinearVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothSleepLinearVelocity");

	USkeletalMeshComponent_SetClothSleepLinearVelocity_Params params;
	params.ClothSleepLinearVelocity = ClothSleepLinearVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothPressure
// ()
// Parameters:
// float                          ClothPressure                  (Parm)

void USkeletalMeshComponent::SetClothPressure(float ClothPressure)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothPressure");

	USkeletalMeshComponent_SetClothPressure_Params params;
	params.ClothPressure = ClothPressure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothFriction
// ()
// Parameters:
// float                          ClothFriction                  (Parm)

void USkeletalMeshComponent::SetClothFriction(float ClothFriction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothFriction");

	USkeletalMeshComponent_SetClothFriction_Params params;
	params.ClothFriction = ClothFriction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothFlags
// ()
// Parameters:
// int                            ClothFlags                     (Parm)

void USkeletalMeshComponent::SetClothFlags(int ClothFlags)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothFlags");

	USkeletalMeshComponent_SetClothFlags_Params params;
	params.ClothFlags = ClothFlags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothDampingCoefficient
// ()
// Parameters:
// float                          ClothDampingCoefficient        (Parm)

void USkeletalMeshComponent::SetClothDampingCoefficient(float ClothDampingCoefficient)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothDampingCoefficient");

	USkeletalMeshComponent_SetClothDampingCoefficient_Params params;
	params.ClothDampingCoefficient = ClothDampingCoefficient;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothCollisionResponseCoefficient
// ()
// Parameters:
// float                          ClothCollisionResponseCoefficient (Parm)

void USkeletalMeshComponent::SetClothCollisionResponseCoefficient(float ClothCollisionResponseCoefficient)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothCollisionResponseCoefficient");

	USkeletalMeshComponent_SetClothCollisionResponseCoefficient_Params params;
	params.ClothCollisionResponseCoefficient = ClothCollisionResponseCoefficient;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothBendingStiffness
// ()
// Parameters:
// float                          ClothBendingStiffness          (Parm)

void USkeletalMeshComponent::SetClothBendingStiffness(float ClothBendingStiffness)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothBendingStiffness");

	USkeletalMeshComponent_SetClothBendingStiffness_Params params;
	params.ClothBendingStiffness = ClothBendingStiffness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothAttachmentTearFactor
// ()
// Parameters:
// float                          ClothAttachTearFactor          (Parm)

void USkeletalMeshComponent::SetClothAttachmentTearFactor(float ClothAttachTearFactor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothAttachmentTearFactor");

	USkeletalMeshComponent_SetClothAttachmentTearFactor_Params params;
	params.ClothAttachTearFactor = ClothAttachTearFactor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothAttachmentResponseCoefficient
// ()
// Parameters:
// float                          ClothAttachmentResponseCoefficient (Parm)

void USkeletalMeshComponent::SetClothAttachmentResponseCoefficient(float ClothAttachmentResponseCoefficient)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothAttachmentResponseCoefficient");

	USkeletalMeshComponent_SetClothAttachmentResponseCoefficient_Params params;
	params.ClothAttachmentResponseCoefficient = ClothAttachmentResponseCoefficient;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.GetClothThickness
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothThickness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothThickness");

	USkeletalMeshComponent_GetClothThickness_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothTearFactor
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothTearFactor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothTearFactor");

	USkeletalMeshComponent_GetClothTearFactor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothStretchingStiffness
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothStretchingStiffness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothStretchingStiffness");

	USkeletalMeshComponent_GetClothStretchingStiffness_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothSolverIterations
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USkeletalMeshComponent::GetClothSolverIterations()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothSolverIterations");

	USkeletalMeshComponent_GetClothSolverIterations_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothSleepLinearVelocity
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothSleepLinearVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothSleepLinearVelocity");

	USkeletalMeshComponent_GetClothSleepLinearVelocity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothPressure
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothPressure()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothPressure");

	USkeletalMeshComponent_GetClothPressure_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothFriction
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothFriction()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothFriction");

	USkeletalMeshComponent_GetClothFriction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothFlags
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USkeletalMeshComponent::GetClothFlags()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothFlags");

	USkeletalMeshComponent_GetClothFlags_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothDampingCoefficient
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothDampingCoefficient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothDampingCoefficient");

	USkeletalMeshComponent_GetClothDampingCoefficient_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothCollisionResponseCoefficient
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothCollisionResponseCoefficient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothCollisionResponseCoefficient");

	USkeletalMeshComponent_GetClothCollisionResponseCoefficient_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothBendingStiffness
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothBendingStiffness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothBendingStiffness");

	USkeletalMeshComponent_GetClothBendingStiffness_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothAttachmentTearFactor
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothAttachmentTearFactor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothAttachmentTearFactor");

	USkeletalMeshComponent_GetClothAttachmentTearFactor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothAttachmentResponseCoefficient
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothAttachmentResponseCoefficient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothAttachmentResponseCoefficient");

	USkeletalMeshComponent_GetClothAttachmentResponseCoefficient_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.ForceApexClothingTeleport
// ()

void USkeletalMeshComponent::ForceApexClothingTeleport()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ForceApexClothingTeleport");

	USkeletalMeshComponent_ForceApexClothingTeleport_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.ForceApexClothingTeleportAndReset
// ()

void USkeletalMeshComponent::ForceApexClothingTeleportAndReset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ForceApexClothingTeleportAndReset");

	USkeletalMeshComponent_ForceApexClothingTeleportAndReset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.ResetClothVertsToRefPose
// ()

void USkeletalMeshComponent::ResetClothVertsToRefPose()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ResetClothVertsToRefPose");

	USkeletalMeshComponent_ResetClothVertsToRefPose_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetAttachClothVertsToBaseBody
// ()
// Parameters:
// bool                           bAttachVerts                   (Parm)

void USkeletalMeshComponent::SetAttachClothVertsToBaseBody(bool bAttachVerts)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAttachClothVertsToBaseBody");

	USkeletalMeshComponent_SetAttachClothVertsToBaseBody_Params params;
	params.bAttachVerts = bAttachVerts;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothExternalForce
// ()
// Parameters:
// struct FVector                 InForce                        (Parm)

void USkeletalMeshComponent::SetClothExternalForce(const struct FVector& InForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothExternalForce");

	USkeletalMeshComponent_SetClothExternalForce_Params params;
	params.InForce = InForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.UpdateClothParams
// ()

void USkeletalMeshComponent::UpdateClothParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateClothParams");

	USkeletalMeshComponent_UpdateClothParams_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetEnableClothingSimulation
// ()
// Parameters:
// bool                           bInEnable                      (Parm)

void USkeletalMeshComponent::SetEnableClothingSimulation(bool bInEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetEnableClothingSimulation");

	USkeletalMeshComponent_SetEnableClothingSimulation_Params params;
	params.bInEnable = bInEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothFrozen
// ()
// Parameters:
// bool                           bNewFrozen                     (Parm)

void USkeletalMeshComponent::SetClothFrozen(bool bNewFrozen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothFrozen");

	USkeletalMeshComponent_SetClothFrozen_Params params;
	params.bNewFrozen = bNewFrozen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetEnableClothSimulation
// ()
// Parameters:
// bool                           bInEnable                      (Parm)

void USkeletalMeshComponent::SetEnableClothSimulation(bool bInEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetEnableClothSimulation");

	USkeletalMeshComponent_SetEnableClothSimulation_Params params;
	params.bInEnable = bInEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetForceRefPose
// ()
// Parameters:
// bool                           bNewForceRefPose               (Parm)

void USkeletalMeshComponent::SetForceRefPose(bool bNewForceRefPose)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetForceRefPose");

	USkeletalMeshComponent_SetForceRefPose_Params params;
	params.bNewForceRefPose = bNewForceRefPose;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetPhysicsAsset
// ()
// Parameters:
// class UPhysicsAsset*           NewPhysicsAsset                (Parm)
// bool                           bForceReInit                   (OptionalParm, Parm)

void USkeletalMeshComponent::SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetPhysicsAsset");

	USkeletalMeshComponent_SetPhysicsAsset_Params params;
	params.NewPhysicsAsset = NewPhysicsAsset;
	params.bForceReInit = bForceReInit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetSkeletalMesh
// ()
// Parameters:
// class USkeletalMesh*           NewMesh                        (Parm)
// bool                           bKeepSpaceBases                (OptionalParm, Parm)

void USkeletalMeshComponent::SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bKeepSpaceBases)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetSkeletalMesh");

	USkeletalMeshComponent_SetSkeletalMesh_Params params;
	params.NewMesh = NewMesh;
	params.bKeepSpaceBases = bKeepSpaceBases;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.GetTransformMatrix
// ()
// Parameters:
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FMatrix USkeletalMeshComponent::GetTransformMatrix()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetTransformMatrix");

	USkeletalMeshComponent_GetTransformMatrix_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.AttachedComponents
// ()
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class UActorComponent*         OutComponent                   (Parm, OutParm, EditInline)

void USkeletalMeshComponent::AttachedComponents(class UClass* BaseClass, class UActorComponent** OutComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AttachedComponents");

	USkeletalMeshComponent_AttachedComponents_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutComponent != nullptr)
		*OutComponent = params.OutComponent;
}


// Function Engine.SkeletalMeshComponent.IsComponentAttached
// ()
// Parameters:
// class UActorComponent*         Component                      (Parm, EditInline)
// struct FName                   BoneName                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USkeletalMeshComponent::IsComponentAttached(class UActorComponent* Component, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsComponentAttached");

	USkeletalMeshComponent_IsComponentAttached_Params params;
	params.Component = Component;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.FindComponentAttachedToBone
// ()
// Parameters:
// struct FName                   InBoneName                     (Parm)
// class UActorComponent*         ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UActorComponent* USkeletalMeshComponent::FindComponentAttachedToBone(const struct FName& InBoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindComponentAttachedToBone");

	USkeletalMeshComponent_FindComponentAttachedToBone_Params params;
	params.InBoneName = InBoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetSocketBoneName
// ()
// Parameters:
// struct FName                   InSocketName                   (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName USkeletalMeshComponent::GetSocketBoneName(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetSocketBoneName");

	USkeletalMeshComponent_GetSocketBoneName_Params params;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetSocketByName
// ()
// Parameters:
// struct FName                   InSocketName                   (Parm)
// class USkeletalMeshSocket*     ReturnValue                    (Parm, OutParm, ReturnParm)

class USkeletalMeshSocket* USkeletalMeshComponent::GetSocketByName(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetSocketByName");

	USkeletalMeshComponent_GetSocketByName_Params params;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetSocketWorldLocationAndRotation
// ()
// Parameters:
// struct FName                   InSocketName                   (Parm)
// struct FVector                 OutLocation                    (Parm, OutParm)
// struct FRotator                OutRotation                    (OptionalParm, Parm, OutParm)
// int                            Space                          (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USkeletalMeshComponent::GetSocketWorldLocationAndRotation(const struct FName& InSocketName, int Space, struct FVector* OutLocation, struct FRotator* OutRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetSocketWorldLocationAndRotation");

	USkeletalMeshComponent_GetSocketWorldLocationAndRotation_Params params;
	params.InSocketName = InSocketName;
	params.Space = Space;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutLocation != nullptr)
		*OutLocation = params.OutLocation;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.AttachComponentToSocket
// ()
// Parameters:
// class UActorComponent*         Component                      (Parm, EditInline)
// struct FName                   SocketName                     (Parm)

void USkeletalMeshComponent::AttachComponentToSocket(class UActorComponent* Component, const struct FName& SocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AttachComponentToSocket");

	USkeletalMeshComponent_AttachComponentToSocket_Params params;
	params.Component = Component;
	params.SocketName = SocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.DetachComponent
// ()
// Parameters:
// class UActorComponent*         Component                      (Parm, EditInline)

void USkeletalMeshComponent::DetachComponent(class UActorComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.DetachComponent");

	USkeletalMeshComponent_DetachComponent_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.AttachComponent
// ()
// Parameters:
// class UActorComponent*         Component                      (Parm, EditInline)
// struct FName                   BoneName                       (Parm)
// struct FVector                 RelativeLocation               (OptionalParm, Parm)
// struct FRotator                RelativeRotation               (OptionalParm, Parm)
// struct FVector                 RelativeScale                  (OptionalParm, Parm)

void USkeletalMeshComponent::AttachComponent(class UActorComponent* Component, const struct FName& BoneName, const struct FVector& RelativeLocation, const struct FRotator& RelativeRotation, const struct FVector& RelativeScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AttachComponent");

	USkeletalMeshComponent_AttachComponent_Params params;
	params.Component = Component;
	params.BoneName = BoneName;
	params.RelativeLocation = RelativeLocation;
	params.RelativeRotation = RelativeRotation;
	params.RelativeScale = RelativeScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineActor.OnToggleHidden
// ()
// Parameters:
// class USeqAct_ToggleHidden*    Action                         (Parm)

void ASplineActor::OnToggleHidden(class USeqAct_ToggleHidden* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.OnToggleHidden");

	ASplineActor_OnToggleHidden_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineActor.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          inAction                       (Parm)

void ASplineActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.OnToggle");

	ASplineActor_OnToggle_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineActor.GetAllConnectedSplineActors
// ()
// Parameters:
// TArray<class ASplineActor*>    OutSet                         (Parm, OutParm, NeedCtorLink)

void ASplineActor::GetAllConnectedSplineActors(TArray<class ASplineActor*>* OutSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.GetAllConnectedSplineActors");

	ASplineActor_GetAllConnectedSplineActors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutSet != nullptr)
		*OutSet = params.OutSet;
}


// Function Engine.SplineActor.FindSplinePathTo
// ()
// Parameters:
// class ASplineActor*            Goal                           (Parm)
// TArray<class ASplineActor*>    OutRoute                       (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ASplineActor::FindSplinePathTo(class ASplineActor* Goal, TArray<class ASplineActor*>* OutRoute)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.FindSplinePathTo");

	ASplineActor_FindSplinePathTo_Params params;
	params.Goal = Goal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutRoute != nullptr)
		*OutRoute = params.OutRoute;

	return params.ReturnValue;
}


// Function Engine.SplineActor.GetBestConnectionInDirection
// ()
// Parameters:
// struct FVector                 DesiredDir                     (Parm)
// bool                           bUseLinksFrom                  (OptionalParm, Parm)
// class ASplineActor*            ReturnValue                    (Parm, OutParm, ReturnParm)

class ASplineActor* ASplineActor::GetBestConnectionInDirection(const struct FVector& DesiredDir, bool bUseLinksFrom)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.GetBestConnectionInDirection");

	ASplineActor_GetBestConnectionInDirection_Params params;
	params.DesiredDir = DesiredDir;
	params.bUseLinksFrom = bUseLinksFrom;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineActor.GetRandomConnection
// ()
// Parameters:
// bool                           bUseLinksFrom                  (OptionalParm, Parm)
// class ASplineActor*            ReturnValue                    (Parm, OutParm, ReturnParm)

class ASplineActor* ASplineActor::GetRandomConnection(bool bUseLinksFrom)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.GetRandomConnection");

	ASplineActor_GetRandomConnection_Params params;
	params.bUseLinksFrom = bUseLinksFrom;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineActor.BreakAllConnectionsFrom
// ()

void ASplineActor::BreakAllConnectionsFrom()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.BreakAllConnectionsFrom");

	ASplineActor_BreakAllConnectionsFrom_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineActor.BreakAllConnections
// ()

void ASplineActor::BreakAllConnections()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.BreakAllConnections");

	ASplineActor_BreakAllConnections_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineActor.BreakConnectionTo
// ()
// Parameters:
// class ASplineActor*            NextActor                      (Parm)

void ASplineActor::BreakConnectionTo(class ASplineActor* NextActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.BreakConnectionTo");

	ASplineActor_BreakConnectionTo_Params params;
	params.NextActor = NextActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineActor.FindTargetForComponent
// ()
// Parameters:
// class USplineComponent*        SplineComp                     (Parm, EditInline)
// class ASplineActor*            ReturnValue                    (Parm, OutParm, ReturnParm)

class ASplineActor* ASplineActor::FindTargetForComponent(class USplineComponent* SplineComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.FindTargetForComponent");

	ASplineActor_FindTargetForComponent_Params params;
	params.SplineComp = SplineComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineActor.FindSplineComponentTo
// ()
// Parameters:
// class ASplineActor*            NextActor                      (Parm)
// class USplineComponent*        ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class USplineComponent* ASplineActor::FindSplineComponentTo(class ASplineActor* NextActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.FindSplineComponentTo");

	ASplineActor_FindSplineComponentTo_Params params;
	params.NextActor = NextActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineActor.IsConnectedTo
// ()
// Parameters:
// class ASplineActor*            NextActor                      (Parm)
// bool                           bCheckForDisableDestination    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ASplineActor::IsConnectedTo(class ASplineActor* NextActor, bool bCheckForDisableDestination)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.IsConnectedTo");

	ASplineActor_IsConnectedTo_Params params;
	params.NextActor = NextActor;
	params.bCheckForDisableDestination = bCheckForDisableDestination;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineActor.AddConnectionTo
// ()
// Parameters:
// class ASplineActor*            NextActor                      (Parm)

void ASplineActor::AddConnectionTo(class ASplineActor* NextActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.AddConnectionTo");

	ASplineActor_AddConnectionTo_Params params;
	params.NextActor = NextActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineActor.UpdateConnectedSplineComponents
// ()
// Parameters:
// bool                           bFinish                        (Parm)

void ASplineActor::UpdateConnectedSplineComponents(bool bFinish)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.UpdateConnectedSplineComponents");

	ASplineActor_UpdateConnectedSplineComponents_Params params;
	params.bFinish = bFinish;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineActor.UpdateSplineComponents
// ()

void ASplineActor::UpdateSplineComponents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.UpdateSplineComponents");

	ASplineActor_UpdateSplineComponents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineActor.GetWorldSpaceTangent
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ASplineActor::GetWorldSpaceTangent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.GetWorldSpaceTangent");

	ASplineActor_GetWorldSpaceTangent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineLoftActor.UpdateSplineParams
// ()

void ASplineLoftActor::UpdateSplineParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineLoftActor.UpdateSplineParams");

	ASplineLoftActor_UpdateSplineParams_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineLoftActor.ClearLoftMesh
// ()

void ASplineLoftActor::ClearLoftMesh()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineLoftActor.ClearLoftMesh");

	ASplineLoftActor_ClearLoftMesh_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline
// ()
// Parameters:
// float                          Distance                       (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector USplineComponent::GetTangentAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline");

	USplineComponent_GetTangentAtDistanceAlongSpline_Params params;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline
// ()
// Parameters:
// float                          Distance                       (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector USplineComponent::GetLocationAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline");

	USplineComponent_GetLocationAtDistanceAlongSpline_Params params;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetSplineLength
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USplineComponent::GetSplineLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetSplineLength");

	USplineComponent_GetSplineLength_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.UpdateSplineReparamTable
// ()

void USplineComponent::UpdateSplineReparamTable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.UpdateSplineReparamTable");

	USplineComponent_UpdateSplineReparamTable_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineComponent.UpdateSplineCurviness
// ()

void USplineComponent::UpdateSplineCurviness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.UpdateSplineCurviness");

	USplineComponent_UpdateSplineCurviness_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ProcBuilding.FindEdgeForTopLevelScope
// ()
// Parameters:
// int                            TopLevelScopeIndex             (Parm)
// TEnumAsByte<EScopeEdge>        Edge                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AProcBuilding::FindEdgeForTopLevelScope(int TopLevelScopeIndex, TEnumAsByte<EScopeEdge> Edge)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProcBuilding.FindEdgeForTopLevelScope");

	AProcBuilding_FindEdgeForTopLevelScope_Params params;
	params.TopLevelScopeIndex = TopLevelScopeIndex;
	params.Edge = Edge;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ProcBuilding.BreakFractureComponent
// ()
// Parameters:
// class UFracturedStaticMeshComponent* Comp                           (Parm, EditInline)
// struct FVector                 BoxMin                         (Parm)
// struct FVector                 BoxMax                         (Parm)

void AProcBuilding::BreakFractureComponent(class UFracturedStaticMeshComponent* Comp, const struct FVector& BoxMin, const struct FVector& BoxMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProcBuilding.BreakFractureComponent");

	AProcBuilding_BreakFractureComponent_Params params;
	params.Comp = Comp;
	params.BoxMin = BoxMin;
	params.BoxMax = BoxMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ProcBuilding.GetAllGroupedProcBuildings
// ()
// Parameters:
// TArray<class AProcBuilding*>   OutSet                         (Parm, OutParm, NeedCtorLink)

void AProcBuilding::GetAllGroupedProcBuildings(TArray<class AProcBuilding*>* OutSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProcBuilding.GetAllGroupedProcBuildings");

	AProcBuilding_GetAllGroupedProcBuildings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutSet != nullptr)
		*OutSet = params.OutSet;
}


// Function Engine.ProcBuilding.GetBaseMostBuilding
// ()
// Parameters:
// class AProcBuilding*           ReturnValue                    (Parm, OutParm, ReturnParm)

class AProcBuilding* AProcBuilding::GetBaseMostBuilding()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProcBuilding.GetBaseMostBuilding");

	AProcBuilding_GetBaseMostBuilding_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ProcBuilding.FindComponentsForTopLevelScope
// ()
// Parameters:
// int                            TopLevelScopeIndex             (Parm)
// TArray<class UStaticMeshComponent*> ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink, EditInline)

TArray<class UStaticMeshComponent*> AProcBuilding::FindComponentsForTopLevelScope(int TopLevelScopeIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProcBuilding.FindComponentsForTopLevelScope");

	AProcBuilding_FindComponentsForTopLevelScope_Params params;
	params.TopLevelScopeIndex = TopLevelScopeIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ProcBuilding.ClearBuildingMeshes
// ()

void AProcBuilding::ClearBuildingMeshes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProcBuilding.ClearBuildingMeshes");

	AProcBuilding_ClearBuildingMeshes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PBRuleNodeMesh.PickRandomBuildingMesh
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UPBRuleNodeMesh::PickRandomBuildingMesh()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PBRuleNodeMesh.PickRandomBuildingMesh");

	UPBRuleNodeMesh_PickRandomBuildingMesh_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.ShouldShowGore
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameReplicationInfo::ShouldShowGore()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.ShouldShowGore");

	AGameReplicationInfo_ShouldShowGore_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.IsCoopMultiplayerGame
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameReplicationInfo::IsCoopMultiplayerGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.IsCoopMultiplayerGame");

	AGameReplicationInfo_IsCoopMultiplayerGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.IsMultiplayerGame
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameReplicationInfo::IsMultiplayerGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.IsMultiplayerGame");

	AGameReplicationInfo_IsMultiplayerGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.EndGame
// ()

void AGameReplicationInfo::EndGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.EndGame");

	AGameReplicationInfo_EndGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.StartMatch
// ()

void AGameReplicationInfo::StartMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.StartMatch");

	AGameReplicationInfo_StartMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.SetTeam
// ()
// Parameters:
// int                            Index                          (Parm)
// class ATeamInfo*               TI                             (Parm)

void AGameReplicationInfo::SetTeam(int Index, class ATeamInfo* TI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.SetTeam");

	AGameReplicationInfo_SetTeam_Params params;
	params.Index = Index;
	params.TI = TI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.RemovePRI
// ()
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)

void AGameReplicationInfo::RemovePRI(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.RemovePRI");

	AGameReplicationInfo_RemovePRI_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.AddPRI
// ()
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)

void AGameReplicationInfo::AddPRI(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.AddPRI");

	AGameReplicationInfo_AddPRI_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.OnSameTeam
// ()
// Parameters:
// class AActor*                  A                              (Parm)
// class AActor*                  B                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameReplicationInfo::OnSameTeam(class AActor* A, class AActor* B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.OnSameTeam");

	AGameReplicationInfo_OnSameTeam_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.Timer
// ()

void AGameReplicationInfo::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.Timer");

	AGameReplicationInfo_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.Reset
// ()

void AGameReplicationInfo::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.Reset");

	AGameReplicationInfo_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.ReceivedGameClass
// ()

void AGameReplicationInfo::ReceivedGameClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.ReceivedGameClass");

	AGameReplicationInfo_ReceivedGameClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void AGameReplicationInfo::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.ReplicatedEvent");

	AGameReplicationInfo_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.PostBeginPlay
// ()

void AGameReplicationInfo::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.PostBeginPlay");

	AGameReplicationInfo_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.UnregisterPlayerFromSession
// ()

void APlayerReplicationInfo::UnregisterPlayerFromSession()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.UnregisterPlayerFromSession");

	APlayerReplicationInfo_UnregisterPlayerFromSession_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.RegisterPlayerWithSession
// ()

void APlayerReplicationInfo::RegisterPlayerWithSession()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.RegisterPlayerWithSession");

	APlayerReplicationInfo_RegisterPlayerWithSession_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.IsInvalidName
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerReplicationInfo::IsInvalidName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.IsInvalidName");

	APlayerReplicationInfo_IsInvalidName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.GetTeamNum
// ()
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char APlayerReplicationInfo::GetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.GetTeamNum");

	APlayerReplicationInfo_GetTeamNum_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.SetUniqueId
// ()
// Parameters:
// struct FUniqueNetId            PlayerUniqueId                 (Parm)

void APlayerReplicationInfo::SetUniqueId(const struct FUniqueNetId& PlayerUniqueId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetUniqueId");

	APlayerReplicationInfo_SetUniqueId_Params params;
	params.PlayerUniqueId = PlayerUniqueId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.SeamlessTravelTo
// ()
// Parameters:
// class APlayerReplicationInfo*  NewPRI                         (Parm)

void APlayerReplicationInfo::SeamlessTravelTo(class APlayerReplicationInfo* NewPRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SeamlessTravelTo");

	APlayerReplicationInfo_SeamlessTravelTo_Params params;
	params.NewPRI = NewPRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.IncrementDeaths
// ()
// Parameters:
// int                            Amt                            (OptionalParm, Parm)

void APlayerReplicationInfo::IncrementDeaths(int Amt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.IncrementDeaths");

	APlayerReplicationInfo_IncrementDeaths_Params params;
	params.Amt = Amt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.CopyProperties
// ()
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)

void APlayerReplicationInfo::CopyProperties(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.CopyProperties");

	APlayerReplicationInfo_CopyProperties_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.OverrideWith
// ()
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)

void APlayerReplicationInfo::OverrideWith(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.OverrideWith");

	APlayerReplicationInfo_OverrideWith_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.Duplicate
// ()
// Parameters:
// class APlayerReplicationInfo*  ReturnValue                    (Parm, OutParm, ReturnParm)

class APlayerReplicationInfo* APlayerReplicationInfo::Duplicate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.Duplicate");

	APlayerReplicationInfo_Duplicate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.SetWaitingPlayer
// ()
// Parameters:
// bool                           B                              (Parm)

void APlayerReplicationInfo::SetWaitingPlayer(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetWaitingPlayer");

	APlayerReplicationInfo_SetWaitingPlayer_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.SetPlayerName
// ()
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void APlayerReplicationInfo::SetPlayerName(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetPlayerName");

	APlayerReplicationInfo_SetPlayerName_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.DisplayDebug
// ()
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          YL                             (Parm, OutParm)
// float                          YPos                           (Parm, OutParm)

void APlayerReplicationInfo::DisplayDebug(class AHUD* HUD, float* YL, float* YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.DisplayDebug");

	APlayerReplicationInfo_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (YL != nullptr)
		*YL = params.YL;
	if (YPos != nullptr)
		*YPos = params.YPos;
}


// Function Engine.PlayerReplicationInfo.GetHumanReadableName
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerReplicationInfo::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.GetHumanReadableName");

	APlayerReplicationInfo_GetHumanReadableName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.Reset
// ()

void APlayerReplicationInfo::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.Reset");

	APlayerReplicationInfo_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.Destroyed
// ()

void APlayerReplicationInfo::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.Destroyed");

	APlayerReplicationInfo_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.ShouldBroadCastWelcomeMessage
// ()
// Parameters:
// bool                           bExiting                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerReplicationInfo::ShouldBroadCastWelcomeMessage(bool bExiting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.ShouldBroadCastWelcomeMessage");

	APlayerReplicationInfo_ShouldBroadCastWelcomeMessage_Params params;
	params.bExiting = bExiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.UpdatePing
// ()
// Parameters:
// float                          TimeStamp                      (Parm)

void APlayerReplicationInfo::UpdatePing(float TimeStamp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.UpdatePing");

	APlayerReplicationInfo_UpdatePing_Params params;
	params.TimeStamp = TimeStamp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void APlayerReplicationInfo::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.ReplicatedEvent");

	APlayerReplicationInfo_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.SetPlayerTeam
// ()
// Parameters:
// class ATeamInfo*               NewTeam                        (Parm)

void APlayerReplicationInfo::SetPlayerTeam(class ATeamInfo* NewTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetPlayerTeam");

	APlayerReplicationInfo_SetPlayerTeam_Params params;
	params.NewTeam = NewTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.ClientInitialize
// ()
// Parameters:
// class AController*             C                              (Parm)

void APlayerReplicationInfo::ClientInitialize(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.ClientInitialize");

	APlayerReplicationInfo_ClientInitialize_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.PostBeginPlay
// ()

void APlayerReplicationInfo::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.PostBeginPlay");

	APlayerReplicationInfo_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TeamInfo.GetTeamNum
// ()
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char ATeamInfo::GetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.GetTeamNum");

	ATeamInfo_GetTeamNum_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TeamInfo.GetHumanReadableName
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ATeamInfo::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.GetHumanReadableName");

	ATeamInfo_GetHumanReadableName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TeamInfo.RemoveFromTeam
// ()
// Parameters:
// class AController*             Other                          (Parm)

void ATeamInfo::RemoveFromTeam(class AController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.RemoveFromTeam");

	ATeamInfo_RemoveFromTeam_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TeamInfo.AddToTeam
// ()
// Parameters:
// class AController*             Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ATeamInfo::AddToTeam(class AController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.AddToTeam");

	ATeamInfo_AddToTeam_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TeamInfo.Destroyed
// ()

void ATeamInfo::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.Destroyed");

	ATeamInfo_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TeamInfo.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void ATeamInfo::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.ReplicatedEvent");

	ATeamInfo_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraActor.DisplayDebug
// ()
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void ACameraActor::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraActor.DisplayDebug");

	ACameraActor_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.CameraActor.GetCameraView
// ()
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FTPOV                   OutPOV                         (Parm, OutParm)

void ACameraActor::GetCameraView(float DeltaTime, struct FTPOV* OutPOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraActor.GetCameraView");

	ACameraActor_GetCameraView_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPOV != nullptr)
		*OutPOV = params.OutPOV;
}


// Function Engine.CameraAnimInst.SetPlaySpace
// ()
// Parameters:
// TEnumAsByte<ECameraAnimPlaySpace> NewSpace                       (Parm)
// struct FRotator                UserPlaySpace                  (OptionalParm, Parm)

void UCameraAnimInst::SetPlaySpace(TEnumAsByte<ECameraAnimPlaySpace> NewSpace, const struct FRotator& UserPlaySpace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.SetPlaySpace");

	UCameraAnimInst_SetPlaySpace_Params params;
	params.NewSpace = NewSpace;
	params.UserPlaySpace = UserPlaySpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraAnimInst.ApplyTransientScaling
// ()
// Parameters:
// float                          Scalar                         (Parm)

void UCameraAnimInst::ApplyTransientScaling(float Scalar)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.ApplyTransientScaling");

	UCameraAnimInst_ApplyTransientScaling_Params params;
	params.Scalar = Scalar;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraAnimInst.Stop
// ()
// Parameters:
// bool                           bImmediate                     (OptionalParm, Parm)

void UCameraAnimInst::Stop(bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.Stop");

	UCameraAnimInst_Stop_Params params;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraAnimInst.AdvanceAnim
// ()
// Parameters:
// float                          DeltaTime                      (Parm)
// bool                           bJump                          (Parm)

void UCameraAnimInst::AdvanceAnim(float DeltaTime, bool bJump)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.AdvanceAnim");

	UCameraAnimInst_AdvanceAnim_Params params;
	params.DeltaTime = DeltaTime;
	params.bJump = bJump;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraAnimInst.Update
// ()
// Parameters:
// float                          NewRate                        (Parm)
// float                          NewScale                       (Parm)
// float                          NewBlendInTime                 (Parm)
// float                          NewBlendOutTime                (Parm)
// float                          NewDuration                    (OptionalParm, Parm)

void UCameraAnimInst::Update(float NewRate, float NewScale, float NewBlendInTime, float NewBlendOutTime, float NewDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.Update");

	UCameraAnimInst_Update_Params params;
	params.NewRate = NewRate;
	params.NewScale = NewScale;
	params.NewBlendInTime = NewBlendInTime;
	params.NewBlendOutTime = NewBlendOutTime;
	params.NewDuration = NewDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraAnimInst.Play
// ()
// Parameters:
// class UCameraAnim*             Anim                           (Parm)
// class AActor*                  CamActor                       (Parm)
// float                          InRate                         (Parm)
// float                          InScale                        (Parm)
// float                          InBlendInTime                  (Parm)
// float                          InBlendOutTime                 (Parm)
// bool                           bInLoop                        (Parm)
// bool                           bRandomStartTime               (Parm)
// float                          Duration                       (OptionalParm, Parm)

void UCameraAnimInst::Play(class UCameraAnim* Anim, class AActor* CamActor, float InRate, float InScale, float InBlendInTime, float InBlendOutTime, bool bInLoop, bool bRandomStartTime, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.Play");

	UCameraAnimInst_Play_Params params;
	params.Anim = Anim;
	params.CamActor = CamActor;
	params.InRate = InRate;
	params.InScale = InScale;
	params.InBlendInTime = InBlendInTime;
	params.InBlendOutTime = InBlendOutTime;
	params.bInLoop = bInLoop;
	params.bRandomStartTime = bRandomStartTime;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier.UpdateAlpha
// ()
// Parameters:
// class ACamera*                 Camera                         (Parm)
// float                          DeltaTime                      (Parm)

void UCameraModifier::UpdateAlpha(class ACamera* Camera, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.UpdateAlpha");

	UCameraModifier_UpdateAlpha_Params params;
	params.Camera = Camera;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier.ProcessViewRotation
// ()
// Parameters:
// class AActor*                  ViewTarget                     (Parm)
// float                          DeltaTime                      (Parm)
// struct FRotator                out_ViewRotation               (Parm, OutParm)
// struct FRotator                out_DeltaRot                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UCameraModifier::ProcessViewRotation(class AActor* ViewTarget, float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.ProcessViewRotation");

	UCameraModifier_ProcessViewRotation_Params params;
	params.ViewTarget = ViewTarget;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ViewRotation != nullptr)
		*out_ViewRotation = params.out_ViewRotation;
	if (out_DeltaRot != nullptr)
		*out_DeltaRot = params.out_DeltaRot;

	return params.ReturnValue;
}


// Function Engine.CameraModifier.ToggleModifier
// ()

void UCameraModifier::ToggleModifier()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.ToggleModifier");

	UCameraModifier_ToggleModifier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier.EnableModifier
// ()

void UCameraModifier::EnableModifier()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.EnableModifier");

	UCameraModifier_EnableModifier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier.DisableModifier
// ()
// Parameters:
// bool                           bImmediate                     (OptionalParm, Parm)

void UCameraModifier::DisableModifier(bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.DisableModifier");

	UCameraModifier_DisableModifier_Params params;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier.RemoveCameraModifier
// ()
// Parameters:
// class ACamera*                 Camera                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UCameraModifier::RemoveCameraModifier(class ACamera* Camera)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.RemoveCameraModifier");

	UCameraModifier_RemoveCameraModifier_Params params;
	params.Camera = Camera;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraModifier.AddCameraModifier
// ()
// Parameters:
// class ACamera*                 Camera                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UCameraModifier::AddCameraModifier(class ACamera* Camera)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.AddCameraModifier");

	UCameraModifier_AddCameraModifier_Params params;
	params.Camera = Camera;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraModifier.IsDisabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UCameraModifier::IsDisabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.IsDisabled");

	UCameraModifier_IsDisabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraModifier.ModifyCamera
// ()
// Parameters:
// class ACamera*                 Camera                         (Parm)
// float                          DeltaTime                      (Parm)
// struct FTPOV                   OutPOV                         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UCameraModifier::ModifyCamera(class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.ModifyCamera");

	UCameraModifier_ModifyCamera_Params params;
	params.Camera = Camera;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPOV != nullptr)
		*OutPOV = params.OutPOV;

	return params.ReturnValue;
}


// Function Engine.CameraModifier.Init
// ()

void UCameraModifier::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.Init");

	UCameraModifier_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraShake.GetLocOscillationMagnitude
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UCameraShake::GetLocOscillationMagnitude()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.GetLocOscillationMagnitude");

	UCameraShake_GetLocOscillationMagnitude_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraShake.GetRotOscillationMagnitude
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UCameraShake::GetRotOscillationMagnitude()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.GetRotOscillationMagnitude");

	UCameraShake_GetRotOscillationMagnitude_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraModifier_CameraShake.ModifyCamera
// ()
// Parameters:
// class ACamera*                 Camera                         (Parm)
// float                          DeltaTime                      (Parm)
// struct FTPOV                   OutPOV                         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UCameraModifier_CameraShake::ModifyCamera(class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.ModifyCamera");

	UCameraModifier_CameraShake_ModifyCamera_Params params;
	params.Camera = Camera;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPOV != nullptr)
		*OutPOV = params.OutPOV;

	return params.ReturnValue;
}


// Function Engine.CameraModifier_CameraShake.UpdateCameraShake
// ()
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FCameraShakeInstance    Shake                          (Parm, OutParm)
// struct FTPOV                   OutPOV                         (Parm, OutParm)

void UCameraModifier_CameraShake::UpdateCameraShake(float DeltaTime, struct FCameraShakeInstance* Shake, struct FTPOV* OutPOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.UpdateCameraShake");

	UCameraModifier_CameraShake_UpdateCameraShake_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Shake != nullptr)
		*Shake = params.Shake;
	if (OutPOV != nullptr)
		*OutPOV = params.OutPOV;
}


// Function Engine.CameraModifier_CameraShake.RemoveAllCameraShakes
// ()

void UCameraModifier_CameraShake::RemoveAllCameraShakes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.RemoveAllCameraShakes");

	UCameraModifier_CameraShake_RemoveAllCameraShakes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier_CameraShake.RemoveCameraShake
// ()
// Parameters:
// class UCameraShake*            Shake                          (Parm)

void UCameraModifier_CameraShake::RemoveCameraShake(class UCameraShake* Shake)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.RemoveCameraShake");

	UCameraModifier_CameraShake_RemoveCameraShake_Params params;
	params.Shake = Shake;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier_CameraShake.AddCameraShake
// ()
// Parameters:
// class UCameraShake*            NewShake                       (Parm)
// float                          Scale                          (Parm)
// TEnumAsByte<ECameraAnimPlaySpace> PlaySpace                      (OptionalParm, Parm)
// struct FRotator                UserPlaySpaceRot               (OptionalParm, Parm)

void UCameraModifier_CameraShake::AddCameraShake(class UCameraShake* NewShake, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.AddCameraShake");

	UCameraModifier_CameraShake_AddCameraShake_Params params;
	params.NewShake = NewShake;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier_CameraShake.InitializeShake
// ()
// Parameters:
// class UCameraShake*            NewShake                       (Parm)
// float                          Scale                          (Parm)
// TEnumAsByte<ECameraAnimPlaySpace> PlaySpace                      (Parm)
// struct FRotator                UserPlaySpaceRot               (OptionalParm, Parm)
// struct FCameraShakeInstance    ReturnValue                    (Parm, OutParm, ReturnParm)

struct FCameraShakeInstance UCameraModifier_CameraShake::InitializeShake(class UCameraShake* NewShake, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.InitializeShake");

	UCameraModifier_CameraShake_InitializeShake_Params params;
	params.NewShake = NewShake;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraModifier_CameraShake.ReinitShake
// ()
// Parameters:
// int                            ActiveShakeIdx                 (Parm)
// float                          Scale                          (Parm)

void UCameraModifier_CameraShake::ReinitShake(int ActiveShakeIdx, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.ReinitShake");

	UCameraModifier_CameraShake_ReinitShake_Params params;
	params.ActiveShakeIdx = ActiveShakeIdx;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier_CameraShake.InitializeOffset
// ()
// Parameters:
// struct FFOscillator            Param                          (Const, Parm, OutParm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UCameraModifier_CameraShake::InitializeOffset(struct FFOscillator* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.InitializeOffset");

	UCameraModifier_CameraShake_InitializeOffset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Param != nullptr)
		*Param = params.Param;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.PartiallyDuplicates
// ()
// Parameters:
// int                            Switch1                        (Parm)
// int                            Switch2                        (Parm)
// class UObject*                 OptionalObject1                (Parm)
// class UObject*                 OptionalObject2                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ULocalMessage::PartiallyDuplicates(int Switch1, int Switch2, class UObject* OptionalObject1, class UObject* OptionalObject2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.PartiallyDuplicates");

	ULocalMessage_PartiallyDuplicates_Params params;
	params.Switch1 = Switch1;
	params.Switch2 = Switch2;
	params.OptionalObject1 = OptionalObject1;
	params.OptionalObject2 = OptionalObject2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.IsConsoleMessage
// ()
// Parameters:
// int                            Switch                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ULocalMessage::IsConsoleMessage(int Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.IsConsoleMessage");

	ULocalMessage_IsConsoleMessage_Params params;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetLifeTime
// ()
// Parameters:
// int                            Switch                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ULocalMessage::GetLifeTime(int Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetLifeTime");

	ULocalMessage_GetLifeTime_Params params;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetFontSize
// ()
// Parameters:
// int                            Switch                         (Parm)
// class APlayerReplicationInfo*  RelatedPRI1                    (Parm)
// class APlayerReplicationInfo*  RelatedPRI2                    (Parm)
// class APlayerReplicationInfo*  LocalPlayer                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ULocalMessage::GetFontSize(int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetFontSize");

	ULocalMessage_GetFontSize_Params params;
	params.Switch = Switch;
	params.RelatedPRI1 = RelatedPRI1;
	params.RelatedPRI2 = RelatedPRI2;
	params.LocalPlayer = LocalPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetPos
// ()
// Parameters:
// int                            Switch                         (Parm)
// class AHUD*                    myHUD                          (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ULocalMessage::GetPos(int Switch, class AHUD* myHUD)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetPos");

	ULocalMessage_GetPos_Params params;
	params.Switch = Switch;
	params.myHUD = myHUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetColor
// ()
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FColor                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FColor ULocalMessage::GetColor(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetColor");

	ULocalMessage_GetColor_Params params;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetConsoleColor
// ()
// Parameters:
// class APlayerReplicationInfo*  RelatedPRI_2                   (Parm)
// struct FColor                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FColor ULocalMessage::GetConsoleColor(class APlayerReplicationInfo* RelatedPRI_2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetConsoleColor");

	ULocalMessage_GetConsoleColor_Params params;
	params.RelatedPRI_2 = RelatedPRI_2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetString
// ()
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// bool                           bPRI1HUD                       (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ULocalMessage::GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetString");

	ULocalMessage_GetString_Params params;
	params.Switch = Switch;
	params.bPRI1HUD = bPRI1HUD;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.ClientReceive
// ()
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void ULocalMessage::ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.ClientReceive");

	ULocalMessage_ClientReceive_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_Teleport.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_Teleport::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Teleport.GetObjClassVersion");

	USeqAct_Teleport_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Teleport.ShouldTeleport
// ()
// Parameters:
// class AActor*                  TestActor                      (Parm)
// struct FVector                 TeleportLocation               (Parm)
// float                          TeleportDist                   (OptionalParm, Parm)
// TArray<class AVolume*>         Volumes                        (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqAct_Teleport::ShouldTeleport(class AActor* TestActor, const struct FVector& TeleportLocation, float TeleportDist, TArray<class AVolume*> Volumes)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Teleport.ShouldTeleport");

	USeqAct_Teleport_ShouldTeleport_Params params;
	params.TestActor = TestActor;
	params.TeleportLocation = TeleportLocation;
	params.TeleportDist = TeleportDist;
	params.Volumes = Volumes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_SetVelocity.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_SetVelocity::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetVelocity.GetObjClassVersion");

	USeqAct_SetVelocity_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_AttachToActor.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_AttachToActor::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_AttachToActor.GetObjClassVersion");

	USeqAct_AttachToActor_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileInterface.ClearDownloadedFile
// ()
// Parameters:
// struct FString                 Filename                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineTitleFileInterface::ClearDownloadedFile(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.ClearDownloadedFile");

	UOnlineTitleFileInterface_ClearDownloadedFile_Params params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileInterface.ClearDownloadedFiles
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineTitleFileInterface::ClearDownloadedFiles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.ClearDownloadedFiles");

	UOnlineTitleFileInterface_ClearDownloadedFiles_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileInterface.GetTitleFileState
// ()
// Parameters:
// struct FString                 Filename                       (Parm, NeedCtorLink)
// TEnumAsByte<EOnlineEnumerationReadState> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EOnlineEnumerationReadState> UOnlineTitleFileInterface::GetTitleFileState(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.GetTitleFileState");

	UOnlineTitleFileInterface_GetTitleFileState_Params params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileInterface.GetTitleFileContents
// ()
// Parameters:
// struct FString                 Filename                       (Parm, NeedCtorLink)
// TArray<unsigned char>          FileContents                   (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineTitleFileInterface::GetTitleFileContents(const struct FString& Filename, TArray<unsigned char>* FileContents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.GetTitleFileContents");

	UOnlineTitleFileInterface_GetTitleFileContents_Params params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FileContents != nullptr)
		*FileContents = params.FileContents;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileInterface.ClearReadTitleFileCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  (Parm, NeedCtorLink)

void UOnlineTitleFileInterface::ClearReadTitleFileCompleteDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.ClearReadTitleFileCompleteDelegate");

	UOnlineTitleFileInterface_ClearReadTitleFileCompleteDelegate_Params params;
	params.ReadTitleFileCompleteDelegate = ReadTitleFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineTitleFileInterface.AddReadTitleFileCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  (Parm, NeedCtorLink)

void UOnlineTitleFileInterface::AddReadTitleFileCompleteDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.AddReadTitleFileCompleteDelegate");

	UOnlineTitleFileInterface_AddReadTitleFileCompleteDelegate_Params params;
	params.ReadTitleFileCompleteDelegate = ReadTitleFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineTitleFileInterface.ReadTitleFile
// ()
// Parameters:
// struct FString                 FileToRead                     (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineTitleFileInterface::ReadTitleFile(const struct FString& FileToRead)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.ReadTitleFile");

	UOnlineTitleFileInterface_ReadTitleFile_Params params;
	params.FileToRead = FileToRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileInterface.OnReadTitleFileComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)
// struct FString                 Filename                       (Parm, NeedCtorLink)

void UOnlineTitleFileInterface::OnReadTitleFileComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.OnReadTitleFileComplete");

	UOnlineTitleFileInterface_OnReadTitleFileComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePartyChatInterface.IsInPartyChat
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePartyChatInterface::IsInPartyChat(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.IsInPartyChat");

	UOnlinePartyChatInterface_IsInPartyChat_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePartyChatInterface.ShowCommunitySessionsUI
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePartyChatInterface::ShowCommunitySessionsUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.ShowCommunitySessionsUI");

	UOnlinePartyChatInterface_ShowCommunitySessionsUI_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePartyChatInterface.ShowVoiceChannelUI
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePartyChatInterface::ShowVoiceChannelUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.ShowVoiceChannelUI");

	UOnlinePartyChatInterface_ShowVoiceChannelUI_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePartyChatInterface.ShowPartyUI
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePartyChatInterface::ShowPartyUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.ShowPartyUI");

	UOnlinePartyChatInterface_ShowPartyUI_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePartyChatInterface.GetPartyBandwidth
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UOnlinePartyChatInterface::GetPartyBandwidth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.GetPartyBandwidth");

	UOnlinePartyChatInterface_GetPartyBandwidth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePartyChatInterface.SetPartyMemberCustomData
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            Data1                          (Parm)
// int                            Data2                          (Parm)
// int                            Data3                          (Parm)
// int                            Data4                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePartyChatInterface::SetPartyMemberCustomData(unsigned char LocalUserNum, int Data1, int Data2, int Data3, int Data4)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.SetPartyMemberCustomData");

	UOnlinePartyChatInterface_SetPartyMemberCustomData_Params params;
	params.LocalUserNum = LocalUserNum;
	params.Data1 = Data1;
	params.Data2 = Data2;
	params.Data3 = Data3;
	params.Data4 = Data4;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePartyChatInterface.ClearPartyMembersInfoChangedDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         PartyMembersInfoChangedDelegate (Parm, NeedCtorLink)

void UOnlinePartyChatInterface::ClearPartyMembersInfoChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& PartyMembersInfoChangedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.ClearPartyMembersInfoChangedDelegate");

	UOnlinePartyChatInterface_ClearPartyMembersInfoChangedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PartyMembersInfoChangedDelegate = PartyMembersInfoChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePartyChatInterface.AddPartyMembersInfoChangedDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         PartyMembersInfoChangedDelegate (Parm, NeedCtorLink)

void UOnlinePartyChatInterface::AddPartyMembersInfoChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& PartyMembersInfoChangedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.AddPartyMembersInfoChangedDelegate");

	UOnlinePartyChatInterface_AddPartyMembersInfoChangedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PartyMembersInfoChangedDelegate = PartyMembersInfoChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePartyChatInterface.OnPartyMembersInfoChanged
// ()
// Parameters:
// struct FString                 PlayerName                     (Parm, NeedCtorLink)
// struct FUniqueNetId            PlayerID                       (Parm)
// int                            CustomData1                    (Parm)
// int                            CustomData2                    (Parm)
// int                            CustomData3                    (Parm)
// int                            CustomData4                    (Parm)

void UOnlinePartyChatInterface::OnPartyMembersInfoChanged(const struct FString& PlayerName, const struct FUniqueNetId& PlayerID, int CustomData1, int CustomData2, int CustomData3, int CustomData4)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.OnPartyMembersInfoChanged");

	UOnlinePartyChatInterface_OnPartyMembersInfoChanged_Params params;
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;
	params.CustomData1 = CustomData1;
	params.CustomData2 = CustomData2;
	params.CustomData3 = CustomData3;
	params.CustomData4 = CustomData4;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePartyChatInterface.ClearPartyMemberListChangedDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         PartyMemberListChangedDelegate (Parm, NeedCtorLink)

void UOnlinePartyChatInterface::ClearPartyMemberListChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& PartyMemberListChangedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.ClearPartyMemberListChangedDelegate");

	UOnlinePartyChatInterface_ClearPartyMemberListChangedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PartyMemberListChangedDelegate = PartyMemberListChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePartyChatInterface.AddPartyMemberListChangedDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         PartyMemberListChangedDelegate (Parm, NeedCtorLink)

void UOnlinePartyChatInterface::AddPartyMemberListChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& PartyMemberListChangedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.AddPartyMemberListChangedDelegate");

	UOnlinePartyChatInterface_AddPartyMemberListChangedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PartyMemberListChangedDelegate = PartyMemberListChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePartyChatInterface.OnPartyMemberListChanged
// ()
// Parameters:
// bool                           bJoinedOrLeft                  (Parm)
// struct FString                 PlayerName                     (Parm, NeedCtorLink)
// struct FUniqueNetId            PlayerID                       (Parm)

void UOnlinePartyChatInterface::OnPartyMemberListChanged(bool bJoinedOrLeft, const struct FString& PlayerName, const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.OnPartyMemberListChanged");

	UOnlinePartyChatInterface_OnPartyMemberListChanged_Params params;
	params.bJoinedOrLeft = bJoinedOrLeft;
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePartyChatInterface.GetPartyMemberInformation
// ()
// Parameters:
// struct FUniqueNetId            MemberId                       (Parm)
// struct FOnlinePartyMember      PartyMember                    (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePartyChatInterface::GetPartyMemberInformation(const struct FUniqueNetId& MemberId, struct FOnlinePartyMember* PartyMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.GetPartyMemberInformation");

	UOnlinePartyChatInterface_GetPartyMemberInformation_Params params;
	params.MemberId = MemberId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PartyMember != nullptr)
		*PartyMember = params.PartyMember;

	return params.ReturnValue;
}


// Function Engine.OnlinePartyChatInterface.GetPartyMembersInformation
// ()
// Parameters:
// TArray<struct FOnlinePartyMember> PartyMembers                   (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePartyChatInterface::GetPartyMembersInformation(TArray<struct FOnlinePartyMember>* PartyMembers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.GetPartyMembersInformation");

	UOnlinePartyChatInterface_GetPartyMembersInformation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PartyMembers != nullptr)
		*PartyMembers = params.PartyMembers;

	return params.ReturnValue;
}


// Function Engine.OnlinePartyChatInterface.ClearSendPartyGameInvitesCompleteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         SendPartyGameInvitesCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePartyChatInterface::ClearSendPartyGameInvitesCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& SendPartyGameInvitesCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.ClearSendPartyGameInvitesCompleteDelegate");

	UOnlinePartyChatInterface_ClearSendPartyGameInvitesCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.SendPartyGameInvitesCompleteDelegate = SendPartyGameInvitesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePartyChatInterface.AddSendPartyGameInvitesCompleteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         SendPartyGameInvitesCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePartyChatInterface::AddSendPartyGameInvitesCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& SendPartyGameInvitesCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.AddSendPartyGameInvitesCompleteDelegate");

	UOnlinePartyChatInterface_AddSendPartyGameInvitesCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.SendPartyGameInvitesCompleteDelegate = SendPartyGameInvitesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePartyChatInterface.OnSendPartyGameInvitesComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlinePartyChatInterface::OnSendPartyGameInvitesComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.OnSendPartyGameInvitesComplete");

	UOnlinePartyChatInterface_OnSendPartyGameInvitesComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePartyChatInterface.SendPartyGameInvites
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePartyChatInterface::SendPartyGameInvites(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.SendPartyGameInvites");

	UOnlinePartyChatInterface_SendPartyGameInvites_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineNewsInterface.GetNews
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EOnlineNewsType>   NewsType                       (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UOnlineNewsInterface::GetNews(unsigned char LocalUserNum, TEnumAsByte<EOnlineNewsType> NewsType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.GetNews");

	UOnlineNewsInterface_GetNews_Params params;
	params.LocalUserNum = LocalUserNum;
	params.NewsType = NewsType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineNewsInterface.ClearReadNewsCompletedDelegate
// ()
// Parameters:
// struct FScriptDelegate         ReadNewsDelegate               (Parm, NeedCtorLink)

void UOnlineNewsInterface::ClearReadNewsCompletedDelegate(const struct FScriptDelegate& ReadNewsDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.ClearReadNewsCompletedDelegate");

	UOnlineNewsInterface_ClearReadNewsCompletedDelegate_Params params;
	params.ReadNewsDelegate = ReadNewsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineNewsInterface.AddReadNewsCompletedDelegate
// ()
// Parameters:
// struct FScriptDelegate         ReadNewsDelegate               (Parm, NeedCtorLink)

void UOnlineNewsInterface::AddReadNewsCompletedDelegate(const struct FScriptDelegate& ReadNewsDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.AddReadNewsCompletedDelegate");

	UOnlineNewsInterface_AddReadNewsCompletedDelegate_Params params;
	params.ReadNewsDelegate = ReadNewsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineNewsInterface.OnReadNewsCompleted
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)
// TEnumAsByte<EOnlineNewsType>   NewsType                       (Parm)

void UOnlineNewsInterface::OnReadNewsCompleted(bool bWasSuccessful, TEnumAsByte<EOnlineNewsType> NewsType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.OnReadNewsCompleted");

	UOnlineNewsInterface_OnReadNewsCompleted_Params params;
	params.bWasSuccessful = bWasSuccessful;
	params.NewsType = NewsType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineNewsInterface.ReadNews
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EOnlineNewsType>   NewsType                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineNewsInterface::ReadNews(unsigned char LocalUserNum, TEnumAsByte<EOnlineNewsType> NewsType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.ReadNews");

	UOnlineNewsInterface_ReadNews_Params params;
	params.LocalUserNum = LocalUserNum;
	params.NewsType = NewsType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.CalcAggregateSkill
// ()
// Parameters:
// TArray<struct FDouble>         Mus                            (Parm, NeedCtorLink)
// TArray<struct FDouble>         Sigmas                         (Parm, NeedCtorLink)
// struct FDouble                 OutAggregateMu                 (Parm, OutParm)
// struct FDouble                 OutAggregateSigma              (Parm, OutParm)

void UOnlineStatsInterface::CalcAggregateSkill(TArray<struct FDouble> Mus, TArray<struct FDouble> Sigmas, struct FDouble* OutAggregateMu, struct FDouble* OutAggregateSigma)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.CalcAggregateSkill");

	UOnlineStatsInterface_CalcAggregateSkill_Params params;
	params.Mus = Mus;
	params.Sigmas = Sigmas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutAggregateMu != nullptr)
		*OutAggregateMu = params.OutAggregateMu;
	if (OutAggregateSigma != nullptr)
		*OutAggregateSigma = params.OutAggregateSigma;
}


// Function Engine.OnlineStatsInterface.RegisterStatGuid
// ()
// Parameters:
// struct FUniqueNetId            PlayerID                       (Parm)
// struct FString                 ClientStatGuid                 (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsInterface::RegisterStatGuid(const struct FUniqueNetId& PlayerID, struct FString* ClientStatGuid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.RegisterStatGuid");

	UOnlineStatsInterface_RegisterStatGuid_Params params;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ClientStatGuid != nullptr)
		*ClientStatGuid = params.ClientStatGuid;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.GetClientStatGuid
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UOnlineStatsInterface::GetClientStatGuid()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.GetClientStatGuid");

	UOnlineStatsInterface_GetClientStatGuid_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.ClearRegisterHostStatGuidCompleteDelegateDelegate
// ()
// Parameters:
// struct FScriptDelegate         RegisterHostStatGuidCompleteDelegate (Parm, NeedCtorLink)

void UOnlineStatsInterface::ClearRegisterHostStatGuidCompleteDelegateDelegate(const struct FScriptDelegate& RegisterHostStatGuidCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ClearRegisterHostStatGuidCompleteDelegateDelegate");

	UOnlineStatsInterface_ClearRegisterHostStatGuidCompleteDelegateDelegate_Params params;
	params.RegisterHostStatGuidCompleteDelegate = RegisterHostStatGuidCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.AddRegisterHostStatGuidCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         RegisterHostStatGuidCompleteDelegate (Parm, NeedCtorLink)

void UOnlineStatsInterface::AddRegisterHostStatGuidCompleteDelegate(const struct FScriptDelegate& RegisterHostStatGuidCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.AddRegisterHostStatGuidCompleteDelegate");

	UOnlineStatsInterface_AddRegisterHostStatGuidCompleteDelegate_Params params;
	params.RegisterHostStatGuidCompleteDelegate = RegisterHostStatGuidCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.OnRegisterHostStatGuidComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineStatsInterface::OnRegisterHostStatGuidComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.OnRegisterHostStatGuidComplete");

	UOnlineStatsInterface_OnRegisterHostStatGuidComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.RegisterHostStatGuid
// ()
// Parameters:
// struct FString                 HostStatGuid                   (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsInterface::RegisterHostStatGuid(struct FString* HostStatGuid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.RegisterHostStatGuid");

	UOnlineStatsInterface_RegisterHostStatGuid_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HostStatGuid != nullptr)
		*HostStatGuid = params.HostStatGuid;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.GetHostStatGuid
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UOnlineStatsInterface::GetHostStatGuid()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.GetHostStatGuid");

	UOnlineStatsInterface_GetHostStatGuid_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.WriteOnlinePlayerScores
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// int                            LeaderboardId                  (Parm)
// TArray<struct FOnlinePlayerScore> PlayerScores                   (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsInterface::WriteOnlinePlayerScores(const struct FName& SessionName, int LeaderboardId, TArray<struct FOnlinePlayerScore>* PlayerScores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.WriteOnlinePlayerScores");

	UOnlineStatsInterface_WriteOnlinePlayerScores_Params params;
	params.SessionName = SessionName;
	params.LeaderboardId = LeaderboardId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PlayerScores != nullptr)
		*PlayerScores = params.PlayerScores;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.ClearFlushOnlineStatsCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         FlushOnlineStatsCompleteDelegate (Parm, NeedCtorLink)

void UOnlineStatsInterface::ClearFlushOnlineStatsCompleteDelegate(const struct FScriptDelegate& FlushOnlineStatsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ClearFlushOnlineStatsCompleteDelegate");

	UOnlineStatsInterface_ClearFlushOnlineStatsCompleteDelegate_Params params;
	params.FlushOnlineStatsCompleteDelegate = FlushOnlineStatsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.AddFlushOnlineStatsCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         FlushOnlineStatsCompleteDelegate (Parm, NeedCtorLink)

void UOnlineStatsInterface::AddFlushOnlineStatsCompleteDelegate(const struct FScriptDelegate& FlushOnlineStatsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.AddFlushOnlineStatsCompleteDelegate");

	UOnlineStatsInterface_AddFlushOnlineStatsCompleteDelegate_Params params;
	params.FlushOnlineStatsCompleteDelegate = FlushOnlineStatsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.OnFlushOnlineStatsComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void UOnlineStatsInterface::OnFlushOnlineStatsComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.OnFlushOnlineStatsComplete");

	UOnlineStatsInterface_OnFlushOnlineStatsComplete_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.FlushOnlineStats
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsInterface::FlushOnlineStats(const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.FlushOnlineStats");

	UOnlineStatsInterface_FlushOnlineStats_Params params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.WriteOnlineStats
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// struct FUniqueNetId            Player                         (Parm)
// class UOnlineStatsWrite*       StatsWrite                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsInterface::WriteOnlineStats(const struct FName& SessionName, const struct FUniqueNetId& Player, class UOnlineStatsWrite* StatsWrite)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.WriteOnlineStats");

	UOnlineStatsInterface_WriteOnlineStats_Params params;
	params.SessionName = SessionName;
	params.Player = Player;
	params.StatsWrite = StatsWrite;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.FreeStats
// ()
// Parameters:
// class UOnlineStatsRead*        StatsRead                      (Parm)

void UOnlineStatsInterface::FreeStats(class UOnlineStatsRead* StatsRead)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.FreeStats");

	UOnlineStatsInterface_FreeStats_Params params;
	params.StatsRead = StatsRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.ClearReadOnlineStatsCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         ReadOnlineStatsCompleteDelegate (Parm, NeedCtorLink)

void UOnlineStatsInterface::ClearReadOnlineStatsCompleteDelegate(const struct FScriptDelegate& ReadOnlineStatsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ClearReadOnlineStatsCompleteDelegate");

	UOnlineStatsInterface_ClearReadOnlineStatsCompleteDelegate_Params params;
	params.ReadOnlineStatsCompleteDelegate = ReadOnlineStatsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.AddReadOnlineStatsCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         ReadOnlineStatsCompleteDelegate (Parm, NeedCtorLink)

void UOnlineStatsInterface::AddReadOnlineStatsCompleteDelegate(const struct FScriptDelegate& ReadOnlineStatsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.AddReadOnlineStatsCompleteDelegate");

	UOnlineStatsInterface_AddReadOnlineStatsCompleteDelegate_Params params;
	params.ReadOnlineStatsCompleteDelegate = ReadOnlineStatsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.OnReadOnlineStatsComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineStatsInterface::OnReadOnlineStatsComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.OnReadOnlineStatsComplete");

	UOnlineStatsInterface_OnReadOnlineStatsComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.ReadOnlineStatsByRankAroundPlayer
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// class UOnlineStatsRead*        StatsRead                      (Parm)
// int                            NumRows                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsInterface::ReadOnlineStatsByRankAroundPlayer(unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead, int NumRows)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ReadOnlineStatsByRankAroundPlayer");

	UOnlineStatsInterface_ReadOnlineStatsByRankAroundPlayer_Params params;
	params.LocalUserNum = LocalUserNum;
	params.StatsRead = StatsRead;
	params.NumRows = NumRows;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.ReadOnlineStatsByRank
// ()
// Parameters:
// class UOnlineStatsRead*        StatsRead                      (Parm)
// int                            StartIndex                     (OptionalParm, Parm)
// int                            NumToRead                      (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsInterface::ReadOnlineStatsByRank(class UOnlineStatsRead* StatsRead, int StartIndex, int NumToRead)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ReadOnlineStatsByRank");

	UOnlineStatsInterface_ReadOnlineStatsByRank_Params params;
	params.StatsRead = StatsRead;
	params.StartIndex = StartIndex;
	params.NumToRead = NumToRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.ReadOnlineStatsForFriends
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// class UOnlineStatsRead*        StatsRead                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsInterface::ReadOnlineStatsForFriends(unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ReadOnlineStatsForFriends");

	UOnlineStatsInterface_ReadOnlineStatsForFriends_Params params;
	params.LocalUserNum = LocalUserNum;
	params.StatsRead = StatsRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.ReadOnlineStats
// ()
// Parameters:
// TArray<struct FUniqueNetId>    Players                        (Const, Parm, OutParm, NeedCtorLink)
// class UOnlineStatsRead*        StatsRead                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsInterface::ReadOnlineStats(class UOnlineStatsRead* StatsRead, TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ReadOnlineStats");

	UOnlineStatsInterface_ReadOnlineStats_Params params;
	params.StatsRead = StatsRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.UnmuteAll
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::UnmuteAll(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.UnmuteAll");

	UOnlineVoiceInterface_UnmuteAll_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.MuteAll
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           bAllowFriends                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::MuteAll(unsigned char LocalUserNum, bool bAllowFriends)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.MuteAll");

	UOnlineVoiceInterface_MuteAll_Params params;
	params.LocalUserNum = LocalUserNum;
	params.bAllowFriends = bAllowFriends;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.SetSpeechRecognitionObject
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// class USpeechRecognition*      SpeechRecogObj                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::SetSpeechRecognitionObject(unsigned char LocalUserNum, class USpeechRecognition* SpeechRecogObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.SetSpeechRecognitionObject");

	UOnlineVoiceInterface_SetSpeechRecognitionObject_Params params;
	params.LocalUserNum = LocalUserNum;
	params.SpeechRecogObj = SpeechRecogObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.SelectVocabulary
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            VocabularyId                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::SelectVocabulary(unsigned char LocalUserNum, int VocabularyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.SelectVocabulary");

	UOnlineVoiceInterface_SelectVocabulary_Params params;
	params.LocalUserNum = LocalUserNum;
	params.VocabularyId = VocabularyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.ClearRecognitionCompleteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         RecognitionDelegate            (Parm, NeedCtorLink)

void UOnlineVoiceInterface::ClearRecognitionCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& RecognitionDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.ClearRecognitionCompleteDelegate");

	UOnlineVoiceInterface_ClearRecognitionCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.RecognitionDelegate = RecognitionDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.AddRecognitionCompleteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         RecognitionDelegate            (Parm, NeedCtorLink)

void UOnlineVoiceInterface::AddRecognitionCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& RecognitionDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.AddRecognitionCompleteDelegate");

	UOnlineVoiceInterface_AddRecognitionCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.RecognitionDelegate = RecognitionDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.OnRecognitionComplete
// ()

void UOnlineVoiceInterface::OnRecognitionComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.OnRecognitionComplete");

	UOnlineVoiceInterface_OnRecognitionComplete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.GetRecognitionResults
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TArray<struct FSpeechRecognizedWord> Words                          (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::GetRecognitionResults(unsigned char LocalUserNum, TArray<struct FSpeechRecognizedWord>* Words)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.GetRecognitionResults");

	UOnlineVoiceInterface_GetRecognitionResults_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Words != nullptr)
		*Words = params.Words;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.StopSpeechRecognition
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::StopSpeechRecognition(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.StopSpeechRecognition");

	UOnlineVoiceInterface_StopSpeechRecognition_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.StartSpeechRecognition
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::StartSpeechRecognition(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.StartSpeechRecognition");

	UOnlineVoiceInterface_StartSpeechRecognition_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.StopNetworkedVoice
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)

void UOnlineVoiceInterface::StopNetworkedVoice(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.StopNetworkedVoice");

	UOnlineVoiceInterface_StopNetworkedVoice_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.StartNetworkedVoice
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)

void UOnlineVoiceInterface::StartNetworkedVoice(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.StartNetworkedVoice");

	UOnlineVoiceInterface_StartNetworkedVoice_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.ClearPlayerTalkingDelegate
// ()
// Parameters:
// struct FScriptDelegate         TalkerDelegate                 (Parm, NeedCtorLink)

void UOnlineVoiceInterface::ClearPlayerTalkingDelegate(const struct FScriptDelegate& TalkerDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.ClearPlayerTalkingDelegate");

	UOnlineVoiceInterface_ClearPlayerTalkingDelegate_Params params;
	params.TalkerDelegate = TalkerDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.AddPlayerTalkingDelegate
// ()
// Parameters:
// struct FScriptDelegate         TalkerDelegate                 (Parm, NeedCtorLink)

void UOnlineVoiceInterface::AddPlayerTalkingDelegate(const struct FScriptDelegate& TalkerDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.AddPlayerTalkingDelegate");

	UOnlineVoiceInterface_AddPlayerTalkingDelegate_Params params;
	params.TalkerDelegate = TalkerDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.OnPlayerTalkingStateChange
// ()
// Parameters:
// struct FUniqueNetId            Player                         (Parm)
// bool                           bIsTalking                     (Parm)

void UOnlineVoiceInterface::OnPlayerTalkingStateChange(const struct FUniqueNetId& Player, bool bIsTalking)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.OnPlayerTalkingStateChange");

	UOnlineVoiceInterface_OnPlayerTalkingStateChange_Params params;
	params.Player = Player;
	params.bIsTalking = bIsTalking;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.UnmuteRemoteTalker
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            PlayerID                       (Parm)
// bool                           bIsSystemWide                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::UnmuteRemoteTalker(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID, bool bIsSystemWide)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.UnmuteRemoteTalker");

	UOnlineVoiceInterface_UnmuteRemoteTalker_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;
	params.bIsSystemWide = bIsSystemWide;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.MuteRemoteTalker
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            PlayerID                       (Parm)
// bool                           bIsSystemWide                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::MuteRemoteTalker(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID, bool bIsSystemWide)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.MuteRemoteTalker");

	UOnlineVoiceInterface_MuteRemoteTalker_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;
	params.bIsSystemWide = bIsSystemWide;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.SetRemoteTalkerPriority
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            PlayerID                       (Parm)
// int                            Priority                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::SetRemoteTalkerPriority(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID, int Priority)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.SetRemoteTalkerPriority");

	UOnlineVoiceInterface_SetRemoteTalkerPriority_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;
	params.Priority = Priority;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.IsHeadsetPresent
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::IsHeadsetPresent(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.IsHeadsetPresent");

	UOnlineVoiceInterface_IsHeadsetPresent_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.IsRemotePlayerTalking
// ()
// Parameters:
// struct FUniqueNetId            PlayerID                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::IsRemotePlayerTalking(const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.IsRemotePlayerTalking");

	UOnlineVoiceInterface_IsRemotePlayerTalking_Params params;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.IsLocalPlayerTalking
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::IsLocalPlayerTalking(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.IsLocalPlayerTalking");

	UOnlineVoiceInterface_IsLocalPlayerTalking_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.UnregisterRemoteTalker
// ()
// Parameters:
// struct FUniqueNetId            PlayerID                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::UnregisterRemoteTalker(const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.UnregisterRemoteTalker");

	UOnlineVoiceInterface_UnregisterRemoteTalker_Params params;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.RegisterRemoteTalker
// ()
// Parameters:
// struct FUniqueNetId            PlayerID                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::RegisterRemoteTalker(const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.RegisterRemoteTalker");

	UOnlineVoiceInterface_RegisterRemoteTalker_Params params;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.UnregisterLocalTalker
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::UnregisterLocalTalker(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.UnregisterLocalTalker");

	UOnlineVoiceInterface_UnregisterLocalTalker_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.RegisterLocalTalker
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::RegisterLocalTalker(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.RegisterLocalTalker");

	UOnlineVoiceInterface_RegisterLocalTalker_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.ClearSaveGames
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineContentInterface::ClearSaveGames(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearSaveGames");

	UOnlineContentInterface_ClearSaveGames_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.DeleteSaveGame
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            DeviceID                       (Parm)
// struct FString                 FriendlyName                   (Parm, NeedCtorLink)
// struct FString                 Filename                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineContentInterface::DeleteSaveGame(unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.DeleteSaveGame");

	UOnlineContentInterface_DeleteSaveGame_Params params;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.ClearWriteSaveGameDataComplete
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         WriteSaveGameDataCompleteDelegate (Parm, NeedCtorLink)

void UOnlineContentInterface::ClearWriteSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& WriteSaveGameDataCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearWriteSaveGameDataComplete");

	UOnlineContentInterface_ClearWriteSaveGameDataComplete_Params params;
	params.LocalUserNum = LocalUserNum;
	params.WriteSaveGameDataCompleteDelegate = WriteSaveGameDataCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.AddWriteSaveGameDataComplete
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         WriteSaveGameDataCompleteDelegate (Parm, NeedCtorLink)

void UOnlineContentInterface::AddWriteSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& WriteSaveGameDataCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddWriteSaveGameDataComplete");

	UOnlineContentInterface_AddWriteSaveGameDataComplete_Params params;
	params.LocalUserNum = LocalUserNum;
	params.WriteSaveGameDataCompleteDelegate = WriteSaveGameDataCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.OnWriteSaveGameDataComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)
// unsigned char                  LocalUserNum                   (Parm)
// int                            DeviceID                       (Parm)
// struct FString                 FriendlyName                   (Parm, NeedCtorLink)
// struct FString                 Filename                       (Parm, NeedCtorLink)
// struct FString                 SaveFileName                   (Parm, NeedCtorLink)

void UOnlineContentInterface::OnWriteSaveGameDataComplete(bool bWasSuccessful, unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnWriteSaveGameDataComplete");

	UOnlineContentInterface_OnWriteSaveGameDataComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;
	params.SaveFileName = SaveFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.WriteSaveGameData
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            DeviceID                       (Parm)
// struct FString                 FriendlyName                   (Parm, NeedCtorLink)
// struct FString                 Filename                       (Parm, NeedCtorLink)
// struct FString                 SaveFileName                   (Parm, NeedCtorLink)
// TArray<unsigned char>          SaveGameData                   (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineContentInterface::WriteSaveGameData(unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName, TArray<unsigned char>* SaveGameData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.WriteSaveGameData");

	UOnlineContentInterface_WriteSaveGameData_Params params;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;
	params.SaveFileName = SaveFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SaveGameData != nullptr)
		*SaveGameData = params.SaveGameData;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.ClearReadSaveGameDataComplete
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReadSaveGameDataCompleteDelegate (Parm, NeedCtorLink)

void UOnlineContentInterface::ClearReadSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearReadSaveGameDataComplete");

	UOnlineContentInterface_ClearReadSaveGameDataComplete_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReadSaveGameDataCompleteDelegate = ReadSaveGameDataCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.AddReadSaveGameDataComplete
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReadSaveGameDataCompleteDelegate (Parm, NeedCtorLink)

void UOnlineContentInterface::AddReadSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddReadSaveGameDataComplete");

	UOnlineContentInterface_AddReadSaveGameDataComplete_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReadSaveGameDataCompleteDelegate = ReadSaveGameDataCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.OnReadSaveGameDataComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)
// unsigned char                  LocalUserNum                   (Parm)
// int                            DeviceID                       (Parm)
// struct FString                 FriendlyName                   (Parm, NeedCtorLink)
// struct FString                 Filename                       (Parm, NeedCtorLink)
// struct FString                 SaveFileName                   (Parm, NeedCtorLink)

void UOnlineContentInterface::OnReadSaveGameDataComplete(bool bWasSuccessful, unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnReadSaveGameDataComplete");

	UOnlineContentInterface_OnReadSaveGameDataComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;
	params.SaveFileName = SaveFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.GetSaveGameData
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            DeviceID                       (Parm)
// struct FString                 FriendlyName                   (Parm, NeedCtorLink)
// struct FString                 Filename                       (Parm, NeedCtorLink)
// struct FString                 SaveFileName                   (Parm, NeedCtorLink)
// TArray<unsigned char>          SaveGameData                   (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineContentInterface::GetSaveGameData(unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName, TArray<unsigned char>* SaveGameData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.GetSaveGameData");

	UOnlineContentInterface_GetSaveGameData_Params params;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;
	params.SaveFileName = SaveFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SaveGameData != nullptr)
		*SaveGameData = params.SaveGameData;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.ReadSaveGameData
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            DeviceID                       (Parm)
// struct FString                 FriendlyName                   (Parm, NeedCtorLink)
// struct FString                 Filename                       (Parm, NeedCtorLink)
// struct FString                 SaveFileName                   (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineContentInterface::ReadSaveGameData(unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ReadSaveGameData");

	UOnlineContentInterface_ReadSaveGameData_Params params;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;
	params.SaveFileName = SaveFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.GetAvailableDownloadCounts
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            NewDownloads                   (Parm, OutParm)
// int                            TotalDownloads                 (Parm, OutParm)

void UOnlineContentInterface::GetAvailableDownloadCounts(unsigned char LocalUserNum, int* NewDownloads, int* TotalDownloads)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.GetAvailableDownloadCounts");

	UOnlineContentInterface_GetAvailableDownloadCounts_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewDownloads != nullptr)
		*NewDownloads = params.NewDownloads;
	if (TotalDownloads != nullptr)
		*TotalDownloads = params.TotalDownloads;
}


// Function Engine.OnlineContentInterface.ClearQueryAvailableDownloadsComplete
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         QueryDownloadsDelegate         (Parm, NeedCtorLink)

void UOnlineContentInterface::ClearQueryAvailableDownloadsComplete(unsigned char LocalUserNum, const struct FScriptDelegate& QueryDownloadsDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearQueryAvailableDownloadsComplete");

	UOnlineContentInterface_ClearQueryAvailableDownloadsComplete_Params params;
	params.LocalUserNum = LocalUserNum;
	params.QueryDownloadsDelegate = QueryDownloadsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.AddQueryAvailableDownloadsComplete
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         QueryDownloadsDelegate         (Parm, NeedCtorLink)

void UOnlineContentInterface::AddQueryAvailableDownloadsComplete(unsigned char LocalUserNum, const struct FScriptDelegate& QueryDownloadsDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddQueryAvailableDownloadsComplete");

	UOnlineContentInterface_AddQueryAvailableDownloadsComplete_Params params;
	params.LocalUserNum = LocalUserNum;
	params.QueryDownloadsDelegate = QueryDownloadsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.OnQueryAvailableDownloadsComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineContentInterface::OnQueryAvailableDownloadsComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnQueryAvailableDownloadsComplete");

	UOnlineContentInterface_OnQueryAvailableDownloadsComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.QueryAvailableDownloads
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            CategoryMask                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineContentInterface::QueryAvailableDownloads(unsigned char LocalUserNum, int CategoryMask)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.QueryAvailableDownloads");

	UOnlineContentInterface_QueryAvailableDownloads_Params params;
	params.LocalUserNum = LocalUserNum;
	params.CategoryMask = CategoryMask;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.GetContentList
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EOnlineContentType> ContentType                    (Parm)
// TArray<struct FOnlineContent>  ContentList                    (Parm, OutParm, NeedCtorLink)
// TEnumAsByte<EOnlineEnumerationReadState> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EOnlineEnumerationReadState> UOnlineContentInterface::GetContentList(unsigned char LocalUserNum, TEnumAsByte<EOnlineContentType> ContentType, TArray<struct FOnlineContent>* ContentList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.GetContentList");

	UOnlineContentInterface_GetContentList_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ContentList != nullptr)
		*ContentList = params.ContentList;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.ClearContentList
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EOnlineContentType> ContentType                    (Parm)

void UOnlineContentInterface::ClearContentList(unsigned char LocalUserNum, TEnumAsByte<EOnlineContentType> ContentType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearContentList");

	UOnlineContentInterface_ClearContentList_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.ReadContentList
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EOnlineContentType> ContentType                    (Parm)
// int                            DeviceID                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineContentInterface::ReadContentList(unsigned char LocalUserNum, TEnumAsByte<EOnlineContentType> ContentType, int DeviceID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ReadContentList");

	UOnlineContentInterface_ReadContentList_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;
	params.DeviceID = DeviceID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.ClearReadContentComplete
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EOnlineContentType> ContentType                    (Parm)
// struct FScriptDelegate         ReadContentCompleteDelegate    (Parm, NeedCtorLink)

void UOnlineContentInterface::ClearReadContentComplete(unsigned char LocalUserNum, TEnumAsByte<EOnlineContentType> ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearReadContentComplete");

	UOnlineContentInterface_ClearReadContentComplete_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;
	params.ReadContentCompleteDelegate = ReadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.AddReadContentComplete
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EOnlineContentType> ContentType                    (Parm)
// struct FScriptDelegate         ReadContentCompleteDelegate    (Parm, NeedCtorLink)

void UOnlineContentInterface::AddReadContentComplete(unsigned char LocalUserNum, TEnumAsByte<EOnlineContentType> ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddReadContentComplete");

	UOnlineContentInterface_AddReadContentComplete_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;
	params.ReadContentCompleteDelegate = ReadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.OnReadContentComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineContentInterface::OnReadContentComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnReadContentComplete");

	UOnlineContentInterface_OnReadContentComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.ClearContentChangeDelegate
// ()
// Parameters:
// struct FScriptDelegate         ContentDelegate                (Parm, NeedCtorLink)
// unsigned char                  LocalUserNum                   (OptionalParm, Parm)

void UOnlineContentInterface::ClearContentChangeDelegate(const struct FScriptDelegate& ContentDelegate, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearContentChangeDelegate");

	UOnlineContentInterface_ClearContentChangeDelegate_Params params;
	params.ContentDelegate = ContentDelegate;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.AddContentChangeDelegate
// ()
// Parameters:
// struct FScriptDelegate         ContentDelegate                (Parm, NeedCtorLink)
// unsigned char                  LocalUserNum                   (OptionalParm, Parm)

void UOnlineContentInterface::AddContentChangeDelegate(const struct FScriptDelegate& ContentDelegate, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddContentChangeDelegate");

	UOnlineContentInterface_AddContentChangeDelegate_Params params;
	params.ContentDelegate = ContentDelegate;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.OnContentChange
// ()

void UOnlineContentInterface::OnContentChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnContentChange");

	UOnlineContentInterface_OnContentChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.ClearJoinMigratedOnlineGameCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         JoinMigratedOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearJoinMigratedOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinMigratedOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearJoinMigratedOnlineGameCompleteDelegate");

	UOnlineGameInterface_ClearJoinMigratedOnlineGameCompleteDelegate_Params params;
	params.JoinMigratedOnlineGameCompleteDelegate = JoinMigratedOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddJoinMigratedOnlineGameCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         JoinMigratedOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddJoinMigratedOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinMigratedOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddJoinMigratedOnlineGameCompleteDelegate");

	UOnlineGameInterface_AddJoinMigratedOnlineGameCompleteDelegate_Params params;
	params.JoinMigratedOnlineGameCompleteDelegate = JoinMigratedOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnJoinMigratedOnlineGameComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnJoinMigratedOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnJoinMigratedOnlineGameComplete");

	UOnlineGameInterface_OnJoinMigratedOnlineGameComplete_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.JoinMigratedOnlineGame
// ()
// Parameters:
// unsigned char                  PlayerNum                      (Parm)
// struct FName                   SessionName                    (Parm)
// struct FOnlineGameSearchResult DesiredGame                    (Const, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::JoinMigratedOnlineGame(unsigned char PlayerNum, const struct FName& SessionName, struct FOnlineGameSearchResult* DesiredGame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.JoinMigratedOnlineGame");

	UOnlineGameInterface_JoinMigratedOnlineGame_Params params;
	params.PlayerNum = PlayerNum;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DesiredGame != nullptr)
		*DesiredGame = params.DesiredGame;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearMigrateOnlineGameCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         MigrateOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearMigrateOnlineGameCompleteDelegate(const struct FScriptDelegate& MigrateOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearMigrateOnlineGameCompleteDelegate");

	UOnlineGameInterface_ClearMigrateOnlineGameCompleteDelegate_Params params;
	params.MigrateOnlineGameCompleteDelegate = MigrateOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddMigrateOnlineGameCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         MigrateOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddMigrateOnlineGameCompleteDelegate(const struct FScriptDelegate& MigrateOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddMigrateOnlineGameCompleteDelegate");

	UOnlineGameInterface_AddMigrateOnlineGameCompleteDelegate_Params params;
	params.MigrateOnlineGameCompleteDelegate = MigrateOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnMigrateOnlineGameComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnMigrateOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnMigrateOnlineGameComplete");

	UOnlineGameInterface_OnMigrateOnlineGameComplete_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.MigrateOnlineGame
// ()
// Parameters:
// unsigned char                  HostingPlayerNum               (Parm)
// struct FName                   SessionName                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::MigrateOnlineGame(unsigned char HostingPlayerNum, const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.MigrateOnlineGame");

	UOnlineGameInterface_MigrateOnlineGame_Params params;
	params.HostingPlayerNum = HostingPlayerNum;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearRecalculateSkillRatingCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         RecalculateSkillRatingGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearRecalculateSkillRatingCompleteDelegate(const struct FScriptDelegate& RecalculateSkillRatingGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearRecalculateSkillRatingCompleteDelegate");

	UOnlineGameInterface_ClearRecalculateSkillRatingCompleteDelegate_Params params;
	params.RecalculateSkillRatingGameCompleteDelegate = RecalculateSkillRatingGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddRecalculateSkillRatingCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         RecalculateSkillRatingCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddRecalculateSkillRatingCompleteDelegate(const struct FScriptDelegate& RecalculateSkillRatingCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddRecalculateSkillRatingCompleteDelegate");

	UOnlineGameInterface_AddRecalculateSkillRatingCompleteDelegate_Params params;
	params.RecalculateSkillRatingCompleteDelegate = RecalculateSkillRatingCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnRecalculateSkillRatingComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnRecalculateSkillRatingComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnRecalculateSkillRatingComplete");

	UOnlineGameInterface_OnRecalculateSkillRatingComplete_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.RecalculateSkillRating
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// TArray<struct FUniqueNetId>    Players                        (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::RecalculateSkillRating(const struct FName& SessionName, TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.RecalculateSkillRating");

	UOnlineGameInterface_RecalculateSkillRating_Params params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.AcceptGameInvite
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FName                   SessionName                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::AcceptGameInvite(unsigned char LocalUserNum, const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AcceptGameInvite");

	UOnlineGameInterface_AcceptGameInvite_Params params;
	params.LocalUserNum = LocalUserNum;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearGameInviteAcceptedDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         GameInviteAcceptedDelegate     (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearGameInviteAcceptedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& GameInviteAcceptedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearGameInviteAcceptedDelegate");

	UOnlineGameInterface_ClearGameInviteAcceptedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.GameInviteAcceptedDelegate = GameInviteAcceptedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddGameInviteAcceptedDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         GameInviteAcceptedDelegate     (Parm, NeedCtorLink)

void UOnlineGameInterface::AddGameInviteAcceptedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& GameInviteAcceptedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddGameInviteAcceptedDelegate");

	UOnlineGameInterface_AddGameInviteAcceptedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.GameInviteAcceptedDelegate = GameInviteAcceptedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnGameInviteAccepted
// ()
// Parameters:
// struct FOnlineGameSearchResult InviteResult                   (Const, Parm, OutParm)

void UOnlineGameInterface::OnGameInviteAccepted(struct FOnlineGameSearchResult* InviteResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnGameInviteAccepted");

	UOnlineGameInterface_OnGameInviteAccepted_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InviteResult != nullptr)
		*InviteResult = params.InviteResult;
}


// Function Engine.OnlineGameInterface.GetArbitratedPlayers
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// TArray<struct FOnlineArbitrationRegistrant> ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FOnlineArbitrationRegistrant> UOnlineGameInterface::GetArbitratedPlayers(const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.GetArbitratedPlayers");

	UOnlineGameInterface_GetArbitratedPlayers_Params params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearArbitrationRegistrationCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         ArbitrationRegistrationCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearArbitrationRegistrationCompleteDelegate(const struct FScriptDelegate& ArbitrationRegistrationCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearArbitrationRegistrationCompleteDelegate");

	UOnlineGameInterface_ClearArbitrationRegistrationCompleteDelegate_Params params;
	params.ArbitrationRegistrationCompleteDelegate = ArbitrationRegistrationCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddArbitrationRegistrationCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         ArbitrationRegistrationCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddArbitrationRegistrationCompleteDelegate(const struct FScriptDelegate& ArbitrationRegistrationCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddArbitrationRegistrationCompleteDelegate");

	UOnlineGameInterface_AddArbitrationRegistrationCompleteDelegate_Params params;
	params.ArbitrationRegistrationCompleteDelegate = ArbitrationRegistrationCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnArbitrationRegistrationComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnArbitrationRegistrationComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnArbitrationRegistrationComplete");

	UOnlineGameInterface_OnArbitrationRegistrationComplete_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.RegisterForArbitration
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::RegisterForArbitration(const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.RegisterForArbitration");

	UOnlineGameInterface_RegisterForArbitration_Params params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearEndOnlineGameCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         EndOnlineGameCompleteDelegate  (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearEndOnlineGameCompleteDelegate(const struct FScriptDelegate& EndOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearEndOnlineGameCompleteDelegate");

	UOnlineGameInterface_ClearEndOnlineGameCompleteDelegate_Params params;
	params.EndOnlineGameCompleteDelegate = EndOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddEndOnlineGameCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         EndOnlineGameCompleteDelegate  (Parm, NeedCtorLink)

void UOnlineGameInterface::AddEndOnlineGameCompleteDelegate(const struct FScriptDelegate& EndOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddEndOnlineGameCompleteDelegate");

	UOnlineGameInterface_AddEndOnlineGameCompleteDelegate_Params params;
	params.EndOnlineGameCompleteDelegate = EndOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnEndOnlineGameComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnEndOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnEndOnlineGameComplete");

	UOnlineGameInterface_OnEndOnlineGameComplete_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.EndOnlineGame
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::EndOnlineGame(const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.EndOnlineGame");

	UOnlineGameInterface_EndOnlineGame_Params params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearStartOnlineGameCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         StartOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearStartOnlineGameCompleteDelegate(const struct FScriptDelegate& StartOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearStartOnlineGameCompleteDelegate");

	UOnlineGameInterface_ClearStartOnlineGameCompleteDelegate_Params params;
	params.StartOnlineGameCompleteDelegate = StartOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddStartOnlineGameCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         StartOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddStartOnlineGameCompleteDelegate(const struct FScriptDelegate& StartOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddStartOnlineGameCompleteDelegate");

	UOnlineGameInterface_AddStartOnlineGameCompleteDelegate_Params params;
	params.StartOnlineGameCompleteDelegate = StartOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnStartOnlineGameComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnStartOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnStartOnlineGameComplete");

	UOnlineGameInterface_OnStartOnlineGameComplete_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.StartOnlineGame
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::StartOnlineGame(const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.StartOnlineGame");

	UOnlineGameInterface_StartOnlineGame_Params params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearUnregisterPlayerCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         UnregisterPlayerCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearUnregisterPlayerCompleteDelegate(const struct FScriptDelegate& UnregisterPlayerCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearUnregisterPlayerCompleteDelegate");

	UOnlineGameInterface_ClearUnregisterPlayerCompleteDelegate_Params params;
	params.UnregisterPlayerCompleteDelegate = UnregisterPlayerCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddUnregisterPlayerCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         UnregisterPlayerCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddUnregisterPlayerCompleteDelegate(const struct FScriptDelegate& UnregisterPlayerCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddUnregisterPlayerCompleteDelegate");

	UOnlineGameInterface_AddUnregisterPlayerCompleteDelegate_Params params;
	params.UnregisterPlayerCompleteDelegate = UnregisterPlayerCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnUnregisterPlayerComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// struct FUniqueNetId            PlayerID                       (Parm)
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnUnregisterPlayerComplete(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnUnregisterPlayerComplete");

	UOnlineGameInterface_OnUnregisterPlayerComplete_Params params;
	params.SessionName = SessionName;
	params.PlayerID = PlayerID;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.UnregisterPlayers
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// TArray<struct FUniqueNetId>    Players                        (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::UnregisterPlayers(const struct FName& SessionName, TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.UnregisterPlayers");

	UOnlineGameInterface_UnregisterPlayers_Params params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.UnregisterPlayer
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// struct FUniqueNetId            PlayerID                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::UnregisterPlayer(const struct FName& SessionName, const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.UnregisterPlayer");

	UOnlineGameInterface_UnregisterPlayer_Params params;
	params.SessionName = SessionName;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearRegisterPlayerCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         RegisterPlayerCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearRegisterPlayerCompleteDelegate(const struct FScriptDelegate& RegisterPlayerCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearRegisterPlayerCompleteDelegate");

	UOnlineGameInterface_ClearRegisterPlayerCompleteDelegate_Params params;
	params.RegisterPlayerCompleteDelegate = RegisterPlayerCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddRegisterPlayerCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         RegisterPlayerCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddRegisterPlayerCompleteDelegate(const struct FScriptDelegate& RegisterPlayerCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddRegisterPlayerCompleteDelegate");

	UOnlineGameInterface_AddRegisterPlayerCompleteDelegate_Params params;
	params.RegisterPlayerCompleteDelegate = RegisterPlayerCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnRegisterPlayerComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// struct FUniqueNetId            PlayerID                       (Parm)
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnRegisterPlayerComplete(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnRegisterPlayerComplete");

	UOnlineGameInterface_OnRegisterPlayerComplete_Params params;
	params.SessionName = SessionName;
	params.PlayerID = PlayerID;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.RegisterPlayers
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// TArray<struct FUniqueNetId>    Players                        (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::RegisterPlayers(const struct FName& SessionName, TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.RegisterPlayers");

	UOnlineGameInterface_RegisterPlayers_Params params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.RegisterPlayer
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// struct FUniqueNetId            PlayerID                       (Parm)
// bool                           bWasInvited                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::RegisterPlayer(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasInvited)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.RegisterPlayer");

	UOnlineGameInterface_RegisterPlayer_Params params;
	params.SessionName = SessionName;
	params.PlayerID = PlayerID;
	params.bWasInvited = bWasInvited;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.GetResolvedConnectString
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// struct FString                 ConnectInfo                    (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::GetResolvedConnectString(const struct FName& SessionName, struct FString* ConnectInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.GetResolvedConnectString");

	UOnlineGameInterface_GetResolvedConnectString_Params params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ConnectInfo != nullptr)
		*ConnectInfo = params.ConnectInfo;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearJoinOnlineGameCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         JoinOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearJoinOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearJoinOnlineGameCompleteDelegate");

	UOnlineGameInterface_ClearJoinOnlineGameCompleteDelegate_Params params;
	params.JoinOnlineGameCompleteDelegate = JoinOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddJoinOnlineGameCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         JoinOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddJoinOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddJoinOnlineGameCompleteDelegate");

	UOnlineGameInterface_AddJoinOnlineGameCompleteDelegate_Params params;
	params.JoinOnlineGameCompleteDelegate = JoinOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnJoinOnlineGameComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnJoinOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnJoinOnlineGameComplete");

	UOnlineGameInterface_OnJoinOnlineGameComplete_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.JoinOnlineGame
// ()
// Parameters:
// unsigned char                  PlayerNum                      (Parm)
// struct FName                   SessionName                    (Parm)
// struct FOnlineGameSearchResult DesiredGame                    (Const, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::JoinOnlineGame(unsigned char PlayerNum, const struct FName& SessionName, struct FOnlineGameSearchResult* DesiredGame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.JoinOnlineGame");

	UOnlineGameInterface_JoinOnlineGame_Params params;
	params.PlayerNum = PlayerNum;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DesiredGame != nullptr)
		*DesiredGame = params.DesiredGame;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.QueryNonAdvertisedData
// ()
// Parameters:
// int                            StartAt                        (Parm)
// int                            NumberToQuery                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::QueryNonAdvertisedData(int StartAt, int NumberToQuery)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.QueryNonAdvertisedData");

	UOnlineGameInterface_QueryNonAdvertisedData_Params params;
	params.StartAt = StartAt;
	params.NumberToQuery = NumberToQuery;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.FreeSearchResults
// ()
// Parameters:
// class UOnlineGameSearch*       Search                         (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::FreeSearchResults(class UOnlineGameSearch* Search)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.FreeSearchResults");

	UOnlineGameInterface_FreeSearchResults_Params params;
	params.Search = Search;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.GetGameSearch
// ()
// Parameters:
// class UOnlineGameSearch*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UOnlineGameSearch* UOnlineGameInterface::GetGameSearch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.GetGameSearch");

	UOnlineGameInterface_GetGameSearch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.BindPlatformSpecificSessionToSearch
// ()
// Parameters:
// unsigned char                  SearchingPlayerNum             (Parm)
// class UOnlineGameSearch*       SearchSettings                 (Parm)
// unsigned char                  PlatformSpecificInfo           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::BindPlatformSpecificSessionToSearch(unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, unsigned char PlatformSpecificInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.BindPlatformSpecificSessionToSearch");

	UOnlineGameInterface_BindPlatformSpecificSessionToSearch_Params params;
	params.SearchingPlayerNum = SearchingPlayerNum;
	params.SearchSettings = SearchSettings;
	params.PlatformSpecificInfo = PlatformSpecificInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfoBySessionName
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// unsigned char                  PlatformSpecificInfo           (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::ReadPlatformSpecificSessionInfoBySessionName(const struct FName& SessionName, unsigned char* PlatformSpecificInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfoBySessionName");

	UOnlineGameInterface_ReadPlatformSpecificSessionInfoBySessionName_Params params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PlatformSpecificInfo != nullptr)
		*PlatformSpecificInfo = params.PlatformSpecificInfo;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfo
// ()
// Parameters:
// struct FOnlineGameSearchResult DesiredGame                    (Const, Parm, OutParm)
// unsigned char                  PlatformSpecificInfo           (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::ReadPlatformSpecificSessionInfo(struct FOnlineGameSearchResult* DesiredGame, unsigned char* PlatformSpecificInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfo");

	UOnlineGameInterface_ReadPlatformSpecificSessionInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DesiredGame != nullptr)
		*DesiredGame = params.DesiredGame;
	if (PlatformSpecificInfo != nullptr)
		*PlatformSpecificInfo = params.PlatformSpecificInfo;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearQosStatusChangedDelegate
// ()
// Parameters:
// struct FScriptDelegate         QosStatusChangedDelegate       (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearQosStatusChangedDelegate(const struct FScriptDelegate& QosStatusChangedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearQosStatusChangedDelegate");

	UOnlineGameInterface_ClearQosStatusChangedDelegate_Params params;
	params.QosStatusChangedDelegate = QosStatusChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddQosStatusChangedDelegate
// ()
// Parameters:
// struct FScriptDelegate         QosStatusChangedDelegate       (Parm, NeedCtorLink)

void UOnlineGameInterface::AddQosStatusChangedDelegate(const struct FScriptDelegate& QosStatusChangedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddQosStatusChangedDelegate");

	UOnlineGameInterface_AddQosStatusChangedDelegate_Params params;
	params.QosStatusChangedDelegate = QosStatusChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnQosStatusChanged
// ()
// Parameters:
// int                            NumComplete                    (Parm)
// int                            NumTotal                       (Parm)

void UOnlineGameInterface::OnQosStatusChanged(int NumComplete, int NumTotal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnQosStatusChanged");

	UOnlineGameInterface_OnQosStatusChanged_Params params;
	params.NumComplete = NumComplete;
	params.NumTotal = NumTotal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.ClearCancelFindOnlineGamesCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         CancelFindOnlineGamesCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearCancelFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& CancelFindOnlineGamesCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearCancelFindOnlineGamesCompleteDelegate");

	UOnlineGameInterface_ClearCancelFindOnlineGamesCompleteDelegate_Params params;
	params.CancelFindOnlineGamesCompleteDelegate = CancelFindOnlineGamesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddCancelFindOnlineGamesCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         CancelFindOnlineGamesCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddCancelFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& CancelFindOnlineGamesCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddCancelFindOnlineGamesCompleteDelegate");

	UOnlineGameInterface_AddCancelFindOnlineGamesCompleteDelegate_Params params;
	params.CancelFindOnlineGamesCompleteDelegate = CancelFindOnlineGamesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnCancelFindOnlineGamesComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnCancelFindOnlineGamesComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnCancelFindOnlineGamesComplete");

	UOnlineGameInterface_OnCancelFindOnlineGamesComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.CancelFindOnlineGames
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::CancelFindOnlineGames()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.CancelFindOnlineGames");

	UOnlineGameInterface_CancelFindOnlineGames_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearFindOnlineGamesCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         FindOnlineGamesCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& FindOnlineGamesCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearFindOnlineGamesCompleteDelegate");

	UOnlineGameInterface_ClearFindOnlineGamesCompleteDelegate_Params params;
	params.FindOnlineGamesCompleteDelegate = FindOnlineGamesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddFindOnlineGamesCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         FindOnlineGamesCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& FindOnlineGamesCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddFindOnlineGamesCompleteDelegate");

	UOnlineGameInterface_AddFindOnlineGamesCompleteDelegate_Params params;
	params.FindOnlineGamesCompleteDelegate = FindOnlineGamesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnFindOnlineGamesComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnFindOnlineGamesComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnFindOnlineGamesComplete");

	UOnlineGameInterface_OnFindOnlineGamesComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.FindOnlineGames
// ()
// Parameters:
// unsigned char                  SearchingPlayerNum             (Parm)
// class UOnlineGameSearch*       SearchSettings                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::FindOnlineGames(unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.FindOnlineGames");

	UOnlineGameInterface_FindOnlineGames_Params params;
	params.SearchingPlayerNum = SearchingPlayerNum;
	params.SearchSettings = SearchSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearDestroyOnlineGameCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         DestroyOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearDestroyOnlineGameCompleteDelegate(const struct FScriptDelegate& DestroyOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearDestroyOnlineGameCompleteDelegate");

	UOnlineGameInterface_ClearDestroyOnlineGameCompleteDelegate_Params params;
	params.DestroyOnlineGameCompleteDelegate = DestroyOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddDestroyOnlineGameCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         DestroyOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddDestroyOnlineGameCompleteDelegate(const struct FScriptDelegate& DestroyOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddDestroyOnlineGameCompleteDelegate");

	UOnlineGameInterface_AddDestroyOnlineGameCompleteDelegate_Params params;
	params.DestroyOnlineGameCompleteDelegate = DestroyOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnDestroyOnlineGameComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnDestroyOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnDestroyOnlineGameComplete");

	UOnlineGameInterface_OnDestroyOnlineGameComplete_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.DestroyOnlineGame
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::DestroyOnlineGame(const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.DestroyOnlineGame");

	UOnlineGameInterface_DestroyOnlineGame_Params params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.GetGameSettings
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// class UOnlineGameSettings*     ReturnValue                    (Parm, OutParm, ReturnParm)

class UOnlineGameSettings* UOnlineGameInterface::GetGameSettings(const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.GetGameSettings");

	UOnlineGameInterface_GetGameSettings_Params params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearUpdateOnlineGameCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         UpdateOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearUpdateOnlineGameCompleteDelegate(const struct FScriptDelegate& UpdateOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearUpdateOnlineGameCompleteDelegate");

	UOnlineGameInterface_ClearUpdateOnlineGameCompleteDelegate_Params params;
	params.UpdateOnlineGameCompleteDelegate = UpdateOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddUpdateOnlineGameCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         UpdateOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddUpdateOnlineGameCompleteDelegate(const struct FScriptDelegate& UpdateOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddUpdateOnlineGameCompleteDelegate");

	UOnlineGameInterface_AddUpdateOnlineGameCompleteDelegate_Params params;
	params.UpdateOnlineGameCompleteDelegate = UpdateOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnUpdateOnlineGameComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnUpdateOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnUpdateOnlineGameComplete");

	UOnlineGameInterface_OnUpdateOnlineGameComplete_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.UpdateOnlineGame
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// class UOnlineGameSettings*     UpdatedGameSettings            (Parm)
// bool                           bShouldRefreshOnlineData       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::UpdateOnlineGame(const struct FName& SessionName, class UOnlineGameSettings* UpdatedGameSettings, bool bShouldRefreshOnlineData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.UpdateOnlineGame");

	UOnlineGameInterface_UpdateOnlineGame_Params params;
	params.SessionName = SessionName;
	params.UpdatedGameSettings = UpdatedGameSettings;
	params.bShouldRefreshOnlineData = bShouldRefreshOnlineData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearCreateOnlineGameCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         CreateOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearCreateOnlineGameCompleteDelegate(const struct FScriptDelegate& CreateOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearCreateOnlineGameCompleteDelegate");

	UOnlineGameInterface_ClearCreateOnlineGameCompleteDelegate_Params params;
	params.CreateOnlineGameCompleteDelegate = CreateOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddCreateOnlineGameCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         CreateOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddCreateOnlineGameCompleteDelegate(const struct FScriptDelegate& CreateOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddCreateOnlineGameCompleteDelegate");

	UOnlineGameInterface_AddCreateOnlineGameCompleteDelegate_Params params;
	params.CreateOnlineGameCompleteDelegate = CreateOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnCreateOnlineGameComplete
// ()
// Parameters:
// struct FName                   SessionName                    (Parm)
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnCreateOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnCreateOnlineGameComplete");

	UOnlineGameInterface_OnCreateOnlineGameComplete_Params params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.CreateOnlineGame
// ()
// Parameters:
// unsigned char                  HostingPlayerNum               (Parm)
// struct FName                   SessionName                    (Parm)
// class UOnlineGameSettings*     NewGameSettings                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::CreateOnlineGame(unsigned char HostingPlayerNum, const struct FName& SessionName, class UOnlineGameSettings* NewGameSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.CreateOnlineGame");

	UOnlineGameInterface_CreateOnlineGame_Params params;
	params.HostingPlayerNum = HostingPlayerNum;
	params.SessionName = SessionName;
	params.NewGameSettings = NewGameSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSystemInterface.GetLocale
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UOnlineSystemInterface::GetLocale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.GetLocale");

	UOnlineSystemInterface_GetLocale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSystemInterface.ClearStorageDeviceChangeDelegate
// ()
// Parameters:
// struct FScriptDelegate         StorageDeviceChangeDelegate    (Parm, NeedCtorLink)

void UOnlineSystemInterface::ClearStorageDeviceChangeDelegate(const struct FScriptDelegate& StorageDeviceChangeDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearStorageDeviceChangeDelegate");

	UOnlineSystemInterface_ClearStorageDeviceChangeDelegate_Params params;
	params.StorageDeviceChangeDelegate = StorageDeviceChangeDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddStorageDeviceChangeDelegate
// ()
// Parameters:
// struct FScriptDelegate         StorageDeviceChangeDelegate    (Parm, NeedCtorLink)

void UOnlineSystemInterface::AddStorageDeviceChangeDelegate(const struct FScriptDelegate& StorageDeviceChangeDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddStorageDeviceChangeDelegate");

	UOnlineSystemInterface_AddStorageDeviceChangeDelegate_Params params;
	params.StorageDeviceChangeDelegate = StorageDeviceChangeDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OnStorageDeviceChange
// ()

void UOnlineSystemInterface::OnStorageDeviceChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnStorageDeviceChange");

	UOnlineSystemInterface_OnStorageDeviceChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.GetNATType
// ()
// Parameters:
// TEnumAsByte<ENATType>          ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ENATType> UOnlineSystemInterface::GetNATType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.GetNATType");

	UOnlineSystemInterface_GetNATType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSystemInterface.ClearConnectionStatusChangeDelegate
// ()
// Parameters:
// struct FScriptDelegate         ConnectionStatusDelegate       (Parm, NeedCtorLink)

void UOnlineSystemInterface::ClearConnectionStatusChangeDelegate(const struct FScriptDelegate& ConnectionStatusDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearConnectionStatusChangeDelegate");

	UOnlineSystemInterface_ClearConnectionStatusChangeDelegate_Params params;
	params.ConnectionStatusDelegate = ConnectionStatusDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddConnectionStatusChangeDelegate
// ()
// Parameters:
// struct FScriptDelegate         ConnectionStatusDelegate       (Parm, NeedCtorLink)

void UOnlineSystemInterface::AddConnectionStatusChangeDelegate(const struct FScriptDelegate& ConnectionStatusDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddConnectionStatusChangeDelegate");

	UOnlineSystemInterface_AddConnectionStatusChangeDelegate_Params params;
	params.ConnectionStatusDelegate = ConnectionStatusDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OnConnectionStatusChange
// ()
// Parameters:
// TEnumAsByte<EOnlineServerConnectionStatus> ConnectionStatus               (Parm)

void UOnlineSystemInterface::OnConnectionStatusChange(TEnumAsByte<EOnlineServerConnectionStatus> ConnectionStatus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnConnectionStatusChange");

	UOnlineSystemInterface_OnConnectionStatusChange_Params params;
	params.ConnectionStatus = ConnectionStatus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.IsControllerConnected
// ()
// Parameters:
// int                            ControllerId                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSystemInterface::IsControllerConnected(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.IsControllerConnected");

	UOnlineSystemInterface_IsControllerConnected_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSystemInterface.ClearControllerChangeDelegate
// ()
// Parameters:
// struct FScriptDelegate         ControllerChangeDelegate       (Parm, NeedCtorLink)

void UOnlineSystemInterface::ClearControllerChangeDelegate(const struct FScriptDelegate& ControllerChangeDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearControllerChangeDelegate");

	UOnlineSystemInterface_ClearControllerChangeDelegate_Params params;
	params.ControllerChangeDelegate = ControllerChangeDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddControllerChangeDelegate
// ()
// Parameters:
// struct FScriptDelegate         ControllerChangeDelegate       (Parm, NeedCtorLink)

void UOnlineSystemInterface::AddControllerChangeDelegate(const struct FScriptDelegate& ControllerChangeDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddControllerChangeDelegate");

	UOnlineSystemInterface_AddControllerChangeDelegate_Params params;
	params.ControllerChangeDelegate = ControllerChangeDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OnControllerChange
// ()
// Parameters:
// int                            ControllerId                   (Parm)
// bool                           bIsConnected                   (Parm)

void UOnlineSystemInterface::OnControllerChange(int ControllerId, bool bIsConnected)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnControllerChange");

	UOnlineSystemInterface_OnControllerChange_Params params;
	params.ControllerId = ControllerId;
	params.bIsConnected = bIsConnected;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.SetNetworkNotificationPosition
// ()
// Parameters:
// TEnumAsByte<ENetworkNotificationPosition> NewPos                         (Parm)

void UOnlineSystemInterface::SetNetworkNotificationPosition(TEnumAsByte<ENetworkNotificationPosition> NewPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.SetNetworkNotificationPosition");

	UOnlineSystemInterface_SetNetworkNotificationPosition_Params params;
	params.NewPos = NewPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.GetNetworkNotificationPosition
// ()
// Parameters:
// TEnumAsByte<ENetworkNotificationPosition> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ENetworkNotificationPosition> UOnlineSystemInterface::GetNetworkNotificationPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.GetNetworkNotificationPosition");

	UOnlineSystemInterface_GetNetworkNotificationPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSystemInterface.ClearExternalUIChangeDelegate
// ()
// Parameters:
// struct FScriptDelegate         ExternalUIDelegate             (Parm, NeedCtorLink)

void UOnlineSystemInterface::ClearExternalUIChangeDelegate(const struct FScriptDelegate& ExternalUIDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearExternalUIChangeDelegate");

	UOnlineSystemInterface_ClearExternalUIChangeDelegate_Params params;
	params.ExternalUIDelegate = ExternalUIDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddExternalUIChangeDelegate
// ()
// Parameters:
// struct FScriptDelegate         ExternalUIDelegate             (Parm, NeedCtorLink)

void UOnlineSystemInterface::AddExternalUIChangeDelegate(const struct FScriptDelegate& ExternalUIDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddExternalUIChangeDelegate");

	UOnlineSystemInterface_AddExternalUIChangeDelegate_Params params;
	params.ExternalUIDelegate = ExternalUIDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OnExternalUIChange
// ()
// Parameters:
// bool                           bIsOpening                     (Parm)

void UOnlineSystemInterface::OnExternalUIChange(bool bIsOpening)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnExternalUIChange");

	UOnlineSystemInterface_OnExternalUIChange_Params params;
	params.bIsOpening = bIsOpening;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.ClearLinkStatusChangeDelegate
// ()
// Parameters:
// struct FScriptDelegate         LinkStatusDelegate             (Parm, NeedCtorLink)

void UOnlineSystemInterface::ClearLinkStatusChangeDelegate(const struct FScriptDelegate& LinkStatusDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearLinkStatusChangeDelegate");

	UOnlineSystemInterface_ClearLinkStatusChangeDelegate_Params params;
	params.LinkStatusDelegate = LinkStatusDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddLinkStatusChangeDelegate
// ()
// Parameters:
// struct FScriptDelegate         LinkStatusDelegate             (Parm, NeedCtorLink)

void UOnlineSystemInterface::AddLinkStatusChangeDelegate(const struct FScriptDelegate& LinkStatusDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddLinkStatusChangeDelegate");

	UOnlineSystemInterface_AddLinkStatusChangeDelegate_Params params;
	params.LinkStatusDelegate = LinkStatusDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OnLinkStatusChange
// ()
// Parameters:
// bool                           bIsConnected                   (Parm)

void UOnlineSystemInterface::OnLinkStatusChange(bool bIsConnected)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnLinkStatusChange");

	UOnlineSystemInterface_OnLinkStatusChange_Params params;
	params.bIsConnected = bIsConnected;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.HasLinkConnection
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSystemInterface::HasLinkConnection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.HasLinkConnection");

	UOnlineSystemInterface_HasLinkConnection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.UnlockAvatarAward
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            AvatarItemId                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::UnlockAvatarAward(unsigned char LocalUserNum, int AvatarItemId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.UnlockAvatarAward");

	UOnlinePlayerInterfaceEx_UnlockAvatarAward_Params params;
	params.LocalUserNum = LocalUserNum;
	params.AvatarItemId = AvatarItemId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowCustomPlayersUI
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TArray<struct FUniqueNetId>    Players                        (Const, Parm, OutParm, NeedCtorLink)
// struct FString                 Title                          (Parm, NeedCtorLink)
// struct FString                 Description                    (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowCustomPlayersUI(unsigned char LocalUserNum, const struct FString& Title, const struct FString& Description, TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowCustomPlayersUI");

	UOnlinePlayerInterfaceEx_ShowCustomPlayersUI_Params params;
	params.LocalUserNum = LocalUserNum;
	params.Title = Title;
	params.Description = Description;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowPlayersUI
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowPlayersUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowPlayersUI");

	UOnlinePlayerInterfaceEx_ShowPlayersUI_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowFriendsInviteUI
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            PlayerID                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowFriendsInviteUI(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowFriendsInviteUI");

	UOnlinePlayerInterfaceEx_ShowFriendsInviteUI_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ClearProfileDataChangedDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ProfileDataChangedDelegate     (Parm, NeedCtorLink)

void UOnlinePlayerInterfaceEx::ClearProfileDataChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ProfileDataChangedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ClearProfileDataChangedDelegate");

	UOnlinePlayerInterfaceEx_ClearProfileDataChangedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ProfileDataChangedDelegate = ProfileDataChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.AddProfileDataChangedDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ProfileDataChangedDelegate     (Parm, NeedCtorLink)

void UOnlinePlayerInterfaceEx::AddProfileDataChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ProfileDataChangedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.AddProfileDataChangedDelegate");

	UOnlinePlayerInterfaceEx_AddProfileDataChangedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ProfileDataChangedDelegate = ProfileDataChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.OnProfileDataChanged
// ()

void UOnlinePlayerInterfaceEx::OnProfileDataChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.OnProfileDataChanged");

	UOnlinePlayerInterfaceEx_OnProfileDataChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.UnlockGamerPicture
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            PictureId                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::UnlockGamerPicture(unsigned char LocalUserNum, int PictureId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.UnlockGamerPicture");

	UOnlinePlayerInterfaceEx_UnlockGamerPicture_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PictureId = PictureId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.IsDeviceValid
// ()
// Parameters:
// int                            DeviceID                       (Parm)
// int                            SizeNeeded                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::IsDeviceValid(int DeviceID, int SizeNeeded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.IsDeviceValid");

	UOnlinePlayerInterfaceEx_IsDeviceValid_Params params;
	params.DeviceID = DeviceID;
	params.SizeNeeded = SizeNeeded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.GetDeviceSelectionResults
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 DeviceName                     (Parm, OutParm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UOnlinePlayerInterfaceEx::GetDeviceSelectionResults(unsigned char LocalUserNum, struct FString* DeviceName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.GetDeviceSelectionResults");

	UOnlinePlayerInterfaceEx_GetDeviceSelectionResults_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DeviceName != nullptr)
		*DeviceName = params.DeviceName;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ClearDeviceSelectionDoneDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         DeviceDelegate                 (Parm, NeedCtorLink)

void UOnlinePlayerInterfaceEx::ClearDeviceSelectionDoneDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& DeviceDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ClearDeviceSelectionDoneDelegate");

	UOnlinePlayerInterfaceEx_ClearDeviceSelectionDoneDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.DeviceDelegate = DeviceDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.AddDeviceSelectionDoneDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         DeviceDelegate                 (Parm, NeedCtorLink)

void UOnlinePlayerInterfaceEx::AddDeviceSelectionDoneDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& DeviceDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.AddDeviceSelectionDoneDelegate");

	UOnlinePlayerInterfaceEx_AddDeviceSelectionDoneDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.DeviceDelegate = DeviceDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.OnDeviceSelectionComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterfaceEx::OnDeviceSelectionComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.OnDeviceSelectionComplete");

	UOnlinePlayerInterfaceEx_OnDeviceSelectionComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowDeviceSelectionUI
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            SizeNeeded                     (Parm)
// bool                           bManageStorage                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowDeviceSelectionUI(unsigned char LocalUserNum, int SizeNeeded, bool bManageStorage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowDeviceSelectionUI");

	UOnlinePlayerInterfaceEx_ShowDeviceSelectionUI_Params params;
	params.LocalUserNum = LocalUserNum;
	params.SizeNeeded = SizeNeeded;
	params.bManageStorage = bManageStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowMembershipMarketplaceUI
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowMembershipMarketplaceUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowMembershipMarketplaceUI");

	UOnlinePlayerInterfaceEx_ShowMembershipMarketplaceUI_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowContentMarketplaceUI
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            CategoryMask                   (OptionalParm, Parm)
// int                            OfferId                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowContentMarketplaceUI(unsigned char LocalUserNum, int CategoryMask, int OfferId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowContentMarketplaceUI");

	UOnlinePlayerInterfaceEx_ShowContentMarketplaceUI_Params params;
	params.LocalUserNum = LocalUserNum;
	params.CategoryMask = CategoryMask;
	params.OfferId = OfferId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowInviteUI
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 InviteText                     (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowInviteUI(unsigned char LocalUserNum, const struct FString& InviteText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowInviteUI");

	UOnlinePlayerInterfaceEx_ShowInviteUI_Params params;
	params.LocalUserNum = LocalUserNum;
	params.InviteText = InviteText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowAchievementsUI
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowAchievementsUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowAchievementsUI");

	UOnlinePlayerInterfaceEx_ShowAchievementsUI_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowMessagesUI
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowMessagesUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowMessagesUI");

	UOnlinePlayerInterfaceEx_ShowMessagesUI_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowGamerCardUI
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            PlayerID                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowGamerCardUI(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowGamerCardUI");

	UOnlinePlayerInterfaceEx_ShowGamerCardUI_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowFeedbackUI
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            PlayerID                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowFeedbackUI(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowFeedbackUI");

	UOnlinePlayerInterfaceEx_ShowFeedbackUI_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.GetAchievements
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TArray<struct FAchievementDetails> Achievements                   (Parm, OutParm, NeedCtorLink)
// int                            TitleId                        (OptionalParm, Parm)
// TEnumAsByte<EOnlineEnumerationReadState> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EOnlineEnumerationReadState> UOnlinePlayerInterface::GetAchievements(unsigned char LocalUserNum, int TitleId, TArray<struct FAchievementDetails>* Achievements)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetAchievements");

	UOnlinePlayerInterface_GetAchievements_Params params;
	params.LocalUserNum = LocalUserNum;
	params.TitleId = TitleId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Achievements != nullptr)
		*Achievements = params.Achievements;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearReadAchievementsCompleteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReadAchievementsCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearReadAchievementsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadAchievementsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReadAchievementsCompleteDelegate");

	UOnlinePlayerInterface_ClearReadAchievementsCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReadAchievementsCompleteDelegate = ReadAchievementsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddReadAchievementsCompleteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReadAchievementsCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddReadAchievementsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadAchievementsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReadAchievementsCompleteDelegate");

	UOnlinePlayerInterface_AddReadAchievementsCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReadAchievementsCompleteDelegate = ReadAchievementsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnReadAchievementsComplete
// ()
// Parameters:
// int                            TitleId                        (Parm)

void UOnlinePlayerInterface::OnReadAchievementsComplete(int TitleId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReadAchievementsComplete");

	UOnlinePlayerInterface_OnReadAchievementsComplete_Params params;
	params.TitleId = TitleId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ReadAchievements
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            TitleId                        (OptionalParm, Parm)
// bool                           bShouldReadText                (OptionalParm, Parm)
// bool                           bShouldReadImages              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::ReadAchievements(unsigned char LocalUserNum, int TitleId, bool bShouldReadText, bool bShouldReadImages)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ReadAchievements");

	UOnlinePlayerInterface_ReadAchievements_Params params;
	params.LocalUserNum = LocalUserNum;
	params.TitleId = TitleId;
	params.bShouldReadText = bShouldReadText;
	params.bShouldReadImages = bShouldReadImages;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearUnlockAchievementCompleteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         UnlockAchievementCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearUnlockAchievementCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& UnlockAchievementCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearUnlockAchievementCompleteDelegate");

	UOnlinePlayerInterface_ClearUnlockAchievementCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.UnlockAchievementCompleteDelegate = UnlockAchievementCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddUnlockAchievementCompleteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         UnlockAchievementCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddUnlockAchievementCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& UnlockAchievementCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddUnlockAchievementCompleteDelegate");

	UOnlinePlayerInterface_AddUnlockAchievementCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.UnlockAchievementCompleteDelegate = UnlockAchievementCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnUnlockAchievementComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterface::OnUnlockAchievementComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnUnlockAchievementComplete");

	UOnlinePlayerInterface_OnUnlockAchievementComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.UnlockAchievement
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            AchievementId                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::UnlockAchievement(unsigned char LocalUserNum, int AchievementId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.UnlockAchievement");

	UOnlinePlayerInterface_UnlockAchievement_Params params;
	params.LocalUserNum = LocalUserNum;
	params.AchievementId = AchievementId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.DeleteMessage
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            MessageIndex                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::DeleteMessage(unsigned char LocalUserNum, int MessageIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.DeleteMessage");

	UOnlinePlayerInterface_DeleteMessage_Params params;
	params.LocalUserNum = LocalUserNum;
	params.MessageIndex = MessageIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearFriendMessageReceivedDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         MessageDelegate                (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearFriendMessageReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& MessageDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearFriendMessageReceivedDelegate");

	UOnlinePlayerInterface_ClearFriendMessageReceivedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.MessageDelegate = MessageDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddFriendMessageReceivedDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         MessageDelegate                (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddFriendMessageReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& MessageDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddFriendMessageReceivedDelegate");

	UOnlinePlayerInterface_AddFriendMessageReceivedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.MessageDelegate = MessageDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnFriendMessageReceived
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            SendingPlayer                  (Parm)
// struct FString                 SendingNick                    (Parm, NeedCtorLink)
// struct FString                 Message                        (Parm, NeedCtorLink)

void UOnlinePlayerInterface::OnFriendMessageReceived(unsigned char LocalUserNum, const struct FUniqueNetId& SendingPlayer, const struct FString& SendingNick, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnFriendMessageReceived");

	UOnlinePlayerInterface_OnFriendMessageReceived_Params params;
	params.LocalUserNum = LocalUserNum;
	params.SendingPlayer = SendingPlayer;
	params.SendingNick = SendingNick;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.GetFriendMessages
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TArray<struct FOnlineFriendMessage> FriendMessages                 (Parm, OutParm, NeedCtorLink)

void UOnlinePlayerInterface::GetFriendMessages(unsigned char LocalUserNum, TArray<struct FOnlineFriendMessage>* FriendMessages)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetFriendMessages");

	UOnlinePlayerInterface_GetFriendMessages_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FriendMessages != nullptr)
		*FriendMessages = params.FriendMessages;
}


// Function Engine.OnlinePlayerInterface.ClearJoinFriendGameCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         JoinFriendGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearJoinFriendGameCompleteDelegate(const struct FScriptDelegate& JoinFriendGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearJoinFriendGameCompleteDelegate");

	UOnlinePlayerInterface_ClearJoinFriendGameCompleteDelegate_Params params;
	params.JoinFriendGameCompleteDelegate = JoinFriendGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddJoinFriendGameCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         JoinFriendGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddJoinFriendGameCompleteDelegate(const struct FScriptDelegate& JoinFriendGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddJoinFriendGameCompleteDelegate");

	UOnlinePlayerInterface_AddJoinFriendGameCompleteDelegate_Params params;
	params.JoinFriendGameCompleteDelegate = JoinFriendGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnJoinFriendGameComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterface::OnJoinFriendGameComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnJoinFriendGameComplete");

	UOnlinePlayerInterface_OnJoinFriendGameComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.JoinFriendGame
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            Friend                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::JoinFriendGame(unsigned char LocalUserNum, const struct FUniqueNetId& Friend)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.JoinFriendGame");

	UOnlinePlayerInterface_JoinFriendGame_Params params;
	params.LocalUserNum = LocalUserNum;
	params.Friend = Friend;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearReceivedGameInviteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReceivedGameInviteDelegate     (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearReceivedGameInviteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReceivedGameInviteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReceivedGameInviteDelegate");

	UOnlinePlayerInterface_ClearReceivedGameInviteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReceivedGameInviteDelegate = ReceivedGameInviteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddReceivedGameInviteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReceivedGameInviteDelegate     (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddReceivedGameInviteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReceivedGameInviteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReceivedGameInviteDelegate");

	UOnlinePlayerInterface_AddReceivedGameInviteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReceivedGameInviteDelegate = ReceivedGameInviteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnReceivedGameInvite
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 InviterName                    (Parm, NeedCtorLink)

void UOnlinePlayerInterface::OnReceivedGameInvite(unsigned char LocalUserNum, const struct FString& InviterName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReceivedGameInvite");

	UOnlinePlayerInterface_OnReceivedGameInvite_Params params;
	params.LocalUserNum = LocalUserNum;
	params.InviterName = InviterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.SendGameInviteToFriends
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TArray<struct FUniqueNetId>    Friends                        (Parm, NeedCtorLink)
// struct FString                 Text                           (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::SendGameInviteToFriends(unsigned char LocalUserNum, TArray<struct FUniqueNetId> Friends, const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SendGameInviteToFriends");

	UOnlinePlayerInterface_SendGameInviteToFriends_Params params;
	params.LocalUserNum = LocalUserNum;
	params.Friends = Friends;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.SendGameInviteToFriend
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            Friend                         (Parm)
// struct FString                 Text                           (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::SendGameInviteToFriend(unsigned char LocalUserNum, const struct FUniqueNetId& Friend, const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SendGameInviteToFriend");

	UOnlinePlayerInterface_SendGameInviteToFriend_Params params;
	params.LocalUserNum = LocalUserNum;
	params.Friend = Friend;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.SendMessageToFriend
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            Friend                         (Parm)
// struct FString                 Message                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::SendMessageToFriend(unsigned char LocalUserNum, const struct FUniqueNetId& Friend, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SendMessageToFriend");

	UOnlinePlayerInterface_SendMessageToFriend_Params params;
	params.LocalUserNum = LocalUserNum;
	params.Friend = Friend;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearFriendInviteReceivedDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         InviteDelegate                 (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearFriendInviteReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& InviteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearFriendInviteReceivedDelegate");

	UOnlinePlayerInterface_ClearFriendInviteReceivedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.InviteDelegate = InviteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddFriendInviteReceivedDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         InviteDelegate                 (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddFriendInviteReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& InviteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddFriendInviteReceivedDelegate");

	UOnlinePlayerInterface_AddFriendInviteReceivedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.InviteDelegate = InviteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnFriendInviteReceived
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            RequestingPlayer               (Parm)
// struct FString                 RequestingNick                 (Parm, NeedCtorLink)
// struct FString                 Message                        (Parm, NeedCtorLink)

void UOnlinePlayerInterface::OnFriendInviteReceived(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer, const struct FString& RequestingNick, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnFriendInviteReceived");

	UOnlinePlayerInterface_OnFriendInviteReceived_Params params;
	params.LocalUserNum = LocalUserNum;
	params.RequestingPlayer = RequestingPlayer;
	params.RequestingNick = RequestingNick;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.RemoveFriend
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            FormerFriend                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::RemoveFriend(unsigned char LocalUserNum, const struct FUniqueNetId& FormerFriend)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.RemoveFriend");

	UOnlinePlayerInterface_RemoveFriend_Params params;
	params.LocalUserNum = LocalUserNum;
	params.FormerFriend = FormerFriend;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.DenyFriendInvite
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            RequestingPlayer               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::DenyFriendInvite(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.DenyFriendInvite");

	UOnlinePlayerInterface_DenyFriendInvite_Params params;
	params.LocalUserNum = LocalUserNum;
	params.RequestingPlayer = RequestingPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.AcceptFriendInvite
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            RequestingPlayer               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::AcceptFriendInvite(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AcceptFriendInvite");

	UOnlinePlayerInterface_AcceptFriendInvite_Params params;
	params.LocalUserNum = LocalUserNum;
	params.RequestingPlayer = RequestingPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearAddFriendByNameCompleteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         FriendDelegate                 (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearAddFriendByNameCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearAddFriendByNameCompleteDelegate");

	UOnlinePlayerInterface_ClearAddFriendByNameCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.FriendDelegate = FriendDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddAddFriendByNameCompleteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         FriendDelegate                 (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddAddFriendByNameCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddAddFriendByNameCompleteDelegate");

	UOnlinePlayerInterface_AddAddFriendByNameCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.FriendDelegate = FriendDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnAddFriendByNameComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterface::OnAddFriendByNameComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnAddFriendByNameComplete");

	UOnlinePlayerInterface_OnAddFriendByNameComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddFriendByName
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 FriendName                     (Parm, NeedCtorLink)
// struct FString                 Message                        (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::AddFriendByName(unsigned char LocalUserNum, const struct FString& FriendName, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddFriendByName");

	UOnlinePlayerInterface_AddFriendByName_Params params;
	params.LocalUserNum = LocalUserNum;
	params.FriendName = FriendName;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.AddFriend
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            NewFriend                      (Parm)
// struct FString                 Message                        (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::AddFriend(unsigned char LocalUserNum, const struct FUniqueNetId& NewFriend, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddFriend");

	UOnlinePlayerInterface_AddFriend_Params params;
	params.LocalUserNum = LocalUserNum;
	params.NewFriend = NewFriend;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.GetKeyboardInputResults
// ()
// Parameters:
// unsigned char                  bWasCanceled                   (Parm, OutParm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UOnlinePlayerInterface::GetKeyboardInputResults(unsigned char* bWasCanceled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetKeyboardInputResults");

	UOnlinePlayerInterface_GetKeyboardInputResults_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bWasCanceled != nullptr)
		*bWasCanceled = params.bWasCanceled;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearKeyboardInputDoneDelegate
// ()
// Parameters:
// struct FScriptDelegate         InputDelegate                  (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearKeyboardInputDoneDelegate(const struct FScriptDelegate& InputDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearKeyboardInputDoneDelegate");

	UOnlinePlayerInterface_ClearKeyboardInputDoneDelegate_Params params;
	params.InputDelegate = InputDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddKeyboardInputDoneDelegate
// ()
// Parameters:
// struct FScriptDelegate         InputDelegate                  (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddKeyboardInputDoneDelegate(const struct FScriptDelegate& InputDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddKeyboardInputDoneDelegate");

	UOnlinePlayerInterface_AddKeyboardInputDoneDelegate_Params params;
	params.InputDelegate = InputDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnKeyboardInputComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterface::OnKeyboardInputComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnKeyboardInputComplete");

	UOnlinePlayerInterface_OnKeyboardInputComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ShowKeyboardUI
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 TitleText                      (Parm, NeedCtorLink)
// struct FString                 DescriptionText                (Parm, NeedCtorLink)
// bool                           bIsPassword                    (OptionalParm, Parm)
// bool                           bShouldValidate                (OptionalParm, Parm)
// struct FString                 DefaultText                    (OptionalParm, Parm, NeedCtorLink)
// int                            MaxResultLength                (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::ShowKeyboardUI(unsigned char LocalUserNum, const struct FString& TitleText, const struct FString& DescriptionText, bool bIsPassword, bool bShouldValidate, const struct FString& DefaultText, int MaxResultLength)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ShowKeyboardUI");

	UOnlinePlayerInterface_ShowKeyboardUI_Params params;
	params.LocalUserNum = LocalUserNum;
	params.TitleText = TitleText;
	params.DescriptionText = DescriptionText;
	params.bIsPassword = bIsPassword;
	params.bShouldValidate = bShouldValidate;
	params.DefaultText = DefaultText;
	params.MaxResultLength = MaxResultLength;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.SetOnlineStatus
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            StatusId                       (Parm)
// TArray<struct FLocalizedStringSetting> LocalizedStringSettings        (Const, Parm, OutParm, NeedCtorLink)
// TArray<struct FSettingsProperty> Properties                     (Const, Parm, OutParm, NeedCtorLink)

void UOnlinePlayerInterface::SetOnlineStatus(unsigned char LocalUserNum, int StatusId, TArray<struct FLocalizedStringSetting>* LocalizedStringSettings, TArray<struct FSettingsProperty>* Properties)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SetOnlineStatus");

	UOnlinePlayerInterface_SetOnlineStatus_Params params;
	params.LocalUserNum = LocalUserNum;
	params.StatusId = StatusId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LocalizedStringSettings != nullptr)
		*LocalizedStringSettings = params.LocalizedStringSettings;
	if (Properties != nullptr)
		*Properties = params.Properties;
}


// Function Engine.OnlinePlayerInterface.GetFriendsList
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TArray<struct FOnlineFriend>   Friends                        (Parm, OutParm, NeedCtorLink)
// int                            Count                          (OptionalParm, Parm)
// int                            StartingAt                     (OptionalParm, Parm)
// TEnumAsByte<EOnlineEnumerationReadState> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EOnlineEnumerationReadState> UOnlinePlayerInterface::GetFriendsList(unsigned char LocalUserNum, int Count, int StartingAt, TArray<struct FOnlineFriend>* Friends)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetFriendsList");

	UOnlinePlayerInterface_GetFriendsList_Params params;
	params.LocalUserNum = LocalUserNum;
	params.Count = Count;
	params.StartingAt = StartingAt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Friends != nullptr)
		*Friends = params.Friends;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearReadFriendsCompleteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReadFriendsCompleteDelegate    (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearReadFriendsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadFriendsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReadFriendsCompleteDelegate");

	UOnlinePlayerInterface_ClearReadFriendsCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReadFriendsCompleteDelegate = ReadFriendsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddReadFriendsCompleteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReadFriendsCompleteDelegate    (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddReadFriendsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadFriendsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReadFriendsCompleteDelegate");

	UOnlinePlayerInterface_AddReadFriendsCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReadFriendsCompleteDelegate = ReadFriendsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnReadFriendsComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterface::OnReadFriendsComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReadFriendsComplete");

	UOnlinePlayerInterface_OnReadFriendsComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ReadFriendsList
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            Count                          (OptionalParm, Parm)
// int                            StartingAt                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::ReadFriendsList(unsigned char LocalUserNum, int Count, int StartingAt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ReadFriendsList");

	UOnlinePlayerInterface_ReadFriendsList_Params params;
	params.LocalUserNum = LocalUserNum;
	params.Count = Count;
	params.StartingAt = StartingAt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearWritePlayerStorageCompleteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         WritePlayerStorageCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearWritePlayerStorageCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& WritePlayerStorageCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearWritePlayerStorageCompleteDelegate");

	UOnlinePlayerInterface_ClearWritePlayerStorageCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.WritePlayerStorageCompleteDelegate = WritePlayerStorageCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddWritePlayerStorageCompleteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         WritePlayerStorageCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddWritePlayerStorageCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& WritePlayerStorageCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddWritePlayerStorageCompleteDelegate");

	UOnlinePlayerInterface_AddWritePlayerStorageCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.WritePlayerStorageCompleteDelegate = WritePlayerStorageCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnWritePlayerStorageComplete
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterface::OnWritePlayerStorageComplete(unsigned char LocalUserNum, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnWritePlayerStorageComplete");

	UOnlinePlayerInterface_OnWritePlayerStorageComplete_Params params;
	params.LocalUserNum = LocalUserNum;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.WritePlayerStorage
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (Parm)
// int                            DeviceID                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::WritePlayerStorage(unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage, int DeviceID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.WritePlayerStorage");

	UOnlinePlayerInterface_WritePlayerStorage_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerStorage = PlayerStorage;
	params.DeviceID = DeviceID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.GetPlayerStorage
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// class UOnlinePlayerStorage*    ReturnValue                    (Parm, OutParm, ReturnParm)

class UOnlinePlayerStorage* UOnlinePlayerInterface::GetPlayerStorage(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetPlayerStorage");

	UOnlinePlayerInterface_GetPlayerStorage_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearReadPlayerStorageForNetIdCompleteDelegate
// ()
// Parameters:
// struct FUniqueNetId            NetId                          (Parm)
// struct FScriptDelegate         ReadPlayerStorageForNetIdCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearReadPlayerStorageForNetIdCompleteDelegate(const struct FUniqueNetId& NetId, const struct FScriptDelegate& ReadPlayerStorageForNetIdCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReadPlayerStorageForNetIdCompleteDelegate");

	UOnlinePlayerInterface_ClearReadPlayerStorageForNetIdCompleteDelegate_Params params;
	params.NetId = NetId;
	params.ReadPlayerStorageForNetIdCompleteDelegate = ReadPlayerStorageForNetIdCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddReadPlayerStorageForNetIdCompleteDelegate
// ()
// Parameters:
// struct FUniqueNetId            NetId                          (Parm)
// struct FScriptDelegate         ReadPlayerStorageForNetIdCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddReadPlayerStorageForNetIdCompleteDelegate(const struct FUniqueNetId& NetId, const struct FScriptDelegate& ReadPlayerStorageForNetIdCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReadPlayerStorageForNetIdCompleteDelegate");

	UOnlinePlayerInterface_AddReadPlayerStorageForNetIdCompleteDelegate_Params params;
	params.NetId = NetId;
	params.ReadPlayerStorageForNetIdCompleteDelegate = ReadPlayerStorageForNetIdCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnReadPlayerStorageForNetIdComplete
// ()
// Parameters:
// struct FUniqueNetId            NetId                          (Parm)
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterface::OnReadPlayerStorageForNetIdComplete(const struct FUniqueNetId& NetId, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReadPlayerStorageForNetIdComplete");

	UOnlinePlayerInterface_OnReadPlayerStorageForNetIdComplete_Params params;
	params.NetId = NetId;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ReadPlayerStorageForNetId
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            NetId                          (Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::ReadPlayerStorageForNetId(unsigned char LocalUserNum, const struct FUniqueNetId& NetId, class UOnlinePlayerStorage* PlayerStorage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ReadPlayerStorageForNetId");

	UOnlinePlayerInterface_ReadPlayerStorageForNetId_Params params;
	params.LocalUserNum = LocalUserNum;
	params.NetId = NetId;
	params.PlayerStorage = PlayerStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearReadPlayerStorageCompleteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReadPlayerStorageCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearReadPlayerStorageCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadPlayerStorageCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReadPlayerStorageCompleteDelegate");

	UOnlinePlayerInterface_ClearReadPlayerStorageCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReadPlayerStorageCompleteDelegate = ReadPlayerStorageCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddReadPlayerStorageCompleteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReadPlayerStorageCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddReadPlayerStorageCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadPlayerStorageCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReadPlayerStorageCompleteDelegate");

	UOnlinePlayerInterface_AddReadPlayerStorageCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReadPlayerStorageCompleteDelegate = ReadPlayerStorageCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnReadPlayerStorageComplete
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterface::OnReadPlayerStorageComplete(unsigned char LocalUserNum, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReadPlayerStorageComplete");

	UOnlinePlayerInterface_OnReadPlayerStorageComplete_Params params;
	params.LocalUserNum = LocalUserNum;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ReadPlayerStorage
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (Parm)
// int                            DeviceID                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::ReadPlayerStorage(unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage, int DeviceID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ReadPlayerStorage");

	UOnlinePlayerInterface_ReadPlayerStorage_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerStorage = PlayerStorage;
	params.DeviceID = DeviceID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearWriteProfileSettingsCompleteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         WriteProfileSettingsCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearWriteProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& WriteProfileSettingsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearWriteProfileSettingsCompleteDelegate");

	UOnlinePlayerInterface_ClearWriteProfileSettingsCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.WriteProfileSettingsCompleteDelegate = WriteProfileSettingsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddWriteProfileSettingsCompleteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         WriteProfileSettingsCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddWriteProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& WriteProfileSettingsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddWriteProfileSettingsCompleteDelegate");

	UOnlinePlayerInterface_AddWriteProfileSettingsCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.WriteProfileSettingsCompleteDelegate = WriteProfileSettingsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnWriteProfileSettingsComplete
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterface::OnWriteProfileSettingsComplete(unsigned char LocalUserNum, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnWriteProfileSettingsComplete");

	UOnlinePlayerInterface_OnWriteProfileSettingsComplete_Params params;
	params.LocalUserNum = LocalUserNum;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.WriteProfileSettings
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// class UOnlineProfileSettings*  ProfileSettings                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::WriteProfileSettings(unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.WriteProfileSettings");

	UOnlinePlayerInterface_WriteProfileSettings_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ProfileSettings = ProfileSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.GetProfileSettings
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// class UOnlineProfileSettings*  ReturnValue                    (Parm, OutParm, ReturnParm)

class UOnlineProfileSettings* UOnlinePlayerInterface::GetProfileSettings(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetProfileSettings");

	UOnlinePlayerInterface_GetProfileSettings_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearReadProfileSettingsCompleteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReadProfileSettingsCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearReadProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReadProfileSettingsCompleteDelegate");

	UOnlinePlayerInterface_ClearReadProfileSettingsCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReadProfileSettingsCompleteDelegate = ReadProfileSettingsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddReadProfileSettingsCompleteDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReadProfileSettingsCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddReadProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReadProfileSettingsCompleteDelegate");

	UOnlinePlayerInterface_AddReadProfileSettingsCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReadProfileSettingsCompleteDelegate = ReadProfileSettingsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnReadProfileSettingsComplete
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterface::OnReadProfileSettingsComplete(unsigned char LocalUserNum, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReadProfileSettingsComplete");

	UOnlinePlayerInterface_OnReadProfileSettingsComplete_Params params;
	params.LocalUserNum = LocalUserNum;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ReadProfileSettings
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// class UOnlineProfileSettings*  ProfileSettings                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::ReadProfileSettings(unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ReadProfileSettings");

	UOnlinePlayerInterface_ReadProfileSettings_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ProfileSettings = ProfileSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearFriendsChangeDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         FriendsDelegate                (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearFriendsChangeDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendsDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearFriendsChangeDelegate");

	UOnlinePlayerInterface_ClearFriendsChangeDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.FriendsDelegate = FriendsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddFriendsChangeDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         FriendsDelegate                (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddFriendsChangeDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendsDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddFriendsChangeDelegate");

	UOnlinePlayerInterface_AddFriendsChangeDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.FriendsDelegate = FriendsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ClearMutingChangeDelegate
// ()
// Parameters:
// struct FScriptDelegate         MutingDelegate                 (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearMutingChangeDelegate(const struct FScriptDelegate& MutingDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearMutingChangeDelegate");

	UOnlinePlayerInterface_ClearMutingChangeDelegate_Params params;
	params.MutingDelegate = MutingDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddMutingChangeDelegate
// ()
// Parameters:
// struct FScriptDelegate         MutingDelegate                 (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddMutingChangeDelegate(const struct FScriptDelegate& MutingDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddMutingChangeDelegate");

	UOnlinePlayerInterface_AddMutingChangeDelegate_Params params;
	params.MutingDelegate = MutingDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ClearLoginCancelledDelegate
// ()
// Parameters:
// struct FScriptDelegate         CancelledDelegate              (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearLoginCancelledDelegate(const struct FScriptDelegate& CancelledDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearLoginCancelledDelegate");

	UOnlinePlayerInterface_ClearLoginCancelledDelegate_Params params;
	params.CancelledDelegate = CancelledDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddLoginCancelledDelegate
// ()
// Parameters:
// struct FScriptDelegate         CancelledDelegate              (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddLoginCancelledDelegate(const struct FScriptDelegate& CancelledDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddLoginCancelledDelegate");

	UOnlinePlayerInterface_AddLoginCancelledDelegate_Params params;
	params.CancelledDelegate = CancelledDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ClearLoginStatusChangeDelegate
// ()
// Parameters:
// struct FScriptDelegate         LoginStatusDelegate            (Parm, NeedCtorLink)
// unsigned char                  LocalUserNum                   (Parm)

void UOnlinePlayerInterface::ClearLoginStatusChangeDelegate(const struct FScriptDelegate& LoginStatusDelegate, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearLoginStatusChangeDelegate");

	UOnlinePlayerInterface_ClearLoginStatusChangeDelegate_Params params;
	params.LoginStatusDelegate = LoginStatusDelegate;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddLoginStatusChangeDelegate
// ()
// Parameters:
// struct FScriptDelegate         LoginStatusDelegate            (Parm, NeedCtorLink)
// unsigned char                  LocalUserNum                   (Parm)

void UOnlinePlayerInterface::AddLoginStatusChangeDelegate(const struct FScriptDelegate& LoginStatusDelegate, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddLoginStatusChangeDelegate");

	UOnlinePlayerInterface_AddLoginStatusChangeDelegate_Params params;
	params.LoginStatusDelegate = LoginStatusDelegate;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnLoginStatusChange
// ()
// Parameters:
// TEnumAsByte<ELoginStatus>      NewStatus                      (Parm)
// struct FUniqueNetId            NewId                          (Parm)

void UOnlinePlayerInterface::OnLoginStatusChange(TEnumAsByte<ELoginStatus> NewStatus, const struct FUniqueNetId& NewId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnLoginStatusChange");

	UOnlinePlayerInterface_OnLoginStatusChange_Params params;
	params.NewStatus = NewStatus;
	params.NewId = NewId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ClearLoginChangeDelegate
// ()
// Parameters:
// struct FScriptDelegate         LoginDelegate                  (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearLoginChangeDelegate(const struct FScriptDelegate& LoginDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearLoginChangeDelegate");

	UOnlinePlayerInterface_ClearLoginChangeDelegate_Params params;
	params.LoginDelegate = LoginDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddLoginChangeDelegate
// ()
// Parameters:
// struct FScriptDelegate         LoginDelegate                  (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddLoginChangeDelegate(const struct FScriptDelegate& LoginDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddLoginChangeDelegate");

	UOnlinePlayerInterface_AddLoginChangeDelegate_Params params;
	params.LoginDelegate = LoginDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ShowFriendsUI
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::ShowFriendsUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ShowFriendsUI");

	UOnlinePlayerInterface_ShowFriendsUI_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.IsMuted
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            PlayerID                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::IsMuted(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.IsMuted");

	UOnlinePlayerInterface_IsMuted_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.AreAnyFriends
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TArray<struct FFriendsQuery>   Query                          (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::AreAnyFriends(unsigned char LocalUserNum, TArray<struct FFriendsQuery>* Query)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AreAnyFriends");

	UOnlinePlayerInterface_AreAnyFriends_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Query != nullptr)
		*Query = params.Query;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.IsFriend
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            PlayerID                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::IsFriend(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.IsFriend");

	UOnlinePlayerInterface_IsFriend_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanShowPresenceInformation
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EFeaturePrivilegeLevel> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EFeaturePrivilegeLevel> UOnlinePlayerInterface::CanShowPresenceInformation(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanShowPresenceInformation");

	UOnlinePlayerInterface_CanShowPresenceInformation_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanViewPlayerProfiles
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EFeaturePrivilegeLevel> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EFeaturePrivilegeLevel> UOnlinePlayerInterface::CanViewPlayerProfiles(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanViewPlayerProfiles");

	UOnlinePlayerInterface_CanViewPlayerProfiles_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanPurchaseContent
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EFeaturePrivilegeLevel> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EFeaturePrivilegeLevel> UOnlinePlayerInterface::CanPurchaseContent(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanPurchaseContent");

	UOnlinePlayerInterface_CanPurchaseContent_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanDownloadUserContent
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EFeaturePrivilegeLevel> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EFeaturePrivilegeLevel> UOnlinePlayerInterface::CanDownloadUserContent(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanDownloadUserContent");

	UOnlinePlayerInterface_CanDownloadUserContent_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanCommunicate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EFeaturePrivilegeLevel> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EFeaturePrivilegeLevel> UOnlinePlayerInterface::CanCommunicate(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanCommunicate");

	UOnlinePlayerInterface_CanCommunicate_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanPlayOnline
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EFeaturePrivilegeLevel> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EFeaturePrivilegeLevel> UOnlinePlayerInterface::CanPlayOnline(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanPlayOnline");

	UOnlinePlayerInterface_CanPlayOnline_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.IsLocalLogin
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::IsLocalLogin(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.IsLocalLogin");

	UOnlinePlayerInterface_IsLocalLogin_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.IsGuestLogin
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::IsGuestLogin(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.IsGuestLogin");

	UOnlinePlayerInterface_IsGuestLogin_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.GetPlayerNickname
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UOnlinePlayerInterface::GetPlayerNickname(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetPlayerNickname");

	UOnlinePlayerInterface_GetPlayerNickname_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.GetUniquePlayerId
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            PlayerID                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::GetUniquePlayerId(unsigned char LocalUserNum, struct FUniqueNetId* PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetUniquePlayerId");

	UOnlinePlayerInterface_GetUniquePlayerId_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PlayerID != nullptr)
		*PlayerID = params.PlayerID;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.GetLoginStatus
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<ELoginStatus>      ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ELoginStatus> UOnlinePlayerInterface::GetLoginStatus(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetLoginStatus");

	UOnlinePlayerInterface_GetLoginStatus_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearLogoutCompletedDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         LogoutDelegate                 (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearLogoutCompletedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LogoutDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearLogoutCompletedDelegate");

	UOnlinePlayerInterface_ClearLogoutCompletedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.LogoutDelegate = LogoutDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddLogoutCompletedDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         LogoutDelegate                 (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddLogoutCompletedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LogoutDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddLogoutCompletedDelegate");

	UOnlinePlayerInterface_AddLogoutCompletedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.LogoutDelegate = LogoutDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnLogoutCompleted
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterface::OnLogoutCompleted(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnLogoutCompleted");

	UOnlinePlayerInterface_OnLogoutCompleted_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.Logout
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::Logout(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.Logout");

	UOnlinePlayerInterface_Logout_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearLoginFailedDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         LoginDelegate                  (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearLoginFailedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LoginDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearLoginFailedDelegate");

	UOnlinePlayerInterface_ClearLoginFailedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.LoginDelegate = LoginDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddLoginFailedDelegate
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         LoginDelegate                  (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddLoginFailedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LoginDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddLoginFailedDelegate");

	UOnlinePlayerInterface_AddLoginFailedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.LoginDelegate = LoginDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnLoginFailed
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EOnlineServerConnectionStatus> ErrorCode                      (Parm)

void UOnlinePlayerInterface::OnLoginFailed(unsigned char LocalUserNum, TEnumAsByte<EOnlineServerConnectionStatus> ErrorCode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnLoginFailed");

	UOnlinePlayerInterface_OnLoginFailed_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ErrorCode = ErrorCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AutoLogin
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::AutoLogin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AutoLogin");

	UOnlinePlayerInterface_AutoLogin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.Login
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 LoginName                      (Parm, NeedCtorLink)
// struct FString                 Password                       (Parm, NeedCtorLink)
// bool                           bWantsLocalOnly                (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::Login(unsigned char LocalUserNum, const struct FString& LoginName, const struct FString& Password, bool bWantsLocalOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.Login");

	UOnlinePlayerInterface_Login_Params params;
	params.LocalUserNum = LocalUserNum;
	params.LoginName = LoginName;
	params.Password = Password;
	params.bWantsLocalOnly = bWantsLocalOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ShowLoginUI
// ()
// Parameters:
// bool                           bShowOnlineOnly                (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::ShowLoginUI(bool bShowOnlineOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ShowLoginUI");

	UOnlinePlayerInterface_ShowLoginUI_Params params;
	params.bShowOnlineOnly = bShowOnlineOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.OnFriendsChange
// ()

void UOnlinePlayerInterface::OnFriendsChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnFriendsChange");

	UOnlinePlayerInterface_OnFriendsChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnMutingChange
// ()

void UOnlinePlayerInterface::OnMutingChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnMutingChange");

	UOnlinePlayerInterface_OnMutingChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnLoginCancelled
// ()

void UOnlinePlayerInterface::OnLoginCancelled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnLoginCancelled");

	UOnlinePlayerInterface_OnLoginCancelled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnLoginChange
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)

void UOnlinePlayerInterface::OnLoginChange(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnLoginChange");

	UOnlinePlayerInterface_OnLoginChange_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAccountInterface.GetLocalAccountNames
// ()
// Parameters:
// TArray<struct FString>         Accounts                       (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineAccountInterface::GetLocalAccountNames(TArray<struct FString>* Accounts)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.GetLocalAccountNames");

	UOnlineAccountInterface_GetLocalAccountNames_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Accounts != nullptr)
		*Accounts = params.Accounts;

	return params.ReturnValue;
}


// Function Engine.OnlineAccountInterface.DeleteLocalAccount
// ()
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// struct FString                 Password                       (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineAccountInterface::DeleteLocalAccount(const struct FString& UserName, const struct FString& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.DeleteLocalAccount");

	UOnlineAccountInterface_DeleteLocalAccount_Params params;
	params.UserName = UserName;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAccountInterface.RenameLocalAccount
// ()
// Parameters:
// struct FString                 NewUserName                    (Parm, NeedCtorLink)
// struct FString                 OldUserName                    (Parm, NeedCtorLink)
// struct FString                 Password                       (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineAccountInterface::RenameLocalAccount(const struct FString& NewUserName, const struct FString& OldUserName, const struct FString& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.RenameLocalAccount");

	UOnlineAccountInterface_RenameLocalAccount_Params params;
	params.NewUserName = NewUserName;
	params.OldUserName = OldUserName;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAccountInterface.CreateLocalAccount
// ()
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// struct FString                 Password                       (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineAccountInterface::CreateLocalAccount(const struct FString& UserName, const struct FString& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.CreateLocalAccount");

	UOnlineAccountInterface_CreateLocalAccount_Params params;
	params.UserName = UserName;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAccountInterface.ClearCreateOnlineAccountCompletedDelegate
// ()
// Parameters:
// struct FScriptDelegate         AccountCreateDelegate          (Parm, NeedCtorLink)

void UOnlineAccountInterface::ClearCreateOnlineAccountCompletedDelegate(const struct FScriptDelegate& AccountCreateDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.ClearCreateOnlineAccountCompletedDelegate");

	UOnlineAccountInterface_ClearCreateOnlineAccountCompletedDelegate_Params params;
	params.AccountCreateDelegate = AccountCreateDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAccountInterface.AddCreateOnlineAccountCompletedDelegate
// ()
// Parameters:
// struct FScriptDelegate         AccountCreateDelegate          (Parm, NeedCtorLink)

void UOnlineAccountInterface::AddCreateOnlineAccountCompletedDelegate(const struct FScriptDelegate& AccountCreateDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.AddCreateOnlineAccountCompletedDelegate");

	UOnlineAccountInterface_AddCreateOnlineAccountCompletedDelegate_Params params;
	params.AccountCreateDelegate = AccountCreateDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAccountInterface.OnCreateOnlineAccountCompleted
// ()
// Parameters:
// TEnumAsByte<EOnlineAccountCreateStatus> ErrorStatus                    (Parm)

void UOnlineAccountInterface::OnCreateOnlineAccountCompleted(TEnumAsByte<EOnlineAccountCreateStatus> ErrorStatus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.OnCreateOnlineAccountCompleted");

	UOnlineAccountInterface_OnCreateOnlineAccountCompleted_Params params;
	params.ErrorStatus = ErrorStatus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAccountInterface.CreateOnlineAccount
// ()
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// struct FString                 Password                       (Parm, NeedCtorLink)
// struct FString                 EmailAddress                   (Parm, NeedCtorLink)
// struct FString                 ProductKey                     (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineAccountInterface::CreateOnlineAccount(const struct FString& UserName, const struct FString& Password, const struct FString& EmailAddress, const struct FString& ProductKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.CreateOnlineAccount");

	UOnlineAccountInterface_CreateOnlineAccount_Params params;
	params.UserName = UserName;
	params.Password = Password;
	params.EmailAddress = EmailAddress;
	params.ProductKey = ProductKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.IsIDBanned
// ()
// Parameters:
// struct FUniqueNetId            NetId                          (Const, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::IsIDBanned(struct FUniqueNetId* NetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.IsIDBanned");

	AAccessControl_IsIDBanned_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NetId != nullptr)
		*NetId = params.NetId;

	return params.ReturnValue;
}


// Function Engine.AccessControl.CheckIPPolicy
// ()
// Parameters:
// struct FString                 Address                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::CheckIPPolicy(const struct FString& Address)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.CheckIPPolicy");

	AAccessControl_CheckIPPolicy_Params params;
	params.Address = Address;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.PreLogin
// ()
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 Address                        (Parm, NeedCtorLink)
// struct FString                 OutError                       (Parm, OutParm, NeedCtorLink)
// bool                           bSpectator                     (Parm)

void AAccessControl::PreLogin(const struct FString& Options, const struct FString& Address, bool bSpectator, struct FString* OutError)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.PreLogin");

	AAccessControl_PreLogin_Params params;
	params.Options = Options;
	params.Address = Address;
	params.bSpectator = bSpectator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutError != nullptr)
		*OutError = params.OutError;
}


// Function Engine.AccessControl.ValidLogin
// ()
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// struct FString                 Password                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::ValidLogin(const struct FString& UserName, const struct FString& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ValidLogin");

	AAccessControl_ValidLogin_Params params;
	params.UserName = UserName;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.ParseAdminOptions
// ()
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::ParseAdminOptions(const struct FString& Options)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ParseAdminOptions");

	AAccessControl_ParseAdminOptions_Params params;
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.AdminExited
// ()
// Parameters:
// class APlayerController*       P                              (Parm)

void AAccessControl::AdminExited(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.AdminExited");

	AAccessControl_AdminExited_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.AdminEntered
// ()
// Parameters:
// class APlayerController*       P                              (Parm)

void AAccessControl::AdminEntered(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.AdminEntered");

	AAccessControl_AdminEntered_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.AdminLogout
// ()
// Parameters:
// class APlayerController*       P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::AdminLogout(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.AdminLogout");

	AAccessControl_AdminLogout_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.AdminLogin
// ()
// Parameters:
// class APlayerController*       P                              (Parm)
// struct FString                 Password                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::AdminLogin(class APlayerController* P, const struct FString& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.AdminLogin");

	AAccessControl_AdminLogin_Params params;
	params.P = P;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.KickPlayer
// ()
// Parameters:
// class APlayerController*       C                              (Parm)
// struct FString                 KickReason                     (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::KickPlayer(class APlayerController* C, const struct FString& KickReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.KickPlayer");

	AAccessControl_KickPlayer_Params params;
	params.C = C;
	params.KickReason = KickReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.ForceKickPlayer
// ()
// Parameters:
// class APlayerController*       C                              (Parm)
// struct FString                 KickReason                     (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::ForceKickPlayer(class APlayerController* C, const struct FString& KickReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ForceKickPlayer");

	AAccessControl_ForceKickPlayer_Params params;
	params.C = C;
	params.KickReason = KickReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.KickBan
// ()
// Parameters:
// struct FString                 Target                         (Parm, NeedCtorLink)

void AAccessControl::KickBan(const struct FString& Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.KickBan");

	AAccessControl_KickBan_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.Kick
// ()
// Parameters:
// struct FString                 Target                         (Parm, NeedCtorLink)

void AAccessControl::Kick(const struct FString& Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.Kick");

	AAccessControl_Kick_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.GetControllerFromString
// ()
// Parameters:
// struct FString                 Target                         (Parm, NeedCtorLink)
// class AController*             ReturnValue                    (Parm, OutParm, ReturnParm)

class AController* AAccessControl::GetControllerFromString(const struct FString& Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.GetControllerFromString");

	AAccessControl_GetControllerFromString_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.RequiresPassword
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::RequiresPassword()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.RequiresPassword");

	AAccessControl_RequiresPassword_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.SetGamePassword
// ()
// Parameters:
// struct FString                 P                              (Parm, NeedCtorLink)

void AAccessControl::SetGamePassword(const struct FString& P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.SetGamePassword");

	AAccessControl_SetGamePassword_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.SetAdminPassword
// ()
// Parameters:
// struct FString                 P                              (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::SetAdminPassword(const struct FString& P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.SetAdminPassword");

	AAccessControl_SetAdminPassword_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.IsAdmin
// ()
// Parameters:
// class APlayerController*       P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::IsAdmin(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.IsAdmin");

	AAccessControl_IsAdmin_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Admin.ServerSwitch
// ()
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)

void AAdmin::ServerSwitch(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.ServerSwitch");

	AAdmin_ServerSwitch_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.Switch
// ()
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)

void AAdmin::Switch(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.Switch");

	AAdmin_Switch_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.ServerRestartMap
// ()

void AAdmin::ServerRestartMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.ServerRestartMap");

	AAdmin_ServerRestartMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.RestartMap
// ()

void AAdmin::RestartMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.RestartMap");

	AAdmin_RestartMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.PlayerList
// ()

void AAdmin::PlayerList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.PlayerList");

	AAdmin_PlayerList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.ServerKick
// ()
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void AAdmin::ServerKick(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.ServerKick");

	AAdmin_ServerKick_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.Kick
// ()
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void AAdmin::Kick(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.Kick");

	AAdmin_Kick_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.ServerKickBan
// ()
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void AAdmin::ServerKickBan(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.ServerKickBan");

	AAdmin_ServerKickBan_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.KickBan
// ()
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void AAdmin::KickBan(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.KickBan");

	AAdmin_KickBan_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.ServerAdmin
// ()
// Parameters:
// struct FString                 CommandLine                    (Parm, NeedCtorLink)

void AAdmin::ServerAdmin(const struct FString& CommandLine)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.ServerAdmin");

	AAdmin_ServerAdmin_Params params;
	params.CommandLine = CommandLine;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.Admin
// ()
// Parameters:
// struct FString                 CommandLine                    (Parm, NeedCtorLink)

void AAdmin::Admin(const struct FString& CommandLine)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.Admin");

	AAdmin_Admin_Params params;
	params.CommandLine = CommandLine;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.PostBeginPlay
// ()

void AAdmin::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.PostBeginPlay");

	AAdmin_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterSpawnable.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void AEmitterSpawnable::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterSpawnable.ReplicatedEvent");

	AEmitterSpawnable_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterSpawnable.SetTemplate
// ()
// Parameters:
// class UParticleSystem*         NewTemplate                    (Parm)
// bool                           bDestroyOnFinish               (OptionalParm, Parm)

void AEmitterSpawnable::SetTemplate(class UParticleSystem* NewTemplate, bool bDestroyOnFinish)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterSpawnable.SetTemplate");

	AEmitterSpawnable_SetTemplate_Params params;
	params.NewTemplate = NewTemplate;
	params.bDestroyOnFinish = bDestroyOnFinish;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_ControlMovieTexture.Activated
// ()

void USeqAct_ControlMovieTexture::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ControlMovieTexture.Activated");

	USeqAct_ControlMovieTexture_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ClientReceiveLinkDisabledState
// ()
// Parameters:
// int                            Index                          (Parm)
// class ACoverLink*              Link                           (Parm)
// bool                           bLinkDisabled                  (Parm)

void ACoverReplicator::ClientReceiveLinkDisabledState(int Index, class ACoverLink* Link, bool bLinkDisabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveLinkDisabledState");

	ACoverReplicator_ClientReceiveLinkDisabledState_Params params;
	params.Index = Index;
	params.Link = Link;
	params.bLinkDisabled = bLinkDisabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ServerSendLinkDisabledState
// ()
// Parameters:
// int                            Index                          (Parm)

void ACoverReplicator::ServerSendLinkDisabledState(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendLinkDisabledState");

	ACoverReplicator_ServerSendLinkDisabledState_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.NotifyLinkDisabledStateChange
// ()
// Parameters:
// class ACoverLink*              Link                           (Parm)

void ACoverReplicator::NotifyLinkDisabledStateChange(class ACoverLink* Link)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.NotifyLinkDisabledStateChange");

	ACoverReplicator_NotifyLinkDisabledStateChange_Params params;
	params.Link = Link;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ClientReceiveManualCoverTypeSlots
// ()
// Parameters:
// int                            Index                          (Parm)
// class ACoverLink*              Link                           (Parm)
// unsigned char                  NumCoverTypesChanged           (Parm)
// struct FManualCoverTypeInfo    SlotsCoverTypeChanged          (Parm)
// bool                           bDone                          (Parm)

void ACoverReplicator::ClientReceiveManualCoverTypeSlots(int Index, class ACoverLink* Link, unsigned char NumCoverTypesChanged, const struct FManualCoverTypeInfo& SlotsCoverTypeChanged, bool bDone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveManualCoverTypeSlots");

	ACoverReplicator_ClientReceiveManualCoverTypeSlots_Params params;
	params.Index = Index;
	params.Link = Link;
	params.NumCoverTypesChanged = NumCoverTypesChanged;
	params.SlotsCoverTypeChanged = SlotsCoverTypeChanged;
	params.bDone = bDone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ServerSendManualCoverTypeSlots
// ()
// Parameters:
// int                            Index                          (Parm)

void ACoverReplicator::ServerSendManualCoverTypeSlots(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendManualCoverTypeSlots");

	ACoverReplicator_ServerSendManualCoverTypeSlots_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.NotifySetManualCoverTypeForSlots
// ()
// Parameters:
// class ACoverLink*              Link                           (Parm)
// TArray<int>                    SlotIndices                    (Const, Parm, OutParm, NeedCtorLink)
// TEnumAsByte<ECoverType>        NewCoverType                   (Parm)

void ACoverReplicator::NotifySetManualCoverTypeForSlots(class ACoverLink* Link, TEnumAsByte<ECoverType> NewCoverType, TArray<int>* SlotIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.NotifySetManualCoverTypeForSlots");

	ACoverReplicator_NotifySetManualCoverTypeForSlots_Params params;
	params.Link = Link;
	params.NewCoverType = NewCoverType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SlotIndices != nullptr)
		*SlotIndices = params.SlotIndices;
}


// Function Engine.CoverReplicator.ClientReceiveAdjustedSlots
// ()
// Parameters:
// int                            Index                          (Parm)
// class ACoverLink*              Link                           (Parm)
// unsigned char                  NumSlotsAdjusted               (Parm)
// unsigned char                  SlotsAdjusted                  (Parm)
// bool                           bDone                          (Parm)

void ACoverReplicator::ClientReceiveAdjustedSlots(int Index, class ACoverLink* Link, unsigned char NumSlotsAdjusted, unsigned char SlotsAdjusted, bool bDone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveAdjustedSlots");

	ACoverReplicator_ClientReceiveAdjustedSlots_Params params;
	params.Index = Index;
	params.Link = Link;
	params.NumSlotsAdjusted = NumSlotsAdjusted;
	params.SlotsAdjusted = SlotsAdjusted;
	params.bDone = bDone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ServerSendAdjustedSlots
// ()
// Parameters:
// int                            Index                          (Parm)

void ACoverReplicator::ServerSendAdjustedSlots(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendAdjustedSlots");

	ACoverReplicator_ServerSendAdjustedSlots_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.NotifyAutoAdjustSlots
// ()
// Parameters:
// class ACoverLink*              Link                           (Parm)
// TArray<int>                    SlotIndices                    (Const, Parm, OutParm, NeedCtorLink)

void ACoverReplicator::NotifyAutoAdjustSlots(class ACoverLink* Link, TArray<int>* SlotIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.NotifyAutoAdjustSlots");

	ACoverReplicator_NotifyAutoAdjustSlots_Params params;
	params.Link = Link;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SlotIndices != nullptr)
		*SlotIndices = params.SlotIndices;
}


// Function Engine.CoverReplicator.ClientReceiveDisabledSlots
// ()
// Parameters:
// int                            Index                          (Parm)
// class ACoverLink*              Link                           (Parm)
// unsigned char                  NumSlotsDisabled               (Parm)
// unsigned char                  SlotsDisabled                  (Parm)
// bool                           bDone                          (Parm)

void ACoverReplicator::ClientReceiveDisabledSlots(int Index, class ACoverLink* Link, unsigned char NumSlotsDisabled, unsigned char SlotsDisabled, bool bDone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveDisabledSlots");

	ACoverReplicator_ClientReceiveDisabledSlots_Params params;
	params.Index = Index;
	params.Link = Link;
	params.NumSlotsDisabled = NumSlotsDisabled;
	params.SlotsDisabled = SlotsDisabled;
	params.bDone = bDone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ServerSendDisabledSlots
// ()
// Parameters:
// int                            Index                          (Parm)

void ACoverReplicator::ServerSendDisabledSlots(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendDisabledSlots");

	ACoverReplicator_ServerSendDisabledSlots_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.NotifyDisabledSlots
// ()
// Parameters:
// class ACoverLink*              Link                           (Parm)
// TArray<int>                    SlotIndices                    (Const, Parm, OutParm, NeedCtorLink)

void ACoverReplicator::NotifyDisabledSlots(class ACoverLink* Link, TArray<int>* SlotIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.NotifyDisabledSlots");

	ACoverReplicator_NotifyDisabledSlots_Params params;
	params.Link = Link;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SlotIndices != nullptr)
		*SlotIndices = params.SlotIndices;
}


// Function Engine.CoverReplicator.ClientReceiveEnabledSlots
// ()
// Parameters:
// int                            Index                          (Parm)
// class ACoverLink*              Link                           (Parm)
// unsigned char                  NumSlotsEnabled                (Parm)
// unsigned char                  SlotsEnabled                   (Parm)
// bool                           bDone                          (Parm)

void ACoverReplicator::ClientReceiveEnabledSlots(int Index, class ACoverLink* Link, unsigned char NumSlotsEnabled, unsigned char SlotsEnabled, bool bDone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveEnabledSlots");

	ACoverReplicator_ClientReceiveEnabledSlots_Params params;
	params.Index = Index;
	params.Link = Link;
	params.NumSlotsEnabled = NumSlotsEnabled;
	params.SlotsEnabled = SlotsEnabled;
	params.bDone = bDone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ServerSendEnabledSlots
// ()
// Parameters:
// int                            Index                          (Parm)

void ACoverReplicator::ServerSendEnabledSlots(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendEnabledSlots");

	ACoverReplicator_ServerSendEnabledSlots_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.NotifyEnabledSlots
// ()
// Parameters:
// class ACoverLink*              Link                           (Parm)
// TArray<int>                    SlotIndices                    (Const, Parm, OutParm, NeedCtorLink)

void ACoverReplicator::NotifyEnabledSlots(class ACoverLink* Link, TArray<int>* SlotIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.NotifyEnabledSlots");

	ACoverReplicator_NotifyEnabledSlots_Params params;
	params.Link = Link;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SlotIndices != nullptr)
		*SlotIndices = params.SlotIndices;
}


// Function Engine.CoverReplicator.ClientReceiveInitialCoverReplicationInfo
// ()
// Parameters:
// int                            Index                          (Parm)
// class ACoverLink*              Link                           (Parm)
// bool                           bLinkDisabled                  (Parm)
// unsigned char                  NumSlotsEnabled                (Parm)
// unsigned char                  SlotsEnabled                   (Parm)
// unsigned char                  NumSlotsDisabled               (Parm)
// unsigned char                  SlotsDisabled                  (Parm)
// unsigned char                  NumSlotsAdjusted               (Parm)
// unsigned char                  SlotsAdjusted                  (Parm)
// unsigned char                  NumCoverTypesChanged           (Parm)
// struct FManualCoverTypeInfo    SlotsCoverTypeChanged          (Parm)
// bool                           bDone                          (Parm)

void ACoverReplicator::ClientReceiveInitialCoverReplicationInfo(int Index, class ACoverLink* Link, bool bLinkDisabled, unsigned char NumSlotsEnabled, unsigned char SlotsEnabled, unsigned char NumSlotsDisabled, unsigned char SlotsDisabled, unsigned char NumSlotsAdjusted, unsigned char SlotsAdjusted, unsigned char NumCoverTypesChanged, const struct FManualCoverTypeInfo& SlotsCoverTypeChanged, bool bDone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveInitialCoverReplicationInfo");

	ACoverReplicator_ClientReceiveInitialCoverReplicationInfo_Params params;
	params.Index = Index;
	params.Link = Link;
	params.bLinkDisabled = bLinkDisabled;
	params.NumSlotsEnabled = NumSlotsEnabled;
	params.SlotsEnabled = SlotsEnabled;
	params.NumSlotsDisabled = NumSlotsDisabled;
	params.SlotsDisabled = SlotsDisabled;
	params.NumSlotsAdjusted = NumSlotsAdjusted;
	params.SlotsAdjusted = SlotsAdjusted;
	params.NumCoverTypesChanged = NumCoverTypesChanged;
	params.SlotsCoverTypeChanged = SlotsCoverTypeChanged;
	params.bDone = bDone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ServerSendInitialCoverReplicationInfo
// ()
// Parameters:
// int                            Index                          (Parm)

void ACoverReplicator::ServerSendInitialCoverReplicationInfo(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendInitialCoverReplicationInfo");

	ACoverReplicator_ServerSendInitialCoverReplicationInfo_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ClientSetOwner
// ()
// Parameters:
// class APlayerController*       PC                             (Parm)

void ACoverReplicator::ClientSetOwner(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientSetOwner");

	ACoverReplicator_ClientSetOwner_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ReplicateInitialCoverInfo
// ()

void ACoverReplicator::ReplicateInitialCoverInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ReplicateInitialCoverInfo");

	ACoverReplicator_ReplicateInitialCoverInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.PurgeOldEntries
// ()

void ACoverReplicator::PurgeOldEntries()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.PurgeOldEntries");

	ACoverReplicator_PurgeOldEntries_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameMessage.GetString
// ()
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// bool                           bPRI1HUD                       (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UGameMessage::GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMessage.GetString");

	UGameMessage_GetString_Params params;
	params.Switch = Switch;
	params.bPRI1HUD = bPRI1HUD;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_ToggleHUD.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_ToggleHUD::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ToggleHUD.GetObjClassVersion");

	USeqAct_ToggleHUD_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_ToggleCinematicMode.Activated
// ()

void USeqAct_ToggleCinematicMode::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ToggleCinematicMode.Activated");

	USeqAct_ToggleCinematicMode_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_ConsoleCommand.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_ConsoleCommand::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ConsoleCommand.GetObjClassVersion");

	USeqAct_ConsoleCommand_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_ConsoleCommand.VersionUpdated
// ()
// Parameters:
// int                            OldVersion                     (Parm)
// int                            NewVersion                     (Parm)

void USeqAct_ConsoleCommand::VersionUpdated(int OldVersion, int NewVersion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ConsoleCommand.VersionUpdated");

	USeqAct_ConsoleCommand_VersionUpdated_Params params;
	params.OldVersion = OldVersion;
	params.NewVersion = NewVersion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_SetSoundMode.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_SetSoundMode::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetSoundMode.GetObjClassVersion");

	USeqAct_SetSoundMode_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_SetSoundMode.Activated
// ()

void USeqAct_SetSoundMode::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetSoundMode.Activated");

	USeqAct_SetSoundMode_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNotify_PlayFaceFXAnim.Notify
// ()
// Parameters:
// class AActor*                  Owner                          (Parm)
// class UAnimNodeSequence*       AnimSeqInstigator              (Parm)

void UAnimNotify_PlayFaceFXAnim::Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_PlayFaceFXAnim.Notify");

	UAnimNotify_PlayFaceFXAnim_Notify_Params params;
	params.Owner = Owner;
	params.AnimSeqInstigator = AnimSeqInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.AllowBroadcastLocalizedTeam
// ()
// Parameters:
// int                            TeamIndex                      (Parm)
// class AActor*                  Sender                         (Parm)
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void ABroadcastHandler::AllowBroadcastLocalizedTeam(int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.AllowBroadcastLocalizedTeam");

	ABroadcastHandler_AllowBroadcastLocalizedTeam_Params params;
	params.TeamIndex = TeamIndex;
	params.Sender = Sender;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.AllowBroadcastLocalized
// ()
// Parameters:
// class AActor*                  Sender                         (Parm)
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void ABroadcastHandler::AllowBroadcastLocalized(class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.AllowBroadcastLocalized");

	ABroadcastHandler_AllowBroadcastLocalized_Params params;
	params.Sender = Sender;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.BroadcastTeam
// ()
// Parameters:
// class AController*             Sender                         (Parm)
// struct FString                 msg                            (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)

void ABroadcastHandler::BroadcastTeam(class AController* Sender, const struct FString& msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.BroadcastTeam");

	ABroadcastHandler_BroadcastTeam_Params params;
	params.Sender = Sender;
	params.msg = msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.Broadcast
// ()
// Parameters:
// class AActor*                  Sender                         (Parm)
// struct FString                 msg                            (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)

void ABroadcastHandler::Broadcast(class AActor* Sender, const struct FString& msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.Broadcast");

	ABroadcastHandler_Broadcast_Params params;
	params.Sender = Sender;
	params.msg = msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.BroadcastLocalized
// ()
// Parameters:
// class AActor*                  Sender                         (Parm)
// class APlayerController*       Receiver                       (Parm)
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void ABroadcastHandler::BroadcastLocalized(class AActor* Sender, class APlayerController* Receiver, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.BroadcastLocalized");

	ABroadcastHandler_BroadcastLocalized_Params params;
	params.Sender = Sender;
	params.Receiver = Receiver;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.BroadcastText
// ()
// Parameters:
// class APlayerReplicationInfo*  SenderPRI                      (Parm)
// class APlayerController*       Receiver                       (Parm)
// struct FString                 msg                            (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)

void ABroadcastHandler::BroadcastText(class APlayerReplicationInfo* SenderPRI, class APlayerController* Receiver, const struct FString& msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.BroadcastText");

	ABroadcastHandler_BroadcastText_Params params;
	params.SenderPRI = SenderPRI;
	params.Receiver = Receiver;
	params.msg = msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.AllowsBroadcast
// ()
// Parameters:
// class AActor*                  broadcaster                    (Parm)
// int                            InLen                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABroadcastHandler::AllowsBroadcast(class AActor* broadcaster, int InLen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.AllowsBroadcast");

	ABroadcastHandler_AllowsBroadcast_Params params;
	params.broadcaster = broadcaster;
	params.InLen = InLen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BroadcastHandler.UpdateSentText
// ()

void ABroadcastHandler::UpdateSentText()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.UpdateSentText");

	ABroadcastHandler_UpdateSentText_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ColorScaleVolume.UnTouch
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void AColorScaleVolume::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ColorScaleVolume.UnTouch");

	AColorScaleVolume_UnTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ColorScaleVolume.Touch
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void AColorScaleVolume::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ColorScaleVolume.Touch");

	AColorScaleVolume_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraHUD.PostRender
// ()

void ADebugCameraHUD::PostRender()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraHUD.PostRender");

	ADebugCameraHUD_PostRender_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraHUD.DisplayMaterials
// ()
// Parameters:
// float                          X                              (Parm)
// float                          Y                              (Parm, OutParm)
// float                          DY                             (Parm)
// class UMeshComponent*          MeshComp                       (Parm, EditInline)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ADebugCameraHUD::DisplayMaterials(float X, float DY, class UMeshComponent* MeshComp, float* Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraHUD.DisplayMaterials");

	ADebugCameraHUD_DisplayMaterials_Params params;
	params.X = X;
	params.DY = DY;
	params.MeshComp = MeshComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Y != nullptr)
		*Y = params.Y;

	return params.ReturnValue;
}


// Function Engine.DebugCameraHUD.PostBeginPlay
// ()

void ADebugCameraHUD::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraHUD.PostBeginPlay");

	ADebugCameraHUD_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraInput.InputKey
// ()
// Parameters:
// int                            ControllerId                   (Parm)
// struct FName                   Key                            (Parm)
// TEnumAsByte<EInputEvent>       Event                          (Parm)
// float                          AmountDepressed                (OptionalParm, Parm)
// bool                           bGamepad                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UDebugCameraInput::InputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> Event, float AmountDepressed, bool bGamepad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraInput.InputKey");

	UDebugCameraInput_InputKey_Params params;
	params.ControllerId = ControllerId;
	params.Key = Key;
	params.Event = Event;
	params.AmountDepressed = AmountDepressed;
	params.bGamepad = bGamepad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VolumeTimer.Timer
// ()

void AVolumeTimer::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VolumeTimer.Timer");

	AVolumeTimer_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VolumeTimer.PostBeginPlay
// ()

void AVolumeTimer::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VolumeTimer.PostBeginPlay");

	AVolumeTimer_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicPhysicsVolume.PostBeginPlay
// ()

void ADynamicPhysicsVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicPhysicsVolume.PostBeginPlay");

	ADynamicPhysicsVolume_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicTriggerVolume.PostBeginPlay
// ()

void ADynamicTriggerVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicTriggerVolume.PostBeginPlay");

	ADynamicTriggerVolume_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ExponentialHeightFog.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void AExponentialHeightFog::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFog.OnToggle");

	AExponentialHeightFog_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ExponentialHeightFog.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void AExponentialHeightFog::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFog.ReplicatedEvent");

	AExponentialHeightFog_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ExponentialHeightFog.PostBeginPlay
// ()

void AExponentialHeightFog::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFog.PostBeginPlay");

	AExponentialHeightFog_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FailedConnect.GetString
// ()
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// bool                           bPRI1HUD                       (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UFailedConnect::GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FailedConnect.GetString");

	UFailedConnect_GetString_Params params;
	params.Switch = Switch;
	params.bPRI1HUD = bPRI1HUD;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FailedConnect.GetFailSwitch
// ()
// Parameters:
// struct FString                 FailString                     (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UFailedConnect::GetFailSwitch(const struct FString& FailString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FailedConnect.GetFailSwitch");

	UFailedConnect_GetFailSwitch_Params params;
	params.FailString = FailString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HeightFog.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void AHeightFog::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HeightFog.OnToggle");

	AHeightFog_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HeightFog.ReplicatedEvent
// ()
// Parameters:
// struct FName                   VarName                        (Parm)

void AHeightFog::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HeightFog.ReplicatedEvent");

	AHeightFog_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HeightFog.PostBeginPlay
// ()

void AHeightFog::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HeightFog.PostBeginPlay");

	AHeightFog_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.RateContent
// ()
// Parameters:
// unsigned char                  PlayerNum                      (Parm)
// struct FCommunityContentFile   FileToRate                     (Const, Parm, OutParm, NeedCtorLink)
// int                            NewRating                      (Parm)

void UOnlineCommunityContentInterface::RateContent(unsigned char PlayerNum, int NewRating, struct FCommunityContentFile* FileToRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.RateContent");

	UOnlineCommunityContentInterface_RateContent_Params params;
	params.PlayerNum = PlayerNum;
	params.NewRating = NewRating;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FileToRate != nullptr)
		*FileToRate = params.FileToRate;
}


// Function Engine.OnlineCommunityContentInterface.ClearGetContentPayloadCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         GetContentPayloadCompleteDelegate (Parm, NeedCtorLink)

void UOnlineCommunityContentInterface::ClearGetContentPayloadCompleteDelegate(const struct FScriptDelegate& GetContentPayloadCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.ClearGetContentPayloadCompleteDelegate");

	UOnlineCommunityContentInterface_ClearGetContentPayloadCompleteDelegate_Params params;
	params.GetContentPayloadCompleteDelegate = GetContentPayloadCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.AddGetContentPayloadCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         GetContentPayloadCompleteDelegate (Parm, NeedCtorLink)

void UOnlineCommunityContentInterface::AddGetContentPayloadCompleteDelegate(const struct FScriptDelegate& GetContentPayloadCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.AddGetContentPayloadCompleteDelegate");

	UOnlineCommunityContentInterface_AddGetContentPayloadCompleteDelegate_Params params;
	params.GetContentPayloadCompleteDelegate = GetContentPayloadCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.OnGetContentPayloadComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)
// struct FCommunityContentFile   FileDownloaded                 (Parm, NeedCtorLink)
// TArray<unsigned char>          Payload                        (Const, Parm, OutParm, NeedCtorLink)

void UOnlineCommunityContentInterface::OnGetContentPayloadComplete(bool bWasSuccessful, const struct FCommunityContentFile& FileDownloaded, TArray<unsigned char>* Payload)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.OnGetContentPayloadComplete");

	UOnlineCommunityContentInterface_OnGetContentPayloadComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;
	params.FileDownloaded = FileDownloaded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Payload != nullptr)
		*Payload = params.Payload;
}


// Function Engine.OnlineCommunityContentInterface.GetContentPayload
// ()
// Parameters:
// unsigned char                  PlayerNum                      (Parm)
// struct FCommunityContentFile   FileDownloaded                 (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineCommunityContentInterface::GetContentPayload(unsigned char PlayerNum, struct FCommunityContentFile* FileDownloaded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.GetContentPayload");

	UOnlineCommunityContentInterface_GetContentPayload_Params params;
	params.PlayerNum = PlayerNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FileDownloaded != nullptr)
		*FileDownloaded = params.FileDownloaded;

	return params.ReturnValue;
}


// Function Engine.OnlineCommunityContentInterface.ClearDownloadContentCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         DownloadContentCompleteDelegate (Parm, NeedCtorLink)

void UOnlineCommunityContentInterface::ClearDownloadContentCompleteDelegate(const struct FScriptDelegate& DownloadContentCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.ClearDownloadContentCompleteDelegate");

	UOnlineCommunityContentInterface_ClearDownloadContentCompleteDelegate_Params params;
	params.DownloadContentCompleteDelegate = DownloadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.AddDownloadContentCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         DownloadContentCompleteDelegate (Parm, NeedCtorLink)

void UOnlineCommunityContentInterface::AddDownloadContentCompleteDelegate(const struct FScriptDelegate& DownloadContentCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.AddDownloadContentCompleteDelegate");

	UOnlineCommunityContentInterface_AddDownloadContentCompleteDelegate_Params params;
	params.DownloadContentCompleteDelegate = DownloadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.OnDownloadContentComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)
// struct FCommunityContentFile   FileDownloaded                 (Parm, NeedCtorLink)

void UOnlineCommunityContentInterface::OnDownloadContentComplete(bool bWasSuccessful, const struct FCommunityContentFile& FileDownloaded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.OnDownloadContentComplete");

	UOnlineCommunityContentInterface_OnDownloadContentComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;
	params.FileDownloaded = FileDownloaded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.DownloadContent
// ()
// Parameters:
// unsigned char                  PlayerNum                      (Parm)
// struct FCommunityContentFile   FileToDownload                 (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineCommunityContentInterface::DownloadContent(unsigned char PlayerNum, struct FCommunityContentFile* FileToDownload)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.DownloadContent");

	UOnlineCommunityContentInterface_DownloadContent_Params params;
	params.PlayerNum = PlayerNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FileToDownload != nullptr)
		*FileToDownload = params.FileToDownload;

	return params.ReturnValue;
}


// Function Engine.OnlineCommunityContentInterface.ClearUploadContentCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         UploadContentCompleteDelegate  (Parm, NeedCtorLink)

void UOnlineCommunityContentInterface::ClearUploadContentCompleteDelegate(const struct FScriptDelegate& UploadContentCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.ClearUploadContentCompleteDelegate");

	UOnlineCommunityContentInterface_ClearUploadContentCompleteDelegate_Params params;
	params.UploadContentCompleteDelegate = UploadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.AddUploadContentCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         UploadContentCompleteDelegate  (Parm, NeedCtorLink)

void UOnlineCommunityContentInterface::AddUploadContentCompleteDelegate(const struct FScriptDelegate& UploadContentCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.AddUploadContentCompleteDelegate");

	UOnlineCommunityContentInterface_AddUploadContentCompleteDelegate_Params params;
	params.UploadContentCompleteDelegate = UploadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.OnUploadContentComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)
// struct FCommunityContentFile   UploadedFile                   (Parm, NeedCtorLink)

void UOnlineCommunityContentInterface::OnUploadContentComplete(bool bWasSuccessful, const struct FCommunityContentFile& UploadedFile)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.OnUploadContentComplete");

	UOnlineCommunityContentInterface_OnUploadContentComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;
	params.UploadedFile = UploadedFile;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.UploadContent
// ()
// Parameters:
// unsigned char                  PlayerNum                      (Parm)
// TArray<unsigned char>          Payload                        (Const, Parm, OutParm, NeedCtorLink)
// struct FCommunityContentMetadata MetaData                       (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineCommunityContentInterface::UploadContent(unsigned char PlayerNum, TArray<unsigned char>* Payload, struct FCommunityContentMetadata* MetaData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.UploadContent");

	UOnlineCommunityContentInterface_UploadContent_Params params;
	params.PlayerNum = PlayerNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Payload != nullptr)
		*Payload = params.Payload;
	if (MetaData != nullptr)
		*MetaData = params.MetaData;

	return params.ReturnValue;
}


// Function Engine.OnlineCommunityContentInterface.GetFriendsContentList
// ()
// Parameters:
// unsigned char                  PlayerNum                      (Parm)
// struct FOnlineFriend           Friend                         (Const, Parm, OutParm, NeedCtorLink)
// TArray<struct FCommunityContentFile> ContentFiles                   (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineCommunityContentInterface::GetFriendsContentList(unsigned char PlayerNum, struct FOnlineFriend* Friend, TArray<struct FCommunityContentFile>* ContentFiles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.GetFriendsContentList");

	UOnlineCommunityContentInterface_GetFriendsContentList_Params params;
	params.PlayerNum = PlayerNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Friend != nullptr)
		*Friend = params.Friend;
	if (ContentFiles != nullptr)
		*ContentFiles = params.ContentFiles;

	return params.ReturnValue;
}


// Function Engine.OnlineCommunityContentInterface.ClearReadFriendsContentListCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         ReadFriendsContentListCompleteDelegate (Parm, NeedCtorLink)

void UOnlineCommunityContentInterface::ClearReadFriendsContentListCompleteDelegate(const struct FScriptDelegate& ReadFriendsContentListCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.ClearReadFriendsContentListCompleteDelegate");

	UOnlineCommunityContentInterface_ClearReadFriendsContentListCompleteDelegate_Params params;
	params.ReadFriendsContentListCompleteDelegate = ReadFriendsContentListCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.AddReadFriendsContentListCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         ReadFriendsContentListCompleteDelegate (Parm, NeedCtorLink)

void UOnlineCommunityContentInterface::AddReadFriendsContentListCompleteDelegate(const struct FScriptDelegate& ReadFriendsContentListCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.AddReadFriendsContentListCompleteDelegate");

	UOnlineCommunityContentInterface_AddReadFriendsContentListCompleteDelegate_Params params;
	params.ReadFriendsContentListCompleteDelegate = ReadFriendsContentListCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.OnReadFriendsContentListComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineCommunityContentInterface::OnReadFriendsContentListComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.OnReadFriendsContentListComplete");

	UOnlineCommunityContentInterface_OnReadFriendsContentListComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.ReadFriendsContentList
// ()
// Parameters:
// unsigned char                  PlayerNum                      (Parm)
// TArray<struct FOnlineFriend>   Friends                        (Const, Parm, OutParm, NeedCtorLink)
// int                            StartAt                        (OptionalParm, Parm)
// int                            NumToRead                      (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineCommunityContentInterface::ReadFriendsContentList(unsigned char PlayerNum, int StartAt, int NumToRead, TArray<struct FOnlineFriend>* Friends)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.ReadFriendsContentList");

	UOnlineCommunityContentInterface_ReadFriendsContentList_Params params;
	params.PlayerNum = PlayerNum;
	params.StartAt = StartAt;
	params.NumToRead = NumToRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Friends != nullptr)
		*Friends = params.Friends;

	return params.ReturnValue;
}


// Function Engine.OnlineCommunityContentInterface.GetContentList
// ()
// Parameters:
// unsigned char                  PlayerNum                      (Parm)
// TArray<struct FCommunityContentFile> ContentFiles                   (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineCommunityContentInterface::GetContentList(unsigned char PlayerNum, TArray<struct FCommunityContentFile>* ContentFiles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.GetContentList");

	UOnlineCommunityContentInterface_GetContentList_Params params;
	params.PlayerNum = PlayerNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ContentFiles != nullptr)
		*ContentFiles = params.ContentFiles;

	return params.ReturnValue;
}


// Function Engine.OnlineCommunityContentInterface.ClearReadContentListCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         ReadContentListCompleteDelegate (Parm, NeedCtorLink)

void UOnlineCommunityContentInterface::ClearReadContentListCompleteDelegate(const struct FScriptDelegate& ReadContentListCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.ClearReadContentListCompleteDelegate");

	UOnlineCommunityContentInterface_ClearReadContentListCompleteDelegate_Params params;
	params.ReadContentListCompleteDelegate = ReadContentListCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.AddReadContentListCompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         ReadContentListCompleteDelegate (Parm, NeedCtorLink)

void UOnlineCommunityContentInterface::AddReadContentListCompleteDelegate(const struct FScriptDelegate& ReadContentListCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.AddReadContentListCompleteDelegate");

	UOnlineCommunityContentInterface_AddReadContentListCompleteDelegate_Params params;
	params.ReadContentListCompleteDelegate = ReadContentListCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.OnReadContentListComplete
// ()
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineCommunityContentInterface::OnReadContentListComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.OnReadContentListComplete");

	UOnlineCommunityContentInterface_OnReadContentListComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.ReadContentList
// ()
// Parameters:
// unsigned char                  PlayerNum                      (Parm)
// int                            StartAt                        (OptionalParm, Parm)
// int                            NumToRead                      (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineCommunityContentInterface::ReadContentList(unsigned char PlayerNum, int StartAt, int NumToRead)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.ReadContentList");

	UOnlineCommunityContentInterface_ReadContentList_Params params;
	params.PlayerNum = PlayerNum;
	params.StartAt = StartAt;
	params.NumToRead = NumToRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineCommunityContentInterface.Exit
// ()

void UOnlineCommunityContentInterface::Exit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.Exit");

	UOnlineCommunityContentInterface_Exit_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.Init
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineCommunityContentInterface::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.Init");

	UOnlineCommunityContentInterface_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineEventsInterface.UpdatePlaylistPopulation
// ()
// Parameters:
// int                            PlaylistId                     (Parm)
// int                            NumPlayers                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineEventsInterface::UpdatePlaylistPopulation(int PlaylistId, int NumPlayers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineEventsInterface.UpdatePlaylistPopulation");

	UOnlineEventsInterface_UpdatePlaylistPopulation_Params params;
	params.PlaylistId = PlaylistId;
	params.NumPlayers = NumPlayers;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineEventsInterface.UploadGameplayEventsData
// ()
// Parameters:
// struct FUniqueNetId            UniqueId                       (Parm)
// TArray<unsigned char>          Payload                        (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineEventsInterface::UploadGameplayEventsData(const struct FUniqueNetId& UniqueId, TArray<unsigned char>* Payload)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineEventsInterface.UploadGameplayEventsData");

	UOnlineEventsInterface_UploadGameplayEventsData_Params params;
	params.UniqueId = UniqueId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Payload != nullptr)
		*Payload = params.Payload;

	return params.ReturnValue;
}


// Function Engine.OnlineEventsInterface.UploadPlayerData
// ()
// Parameters:
// struct FUniqueNetId            UniqueId                       (Parm)
// struct FString                 PlayerNick                     (Parm, NeedCtorLink)
// class UOnlineProfileSettings*  ProfileSettings                (Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineEventsInterface::UploadPlayerData(const struct FUniqueNetId& UniqueId, const struct FString& PlayerNick, class UOnlineProfileSettings* ProfileSettings, class UOnlinePlayerStorage* PlayerStorage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineEventsInterface.UploadPlayerData");

	UOnlineEventsInterface_UploadPlayerData_Params params;
	params.UniqueId = UniqueId;
	params.PlayerNick = PlayerNick;
	params.ProfileSettings = ProfileSettings;
	params.PlayerStorage = PlayerStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineRecentPlayersList.GetCurrentPlayersListCount
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UOnlineRecentPlayersList::GetCurrentPlayersListCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.GetCurrentPlayersListCount");

	UOnlineRecentPlayersList_GetCurrentPlayersListCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineRecentPlayersList.SetCurrentPlayersList
// ()
// Parameters:
// TArray<struct FCurrentPlayerMet> Players                        (Const, Parm, NeedCtorLink)

void UOnlineRecentPlayersList::SetCurrentPlayersList(TArray<struct FCurrentPlayerMet> Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.SetCurrentPlayersList");

	UOnlineRecentPlayersList_SetCurrentPlayersList_Params params;
	params.Players = Players;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineRecentPlayersList.DumpPlayersList
// ()
// Parameters:
// TArray<struct FCurrentPlayerMet> Players                        (Const, Parm, OutParm, NeedCtorLink)

void UOnlineRecentPlayersList::DumpPlayersList(TArray<struct FCurrentPlayerMet>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.DumpPlayersList");

	UOnlineRecentPlayersList_DumpPlayersList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;
}


// Function Engine.OnlineRecentPlayersList.ShowCurrentPlayersList
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 Title                          (Parm, NeedCtorLink)
// struct FString                 Description                    (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineRecentPlayersList::ShowCurrentPlayersList(unsigned char LocalUserNum, const struct FString& Title, const struct FString& Description)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.ShowCurrentPlayersList");

	UOnlineRecentPlayersList_ShowCurrentPlayersList_Params params;
	params.LocalUserNum = LocalUserNum;
	params.Title = Title;
	params.Description = Description;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineRecentPlayersList.ShowLastPartyPlayerList
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 Title                          (Parm, NeedCtorLink)
// struct FString                 Description                    (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineRecentPlayersList::ShowLastPartyPlayerList(unsigned char LocalUserNum, const struct FString& Title, const struct FString& Description)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.ShowLastPartyPlayerList");

	UOnlineRecentPlayersList_ShowLastPartyPlayerList_Params params;
	params.LocalUserNum = LocalUserNum;
	params.Title = Title;
	params.Description = Description;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineRecentPlayersList.ShowRecentPartiesPlayerList
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 Title                          (Parm, NeedCtorLink)
// struct FString                 Description                    (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineRecentPlayersList::ShowRecentPartiesPlayerList(unsigned char LocalUserNum, const struct FString& Title, const struct FString& Description)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.ShowRecentPartiesPlayerList");

	UOnlineRecentPlayersList_ShowRecentPartiesPlayerList_Params params;
	params.LocalUserNum = LocalUserNum;
	params.Title = Title;
	params.Description = Description;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineRecentPlayersList.ShowRecentPlayerList
// ()
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 Title                          (Parm, NeedCtorLink)
// struct FString                 Description                    (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineRecentPlayersList::ShowRecentPlayerList(unsigned char LocalUserNum, const struct FString& Title, const struct FString& Description)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.ShowRecentPlayerList");

	UOnlineRecentPlayersList_ShowRecentPlayerList_Params params;
	params.LocalUserNum = LocalUserNum;
	params.Title = Title;
	params.Description = Description;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineRecentPlayersList.SetLastParty
// ()
// Parameters:
// struct FUniqueNetId            PartyLeader                    (Parm)
// TArray<struct FUniqueNetId>    PartyMembers                   (Const, Parm, OutParm, NeedCtorLink)

void UOnlineRecentPlayersList::SetLastParty(const struct FUniqueNetId& PartyLeader, TArray<struct FUniqueNetId>* PartyMembers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.SetLastParty");

	UOnlineRecentPlayersList_SetLastParty_Params params;
	params.PartyLeader = PartyLeader;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PartyMembers != nullptr)
		*PartyMembers = params.PartyMembers;
}


// Function Engine.OnlineRecentPlayersList.GetTeamForCurrentPlayer
// ()
// Parameters:
// struct FUniqueNetId            Player                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UOnlineRecentPlayersList::GetTeamForCurrentPlayer(const struct FUniqueNetId& Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.GetTeamForCurrentPlayer");

	UOnlineRecentPlayersList_GetTeamForCurrentPlayer_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineRecentPlayersList.GetSkillForCurrentPlayer
// ()
// Parameters:
// struct FUniqueNetId            Player                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UOnlineRecentPlayersList::GetSkillForCurrentPlayer(const struct FUniqueNetId& Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.GetSkillForCurrentPlayer");

	UOnlineRecentPlayersList_GetSkillForCurrentPlayer_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineRecentPlayersList.GetPlayersFromCurrentPlayers
// ()
// Parameters:
// TArray<struct FUniqueNetId>    Players                        (Parm, OutParm, NeedCtorLink)

void UOnlineRecentPlayersList::GetPlayersFromCurrentPlayers(TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.GetPlayersFromCurrentPlayers");

	UOnlineRecentPlayersList_GetPlayersFromCurrentPlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;
}


// Function Engine.OnlineRecentPlayersList.GetPlayersFromRecentParties
// ()
// Parameters:
// TArray<struct FUniqueNetId>    Players                        (Parm, OutParm, NeedCtorLink)

void UOnlineRecentPlayersList::GetPlayersFromRecentParties(TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.GetPlayersFromRecentParties");

	UOnlineRecentPlayersList_GetPlayersFromRecentParties_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;
}


// Function Engine.OnlineRecentPlayersList.ClearRecentParties
// ()

void UOnlineRecentPlayersList::ClearRecentParties()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.ClearRecentParties");

	UOnlineRecentPlayersList_ClearRecentParties_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineRecentPlayersList.AddPartyToRecentParties
// ()
// Parameters:
// struct FUniqueNetId            PartyLeader                    (Parm)
// TArray<struct FUniqueNetId>    PartyMembers                   (Const, Parm, OutParm, NeedCtorLink)

void UOnlineRecentPlayersList::AddPartyToRecentParties(const struct FUniqueNetId& PartyLeader, TArray<struct FUniqueNetId>* PartyMembers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.AddPartyToRecentParties");

	UOnlineRecentPlayersList_AddPartyToRecentParties_Params params;
	params.PartyLeader = PartyLeader;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PartyMembers != nullptr)
		*PartyMembers = params.PartyMembers;
}


// Function Engine.OnlineRecentPlayersList.ClearRecentPlayers
// ()

void UOnlineRecentPlayersList::ClearRecentPlayers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.ClearRecentPlayers");

	UOnlineRecentPlayersList_ClearRecentPlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineRecentPlayersList.AddPlayerToRecentPlayers
// ()
// Parameters:
// struct FUniqueNetId            NewPlayer                      (Parm)

void UOnlineRecentPlayersList::AddPlayerToRecentPlayers(const struct FUniqueNetId& NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.AddPlayerToRecentPlayers");

	UOnlineRecentPlayersList_AddPlayerToRecentPlayers_Params params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSuppliedUIInterface.ShowMatchmakingUI
// ()
// Parameters:
// unsigned char                  SearchingPlayerNum             (Parm)
// class UOnlineGameSearch*       SearchSettings                 (Parm)
// class UOnlineGameSettings*     GameSettings                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSuppliedUIInterface::ShowMatchmakingUI(unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, class UOnlineGameSettings* GameSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSuppliedUIInterface.ShowMatchmakingUI");

	UOnlineSuppliedUIInterface_ShowMatchmakingUI_Params params;
	params.SearchingPlayerNum = SearchingPlayerNum;
	params.SearchSettings = SearchSettings;
	params.GameSettings = GameSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSuppliedUIInterface.ClearShowOnlineStatsUICompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         ShowOnlineStatsUICompleteDelegate (Parm, NeedCtorLink)

void UOnlineSuppliedUIInterface::ClearShowOnlineStatsUICompleteDelegate(const struct FScriptDelegate& ShowOnlineStatsUICompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSuppliedUIInterface.ClearShowOnlineStatsUICompleteDelegate");

	UOnlineSuppliedUIInterface_ClearShowOnlineStatsUICompleteDelegate_Params params;
	params.ShowOnlineStatsUICompleteDelegate = ShowOnlineStatsUICompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSuppliedUIInterface.AddShowOnlineStatsUICompleteDelegate
// ()
// Parameters:
// struct FScriptDelegate         ShowOnlineStatsUICompleteDelegate (Parm, NeedCtorLink)

void UOnlineSuppliedUIInterface::AddShowOnlineStatsUICompleteDelegate(const struct FScriptDelegate& ShowOnlineStatsUICompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSuppliedUIInterface.AddShowOnlineStatsUICompleteDelegate");

	UOnlineSuppliedUIInterface_AddShowOnlineStatsUICompleteDelegate_Params params;
	params.ShowOnlineStatsUICompleteDelegate = ShowOnlineStatsUICompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSuppliedUIInterface.ShowOnlineStatsUI
// ()
// Parameters:
// TArray<struct FUniqueNetId>    Players                        (Const, Parm, OutParm, NeedCtorLink)
// class UOnlineStatsRead*        StatsRead                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSuppliedUIInterface::ShowOnlineStatsUI(class UOnlineStatsRead* StatsRead, TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSuppliedUIInterface.ShowOnlineStatsUI");

	UOnlineSuppliedUIInterface_ShowOnlineStatsUI_Params params;
	params.StatsRead = StatsRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;

	return params.ReturnValue;
}


// Function Engine.OnlineSuppliedUIInterface.OnShowOnlineStatsUIComplete
// ()

void UOnlineSuppliedUIInterface::OnShowOnlineStatsUIComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSuppliedUIInterface.OnShowOnlineStatsUIComplete");

	UOnlineSuppliedUIInterface_OnShowOnlineStatsUIComplete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PathNode_Dynamic.GetDebugAbbrev
// ()
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APathNode_Dynamic::GetDebugAbbrev()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PathNode_Dynamic.GetDebugAbbrev");

	APathNode_Dynamic_GetDebugAbbrev_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ReverbVolumeToggleable.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void AReverbVolumeToggleable::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ReverbVolumeToggleable.OnToggle");

	AReverbVolumeToggleable_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_MITV_Activate.Activated
// ()

void USeqAct_MITV_Activate::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_MITV_Activate.Activated");

	USeqAct_MITV_Activate_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_MITV_Activate.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_MITV_Activate::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_MITV_Activate.GetObjClassVersion");

	USeqAct_MITV_Activate_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_SetMatInstVectorParam.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_SetMatInstVectorParam::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetMatInstVectorParam.GetObjClassVersion");

	USeqAct_SetMatInstVectorParam_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_SetVector.Activated
// ()

void USeqAct_SetVector::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetVector.Activated");

	USeqAct_SetVector_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_UpdatePhysBonesFromAnim.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqAct_UpdatePhysBonesFromAnim::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_UpdatePhysBonesFromAnim.GetObjClassVersion");

	USeqAct_UpdatePhysBonesFromAnim_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqEvent_LOS.GetObjClassVersion
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USeqEvent_LOS::GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_LOS.GetObjClassVersion");

	USeqEvent_LOS_GetObjClassVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Trigger_LOS.Tick
// ()
// Parameters:
// float                          DeltaTime                      (Parm)

void ATrigger_LOS::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger_LOS.Tick");

	ATrigger_LOS_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TriggeredPath.SuggestMovePreparation
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ATriggeredPath::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TriggeredPath.SuggestMovePreparation");

	ATriggeredPath_SuggestMovePreparation_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TriggeredPath.SpecialHandling
// ()
// Parameters:
// class APawn*                   Other                          (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ATriggeredPath::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TriggeredPath.SpecialHandling");

	ATriggeredPath_SpecialHandling_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TriggeredPath.OnToggle
// ()
// Parameters:
// class USeqAct_Toggle*          inAction                       (Parm)

void ATriggeredPath::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TriggeredPath.OnToggle");

	ATriggeredPath_OnToggle_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TriggerStreamingLevel.Touch
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void ATriggerStreamingLevel::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TriggerStreamingLevel.Touch");

	ATriggerStreamingLevel_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UICharacterSummary.IsProviderDisabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUICharacterSummary::IsProviderDisabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UICharacterSummary.IsProviderDisabled");

	UUICharacterSummary_IsProviderDisabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIGameInfoSummary.IsProviderDisabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIGameInfoSummary::IsProviderDisabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIGameInfoSummary.IsProviderDisabled");

	UUIGameInfoSummary_IsProviderDisabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIWeaponSummary.IsProviderDisabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIWeaponSummary::IsProviderDisabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIWeaponSummary.IsProviderDisabled");

	UUIWeaponSummary_IsProviderDisabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WaterVolume.PlayExitSplash
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void AWaterVolume::PlayExitSplash(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WaterVolume.PlayExitSplash");

	AWaterVolume_PlayExitSplash_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WaterVolume.UnTouch
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void AWaterVolume::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WaterVolume.UnTouch");

	AWaterVolume_UnTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WaterVolume.PlayEntrySplash
// ()
// Parameters:
// class AActor*                  Other                          (Parm)

void AWaterVolume::PlayEntrySplash(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WaterVolume.PlayEntrySplash");

	AWaterVolume_PlayEntrySplash_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WaterVolume.Touch
// ()
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void AWaterVolume::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WaterVolume.Touch");

	AWaterVolume_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
